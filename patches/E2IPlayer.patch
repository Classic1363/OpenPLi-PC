diff -ruN o/IPTVPlayer/components/iconmenager.py pc/IPTVPlayer/components/iconmenager.py
--- o/IPTVPlayer/components/iconmenager.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/components/iconmenager.py	2020-05-12 00:07:45.095290929 +0300
@@ -28,7 +28,7 @@
 
 
 #config.plugins.iptvplayer.showcover (true|false)
-#config.plugins.iptvplayer.SciezkaCache = ConfigText(default = "/hdd/IPTVCache")
+#config.plugins.iptvplayer.SciezkaCache = ConfigText(default = "/media/hdd/IPTVCache")
 
 class IconMenager:
     HEADER = {'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Encoding': 'gzip, deflate'}
@@ -265,7 +265,7 @@
             params_cfad = {'with_metadata':True, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True} 
             domain = urlparser.getDomain(img_url, onlyDomain=True)
             
-            params_cfad['cookiefile']= '/hdd/IPTVCache//cookies/{0}.cookie'.format(domain)
+            params_cfad['cookiefile']= '/media/hdd/IPTVCache//cookies/{0}.cookie'.format(domain)
 
         else:
             params_cfad={}
diff -ruN o/IPTVPlayer/components/iptvconfigmenu.py pc/IPTVPlayer/components/iptvconfigmenu.py
--- o/IPTVPlayer/components/iptvconfigmenu.py	2020-05-02 11:11:47.341432223 +0300
+++ pc/IPTVPlayer/components/iptvconfigmenu.py	2020-05-12 00:56:41.134289906 +0300
@@ -61,7 +61,7 @@
 config.plugins.iptvplayer.showinMainMenu     = ConfigYesNo(default = False)
 config.plugins.iptvplayer.ListaGraficzna     = ConfigYesNo(default = True)
 config.plugins.iptvplayer.group_hosts        = ConfigYesNo(default = True)
-config.plugins.iptvplayer.NaszaSciezka       = ConfigDirectory(default = "/hdd/movie/") #, fixed_size = False)
+config.plugins.iptvplayer.NaszaSciezka       = ConfigDirectory(default = "/media/hdd/movies/") #, fixed_size = False)
 config.plugins.iptvplayer.bufferingPath      = ConfigDirectory(default = config.plugins.iptvplayer.NaszaSciezka.value) #, fixed_size = False)
 config.plugins.iptvplayer.buforowanie        = ConfigYesNo(default = False)
 config.plugins.iptvplayer.buforowanie_m3u8   = ConfigYesNo(default = True)
@@ -141,7 +141,7 @@
 
 # end with buffering mode players
 
-config.plugins.iptvplayer.SciezkaCache = ConfigDirectory(default = "/hdd/IPTVCache/") #, fixed_size = False)
+config.plugins.iptvplayer.SciezkaCache = ConfigDirectory(default = "/media/hdd/IPTVCache/") #, fixed_size = False)
 config.plugins.iptvplayer.NaszaTMP = ConfigDirectory(default = "/tmp/") #, fixed_size = False)
 config.plugins.iptvplayer.ZablokujWMV = ConfigYesNo(default = True)
 
diff -ruN o/IPTVPlayer/components/iptvplayerwidget.py pc/IPTVPlayer/components/iptvplayerwidget.py
--- o/IPTVPlayer/components/iptvplayerwidget.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/components/iptvplayerwidget.py	2020-05-12 00:07:45.097290929 +0300
@@ -60,7 +60,6 @@
 
 from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, IPTVPlayerNeedInit, GetIPTVPlayerLastHostError, GetIPTVNotify, GetIPTVSleep
 
-from Plugins.Extensions.IPTVPlayer.setup.iptvsetupwidget import IPTVSetupMainWidget
 from Plugins.Extensions.IPTVPlayer.components.iptvplayer import IPTVStandardMoviePlayer, IPTVMiniMoviePlayer
 from Plugins.Extensions.IPTVPlayer.components.iptvextmovieplayer import IPTVExtMoviePlayer
 from Plugins.Extensions.IPTVPlayer.components.iptvpictureplayer import IPTVPicturePlayerWidget
@@ -1142,10 +1141,6 @@
             self.displayGroupsList.append((item.title, item.name))
         self.displayGroupsList.append((_('All'), 'all'))
         self.displayGroupsList.append((_("Configuration"), "config"))
-        
-        if config.plugins.iptvplayer.AktualizacjaWmenu.value == True:
-            self.displayGroupsList.append((_("Update"), "update"))
-        
         self.newDisplayGroupsList = []
         self.session.openWithCallback(self.selectGroupCallback, PlayerSelectorWidget, inList = self.displayGroupsList, outList = self.newDisplayGroupsList, numOfLockedItems = self.getNumOfSpecialItems(self.displayGroupsList) , groupName='selectgroup')
         
@@ -1944,10 +1939,8 @@
 
     def configCallback(self):
         if IPTVPlayerNeedInit():
-            self.session.openWithCallback(self.selectHost, IPTVSetupMainWidget, True)
-        else:
             self.askUpdateAvailable(self.selectHost)
-            
+
     def randomizePlayableItems(self, randomize=True):
         printDBG("randomizePlayableItems")
         self.stopAutoPlaySequencer()
@@ -2197,7 +2190,7 @@
         if self.checkWrongImage:
             self.checkWrongImage = False
             try:
-                if os_path.isfile(GetExtensionsDir('/iPabUpdater/__init__.pyo')):
+                if os_path.isfile(GetExtensionsDir('/iPabUpdater/__init__.pyc')):
                     message = ["WARNING (phase 1/3)"]
                     message.append("Because of blocking part of functionality of the IPTVPlayer by http://ipab.tv/ developer your image was blacklisted.")
                     message.append("Please be also informed that users of http://ipab.tv/ will NOT get support, due to same reason.")
diff -ruN o/IPTVPlayer/hosts/aliases.txt pc/IPTVPlayer/hosts/aliases.txt
--- o/IPTVPlayer/hosts/aliases.txt	2020-04-08 14:57:49.892599918 +0300
+++ pc/IPTVPlayer/hosts/aliases.txt	2020-05-12 00:07:45.097290929 +0300
@@ -1 +1,234 @@
-{"hostzalukajvip": "https://zalukaj.vip/", "hostwatchmovies": "https://watch-movies.pl/", "hostekinomaniak": "https://ekinomaniak.net/", "host3filmy": "https://3filmy.com/", "hostcdafilmy": "https://cda-filmy.online/", "hostfullmatchtvcom": "https://fullmatchtv.com/", "hostustvgo": "http://ustvgo.tv/", "hostjoemonsterorg": "https://joemonster.org/", "hostredbull": "http://redbull.tv/", "host3sktv": "http://33sk.tv/", "hostiptvplayerinfo": "E2iPlayer info", "hosttvjworg": "https://tv.jw.org/", "hosteskago": "http://www.eskago.pl/", "hostmeczykipl": "http://www.meczyki.pl/", "hostlosmovies": "http://losmovies.cx/", "hostliveleak": "https://liveleak.com/", "hostkinox": "https://kinox.to/", "hostchristusvincit": "http://christusvincit-tv.pl/", "hostmovs4ucom": "http://movs4u.tv/", "hostplaypuls": "http://playpuls.pl/", "hostcinemaxx": "http://cinemaxx.cc/", "hostandrijaiandjelka": "https://andrija-i-andjelka.com/", "hostoipeirates": "https://oipeirates.tv/", "hostdel": "https://del.org/", "hostdailymotion": "http://dailymotion.com/", "hostclassiccinemaonline": "http://classiccinemaonline.com/", "hostiitvpl": "http://iitvx.pl/", "hostmovie4kto": "http://movie4k.org/", "hostyifytv": "https://ymovies.tv/", "hostarconaitvme": "http://arconaitv.us/", "hosttfarjocom": "http://tfarjo.ws/", "hostfilmpalast": "http://filmpalast.to/", "hostfilmeonlineto": "https://filme-online.to/", "hostorthobulletscom": "https://orthobullets.com/", "hostsovdub": "http://sovdub.ru/", "hostkreskoweczki": "http://kreskoweczki.pl/", "hostcinemay": "http://cinemay.ws/", "hostserijeonline": "http://www.serije.online/", "hosttvnowde": "https://www.tvnow.de/", "hosticefilmsinfo": "http://icefilms.info/", "hostplanetstreamingcom": "http://ww4.planet-streaming.com/", "hostuktvplay": "https://uktvplay.uktv.co.uk/", "hostofficialfilmillimite": "https://official-film-illimite.ws/", "hosthdkinomir": "http://hdkinomir.com/", "hostcrtankocom": "http://www.crtanko.com/", "hostgreekdocumentaries3": "http://greekdocumentaries2.blogspot.gr/", "hostserialeco": "http://seriale.co/", "hostinteriatv": "http://interia.tv/", "hostshahiidanimenet": "https://shahiid-anime.net/", "hostegybest": "http://egy.best/", "hostekstraklasatv": "http://ekstraklasa.tv/", "hostanimeodcinki": "https://anime-odcinki.pl/", "hostluxveritatis": "https://luxveritatis.pl/", "hostlibrestream": "http://ls-streaming.com/", "hostmediasetplay": "https://mediasetplay.it/", "hostwatchwrestlinguno": "http://watchwrestling.la/", "hostmovierulzsx": "https://movierulz.be/", "hostthewatchseriesto": "https://swatchseries.to/", "hoststreamcomplet": "https://streamcomplet.me/", "hostaltadefinizione": "https://altadefinizione.fm/", "hosthdstreams": "https://hd-streams.org/", "hosttreetv": "http://tree.tv/", "hostkabarety": "http://kabaret.tworzymyhistorie.pl/", "hostradiostacja": "http://radiostacja.pl/", "hostdarshowcom": "http://darshow.com/", "hostyesmoviesto": "https://yesmovies.to/", "hostdixmax": "https://dixmax.com/", "hostwpolscepl": "http://wpolsce.pl/", "hostcartoonhd": "https://cartoonhd.care/", "hostmozicsillag": "https://mozicsillag.me/", "hostbajeczkiorg": "http://bajeczki.org/", "hosthdfull": "https://hdfull.me/", "hostkinogo": "http://kinogo.cc/", "hostfilmezz": "http://filmezz.eu/", "hostrtlmost": "https://rtlmost.hu/", "hostgamatocom": "https://gamato-movies.com/", "hostwatchcartoononline": "https://watchcartoononline.com/", "hostallboxtv": "https://allbox.tv/", "hostlaola1tv": "http://laola1.tv/", "hostxrysoise": "https://xrysoi.tv/", "hostgledalica": "https://gledalica.com/", "hostfreediscpl": "https://freedisc.pl/", "hostfilmaoncom": "http://filmaon.com/", "hostwrealu24tv": "https://wrealu24.tv/", "hostforjatn": "https://forja.tn/", "hostyoutube": "https://youtube.com/", "hostitvcom": "https://www.itv.com/", "hosttwitchtv": "https://twitch.tv/", "hostspiegeltv": "http://spiegel.tv/", "hostzdfmediathek": "ZDFmediathek", "hostfilmovizijastudio": "https://filmovizija.fun/", "hostsportdeutschland": "http://sportdeutschland.tv/", "hostchomikuj": "http://chomikuj.pl/", "hostsolarmovie": "https://solarmoviex.to/", "hostmythewatchseries": "https://gowatchseries.io/", "hostfenixsite": "http://fenixsite.com/", "hostmooviecc": "https://moovie.cc/", "hosttainieskaiseirestv": "http://tainieskaiseires.tv/", "hostlocalmedia": "LocalMedia", "hostmyfreemp3": "https://my-free-mp3.net/", "hostseriesonline": "https://series9.io/", "hostzalukajcom": "http://zalukaj.com/", "hostmrpiracy": "http://mrpiracy.site/", "hostvimeo": "https://vimeo.com/", "hostkisscartoonme": "https://kisscartoon.ac/", "hostfilma24hdcom": "http://www.filma24hd.com/", "hostsvtplayse": "https://svtplay.se/", "hostardmediathek": "ARDmediathek", "hostdrdk": "http://dr.dk/", "hostfilmehdnet": "http://filmehd.net/", "hostkinotan": "http://kinotan.ru/", "hosthdpopcornscom": "http://hdpopcorns.co/", "hostfilmstreamvkcom": "http://filmstreamvk.club/", "hosttvplayercom": "https://tvplayer.com/", "hostserienstreamto": "https://serienstream.to/", "hostkreskowkazone": "http://kreskowkazone.pl/", "hostputlockertvto": "https://putlockertv.to/", "hosthd1080online": "https://hd1080.online/", "hostcdapl": "https://cda.pl/", "hostcineto": "https://cine.to/", "hosteurosportplayer": "https://www.eurosportplayer.com/", "hostmusicmp3ru": "https://musicmp3.ru/", "hostokgoals": "http://okgoals.com/", "hostspryciarze": "https://spryciarze.pl/", "hostdokumentalnenet": "https://dokumentalne.net/", "hostvodpl": "https://vod.pl/", "hostted": "https://ted.com/", "hostwolnelekturypl": "http://wolnelektury.pl/", "hostfightvideo": "http://fight.mmashare.club/", "hostngolos": "https://ngolos.com/", "hosthitboxtv": "http://hitbox.tv/", "hostplayrtsiw": "https://srgssr.ch/", "hostfilmixco": "https://filmix.co/", "hostpinkbike": "https://pinkbike.com/", "hosturllist": "Urllists player", "hostotakufr": "http://otakufr.com/", "hostfavourites": "Favourites", "hostkijknl": "http://kijk.nl/", "hostvidcorncom": "https://vidcorn.tv/", "hostdancetrippin": "http://dancetrippin.tv/", "hostgamatotvme": "http://gamatotv.me/", "hosthdsto": "http://hds.to/", "hostvevo": "https://vevo.com/", "hosttvn24": "TVN 24", "hostninateka": "http://ninateka.pl/", "hostappletrailers": "https://trailers.apple.com/", "hostefilmytv": "http://www.efilmy.tv/", "hosttvrepublika": "http://telewizjarepublika.pl/", "hostworldfree4u": "https://www.worldfree4u.ws/", "hostnuteczki": "https://nuteczki.eu/", "hostskstream": "https://skstream.info/", "hostmusicbox": "Music-Box", "hosthoofootcom": "http://hoofoot.com/", "hostourmatchnet": "http://ourmatch.net/", "hostdardarkomcom": "http://dardarkom.com/", "hostplusdede": "https://megadede.com/", "hostmovienightws": "http://movienight.ws/", "hostekinotv": "http://ekino-tv.pl/", "hostalltubetv": "http://alltube.pl/", "hostvumedicom": "https://vumedi.com/", "hostfilmativa": "http://filmativa.ws/", "hoststreamliveto": "https://streamlive.to/", "hostwgrane": "http://wgrane.pl/", "host7tvde": "https://7tv.de/", "hostororotv": "https://ororo.tv/", "hostshoutcast": "http://shoutcast.com/", "host9anime": "https://9anime.to/", "hostcimaclubcom": "http://cimaclub.com/", "hostddl": "http://ddl.me/", "hostbbcsport": "https://www.bbc.co.uk/sport", "hostwebstream": "\"Web\" streams player", "hosttantifilmorg": "https://tantifilm.eu/", "hostmovizlandcom": "http://movizland.com/", "hostbsto": "https://bs.to/", "hostfaselhdcom": "https://faselhd.co/", "hostartetv": "https://www.arte.tv/", "hostbbciplayer": "http://www.bbc.co.uk/iplayer", "hostustreamtv": "http://ustream.tv/", "host3player": "https://virginmediatelevision.ie/player", "hostquesttvcouk": "http://questtv.co.uk/", "hostkissanimeto": "http://kissanime.ru/", "hostfilmpertutti": "https://filmpertutti.uno/", "hostszenestreamz": "http://szene-streamz.com/", "hostmaxtvgo": "https://maxtvgo.com/", "hostipla": "https://ipla.tv/", "hostfilma24io": "http://filma24.io/", "hosthdfilmetv": "http://hdfilme.tv/", "hosttvpvod": "https://vod.tvp.pl/", "hostwatchwrestling": "http://watchwrestling.nl/", "hostdpstreamingcx": "https://streaming-series.watch/", "hosttvnvod": "TVN Player", "hosttvgrypl": "https://tvgry.pl/", "hostfilmstreamhdit": "http://filmstreamhd.it/", "host123movieshd": "https://123movieshd.sc/", "hostrtbfbe": "https://www.rtbf.be/", "hoststreaminghdfun": "https://streaminghd.online/", "hostrteieplayer": "http://rte.ie/player", "hostguardaserie": "https://www.guardaserie.digital/", "hosttvproart": "http://tvproart.pl/", "hostaltadefinizione01": "https://altadefinizione01.film/", "hostkkiste": "https://kinokiste.me/", "hostakoam": "https://ar.akoam.net/", "hostserialnet": "http://serialnet.pl/", "hostwptv": "http://wp.tv/","hostraiplay":"http://raiplay.it","hostdplayit":"https://it.dplay.com/"}
\ В конце файла нет новой строки
+{
+"hostzalukajvip": "https://zalukaj.vip/",
+"hostwatchmovies": "https://watch-movies.pl/",
+"hostekinomaniak": "https://ekinomaniak.net/",
+"host3filmy": "https://3filmy.com/",
+"hostcdafilmy": "https://cda-filmy.online/",
+"hostfullmatchtvcom": "https://fullmatchtv.com/",
+"hostustvgo": "http://ustvgo.tv/",
+"hostjoemonsterorg": "https://joemonster.org/",
+"hostredbull": "http://redbull.tv/",
+"host3sktv": "http://33sk.tv/",
+"hostiptvplayerinfo": "E2iPlayer info",
+"hosttvjworg": "https://tv.jw.org/",
+"hosteskago": "http://www.eskago.pl/",
+"hostmeczykipl": "http://www.meczyki.pl/",
+"hostlosmovies": "http://losmovies.cx/",
+"hostliveleak": "https://liveleak.com/",
+"hostkinox": "https://kinox.to/",
+"hostchristusvincit": "http://christusvincit-tv.pl/",
+"hostmovs4ucom": "http://movs4u.tv/",
+"hostplaypuls": "http://playpuls.pl/",
+"hostcinemaxx": "http://cinemaxx.cc/",
+"hostandrijaiandjelka": "https://andrija-i-andjelka.com/",
+"hostoipeirates": "https://oipeirates.tv/",
+"hostdel": "https://del.org/",
+"hostdailymotion": "http://dailymotion.com/",
+"hostclassiccinemaonline": "http://classiccinemaonline.com/",
+"hostiitvpl": "http://iitvx.pl/",
+"hostmovie4kto": "http://movie4k.org/",
+"hostyifytv": "https://ymovies.tv/",
+"hostarconaitvme": "http://arconaitv.us/",
+"hosttfarjocom": "http://tfarjo.ws/",
+"hostfilmpalast": "http://filmpalast.to/",
+"hostfilmeonlineto": "https://filme-online.to/",
+"hostorthobulletscom": "https://orthobullets.com/",
+"hostsovdub": "http://sovdub.ru/",
+"hostkreskoweczki": "http://kreskoweczki.pl/",
+"hostcinemay": "http://cinemay.ws/",
+"hostserijeonline": "http://www.serije.online/",
+"hosttvnowde": "https://www.tvnow.de/",
+"hosticefilmsinfo": "http://icefilms.info/",
+"hostplanetstreamingcom": "http://ww4.planet-streaming.com/",
+"hostuktvplay": "https://uktvplay.uktv.co.uk/",
+"hostofficialfilmillimite": "https://official-film-illimite.ws/",
+"hosthdkinomir": "http://hdkinomir.com/",
+"hostcrtankocom": "http://www.crtanko.com/",
+"hostgreekdocumentaries3": "http://greekdocumentaries2.blogspot.gr/",
+"hostserialeco": "http://seriale.co/",
+"hostinteriatv": "http://interia.tv/",
+"hostshahiidanimenet": "https://shahiid-anime.net/",
+"hostegybest": "http://egy.best/",
+"hostekstraklasatv": "http://ekstraklasa.tv/",
+"hostanimeodcinki": "https://anime-odcinki.pl/",
+"hostluxveritatis": "https://luxveritatis.pl/",
+"hostlibrestream": "http://ls-streaming.com/",
+"hostmediasetplay": "https://mediasetplay.it/",
+"hostwatchwrestlinguno": "http://watchwrestling.la/",
+"hostmovierulzsx": "https://movierulz.be/",
+"hostthewatchseriesto": "https://swatchseries.to/",
+"hoststreamcomplet": "https://streamcomplet.me/",
+"hostaltadefinizione": "https://altadefinizione.fm/",
+"hosthdstreams": "https://hd-streams.org/",
+"hosttreetv": "http://tree.tv/",
+"hostkabarety": "http://kabaret.tworzymyhistorie.pl/",
+"hostradiostacja": "http://radiostacja.pl/",
+"hostdarshowcom": "http://darshow.com/",
+"hostyesmoviesto": "https://yesmovies.to/","hostwatchmovies": "https://watch-movies.pl/",
+"hostdixmax": "https://dixmax.com/",
+"hostwpolscepl": "http://wpolsce.pl/",
+"hostcartoonhd": "https://cartoonhd.care/",
+"hostmozicsillag": "https://mozicsillag.me/",
+"hostbajeczkiorg": "http://bajeczki.org/",
+"hosthdfull": "https://hdfull.me/",
+"hostkinogo": "http://kinogo.cc/",
+"hostfilmezz": "http://filmezz.eu/",
+"hostrtlmost": "https://rtlmost.hu/",
+"hostgamatocom": "https://gamato-movies.com/",
+"hostwatchcartoononline": "https://watchcartoononline.com/",
+"hostallboxtv": "https://allbox.tv/",
+"hostlaola1tv": "http://laola1.tv/",
+"hostxrysoise": "https://xrysoi.tv/",
+"hostgledalica": "https://gledalica.com/",
+"hostfreediscpl": "https://freedisc.pl/",
+"hostfilmaoncom": "http://filmaon.com/",
+"hostwrealu24tv": "https://wrealu24.tv/",
+"hostforjatn": "https://forja.tn/",
+"hostyoutube": "https://youtube.com/",
+"hostitvcom": "https://www.itv.com/",
+"hosttwitchtv": "https://twitch.tv/",
+"hostspiegeltv": "http://spiegel.tv/",
+"hostzdfmediathek": "ZDFmediathek",
+"hostfilmovizijastudio": "https://filmovizija.fun/",
+"hostsportdeutschland": "http://sportdeutschland.tv/",
+"hostchomikuj": "http://chomikuj.pl/",
+"hostsolarmovie": "https://solarmoviex.to/",
+"hostmythewatchseries": "https://gowatchseries.io/",
+"hostfenixsite": "http://fenixsite.com/",
+"hostmooviecc": "https://moovie.cc/",
+"hosttainieskaiseirestv": "http://tainieskaiseires.tv/",
+"hostlocalmedia": "LocalMedia",
+"hostmyfreemp3": "https://my-free-mp3.net/",
+"hostseriesonline": "https://series9.io/",
+"hostzalukajcom": "http://zalukaj.com/",
+"hostmrpiracy": "http://mrpiracy.site/",
+"hostvimeo": "https://vimeo.com/",
+"hostkisscartoonme": "https://kisscartoon.ac/",
+"hostfilma24hdcom": "http://www.filma24hd.com/",
+"hostsvtplayse": "https://svtplay.se/",
+"hostardmediathek": "ARDmediathek",
+"hostdrdk": "http://dr.dk/",
+"hostfilmehdnet": "http://filmehd.net/",
+"hostkinotan": "http://kinotan.ru/",
+"hosthdpopcornscom": "http://hdpopcorns.co/",
+"hostfilmstreamvkcom": "http://filmstreamvk.club/",
+"hosttvplayercom": "https://tvplayer.com/",
+"hostserienstreamto": "https://serienstream.to/",
+"hostkreskowkazone": "http://kreskowkazone.pl/",
+"hostputlockertvto": "https://putlockertv.to/",
+"hosthd1080online": "https://hd1080.online/",
+"hostcdapl": "https://cda.pl/",
+"hostcineto": "https://cine.to/",
+"hosteurosportplayer": "https://www.eurosportplayer.com/",
+"hostmusicmp3ru": "https://musicmp3.ru/",
+"hostokgoals": "http://okgoals.com/",
+"hostspryciarze": "https://spryciarze.pl/",
+"hostdokumentalnenet": "https://dokumentalne.net/",
+"hostvodpl": "https://vod.pl/",
+"hostted": "https://ted.com/",
+"hostwolnelekturypl": "http://wolnelektury.pl/",
+"hostfightvideo": "http://fight.mmashare.club/",
+"hostngolos": "https://ngolos.com/",
+"hosthitboxtv": "http://hitbox.tv/",
+"hostplayrtsiw": "https://srgssr.ch/",
+"hostfilmixco": "https://filmix.co/",
+"hostpinkbike": "https://pinkbike.com/",
+"hosturllist": "Urllists player",
+"hostotakufr": "http://otakufr.com/",
+"hostfavourites": "Favourites",
+"hostkijknl": "http://kijk.nl/",
+"hostvidcorncom": "https://vidcorn.tv/",
+"hostdancetrippin": "http://dancetrippin.tv/",
+"hostgamatotvme": "http://gamatotv.me/",
+"hosthdsto": "http://hds.to/",
+"hostvevo": "https://vevo.com/",
+"hosttvn24": "TVN 24",
+"hostninateka": "http://ninateka.pl/",
+"hostappletrailers": "https://trailers.apple.com/",
+"hostefilmytv": "http://www.efilmy.tv/",
+"hosttvrepublika": "http://telewizjarepublika.pl/",
+"hostworldfree4u": "https://www.worldfree4u.ws/",
+"hostnuteczki": "https://nuteczki.eu/",
+"hostskstream": "https://skstream.info/",
+"hostmusicbox": "Music-Box",
+"hosthoofootcom": "http://hoofoot.com/",
+"hostourmatchnet": "http://ourmatch.net/",
+"hostdardarkomcom": "http://dardarkom.com/",
+"hostplusdede": "https://megadede.com/",
+"hostmovienightws": "http://movienight.ws/",
+"hostekinotv": "http://ekino-tv.pl/",
+"hostalltubetv": "http://alltube.pl/",
+"hostvumedicom": "https://vumedi.com/",
+"hostfilmativa": "http://filmativa.ws/",
+"hoststreamliveto": "https://streamlive.to/",
+"hostwgrane": "http://wgrane.pl/",
+"host7tvde": "https://7tv.de/",
+"hostororotv": "https://ororo.tv/",
+"hostshoutcast": "http://shoutcast.com/",
+"host9anime": "https://9anime.to/",
+"hostcimaclubcom": "http://cimaclub.com/",
+"hostddl": "http://ddl.me/",
+"hostbbcsport": "https://www.bbc.co.uk/sport/",
+"hostwebstream": "\"Web\" streams player",
+"hosttantifilmorg": "https://tantifilm.eu/",
+"hostmovizlandcom": "http://movizland.com/",
+"hostbsto": "https://bs.to/",
+"hostfaselhdcom": "https://faselhd.co/",
+"hostartetv": "https://www.arte.tv/",
+"hostbbciplayer": "http://www.bbc.co.uk/iplayer/",
+"hostustreamtv": "http://ustream.tv/",
+"host3player": "https://virginmediatelevision.ie/player/",
+"hostquesttvcouk": "http://questtv.co.uk/",
+"hostkissanimeto": "http://kissanime.ru/",
+"hostfilmpertutti": "https://filmpertutti.uno/",
+"hostszenestreamz": "http://szene-streamz.com/",
+"hostmaxtvgo": "https://maxtvgo.com/",
+"hostipla": "https://ipla.tv/",
+"hostfilma24io": "http://filma24.io/",
+"hosthdfilmetv": "http://hdfilme.tv/",
+"hosttvpvod": "https://vod.tvp.pl/",
+"hostwatchwrestling": "http://watchwrestling.nl/",
+"hostdpstreamingcx": "https://streaming-series.watch/",
+"hosttvnvod": "TVN Player",
+"hosttvgrypl": "https://tvgry.pl/",
+"hostfilmstreamhdit": "http://filmstreamhd.it/",
+"host123movieshd": "https://123movieshd.sc/","hostwatchmovies": "https://watch-movies.pl/",
+"hostrtbfbe": "https://www.rtbf.be/",
+"hoststreaminghdfun": "https://streaminghd.online/",
+"hostrteieplayer": "http://rte.ie/player/",
+"hostguardaserie": "https://www.guardaserie.digital/",
+"hosttvproart": "http://tvproart.pl/",
+"hostaltadefinizione01": "https://altadefinizione01.film/",
+"hostkkiste": "https://kinokiste.me/",
+"hostakoam": "https://ar.akoam.net/",
+"hostserialnet": "http://serialnet.pl/",
+"hostwptv": "http://wp.tv/",
+"hostraiplay": "http://raiplay.it/",
+"hostdplayit": "https://it.dplay.com/",
+"hostaltadefinizione": "https://altadefinizione.cloud/",
+"hostaltadefinizionecool" : "https://altadefinizione.town/",
+"hostaltadefinizione1": "http://altadefinizione1.link/",
+"hostaltadefinizione01": "https://www.altadefinizione01.cc/",
+"hostcb01": "https://cb01.love/",
+"hostcb01uno": "https://cb01.social/",
+"hostdazn": "https://www.dazn.com/",
+"hostdplayit":"https://it.dplay.com/",
+"hostdsda": "https://documentari-streaming-da.com/",
+"hostegybest": "https://beal.egybest.xyz/",
+"hostfilisertv": "https://fili.cc/",
+"hostfilmowood": "https://filmowood.com/",
+"hostfilmydokumentalneeu": "http://filmydokumentalne.eu/",
+"hostfokustv": "http://fokus.tv/",
+"hostfrancetv" : "https://www.france.tv/",
+"hosthdfilmetv": "http://hdfilme.cc/",
+"hostkinomanco": "https://kinoman.co/",
+"hostla7it": "http://www.la7.it/",
+"hostlookmovieag" : "https://lookmovie.ag/",
+"hostnaszekinotv": "https://nasze-kino.tv/",
+"hostpmgsport" : "https://www.pmgsport.it/",
+"hostraiplay":"http://raiplay.it/",
+"hostredbull":"https://redbull.tv/",
+"hostserienstreamto": "https://serienstream.sx/",
+"hostsportitalia": "https://www.sportitalia.com/",
+"hostturcjatv": "http://turcjatv.pl/"
+}
diff -ruN o/IPTVPlayer/hosts/hostaltadefinizione1.py pc/IPTVPlayer/hosts/hostaltadefinizione1.py
--- o/IPTVPlayer/hosts/hostaltadefinizione1.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostaltadefinizione1.py	2020-05-12 00:07:45.097290929 +0300
@@ -0,0 +1,318 @@
+﻿# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+try:    import json
+except Exception: import simplejson as json
+###################################################
+
+def gettytul():
+    return 'http://altadefinizione1.link/'
+
+class AltadefinizioneUno(CBaseHostClass):
+
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'altadefinizione1.link', 'cookie':'altadefinizione1.link.cookie'})
+        
+        self.USER_AGENT = 'Mozilla/5.0'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'} )
+        
+        self.MAIN_URL = 'http://www.altadefinizione1.link/'
+        self.DEFAULT_ICON_URL = 'http://altadefinizione1.link/templates/Dark/img/nlogo.png'
+        
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+    
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        
+        #addParams['cloudflare_params'] = {'domain':self.up.getDomain(baseUrl), 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT}
+        return self.cm.getPage(baseUrl, addParams, post_data)
+    
+    def getFullUrl(self, url):
+        if url[:1] == "/":
+            url = self.MAIN_URL + url[1:]
+        return url        
+    
+    def listMainMenu(self, cItem):
+        printDBG("Altadefinizione.listMainMenu")
+
+        sts, data = self.getPage(self.getMainUrl())
+        if not sts: 
+            return
+        self.setMainUrl(self.cm.meta['url'])
+
+        tmp = self.cm.ph.getDataBeetwenNodes(data, '<ul id="menu-menu-1" class="menu"', '</ul>', False)[1]
+        items = re.findall("<li class=\"menu-item\">(.*?)</li>", tmp)
+        for item in items:
+            url = self.getFullUrl(re.findall("href=['\"]([^\"^']+?)['\"]", item)[0] )
+            
+            title = self.cleanHtmlStr(item).decode('UTF-8').lower().encode('UTF-8')
+            if title in ["richiedi film", "dmca"]:
+                continue
+            title = title[:1].upper() + title[1:]
+            params = dict(cItem)
+            params.update({'category':'list_items', 'title':title, 'url':url})
+            printDBG(str(params))
+            self.addDir(params)
+
+        
+        tmp = re.findall("<h3 class=\"titleSidebox cat\">Categorie</h3>((.|\n)*?)<h3 class=\"titleSidebox", data)[0]
+        
+        items = re.findall("<ul class=\"listSub((.|\n)*?)</ul>", tmp[0] )
+
+        tabs=[]    
+        for i in items:
+            main_cat = re.findall("Cat\" id=\"(.*?)\">", i[0])[0]
+            sub_items = re.findall("<li>(.*?)</li>", i[0] ) 
+
+            categories = []
+
+            for si in sub_items:
+                url = self.getFullUrl(re.findall("href=['\"]([^\"^']+?)['\"]", si)[0] )
+                title = self.cleanHtmlStr(si)
+                params = dict(cItem)
+                params.update({'name':'category', 'category':'list_items', 'title':title, 'url':url})
+                categories.append(params)
+                
+            if len(categories):
+                params = dict(cItem)
+                params.update({'name':'category', 'category':'sub_items', 'title': main_cat , 'sub_items':categories})
+                tabs.append(params)
+
+        if len(tabs):
+            params = dict(cItem)
+            params.update({'category':'sub_items', 'title': _('Categories'), 'sub_items':tabs})
+            self.addDir(params)
+        
+        MAIN_CAT_TAB = [{'category':'search',          'title': _('Search'), 'search_item':True},
+                        {'category':'search_history',  'title': _('Search history')} ]
+        
+        self.listsTab(MAIN_CAT_TAB, cItem)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("Altadefinizione.listItems")
+        page = cItem.get('page', 1)
+        postData = cItem.get('post_data')
+
+        sts, data = self.getPage(cItem['url'], post_data=postData)
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+
+        if postData != None:
+            printDBG("Fatta una ricerca!!")
+            movies = data.split("<div class=\"box\">")
+        else:
+            printDBG("Non fatta una ricerca!!")
+            if cItem['url'][-15:] == '/piu-visti.html':
+                tmp = re.findall("<div id='dle-content'>((.|\n)*?)</section>", data)[0][0]
+            else:
+                tmp = re.findall("<div id='dle-content'>((.|\n)*?)<div class=\"paginationC\">", data)[0][0]
+
+            movies = tmp.split("<div class=\"box\">")
+
+        if len(movies) > 1:
+            del movies[0]
+
+        for m in movies:
+            t = re.findall("<h2 class=\"titleFilm\">(.*?)</h2>", m)[0]
+            title = self.cleanHtmlStr(t)
+            url   = self.getFullUrl( self.cm.ph.getSearchGroups(t, '''href=['"]([^"^']+?)['"]''')[0] )
+            icon = self.getFullUrl(re.findall("background-image:url\((.*?)\);", m)[0])
+
+            desc = []
+
+            if cItem['url'][-15:] == '/piu-visti.html':
+                views = re.findall("<i class=\"fa fa-eye\"></i>(.*?)</span>",m)[0]
+                desc.append(_("Views") + ": " + views)
+            tx = re.findall("(<div class=\"ml-item-lab.*?</div>)",m)
+            
+            for t in tx:
+                tt = self.cleanHtmlStr(t)
+                if tt != '': 
+                    desc.append(tt)
+
+            desc = [' | '.join(desc)]
+
+            t2 = re.findall("<div class=\"ml-item-text\">(.*?)</div>", m)[0]
+            tt = self.cleanHtmlStr(t2)
+            if tt != '': desc.append(tt)
+
+            params = dict(cItem)
+            params.update({'good_for_fav': True, 'category':nextCategory, 'title':title, 'url':url, 'icon':icon, 'desc':'[/br]'.join(desc)})
+            self.addDir(params)
+
+        #next page
+        tmp = re.findall("<div class=\"pages\">((.|\n)*?)</div>", data)
+        
+        if len(tmp)>0:
+            tmp = tmp[0][0]
+            printDBG(tmp)
+            nextPage = self.cm.ph.getSearchGroups(tmp, '''<a[^>]+?href=['"]([^'^"]+?)['"][^>]*?>%s<''' % (page + 1))
+            if len(nextPage)>0:
+                printDBG(nextPage[0])
+                params = dict(cItem)
+                params.update({'title':_("Next page"), 'page':page+1, 'url': nextPage[0]})
+                self.addMore(params)
+
+            #    elif postData != {}:
+            #       postData = dict(postData)
+            #       postData.pop('titleonly', None)
+            #       postData.update({'search_start':page+1, 'full_search':'0', 'result_from':10*page+1})
+            #       params['post_data'] = postData
+            #       self.addDir(params)
+            #   else:
+            #       printDBG("NextPage [%s] not handled!!!" % nextPage)
+
+    def exploreItem(self, cItem):
+        printDBG("Altadefinizione.exploreItem")
+
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+        
+        cItem = dict(cItem)
+        cItem['prev_url'] = cItem['url']
+
+        trailer = self.cm.ph.getDataBeetwenNodes(data, '<div class="collapse" id="trailers">', ('</div', '>'), False)[1]
+        url = self.getFullUrl(self.cm.ph.getSearchGroups(trailer, '''src=['"]([^"^']+?)['"]''', 1, True)[0])
+        if self.cm.isValidUrl(url):
+            title = "Trailer"
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'url':url, 'title':'%s %s' % (title, cItem['title'])})
+            self.addVideo(params)
+ 
+        urlTab = []
+        data = self.cm.ph.getAllItemsBeetwenNodes(data, '<ul class="playernav">', ('</ul', '>'), False)
+        for idx in range(len(data)):
+            data[idx] = self.cm.ph.getAllItemsBeetwenMarkers(data[idx], '<a', '</a>')
+            for item in data[idx]:
+                url = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''data\-target=['"]([^"^']+?)['"]''', 1, True)[0])
+                if 1 == self.up.checkHostSupport(url): 
+                    name = self.cleanHtmlStr(item)
+                    url = strwithmeta(url, {'Referer':cItem['url']})
+                    urlTab.append({'name':name, 'url':url, 'need_resolve':1})
+
+        if len(urlTab):
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'urls_tab':urlTab})
+            self.addVideo(params)
+
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("Altadefinizione.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        cItem['url'] = self.MAIN_URL 
+        cItem['post_data'] = {'do':'search', 'subaction':'search', 'titleonly':'3', 'story':searchPattern}
+        cItem['category'] = 'list_items'
+        self.listItems(cItem, 'explore_item')
+
+    def getLinksForVideo(self, cItem):
+        printDBG("Altadefinizione.getLinksForVideo [%s]" % cItem)
+        if 1 == self.up.checkHostSupport(cItem['url']): 
+            return self.up.getVideoLinkExt(cItem['url'])
+        return cItem.get('urls_tab', [])
+
+    def getVideoLinks(self, videoUrl):
+        printDBG("Altadefinizione.getVideoLinks [%s]" % videoUrl)
+        return  self.up.getVideoLinkExt(videoUrl)
+
+    def getArticleContent(self, cItem):
+        printDBG("Altadefinizione.getVideoLinks [%s]" % cItem)
+        retTab = []
+        itemsList = []
+        
+        if 'prev_url' in cItem: url = cItem['prev_url']
+        else: url = cItem['url']
+
+        sts, data = self.cm.getPage(url)
+        if not sts: return
+
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 's_left'), ('<div', '>', 'comment'), False)[1]
+        
+        icon = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'imagen'), ('</div', '>'), False)[1]
+        icon = self.getFullUrl( self.cm.ph.getSearchGroups(icon, '''<img[^>]+?src=['"]([^'^"]+?)['"]''')[0] )
+        title = self.cleanHtmlStr( self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'title'), ('</p', '>'), False)[1] )
+        desc = self.cleanHtmlStr( self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'entry-content'), ('</div', '>'), False)[1] )
+
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(data, ('<p', '>', 'meta_dd'), ('</p', '>'), False)
+        for item in tmp:
+            if 'title' in item:
+                item = [self.cm.ph.getSearchGroups(item, '''title=['"]([^'^"]+?)['"]''')[0], item]
+            else:
+                item = item.split('</b>', 1)
+                if len(item) < 2: continue
+            key = self.cleanHtmlStr(item[0])
+            val = self.cleanHtmlStr(item[1])
+            if key == '' or val == '': continue
+            itemsList.append((key, val))
+
+        tmp = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<span', '>', 'dato'), ('</span', '>'), False)[1])
+        if tmp != '': itemsList.append((_('Rating'), tmp))
+
+        tmp = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'views'), ('</p', '>'), False)[1])
+        if tmp != '': itemsList.append((_('Views'), tmp))
+        tmp = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'date'), ('</p', '>'), False)[1])
+        if tmp != '': itemsList.append((_('Relese'), tmp))
+
+        if title == '': title = cItem['title']
+        if icon == '':  icon  = cItem.get('icon', self.DEFAULT_ICON_URL)
+        if desc == '':  desc  = cItem.get('desc', '')
+        
+        return [{'title':self.cleanHtmlStr( title ), 'text': self.cleanHtmlStr( desc ), 'images':[{'title':'', 'url':self.getFullUrl(icon)}], 'other_info':{'custom_items_list':itemsList}}]
+
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: || name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        self.currItem = dict(self.currItem)
+        self.currItem.pop('good_for_fav', None)
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category', 'type':'category'})
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem)
+        elif category == 'sub_items':
+            self.currList = self.currItem.get('sub_items', [])
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, AltadefinizioneUno(), True, favouriteTypes=[]) 
+
+    def withArticleContent(self, cItem):
+        if 'prev_url' in cItem or cItem.get('category', '') == 'explore_item': return True
+        else: return False
diff -ruN o/IPTVPlayer/hosts/hostaltadefinizionecool.py pc/IPTVPlayer/hosts/hostaltadefinizionecool.py
--- o/IPTVPlayer/hosts/hostaltadefinizionecool.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostaltadefinizionecool.py	2020-05-12 00:07:45.097290929 +0300
@@ -0,0 +1,453 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, byteify, MergeDicts
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.tools.e2ijs import js_execute
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+import urllib
+try:    import json
+except Exception: import simplejson as json
+###################################################
+
+def gettytul():
+    return 'https://altadefinizione.town/'
+
+class AltadefinizioneCool(CBaseHostClass):
+ 
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'altadefinizionecool', 'cookie':'altadefinizionecool.cookie'})
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html'}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With': 'XMLHttpRequest'} )
+        self.MAIN_URL = 'https://altadefinizione.town/'
+        self.AZ_URL = self.MAIN_URL + 'catalog/%l/page/{0}'
+        self.DEFAULT_ICON_URL = 'https://altadefinizione.town/templates/Dark/img/logo.png'
+        
+        self.cacheCategories = []
+        
+        self.cacheJSCode   = ''
+        self.cacheLinks    = {}
+        self.cacheFilters  = {}
+        self.cacheFiltersKeys = []
+        self.defaultParams = {'with_metadata':True, 'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        self._myFun = None
+    
+    def setMainUrl(self, url):
+        if self.cm.isValidUrl(url):
+            self.MAIN_URL = self.cm.getBaseUrl(url)
+    
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+
+        addParams['cloudflare_params'] = {'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT}
+        sts, data = self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+        return sts, data
+        
+    def listMainMenu(self, cItem):
+        self.cacheCategories = []
+
+        MAIN_CAT_TAB = [{'category':'search',          'title': _('Search'), 'search_item':True, },
+                        {'category':'search_history',  'title': _('Search history')},
+                        {'category':'list_categories', 'title': 'Categorie'},
+                        {'category':'az_main', 'title': _('A-Z List')}]
+        self.listsTab(MAIN_CAT_TAB, cItem)
+        
+        sts, data = self.getPage(self.getMainUrl())
+        if sts:
+            self.setMainUrl(data.meta['url'])
+            tabTitles = {}
+            # navigations tabs
+            tmp = self.cm.ph.getDataBeetwenNodes(data, '<ul class="nav nav-tabs">', ('</ul', '>'))[1]
+            tmp = self.cm.ph.getAllItemsBeetwenNodes(tmp, ('<a', '>', 'tab'), ('</a', '>'))
+            for item in tmp:
+                tabId = self.cm.ph.getSearchGroups(item, '''href=['"]#([^'^"]+?)['"]''')[0]
+                title = self.cleanHtmlStr(item)
+                if title == 'Qualitá' :
+                    title = 'Qualita'
+                tabTitles[tabId] = title
+
+                #printDBG("------>" + tabId + "---->" + title)
+                tmp = self.cm.ph.getAllItemsBeetwenNodes(data, '<ul class="listSubCat" id="%tabId%"'.replace('%tabId%', title), '</ul>')
+                #print(str(tmp))
+                for tabData in tmp:
+                    #printDBG(tabData)
+                    tabTitle = tabTitles.get(tabId, '')
+                    if tabTitle == '': continue
+                    subItems = []
+                    tabData = self.cm.ph.getAllItemsBeetwenMarkers(tabData, '<a', '</a>')
+                    #printDBG(str(tabData))
+                    for item in tabData:
+                        title = self.cleanHtmlStr(item)
+                        url = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0])
+                        params = dict(cItem)
+                        params.update({'category':'list_items', 'title':title, 'url':url})
+                        printDBG(str(params))
+                        subItems.append(params)
+                    
+                    if len(subItems):
+                        params = dict(cItem)
+                        params.update({'category':'sub_items', 'title':tabTitle, 'sub_items':subItems})
+                        printDBG(str(params))
+                        self.cacheCategories.append(params)
+            
+            tmp = self.cm.ph.getDataBeetwenNodes(data, ('<ul id="menu-menu-1" class="menu">'), ('</ul', '>'))[1]
+            tmp = self.cm.ph.getAllItemsBeetwenMarkers(tmp, '<a', '</a>')
+            for item in tmp:
+                title = self.cleanHtmlStr(item)
+                if title.lower() in ['richieste', 'aggiornamenti 2019', 'guida', 'cineblog01', 'lista film a-z'] : 
+                    break
+                url = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0])
+                params = dict(cItem)
+                params.update({'good_for_fav':True, 'category':'list_items', 'title':title, 'url':url})
+                printDBG(str(params))
+                self.addDir(params)
+    
+    def listSubItems(self, cItem):
+        printDBG("Altadefinizione.listSubItems")
+        self.currList = cItem['sub_items']
+    
+    def listItems(self, cItem, nextCategory, data=None):
+        printDBG("Altadefinizione.listItems")
+        page = cItem.get('page', 1)
+        
+        if data == None:
+            sts, data = self.getPage(cItem['url'])
+            if not sts: return
+        
+        nextPage = self.cm.ph.getDataBeetwenNodes(data, '<div class="paginationC nomobile">', ('</ul', '>'), False)[1]
+        nextPage = self.getFullUrl( self.cm.ph.getSearchGroups(nextPage, '''<a[^>]+?href=['"]([^"^']+?)['"][^>]*?>%s<''' % (page + 1))[0] )
+        
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="box">', '</div>')
+        for item in data:
+            url = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''')[0] )
+            if url == '': continue
+            title = self.cleanHtmlStr( self.cm.ph.getDataBeetwenNodes(item, ('<h', '>', 'title'), ('</h', '>'))[1])
+            icon = self.getFullIconUrl( self.cm.ph.getSearchGroups(item, '''<img[^>]+?src=['"]([^"^']+?)['"]''')[0] )
+
+            desc = []
+            tmp = self.cm.ph.getAllItemsBeetwenMarkers(item, '<span', '</span>')
+            tmp.append(self.cm.ph.getDataBeetwenNodes(item, ('<div', '>', 'rate'), ('</div', '>'), False)[1])
+            for t in tmp:
+                t = self.cleanHtmlStr(t)
+                if t != '': desc.append(t)
+            desc = ' | '.join(desc) 
+            
+            params = dict(cItem)
+            params = {'good_for_fav': True, 'category':nextCategory, 'title':title, 'url':url, 'icon':icon, 'desc':desc}
+            self.addDir(params)
+        
+        if nextPage and len(self.currList) > 0:
+            params = dict(cItem)
+            params.update({'good_for_fav': False, 'title':_("Next page"), 'url':nextPage, 'page':page+1})
+            self.addMore(params)
+    
+    def exploreItem(self, cItem):
+        printDBG("Altadefinizione.exploreItem")
+        self.cacheLinks = {}
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        cUrl = data.meta['url']
+        
+        descObj = self.getArticleContent(cItem, data)[0]
+        desc = []
+        for t in ['quality', 'imdb_rating', 'year', 'genres']:
+            if t in descObj['other_info']:
+                desc.append(descObj['other_info'][t])
+        desc = ' | '.join(desc) + '[/br]' + descObj['text'] 
+        
+        # trailer
+        trailerUrl = self.cm.ph.getDataBeetwenNodes(data, '<div class="collapse" id="showtrailer">', '</div>', False)[1]
+        trailerUrl = self.getFullUrl(self.cm.ph.getSearchGroups(trailerUrl, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''', 1, ignoreCase=True)[0])
+        printDBG(trailerUrl)
+        if trailerUrl != '':
+            trailerUrl = strwithmeta(trailerUrl, {'Referer':cItem['url']})
+            params = dict(cItem)
+            params.update({'good_for_fav': False, 'title':'%s - %s' % (cItem['title'], _('trailer')), 'url':trailerUrl, 'desc':desc, 'prev_url':cItem['url']})
+            self.addVideo(params)
+ 
+        url_container = self.cm.ph.getDataBeetwenNodes(data, '<ul id="mirrors"', '</ul>', False)[1]
+        urls = self.cm.ph.getAllItemsBeetwenMarkers(url_container, '<li>', '</li>')
+        for item in urls:
+            printDBG("----->" + item)
+            title = self.cleanHtmlStr(item)
+            url = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''data-target=['"]([^"^']+?)['"]''')[0] )
+            if url !='' : 
+                url = strwithmeta(url, {'Referer':cItem['url']})
+                params = dict(cItem)
+                params.update({'good_for_fav': False, 'title':'%s - %s' % (cItem['title'], title), 'url':url, 'desc':desc, 'prev_url':cItem['url']})
+                self.addVideo(params)
+    
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("Altadefinizione.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        cItem['url'] = self.getFullUrl('/index.php?do=search&subaction=search&story=') + urllib.quote_plus(searchPattern)
+        cItem['category'] = 'search_items'
+        self.listItems(cItem, 'explore_item')
+    
+    def listAZMain(self, cItem):
+        printDBG("Altadefinizione.listAZMain")
+        # 0-9
+        self.addDir(MergeDicts(cItem, {'category':'az_item', 'title': "0-9", 'letter' : '9' } ))              
+        #a-z
+        for i in range(26):
+            self.addDir(MergeDicts(cItem, {'category':'az_item', 'title': chr(ord('A')+i), 'letter': chr(ord('A')+i)} ))       
+    
+    def listAZItem(self, cItem):
+        letter = cItem['letter'].upper()
+        page = cItem.get ('page', 1)  
+        list_url = self.AZ_URL.replace('%l',letter).format(page) 
+        printDBG("Altadefinizione.listAZItem for letter %s" % letter )
+        sts, data = self.getPage(list_url)
+        if not sts: return
+
+        data = self.cm.ph.getDataBeetwenNodes(data, '<table>', '</table>', False)[1]
+        #printDBG(data)
+
+        items= self.cm.ph.getAllItemsBeetwenMarkers(data, '<tr class="mlnew">', '</tr>')
+        for item in items:
+            title_and_url = self.cm.ph.getDataBeetwenNodes(item, '<td class="mlnh-2"><h2>', '</h2>', False)[1]
+            url = self.cm.ph.getSearchGroups(title_and_url, '''href=['"]([^'^"]+?)['"]''')[0]
+            title = self.cleanHtmlStr(title_and_url)
+    
+            year = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(item, '<td class="mlnh-3">', '</td>', False)[1])
+            quality = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(item, '<td class="mlnh-4">', '</td>', False)[1])
+            cat = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(item, '<td class="mlnh-5">', '</td>', False)[1])
+            icon_text = self.cm.ph.getDataBeetwenNodes(item, '<td class="mlnh-thumb">', '</td>', False)[1]
+            icon = self.cm.getFullUrl(self.cm.ph.getSearchGroups(icon_text, '''src=['"]([^'^"]+?)['"]''')[0], self.MAIN_URL)
+            desc = quality + " - " + _('Year') + ": " + year + " - " + cat
+            
+            self.addDir(MergeDicts(cItem, {'category': 'explore_item', 'good_for_fav': True, 'title' : title, 'icon' : icon, 'url' : url, 'desc' : desc  }))
+ 
+        # check if more pages
+        pag = self.cm.ph.getDataBeetwenNodes(data, '<div class="paginationC">', '</div>', False)[1]
+        label = ">{0}</a>".format(page+1)
+        if label in pag:
+            self.addMore(MergeDicts(cItem, {'category': 'az_item', 'title' : _('Next page'), 'page': page + 1 }))
+        
+    def getLinksForVideo(self, cItem):
+        printDBG("Altadefinizione.getLinksForVideo [%s]" % cItem)
+        urlTab = []
+        
+        url = cItem.get('url', '')
+        if 1 == self.up.checkHostSupport(url):
+            return self.up.getVideoLinkExt(url)
+        
+        key = url
+        if key in self.cacheLinks:
+            return self.cacheLinks[key]
+        
+        urlParams = dict(self.defaultParams)
+        urlParams['header'] = dict(urlParams)
+        urlParams['header']['Referer'] = cItem.get('prev_url', '')
+        sts, data = self.getPage(cItem['url'], urlParams)
+        if not sts: return urlTab
+        
+        cUrl = data.meta['url']
+        
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<ul', '>', 'mirrors'), ('</ul', '>'), False)[1]
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<form', '</form>')
+        for item in data:
+            actionUrl = self.cm.getFullUrl(self.cm.ph.getSearchGroups(item, '''action=['"]([^'^"]+?)['"]''')[0].replace('&amp;', '&'), self.cm.getBaseUrl(cUrl))
+            if actionUrl == '': actionUrl = cUrl
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item, '<input', '>')
+            title = ''
+            query = {}
+            for it in item:
+                name  = self.cm.ph.getSearchGroups(it, '''name=['"]([^'^"]+?)['"]''')[0]
+                value = self.cm.ph.getSearchGroups(it, '''value=['"]([^'^"]+?)['"]''')[0]
+                query[name] = value
+                if title == '' and name.startswith('mir'): title = value
+            
+            if '?' in actionUrl: actionUrl += '&'
+            else: actionUrl += '?'
+            actionUrl += urllib.urlencode(query)
+            urlTab.append({'name':title, 'url':strwithmeta(actionUrl, {'Referer':cUrl}), 'need_resolve':1})
+        
+        if len(urlTab):
+            self.cacheLinks[key] = urlTab
+        return urlTab
+    
+    def getVideoLinks(self, videoUrl):
+        printDBG("Altadefinizione.getVideoLinks [%s]" % videoUrl)
+        videoUrl = strwithmeta(videoUrl)
+        urlTab = []
+        
+        # mark requested link as used one
+        if len(self.cacheLinks.keys()):
+            for key in self.cacheLinks:
+                for idx in range(len(self.cacheLinks[key])):
+                    if videoUrl in self.cacheLinks[key][idx]['url']:
+                        if not self.cacheLinks[key][idx]['name'].startswith('*'):
+                            self.cacheLinks[key][idx]['name'] = '*' + self.cacheLinks[key][idx]['name']
+                        break
+        
+        urlParams = dict(self.defaultParams)
+        urlParams['header'] = dict(urlParams['header'])
+        urlParams['header']['Referer'] = str(videoUrl.meta.get('Referer', self.getMainUrl()))
+        
+        sts, data = self.getPage(videoUrl, urlParams)
+        if not sts: return urlTab
+        cUrl = data.meta['url']
+        
+        playerData = self.cm.ph.getDataBeetwenNodes(data, ('<input', '>', 'urlEmbed'), ('<iframe', '>'))[1]
+        if playerData == '':
+            printDBG('Missig player data')
+            return urlTab
+        playerData = self.cm.ph.getSearchGroups(playerData, '''value=['"]([^'^"]+?)['"]''')[0]
+        printDBG('PLAYER_DATA: %s\n' % playerData)
+        
+        
+        if self.cacheJSCode == '':
+            jsUrl = ''
+            data = re.compile('''<script[^>]+?src=['"]([^'^"]+?)['"]''', re.I).findall(data)
+            for item in data:
+                if 'filmlive' not in item: continue
+                jsUrl = self.cm.getFullUrl(item, self.cm.getBaseUrl(cUrl))
+                break
+            
+            sts, data = self.getPage(jsUrl, urlParams)
+            if not sts: return urlTab
+            try:
+                idxS = data.find('function clearify')
+                num = 1
+                idx = data.find('{', idxS)
+                for idx in range(idx+1, len(data), 1):
+                    if data[idx] == '{': num += 1
+                    if data[idx] == '}': num -= 1
+                    if num == 0:
+                        printDBG("JS_CODE_IDX: [%s:%s]" % (idxS, idx))
+                        break
+                  
+                jscode = data[idxS:idx+1]
+                printDBG('JS_CODE: %s\n' % jscode)
+                self.cacheJSCode = jscode
+            except Exception:
+                printExc()
+            
+        jscode = ['var $={base64:function(not_used,e){e.length%4==3&&(e+="="),e.length%4==2&&(e+="=="),e=Duktape.dec("base64",e),decText="";for(var t=0;t<e.byteLength;t++)decText+=String.fromCharCode(e[t]);return decText},trim:function(e){return null==e?"":(e+"").replace(n,"")}};', self.cacheJSCode, 'print(clearify("%s"))' % playerData]
+        ret = js_execute( '\n'.join(jscode) )
+        if ret['sts'] and 0 == ret['code']:
+            printDBG(ret['data'])
+            urlTab = self.up.getVideoLinkExt(ret['data'])
+        return urlTab
+        
+    def getArticleContent(self, cItem, data=None):
+        printDBG("Altadefinizione.getArticleContent [%s]" % cItem)
+        retTab = []
+        
+        if data == None:
+            url = cItem.get('prev_url', cItem['url'])
+            sts, data = self.getPage(url)
+            if not sts: data = ''
+            
+        descData = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'schedaFilm'), ('</ul', '>'), True)[1]
+        icon = self.getFullIconUrl(self.cm.ph.getSearchGroups(descData, '''<img[^>]+?src=['"]([^'^"]+?)['"]''')[0])
+        
+        desc = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(descData, '<p', '</p>')[1])
+        if desc == '':
+            desc = self.cm.ph.getSearchGroups(data, '''(<meta[^>]+?description['"][^>]*?>)''')[0]
+            desc = self.cleanHtmlStr( self.cm.ph.getSearchGroups(desc, '''content=['"]([^'^"]+?)['"]''')[0] )
+        
+        try: title = str(byteify(json.loads(self.cm.ph.getSearchGroups(data, '''"disqusTitle"\:("[^"]+?")''')[0])))
+        except Exception: title = ''
+        
+        if title == '': title = cItem['title']
+        if desc == '':  desc = cItem['desc']
+        if icon == '':  icon = cItem['icon']
+        
+        otherInfo = {}
+        
+        # imdb_rating
+        t = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<span', '>', 'rateIMDB'), ('</span', '>'), False)[1])
+        if t != '': otherInfo['imdb_rating'] = t
+        
+        # raiting
+        t = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(data, 'ratings_off(', ',', False)[1])
+        if t != '': otherInfo['rating'] = t
+        
+        descMap = {'genere':    'genres',
+                   'anno'  :    'year',
+                   'qualitá':   'quality',
+                   'scrittore': 'writers',
+                   'attori':    'actors',
+                   'regia':     'directors' } #stars
+        
+        descData = self.cm.ph.getAllItemsBeetwenNodes(descData, ('<li', '>'), ('</li', '>'), False)
+        for item in descData:
+            item = item.split('</label>', 1)
+            marker = self.cleanHtmlStr(item[0]).replace(':', '').lower()
+            if marker not in descMap: continue
+            
+            t = []
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item[-1], '<a', '</a>')
+            for it in item:
+                it = self.cleanHtmlStr(it)
+                if it == '': continue
+                t.append(it)
+            if len(t): otherInfo[descMap[marker]] = ', '.join(t)
+        
+        return [{'title':self.cleanHtmlStr( title ), 'text': self.cleanHtmlStr( desc ), 'images':[{'title':'', 'url':self.getFullUrl(icon)}], 'other_info':otherInfo}]
+        
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('Altadefinizione.handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||||||||||||||||||||||||||||||||||| name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category', 'type':'category'})
+        elif category == 'sub_items':
+            self.listSubItems(self.currItem)
+        elif category == 'list_categories':
+            self.currList = self.cacheCategories
+        elif category in ['list_items','search_items'] :
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem)
+        elif category == 'az_main':
+            self.listAZMain(self.currItem)
+        elif category == 'az_item':
+            self.listAZItem(self.currItem)
+        #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+        #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, AltadefinizioneCool(), True, [])
+    
+    def withArticleContent(self, cItem):
+        if cItem.get('type', 'video') != 'video' and cItem.get('category', 'unk') != 'explore_item':
+            return False
+        return True
+
+    
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostcb01.py pc/IPTVPlayer/hosts/hostcb01.py
--- o/IPTVPlayer/hosts/hostcb01.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostcb01.py	2020-05-12 00:07:45.098290929 +0300
@@ -0,0 +1,399 @@
+# -*- coding: utf-8 -*-
+###################################################
+#                 Saracen Knight                  #
+#             saracen.knight@mail.ru              #
+###################################################
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+try:    import json
+except Exception: import simplejson as json
+###################################################
+
+def gettytul():
+    return 'https://cb01.love/'
+
+class Cb01(CBaseHostClass):
+
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'cb01.love', 'cookie':'cb01.love.cookie'})
+        
+        self.USER_AGENT = 'Mozilla/5.0'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'} )
+        
+        self.MAIN_URL = 'https://www.cb01.love/'
+        self.DEFAULT_ICON_URL = 'https://www.yourlifeupdated.net/wp-content/uploads/2019/04/Cineblog01.jpg'
+        
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+    
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        printDBG("<<<<<<<<<<<<< CB01.getPage <<<<<<<<<<<<<<<<<<<<<<")
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        
+        addParams['cloudflare_params'] = {'domain':'cb01.love', 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT}
+        printDBG("<<<<< post_data: "+str(post_data))
+        printDBG("<<<<< baseUrl: "+str(baseUrl))
+        printDBG("<<<<< addParams: "+str(addParams))
+        printDBG("<<<<< self: "+str(self))
+
+        #addParams['cloudflare_params'] = {'domain':self.up.getDomain(baseUrl), 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':self.MAIN_URL}
+        return self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+    
+    def getFullUrl(self, url):
+        if url[:1] == "/":
+            url = self.MAIN_URL + url[1:]
+        return url        
+    
+    def listMainMenu(self, cItem):
+        printDBG("<<<<<<<<<<<<<<<<<<<<<<<<<<< CB01.listMainMenu <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
+
+        sts, data = self.getPage(self.getMainUrl())
+        printDBG("<<<<<<<<<<<<<<< data ")
+        printDBG(str(data))
+
+        if not sts: 
+            return
+        self.setMainUrl(self.cm.meta['url'])
+
+        tmp = self.cm.ph.getDataBeetwenNodes(data, '<ul class="nav navbar-nav"', '</ul>', False)[1]
+        items = re.findall("<li>(.*?)</li>", tmp)
+        printDBG(str(items))
+        for item in items:
+            url = self.getFullUrl(re.findall("href=['\"]([^\"^']+?)['\"]", item)[0] )
+            
+            title = self.cleanHtmlStr(item).decode('UTF-8').lower().encode('UTF-8')
+            if title in ["richieste", "dmca"]:
+                continue
+            title = title[:1].upper() + title[1:]
+            params = dict(cItem)
+            params.update({'category':'list_items', 'title':title, 'url':url})
+            printDBG(str(params))
+            self.addDir(params)
+
+        
+        tmp = re.findall("<div id=\"category-menu\" class=\"container\"((.|\n)*?)</div>", data)[0]
+        #tmp = self.cm.ph.getDataBeetwenNodes(data, '<div id="category-menu" class="container">', '</div>', False)[0]
+        printDBG(str(tmp))
+        
+        items = re.findall("<div class=\"col-md-3\">((.|\n)*?)</div>", tmp[0] )
+        printDBG(str(items))
+        tabs=[]    
+        for i in items:
+            main_cat = re.findall("Cat\" id=\"(.*?)\">", i[0])[0]
+            sub_items = re.findall("<li>(.*?)</li>", i[0] ) 
+
+            categories = []
+
+            for si in sub_items:
+                url = self.getFullUrl(re.findall("href=['\"]([^\"^']+?)['\"]", si)[0] )
+                title = self.cleanHtmlStr(si)
+                params = dict(cItem)
+                params.update({'name':'category', 'category':'list_items', 'title':title, 'url':url})
+                categories.append(params)
+                
+            if len(categories):
+                params = dict(cItem)
+                params.update({'name':'category', 'category':'sub_items', 'title': main_cat , 'sub_items':categories})
+                tabs.append(params)
+
+        if len(tabs):
+            params = dict(cItem)
+            params.update({'category':'sub_items', 'title': _('Categories'), 'sub_items':tabs})
+            self.addDir(params)
+
+        # Film per ....
+        tmp = re.findall('''<select class="form-control">(.*?)</select>''', data, re.S)
+        for tmp2 in tmp:
+            tmp3 = re.findall('''<option(.*?)option>''', tmp2, re.S)[0]
+            title = re.findall('''">(.*?)</''', tmp3, re.S)[0]
+            print (title)
+            params = dict(cItem)
+            params.update({'category':'explore_category', 'title':title})
+            self.addDir(params)
+
+        # Search 
+        MAIN_CAT_TAB = [{'category':'search',          'title': _('Search'), 'search_item':True},
+                        {'category':'search_history',  'title': _('Search history')} ]
+        
+        self.listsTab(MAIN_CAT_TAB, cItem)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("<<<<<<<<<<<<<<<< CB01.listItems <<<<<<<<<<<<<<<<<<<<<<<<<")
+        printDBG("<<<<<<<<<< print cItem <<<<<<<<<<<<<<<<<<")
+        printDBG(str(cItem))
+        printDBG("<<<<<<<<<< fine cItem <<<<<<<<<<<<<<<<<<\n") 
+        page = cItem.get('page', 1)
+        postData = cItem.get('post_data')
+
+#<<<<<<<<<< print cItem <<<<<<<<<<<<<<<<<<
+#{'category': 'list_items', 'name': 'category', 'title': 'Search', 'url': 'https://cb01.love/', 
+#'post_data': {'do': 'search', 'story': 'pirati', 'titleonly': '3', 'subaction': 'search'}, 'type': 'category', 'search_item': False}
+
+        sts, data = self.getPage(cItem['url'], post_data=postData)
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+        
+        """
+        if postData != None:
+            printDBG("Fatta una ricerca!!")
+            movies = data.split("<div class=\"box\">")
+        else:
+            printDBG("Non fatta una ricerca!!")
+            if cItem['url'][-15:] == '/piu-visti.html':
+                tmp = re.findall("<div id='dle-content'>((.|\n)*?)</section>", data)[0][0]
+            else:
+                tmp = re.findall('''<div class="col-md-4">(.*?)</div>''', data, re.S)
+        """           
+        printDBG("<<<<<<<<<< print data <<<<<<<<<<<<<<<<<<")
+        printDBG(str(data))
+        printDBG("<<<<<<<<<< fine data <<<<<<<<<<<<<<<<<<")
+        movies = re.findall('''<div class="col-md-4">(.*?)</div>''', data, re.S)
+        movies2 = re.findall('''<div class="col-md-8">(.*?)</div>''', data, re.S)
+        del movies2[0]
+        del movies2[0]
+
+        i = 0
+        for m in movies:
+            if "sidebar-box" in m:
+                continue
+            printDBG("<<<<<<<<<< print m <<<<<<<<<<<<<<<<<<")
+            printDBG(str(m)) 
+            printDBG("<<<<<<<<<<<<<<<<<<<<<")
+            #printDBG("movies2 <<<<<<<<<<\n"+str(movies2[i])
+            #regx = '''<h1>(.*?)</h1>'''###title of the movie
+            t = re.findall('''<h1>(.*?)</h1>''',str(movies2[i]), re.M|re.I)[0]
+            t = re.sub('''\[(.*?)\] ''', "", t)
+            printDBG('title: '+str(t))
+            title = self.cleanHtmlStr(t)
+            printDBG(str(t))
+            url   = self.getFullUrl( self.cm.ph.getSearchGroups(str(m), '''href=['"]([^"^']+?)['"]''')[0] )
+            printDBG(str(url))  
+            icon = self.getFullUrl(re.findall("img src=\"(.*?)\"", str(m), re.M|re.I)[0])
+            printDBG(str(icon))
+            regx = '''<p>(.*?)</p>'''###title of the movie
+            title2 = self.cleanHtmlStr(re.findall('''<h1>(.*?)</h1>''',str(movies2[i]), re.M|re.I)[0])            
+            des1 = re.findall('''>(.*?)</h2>''',str(movies2[i]), re.M|re.I)[0]            
+            des = re.findall(regx,str(movies2[i]), re.M|re.I)[0]
+            desc = self.cleanHtmlStr(title2+"\n"+des1+"\n"+des)
+            params = dict(cItem)
+            params.update({'good_for_fav': True, 'category':nextCategory, 'title':title, 'url':url, 'icon':icon, 'desc':desc})
+            self.addDir(params)
+            i = i +1
+
+
+        #mext page
+        try:
+            #if there are next page:
+
+            pntemp = re.findall('''<div class="page_numbers">(.*?)</div>''', data, re.S)[0]
+            pntemp = re.findall('''<span>[0-9]</span>''', pntemp, re.S)[0]
+            pntemp = re.findall('''[0-9]''', pntemp, re.S)[0]
+            params = dict(cItem)
+            printDBG(str(params))
+
+            if pntemp == "1":
+                url = str(cItem['url'])+"page/2/"
+            else:
+                url = str(cItem['url'])
+                url = url[:-2]
+                url = url+str(int(pntemp)+1)+"/"
+
+            params.update({'title':_("Next page"), 'page':page+1, 'url': url})
+            self.addMore(params)
+        
+        except IndexError:
+            printDBG("<<<<<<<<<< Next Page Not Exist")
+
+    def exploreCategory(self, cItem):
+        printDBG("<<<<<<<<<< CB01.exploreCategory <<<<<<<<<<")
+        printDBG("cItem <<<<<<\n"+str(cItem))
+
+        sts, data = self.getPage(self.MAIN_URL)
+        if not sts: return
+
+        cat = cItem.get('title', '')
+        printDBG("category <<<<<<\n"+str(cat))
+
+        tmp = re.findall('''<select class="form-control">(.*?)</select>''', data, re.S)
+        printDBG("<<<<<<<<<< cat :"+cat)
+        for tmp2 in tmp:
+            printDBG(">>>>>> tmp2 "+tmp2)
+            if cat in tmp2:
+                tmp3 = tmp2
+
+        tmp4 = re.findall('''<option(.*?)option>''', tmp3, re.S)
+        del tmp4[0]
+        for t in tmp4:
+
+            title = re.findall('''">(.*?)</''', t, re.S)[0]
+            url = re.findall('''"(.*?)"''', t, re.S)[0]
+            printDBG (title)
+            printDBG(url)
+            params = dict(cItem)
+            params.update({'category':'list_items', 'title':title, 'url':self.getFullUrl(url)})
+            printDBG(str(params))
+            self.addDir(params)
+
+
+    def exploreItem(self, cItem):
+        printDBG("<<<<<<<<<< CB01.exploreItem <<<<<<<<<<")
+        printDBG("cItem <<<<<<\n"+str(cItem))
+
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+        
+        cItem = dict(cItem)
+        cItem['prev_url'] = cItem['url']
+
+        #trailer
+        trailer = self.cm.ph.getDataBeetwenNodes(data, '<p>Guarda il Trailer:</p>', ('</div', '>'), False)[1]
+        url = "https:"+self.cm.ph.getSearchGroups(trailer, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+        printDBG("url <<<<<<  "+str(url))
+        if self.cm.isValidUrl(url):
+            title = "Trailer"
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'url':url, 'title':'%s %s' % (title, cItem['title'])})
+            self.addVideo(params)
+ 
+        #video link
+        urlTab = []
+        temp = re.findall('''div role="tabpanel" class="tab-pane fade"(.*?)</div>''', data, re.S)
+        printDBG("<<<<<<<< temp "+str(temp))
+
+        for tt in temp:
+            printDBG("tt <<<<<<  "+str(tt))
+            url = "https:"+self.cm.ph.getSearchGroups(tt, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+            printDBG("url <<<<<<  "+str(url))
+            name = re.findall('''id="(.*?)"''', tt, re.S)[0]
+            printDBG("name <<<<<<  "+str(name))
+            url = strwithmeta(url, {'Referer':cItem['url']})
+            urlTab.append({'name':name, 'url':url, 'need_resolve':1})
+
+        if len(urlTab):
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'urls_tab':urlTab})
+            self.addVideo(params)
+
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("CB01.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        #Verify post parrams and config bellow
+        cItem['url'] = self.MAIN_URL
+        cItem['post_data'] = {'do':'search', 'subaction':'search', 'story':searchPattern}
+        cItem['category'] = 'list_items'
+        self.listItems(cItem, 'explore_item')
+
+    def getLinksForVideo(self, cItem):
+        printDBG("CB01.getLinksForVideo [%s]" % cItem)
+        if 1 == self.up.checkHostSupport(cItem['url']): 
+            return self.up.getVideoLinkExt(cItem['url'])
+        return cItem.get('urls_tab', [])
+
+    def getVideoLinks(self, videoUrl):
+        printDBG("CB01.getVideoLinks [%s]" % videoUrl)
+        return  self.up.getVideoLinkExt(videoUrl)
+
+    def getArticleContent(self, cItem):
+        printDBG("CB01.getVideoLinks [%s]" % cItem)
+        retTab = []
+        itemsList = []
+        
+        if 'prev_url' in cItem: url = cItem['prev_url']
+        else: url = cItem['url']
+
+        sts, data = self.cm.getPage(url)
+        if not sts: return
+
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 's_left'), ('<div', '>', 'comment'), False)[1]
+        
+        icon = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'imagen'), ('</div', '>'), False)[1]
+        icon = self.getFullUrl( self.cm.ph.getSearchGroups(icon, '''<img[^>]+?src=['"]([^'^"]+?)['"]''')[0] )
+        title = self.cleanHtmlStr( self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'title'), ('</p', '>'), False)[1] )
+        desc = self.cleanHtmlStr( self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'entry-content'), ('</div', '>'), False)[1] )
+
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(data, ('<p', '>', 'meta_dd'), ('</p', '>'), False)
+        for item in tmp:
+            if 'title' in item:
+                item = [self.cm.ph.getSearchGroups(item, '''title=['"]([^'^"]+?)['"]''')[0], item]
+            else:
+                item = item.split('</b>', 1)
+                if len(item) < 2: continue
+            key = self.cleanHtmlStr(item[0])
+            val = self.cleanHtmlStr(item[1])
+            if key == '' or val == '': continue
+            itemsList.append((key, val))
+
+        tmp = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<span', '>', 'dato'), ('</span', '>'), False)[1])
+        if tmp != '': itemsList.append((_('Rating'), tmp))
+
+        tmp = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'views'), ('</p', '>'), False)[1])
+        if tmp != '': itemsList.append((_('Views'), tmp))
+        tmp = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'date'), ('</p', '>'), False)[1])
+        if tmp != '': itemsList.append((_('Relese'), tmp))
+
+        if title == '': title = cItem['title']
+        if icon == '':  icon  = cItem.get('icon', self.DEFAULT_ICON_URL)
+        if desc == '':  desc  = cItem.get('desc', '')
+        
+        return [{'title':self.cleanHtmlStr( title ), 'text': self.cleanHtmlStr( desc ), 'images':[{'title':'', 'url':self.getFullUrl(icon)}], 'other_info':{'custom_items_list':itemsList}}]
+
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: || name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        self.currItem = dict(self.currItem)
+        self.currItem.pop('good_for_fav', None)
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category', 'type':'category'})
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem)
+        elif category == 'sub_items':
+            self.currList = self.currItem.get('sub_items', [])
+        elif category == 'explore_category':
+            self.exploreCategory(self.currItem)
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, Cb01(), True, favouriteTypes=[]) 
+
+    def withArticleContent(self, cItem):
+        if 'prev_url' in cItem or cItem.get('category', '') == 'explore_item': return True
+        else: return False
diff -ruN o/IPTVPlayer/hosts/hostcb01uno.py pc/IPTVPlayer/hosts/hostcb01uno.py
--- o/IPTVPlayer/hosts/hostcb01uno.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostcb01uno.py	2020-05-12 00:07:45.098290929 +0300
@@ -0,0 +1,304 @@
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+try:    import json
+except Exception: import simplejson as json
+###################################################
+
+def gettytul():
+    return 'https://cb01.cloud/'
+
+class Cb01(CBaseHostClass):
+
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'cb01.cloud', 'cookie':'cb01.cloud.cookie'})
+        
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'} )
+        
+        self.MAIN_URL = 'https://cb01.cloud/'
+        self.DEFAULT_ICON_URL = 'https://cb01.cloud/wp-content/uploads/2019/03/logocb2-1.jpg'
+        
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+    
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = self.defaultParams
+
+        return self.cm.getPage(baseUrl, addParams, post_data)
+    
+    def getFullUrl(self, url):
+        if url[:1] == "/":
+            url = self.MAIN_URL + url[1:]
+        return url        
+    
+    def cleanHtmlFromCR(self, data):
+        # remove all problems with new lines and spaces between tags
+        data = data.replace("\n", " ")
+        data = re.sub(r">[ ]{1,5}<", "><", data)
+        #printDBG(data)
+        return data
+    
+    def listMainMenu(self, cItem):
+        printDBG("cb01uno.listMainMenu")
+        params = dict(cItem)
+        params.update({'name':'category', 'category':'list_items', 'title': _('Home'), 'url': self.MAIN_URL})
+        self.addDir(params)
+        
+        sts, data = self.getPage(self.getMainUrl())
+        if not sts: 
+            return
+
+        data = self.cleanHtmlFromCR(data)
+
+        self.setMainUrl(self.cm.meta['url'])
+        tabs = []
+        
+        groups = self.cm.ph.getAllItemsBeetwenNodes(data, ('<li','>','mega-menu-megamenu'), '</li></ul>', False)
+        
+        for group in groups:
+            printDBG("-----------------------")
+            categories = []
+            
+            items = self.cm.ph.getAllItemsBeetwenNodes(group, '<a', '</a>', True)
+            for item in items:
+                #printDBG(item)    
+                title = self.cleanHtmlStr(item)
+                url = re.findall("href=['\"]?([^>'\"]+?)['\"]?>", item)
+                if url:
+                    url = self.getFullUrl(url[0])
+                    params = dict(cItem)
+                    params.update({'name':'category', 'category':'list_items', 'title':title, 'url': url})
+                    printDBG(str(params))
+                    categories.append(params)
+                else:
+                    main_cat = title
+                    printDBG("category : %s" % main_cat)
+            
+            params = dict(cItem)
+            params.update({'name':'category', 'category':'sub_items', 'title': main_cat , 'sub_items': categories})
+            printDBG(str(params))
+            tabs.append(params)
+
+        if len(tabs):
+            params = dict(cItem)
+            params.update({'category':'sub_items', 'title': _('Categories'), 'sub_items':tabs})
+            self.addDir(params)
+        
+        # Search 
+        MAIN_CAT_TAB = [{'category':'search',          'title': _('Search'), 'search_item':True},
+                        {'category':'search_history',  'title': _('Search history')} ]
+        
+        self.listsTab(MAIN_CAT_TAB, cItem)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("cb01uno.listItems '%s'" % cItem['url'])
+        printDBG(str(cItem))
+        page = cItem.get('page', 1)
+        postData = cItem.get('post_data')
+        
+        url = self.getFullUrl(cItem['url'])
+        if postData:
+            sts, data = self.getPage(url, post_data = postData)
+        else:
+            sts, data = self.getPage(url)
+            
+        if not sts: 
+            return
+        data = self.cleanHtmlFromCR(data)
+        
+        self.setMainUrl(self.cm.meta['url'])
+        
+        movies = self.cm.ph.getAllItemsBeetwenNodes(data,('<div','>','card mp-post horizontal'), '</div></div></div>', False)
+        if not movies:
+            movies = self.cm.ph.getAllItemsBeetwenNodes(data,('<div','>','card mp-post horizontal'), '<!-- </div>-->', False)
+
+        
+        for m in movies:
+            printDBG("------------------------------------------------------------")
+            printDBG(m)
+            
+            url = re.findall("href=\"(.*?)\"", m, re.S)
+            if url:
+                url = self.getFullUrl(url[0])
+            else:
+                url = re.findall("href=(.*?)/>", m, re.S)
+                if url:
+                    url = self.getFullUrl(url[0])
+                else:
+                    continue
+
+            icon = re.findall("src=\"?([^ >'\"]+?)[ >'\"]", m, re.S)
+            if icon:
+                icon = self.getFullUrl(icon[0])
+                    
+            title_tmp = self.cm.ph.getDataBeetwenNodes(m, ('<h3','>'), '</h3>', False)[1]
+            title = self.cleanHtmlStr(title_tmp)
+            
+            desc_tmp = self.cm.ph.getDataBeetwenNodes(m, ('<span','>'), '</a>', False)[1]
+            desc = self.cleanHtmlStr(desc_tmp)
+            
+            params = dict(cItem)
+            params.update({'good_for_fav': True, 'category': nextCategory, 'title': title, 'url': url, 'icon': icon, 'desc': desc})
+            printDBG(str(params))
+            self.addDir(params)
+
+        #search if exsts a next page
+        pntemp = re.findall("value=['\"]?([^ >'\"]+?)[ '\"]?>%s</option>" % (page + 1), data, re.S)            
+        if pntemp:
+            params = dict(cItem)
+            params.update({'title':_("Next page"), 'page': page + 1, 'url': pntemp[0]})
+            printDBG(str(params))
+            self.addMore(params)
+            
+
+    def exploreCategory(self, cItem):
+        printDBG("cb01uno.exploreCategory [%s] " % cItem['title'])
+
+        sts, data = self.getPage(self.MAIN_URL)
+        if not sts: return
+
+        cat = cItem.get('title', '')
+        printDBG("category <<<<<<\n"+str(cat))
+
+        tmp = re.findall('''<select class="form-control">(.*?)</select>''', data, re.S)
+        printDBG("<<<<<<<<<< cat :"+cat)
+        for tmp2 in tmp:
+            printDBG(">>>>>> tmp2 "+tmp2)
+            if cat in tmp2:
+                tmp3 = tmp2
+
+        tmp4 = re.findall('''<option(.*?)option>''', tmp3, re.S)
+        del tmp4[0]
+        for t in tmp4:
+
+            title = re.findall('''">(.*?)</''', t, re.S)[0]
+            url = re.findall('''"(.*?)"''', t, re.S)[0]
+            printDBG (title)
+            printDBG(url)
+            params = dict(cItem)
+            params.update({'category':'list_items', 'title':title, 'url':self.getFullUrl(url)})
+            printDBG(str(params))
+            self.addDir(params)
+
+
+    def exploreItem(self, cItem):
+        printDBG("cb01uno.exploreItem [%s] " % cItem['title'])
+
+        sts, data = self.getPage(cItem['url'])
+        if not sts: 
+            return
+        
+        data = self.cleanHtmlFromCR(data)
+        
+        self.setMainUrl(self.cm.meta['url'])
+        cItem['prev_url'] = cItem['url']
+
+        #trailer
+        trailer = self.cm.ph.getDataBeetwenNodes(data, 'Guarda il Trailer:', ('</div', '>'), False)[1]
+        if trailer:
+            url = re.findall("src=['\"]?([^ >'\"]+?)['\"]?[ >]",trailer)
+            if url:
+                if self.cm.isValidUrl(url[0]):
+                    title = "Trailer"
+                    params = dict(cItem)
+                    params.update({'good_for_fav':False, 'url':url[0], 'title':'%s %s' % (title, cItem['title'])})
+                    self.addVideo(params)
+ 
+        #video links
+        urlTab = []
+        
+        links = re.findall("href=['\"]?([^ '\"]+?)['\"]? target=\"?_blank\"? rel=\"[^\"]+\">(.*?)</a>", data)
+        #example: <a href="http://swzz.xyz/link/479Pq/" target="_blank" rel="noopener noreferrer">Akvideo</a>
+        
+        for l in links:
+            url = l[0]
+            if url.startswith('"'):
+                url = url[1:]
+            if url.endswith('"'):
+                url = url[:-1]
+            url = strwithmeta(url, {'Referer':cItem['url']})
+            urlTab.append({'name': l[1], 'url':url, 'need_resolve':1})
+
+        if len(urlTab):
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'urls_tab':urlTab})
+            self.addVideo(params)
+
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("cb01uno.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        #Verify post parrams and config bellow
+        cItem['url'] = self.MAIN_URL
+        cItem['post_data'] = {'s': searchPattern}
+        cItem['category'] = 'list_items'
+        self.listItems(cItem, 'explore_item')
+
+    def getLinksForVideo(self, cItem):
+        printDBG("cb01uno.getLinksForVideo [%s]" % cItem)
+
+        return cItem.get('urls_tab', [])
+
+    def getVideoLinks(self, videoUrl):
+        printDBG("cb01uno.getVideoLinks [%s]" % videoUrl)
+        return self.up.getVideoLinkExt(videoUrl)
+
+
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: || name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        self.currItem = dict(self.currItem)
+        self.currItem.pop('good_for_fav', None)
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category', 'type':'category'})
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem)
+        elif category == 'sub_items':
+            self.currList = self.currItem.get('sub_items', [])
+        elif category == 'explore_category':
+            self.exploreCategory(self.currItem)
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = self.currItem
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, Cb01(), True, favouriteTypes=[]) 
+
+    def withArticleContent(self, cItem):
+        if 'prev_url' in cItem or cItem.get('category', '') == 'explore_item': return True
+        else: return False
diff -ruN o/IPTVPlayer/hosts/hostdsda.py pc/IPTVPlayer/hosts/hostdsda.py
--- o/IPTVPlayer/hosts/hostdsda.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostdsda.py	2020-05-12 00:07:45.098290929 +0300
@@ -0,0 +1,266 @@
+﻿# -*- coding: utf-8 -*-
+###################################################
+#                 Saracen Knight                  #
+#             saracen.knight@mail.ru              #
+###################################################
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+import HTMLParser
+###################################################
+
+def gettytul():
+    return 'https://documentari-streaming-da.com/'
+
+class DSDA(CBaseHostClass):
+
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'DSDA', 'cookie':'DSDA.cookie'})
+        
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        
+        self.MAIN_URL = 'https://documentari-streaming-da.com/'
+        self.DEFAULT_ICON_URL = 'https://scontent-mxp1-1.xx.fbcdn.net/v/t1.0-9/56742587_669013310186689_7805148216235655168_n.jpg?_nc_cat=105&_nc_oc=AQljKC8dtD_B28VmidDlC1P1oUdvIyw7Ig-zCqGuD30jdIJMExgm3ct3T6EiwqTRziQ&_nc_ht=scontent-mxp1-1.xx&oh=17a67f50b311538188abd9bb7a2ed366&oe=5DD4BF01'
+        
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+    
+
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        printDBG("<<<<<<<<<<<<< DSDA.getPage <<<<<<<<<<<<<<<<<<<<<<")
+
+        sts, data = self.cm.getPage(baseUrl, addParams, post_data)
+        return sts, data
+    
+    def getFullUrl(self, url):
+        printDBG("<<<<<<<<<<<<< DSDA.getFullUrl <<<<<<<<<<<<<<<<<<<<<<")
+        if url[:1] == "/":
+            url = self.MAIN_URL + url[1:]
+        #printDBG(url)
+        return url        
+    
+    def listMainMenu(self, cItem):
+        printDBG("<<<<<<<<<<<<< DSDA.listMainMenu <<<<<<<<<<<<<<<<<<<<<<")
+        printDBG(str(cItem))
+
+        url = cItem.get('url', '')
+        printDBG("url<<<<<<<< "+url)
+        
+        if url == "": 
+            url = self.MAIN_URL
+
+        printDBG("url<<<<<<<< "+url)
+        sts, data = self.cm.getPage(url)
+        if not sts: return        
+
+        cats = re.findall('''has-menu-child"><a href=(.*)</a></li>''', str(data))
+        for cat in cats:
+            printDBG(str(cat))
+            url = re.findall('''"(.*?)"''', cat)[0]
+            #title = re.findall('''">(.*?)''', cat)[0]
+            title = cat.split('"')[2]
+            title = title.replace(">", "")
+            liststr = ["Presentazione", "Contatto", "Sostieni DSDA", "Categorie"]
+
+            if title not in liststr:
+
+                if title == "Home":
+                    title = "Documentari Ultime uscite"
+                    url = self.MAIN_URL+"page/1/?searchtype=movie&post_type=movie&sl=lasts&s#038;post_type=movie&sl=lasts&s"
+
+                params = dict(cItem)
+                params.update({'name':'category', 'category':'list_items', 'title':title, 'url':url})
+                printDBG(str(params))
+                self.addDir(params)
+
+
+        MAIN_CAT_TAB = [{'category':'search',          'title': _('Search'), 'search_item':True},
+                        {'category':'search_history',  'title': _('Search history')} ]
+        
+        self.listsTab(MAIN_CAT_TAB, cItem)
+        
+
+    def listItems(self, cItem, nextCategory):
+        printDBG("<<<<<<<<<<<<< DSDA.listItems <<<<<<<<<<<<<<<<<<<<<<")
+        printDBG("cItem<<<<< "+str(cItem))
+        page = cItem.get('page', 1)
+
+        url = cItem.get('url', '')
+        urlnext = url
+        title = cItem.get('title', '')
+        printDBG("title<<< "+title)
+
+        if (title == "Search") or ("Next page" in title) or (title == "Documentari Ultime uscite"):
+            #don't do any think
+            searchPattern = cItem.get('searchPattern', '')
+            printDBG("searchPattern<<< "+searchPattern)
+            printDBG("url<<< "+url)            
+            #https://documentari-streaming-da.com/?searchtype=movie&post_type=movie&s=squalo
+            #url = "https://documentari-streaming-da.com/?searchtype=movie&post_type=movie&s="+searchPattern
+ 
+        else:
+            #https://documentari-streaming-da.com/page/3/?searchtype=movie&post_type=movie&sl=lasts&cat=seminari-e-conferenze&s=
+            t = title.replace("Documentari ", "")
+            t = t.replace(" ", "-")
+            t = t.lower()
+            if "serie" in t: t = "series"
+            if "raccolte" in t: t = "groups"
+            if "societ" in t: t = "societa"
+            #t = title.replace("documentari-", "")
+            printDBG("page<<< "+str(page))
+            url = self.MAIN_URL+"page/"+str(page)+"/?searchtype=movie&post_type=movie&sl=lasts&cat="+t+"&s"
+            urlnext = url
+            printDBG(url)
+
+        sts, data = self.cm.getPage(url)
+        if not sts: return        
+
+        pntemp = re.findall('''<div class="item col-sm-3">(.*?)<span class=''', data, re.S)
+        #print (str(pntemp))
+
+        for t in pntemp:
+            #print(t)
+            icon = re.findall('''src="(.*?)"''', t, re.S)[0]
+            url = re.findall('''href="(.*?)"''', t, re.S)[0]
+            title = re.findall('''/">(.*?)<\/a><\/h4>''', t)[0]
+            title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+            params = dict(cItem)
+            params.update({'good_for_fav': True, 'category':nextCategory, 'title':title, 'url':url, 'icon':icon, 'desc':title})
+            printDBG(str(params))
+            self.addDir(params)
+
+
+        #next page
+        if "next page-numbers" in data:
+            tmp = urlnext.split("/"+str(page))
+            printDBG("next page-numbers<<< ")
+            printDBG("urlnext<<< "+ urlnext)
+            urlnext = tmp[0]+"/"+str(page+1)+tmp[1]
+            printDBG("urlnext<<< "+ urlnext)
+            params = dict(cItem)
+            params.update({'title':_("Next page"), 'page':page+1, 'url': urlnext})
+            self.addMore(params)
+        
+        #titems = 
+
+    def exploreItem(self, cItem):
+        printDBG("<<<<<<<<<<<<< DSDA.exploreItem <<<<<<<<<<<<<<<<<<<<<<")
+        url = cItem.get('url', '')
+        printDBG(url)
+        sts, data = self.cm.getPage(url)
+        if not sts: return        
+
+        #video link
+        d = re.findall('''</div><h2>(.*?)</div>''', data, re.S)[0]
+        #printDBG("desc <<<<< "+ d+"\n<<<<<<<<<<<<<<<")
+        dd = re.findall('''<p>(.*?)</p>''', data, re.S)
+        ddd = ""
+        for d in dd:
+            d = re.sub('''<(.*?)>''', "", d)
+            d = d.replace("<", "")
+            d = d.replace(">", "")
+            printDBG("d <<< "+d+"<<<")
+            ddd = ddd+d+"\n"
+        ddd = HTMLParser.HTMLParser().unescape(ddd).encode('utf-8')
+        
+        desc = re.findall('''<b style="color:#333333;">(.*?)</div>''', data, re.S)[0]
+        desc = '''<b style="color:#333333;">'''+desc
+        tmp = desc.split("</b></a> <br><br>")
+        del tmp[-1]
+
+        for t in tmp:
+            t = t+'''</b>'''
+            #print (str(t))
+            title = re.findall('''>(.*?)</b><br>''', t, re.S)[0]
+            title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+            #print (title)
+            names = re.findall('''<b>(.*?)</b>''', t, re.S)
+            #print(names)
+            vurl = re.findall('''href="(.*?)"''', t, re.S)
+            #print(vurl)
+
+            urlTab = []
+            i = 0
+            for name in names:
+                urlTab.append({'name':name, 'url':vurl[i], 'need_resolve':1})
+                i = i + 1
+
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title': title, 'urls_tab':urlTab, 'desc':ddd})
+            #params.update({'good_for_fav':False, 'url':url, 'title':'%s %s' % (title, cItem['title'])})
+            printDBG(str(params))
+            self.addVideo(params)
+
+
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("<<<<<<<<<<<<< DSDA.listSearchResult <<<<<<<<<<<<<<<<<<<<<<")
+        printDBG("DSDA.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        #Verify post parrams and config bellow
+        #https://documentari-streaming-da.com/?searchtype=movie&post_type=movie&s=squalo
+        cItem['url'] = self.MAIN_URL+"?searchtype=movie&post_type=movie&s="+searchPattern
+        cItem['category'] = 'list_items'
+        self.listItems(cItem, 'explore_item')
+
+    def getLinksForVideo(self, cItem):
+        printDBG("<<<<<<<<<<<<< DSDA.getLinksForVideo <<<<<<<<<<<<<<<<<<<<<<")
+        printDBG("DSDA.getLinksForVideo [%s]" % cItem)
+        if 1 == self.up.checkHostSupport(cItem['url']): 
+            return self.up.getVideoLinkExt(cItem['url'])
+        return cItem.get('urls_tab', [])
+
+
+    def getVideoLinks(self, videoUrl):
+        printDBG("<<<<<<<<<<<<< DSDA.getVideoLinks <<<<<<<<<<<<<<<<<<<<<<")
+        printDBG("DSDA.getVideoLinks [%s]" % videoUrl)
+        return  self.up.getVideoLinkExt(videoUrl)
+
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG("<<<<<<<<<<<<< DSDA.handleService <<<<<<<<<<<<<<<<<<<<<<")
+        printDBG('handleService start')
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: || name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        self.currItem = dict(self.currItem)
+        self.currItem.pop('good_for_fav', None)
+        
+        #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category', 'type':'category'})
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem)
+        #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+        #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+
+        printDBG('handleService end')
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, DSDA(), True, favouriteTypes=[]) 
diff -ruN o/IPTVPlayer/hosts/hostfilisertv.py pc/IPTVPlayer/hosts/hostfilisertv.py
--- o/IPTVPlayer/hosts/hostfilisertv.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostfilisertv.py	2020-05-12 00:07:45.098290929 +0300
@@ -0,0 +1,529 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, SetIPTVPlayerLastHostError
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, byteify, rm, GetTmpDir
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.components.sweetcaptcha_v2widget import UnCaptchaSweetCaptchaWidget
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads
+from Plugins.Extensions.IPTVPlayer.libs import ph
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import urlparse
+import re
+import urllib
+import base64
+from datetime import datetime
+from time import sleep, time
+from copy import deepcopy
+###################################################
+
+
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Screens.MessageBox import MessageBox
+###################################################
+
+
+def gettytul():
+    return 'https://fili.cc/'
+
+class FiliserTv(CBaseHostClass):
+ 
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'FiliserTv.tv', 'cookie':'filisertv.cookie'})
+        
+        self.USER_AGENT = 'Mozilla/5.0'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With': 'XMLHttpRequest'} )
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        
+        self.MAIN_URL = 'https://fili.cc/'
+        self.DEFAULT_ICON_URL = 'https://fili.cc/assets/img/logo2.png'
+        
+        self.MAIN_CAT_TAB = [{'category':'list_items',        'title': _('Movies'),                       'url':self.getFullUrl('filmy')   },
+                             {'category':'list_items',        'title': _('Series'),                       'url':self.getFullUrl('seriale') },
+                             {'category':'search',            'title': _('Search'),               'search_item':True,                      },
+                             {'category':'search_history',    'title': _('Search history'),                                                } 
+                            ]
+        
+        self.cacheFilters = {}
+        self.cacheLinks = {}
+        self.cacheSeasons = {}
+        FiliserTv.SALT_CACHE = {}
+        self.WaitALittleBit  = None
+        self.filtersTab = [] # ['language', 'genres', 'year', 'sort_by']
+
+    def getStr(self, item, key):
+        if key not in item: return ''
+        if item[key] == None: return ''
+        return str(item[key])
+
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        addParams['cloudflare_params'] = {'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT}
+        return self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+
+    def getFullIconUrl(self, url):
+        url = CBaseHostClass.getFullIconUrl(self, url)
+        if url == '': return ''
+        cookieHeader = self.cm.getCookieHeader(self.COOKIE_FILE)
+        return strwithmeta(url, {'Cookie':cookieHeader, 'User-Agent':self.USER_AGENT})
+
+    def fillFilters(self, cItem):
+        self.cacheFilters = {}
+        self.filtersTab = [] # ['language', 'genres', 'year', 'sort_by']
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+
+        def addFilter(data, key, addAny, titleBase, marker):
+            self.cacheFilters[key] = []
+            for item in data:
+                value = self.cm.ph.getSearchGroups(item, '''%s=['"]([^'^"]+?)['"]''' % marker)[0]
+                if value == '': continue
+                title = ph.clean_html(item)
+                if titleBase == '':
+                    title = title.title()
+                self.cacheFilters[key].append({'title':titleBase + title, key:value})
+            if addAny and len(self.cacheFilters[key]):
+                self.cacheFilters[key].insert(0, {'title':'Wszystkie'})
+            if len(self.cacheFilters[key]):
+                self.filtersTab.append(key)
+
+        # language
+        tmpData = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="vBox"', '</div>', withMarkers=True)
+        addFilter(tmpData, 'language', True, '', 'data-type')
+
+        # genres
+        tmpData = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li data-gen', '</li>', withMarkers=True)
+        addFilter(tmpData, 'genres', True, '', 'data-gen') 
+
+        # year
+        self.cacheFilters['year'] = [{'title':_('Year: ') + _('Any')}]
+        year = datetime.now().year
+        while year >= 1978:
+            self.cacheFilters['year'].append({'title': _('Year: ') + str(year), 'year': year})
+            year -= 1
+
+        # sort
+        self.cacheFilters['sort_by'] = []
+        for item in [('date', 'data dodania/aktualizacji'), ('views', ' liczba wyświetleń'), ('rate', ' ocena')]:
+            self.cacheFilters['sort_by'].append({'title': _('Sort by: ') + str(item[1]), 'sort_by': item[0]})
+
+        # add order to sort_by filter
+        orderLen = len(self.cacheFilters['sort_by'])
+        for idx in range(orderLen):
+            item = deepcopy(self.cacheFilters['sort_by'][idx])
+            # desc
+            self.cacheFilters['sort_by'][idx].update({'title':'\xe2\x86\x93 ' + self.cacheFilters['sort_by'][idx]['title'], 'order':'desc'})
+            # asc
+            item.update({'title': '\xe2\x86\x91 ' + item['title'], 'order':'asc'})
+            self.cacheFilters['sort_by'].append(item)
+        if len(self.cacheFilters['sort_by']):
+            self.filtersTab.append('sort_by')
+
+    def listFilter(self, cItem):
+        params = dict(cItem)
+        idx = params.get('f_idx', 0)
+        params['f_idx'] = idx + 1
+        
+        if idx < len(self.filtersTab):
+            tab = self.cacheFilters.get(self.filtersTab[idx], [])
+            self.listsTab(tab, params)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("FiliserTv.listItems")
+        
+        baseUrl = cItem['url']
+        if '?' not in baseUrl:
+            baseUrl += '?'
+        else:
+            baseUrl += '&'
+        
+        page = cItem.get('page', 1)
+        if page > 1:
+            baseUrl += 'page={0}&'.format(page)
+        
+        if cItem.get('genres', '') not in ['-', '']:
+            baseUrl += 'kat={0}&'.format(urllib.quote(cItem['genres']))
+        
+        if cItem.get('language', '') not in ['-', '']:
+            baseUrl += 'ver={0}&'.format(urllib.quote(cItem['language']))
+        
+        if cItem.get('year', '0') not in ['0', '-', '']:
+            baseUrl += 'start_year={0}&end_year={1}&'.format(cItem['year'], cItem['year'])
+        
+        if cItem.get('sort_by', '0') not in ['0', '-', '']:
+            baseUrl += 'sort_by={0}&'.format(urllib.quote(cItem['sort_by']))
+            
+        if cItem.get('order', '0') not in ['0', '-', '']:
+            baseUrl += 'type={0}&'.format(urllib.quote(cItem['order']))
+            
+        sts, data = self.getPage(self.getFullUrl(baseUrl), self.defaultParams)
+        if not sts: return
+        
+        if '>Następna<' in data:
+            nextPage = True
+        else: nextPage = False
+        
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<section class="item"', '</section>', withMarkers=True)
+        for item in data:
+            url    = self.getFullUrl(ph.search(item, ph.A)[1])
+            icon   = self.getFullIconUrl(ph.search(item, ph.IMG)[1].strip())
+            title  = ph.clean_html(ph.getattr(item, 'alt'))
+            if title == '': title = ph.clean_html(ph.getattr(item, 'title'))
+            title1 = ph.clean_html(ph.find(item, ('<h3', '>'), '</h3>', flags=0)[1])
+            title2 = ph.clean_html(ph.find(item, ('<h4', '>'), '</h4>', flags=0)[1])
+            
+            desc   = ph.clean_html(item.split('<div class="block2">')[-1].replace('<p class="desc">', '[/br]'))
+            params = {'good_for_fav': True, 'title':title, 'url':url, 'icon':icon, 'desc':desc}
+            if '/film/' in url:
+                self.addVideo(params)
+            elif '/serial/' in url:
+                params['category'] = nextCategory
+                self.addDir(params)
+
+        if nextPage:
+            params = dict(cItem)
+            params.update({'title':_('Next page'), 'page':page + 1})
+            self.addDir(params)
+
+    def listSeasons(self, cItem, nextCategory):
+        printDBG("FiliserTv.listSeasons")
+        
+        self.cacheSeasons = {'keys':[], 'dict':{}}
+        
+        sts, data = self.getPage(cItem['url'], self.defaultParams)
+        if not sts: return
+        
+        data = data.split('<div id="episodes">')
+        if 2 != len(data): return
+        
+        tmp = self.cm.ph.getDataBeetwenMarkers(data[0], '<div id="seasons_list">', '<div class="clear">')[1]
+        tmp = re.compile('<[^>]+?num\="([0-9]+?)"[^>]*?>([^<]+?)<').findall(tmp)
+        for item in tmp:
+            self.cacheSeasons['keys'].append({'key':item[0], 'title':ph.clean_html(item[1])})
+        
+        del data[0]
+        
+        # fill episodes
+        for season in self.cacheSeasons['keys']:
+            tmp = self.cm.ph.getDataBeetwenMarkers(data[0], 'data-season-num="%s"' % season['key'], '</ul>')[1]
+            tmp = self.cm.ph.getAllItemsBeetwenMarkers(tmp, '<li', '</li>', withMarkers=True)
+            self.cacheSeasons['dict'][season['key']] = []
+            for item in tmp:
+                url    = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0])
+                title  = ph.clean_html(self.cm.ph.getDataBeetwenMarkers(item, '<a class="episodeName"', '</a>')[1])
+                es     = self.cm.ph.getSearchGroups(url, '''/(s[0-9]+?e[0-9]+?)/''')[0]
+                self.cacheSeasons['dict'][season['key']].append({'good_for_fav': True, 'title': '%s: %s %s' % (cItem['title'], es, title), 'url':url})
+                
+        for season in self.cacheSeasons['keys']:
+            params = dict(cItem)
+            params.update({'good_for_fav': False, 'category':nextCategory, 'title':season['title'], 's_key':season['key']})
+            self.addDir(params)
+        
+    def listEpisodes(self, cItem):
+        printDBG("FiliserTv.listEpisodes")
+        
+        tab = self.cacheSeasons.get('dict', {}).get(cItem['s_key'], [])
+        for item in tab:
+            params = dict(cItem)
+            params.update(item)
+            self.addVideo(params)
+
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("FiliserTv.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        
+        baseUrl = self.getFullUrl('szukaj?q=' + urllib.quote_plus(searchPattern))
+        sts, data = self.getPage(baseUrl)
+        if not sts: return
+
+        data = ph.findall(data, ('<ul', '>', 'resultList2'), '</ul>', flags=0)
+        for sData in data:
+            sData = ph.findall(sData, ('<li', '>'), '</li>', flags=0)
+            for item in sData:
+                tmp    = item.split('<div class="info">')
+                url    = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0])
+                title  = ph.clean_html(tmp[0].replace('<div class="title_org">', '/'))
+                icon   = self.getFullIconUrl(self.cm.ph.getSearchGroups(item, '''src=['"]([^'^"]+?)['"]''')[0].strip())
+                desc   = ph.clean_html(tmp[-1])
+                params = {'good_for_fav': True, 'title':title, 'url':url, 'icon':icon, 'desc':desc}
+                if '/film/' in url:
+                    self.addVideo(params)
+                elif '/serial/' in url:
+                    params['category'] = 'list_seasons'
+                    self.addDir(params)
+    
+    def getLinksForVideo(self, cItem):
+        printDBG("FiliserTv.getLinksForVideo [%s]" % cItem)
+        urlTab = []
+
+        if len(self.cacheLinks.get(cItem['url'], [])):
+            return self.cacheLinks[cItem['url']]
+
+        sts, data = self.getPage(cItem['url'], self.defaultParams)
+        if not sts: return []
+
+        errorMessage = ph.clean_html(ph.find(data, ('<h2', '>', 'title_block'), '</section>')[1])
+        if '' != errorMessage:  SetIPTVPlayerLastHostError(errorMessage)
+
+        lParams = {}
+        tmp = ph.findall(data, ('<div', '>', ph.check(ph.any, ('"box"',"'box'"))), '</section>', flags=ph.START_S, limits=2)
+        if not tmp: return
+        lParams['code'] = ph.getattr(tmp[0], 'data-code')
+        lParams['code2'] = ph.getattr(tmp[0], 'data-code2')
+        lParams['type'] = ph.getattr(tmp[0], 'id').split('_', 1)[0]
+
+        tmp = ph.findall(tmp[1], ('<h', '>'), ('</h', '>'), flags=0, limits=2)
+        lParams['title1'] = ph.clean_html(tmp[0])
+        lParams['title2'] = ph.clean_html(tmp[-1])
+
+        data = data.split('<div id="links">')
+        if 2 != len(data): return []
+
+        tabs = []
+        tmp = ph.find(data[0], '<div id="video_links"', '<div class="clear">')[1]
+        tmp = re.compile('<[^>]+?data-type\="([^"]+?)"[^>]*?>([^<]+?)<').findall(tmp)
+        for item in tmp:
+            tabs.append({'key':item[0], 'title':ph.clean_html(item[1])})
+
+        if tabs: del data[0]
+
+        for tab in tabs:
+            tmp = ph.find(data[0], 'data-type="%s"' % tab['key'], '</ul>')[1]
+            tmp =  ph.findall(tmp, '<li', '</li>')
+            for item in tmp:
+                url    = strwithmeta(ph.getattr(item, 'data-ref'), {'link_params':lParams})
+                title  = ph.clean_html(item.split('<div class="rightSide">')[0])
+                urlTab.append({'name': '%s: %s' % (tab['title'], title), 'url':url, 'need_resolve':1})
+        
+        self.cacheLinks[cItem['url']] = urlTab
+        return urlTab
+        
+    def getHeaders(self, tries):
+        header = dict(self.HEADER)
+        if tries == 1:
+            return header
+        
+        if self.WaitALittleBit == None:
+            try:
+                tmp = 'ZGVmIHphcmF6YShpbl9hYmMpOg0KICAgIGRlZiByaGV4KGEpOg0KICAgICAgICBoZXhfY2hyID0gJzAxMjM0NTY3ODlhYmNkZWYnDQogICAgICABiID0gZmYoYiwgYywgZCwgYSwgdGFiQlszXSwgMjIsIC0xMDQ0NTI1MzMwKTsN\rZGVmIFdhaXRBTGl0dGxlQml0KHRyaWVzKToNCiAgICBmaXJzdEJ5dGUgPSBbODUsMTA5LDg5LDkxLDQ2LDE3OCwyMTcsMjEzXQ0KICAgIGlwID0gJyVzLiVzLiVzLiVzJyAlIChmaXJzdEJ5dGVbcmFuZGludCgwLCBsZW4oZmlyc3RCeXRlKSldLCByYW5kaW50KDAsIDI0NiksICByYW5kaW50KDAsIDI0NiksICByYW5kaW50KDAsIDI0NikpDQogICAgcmV0dXJuIHsnVXNlci1BZ2VudCc6J01vemlsbGEvNS4wJywnQWNjZXB0JzondGV4dC9odG1sJywnWC1Gb3J3YXJkZWQtRm9yJzppcH0NCg0K'
+                tmp = base64.b64decode(tmp.split('\r')[-1]).replace('\r', '')
+                WaitALittleBit = compile(tmp, '', 'exec')
+                vGlobals = {"__builtins__": None, 'len': len, 'list': list, 'dict':dict, 'randint':randint}
+                vLocals = { 'WaitALittleBit': '' }
+                exec WaitALittleBit in vGlobals, vLocals
+                self.WaitALittleBit = vLocals['WaitALittleBit']
+            except Exception:
+                printExc()
+        try:
+            header.update(self.WaitALittleBit(tries))
+        except Exception:
+            printExc()
+        return header
+        
+    def getSweetCaptchaRespond(self, data):
+        printDBG("FiliserTv.getSweetCaptchaRespond")
+        
+        def _getFullUrl(url):
+            urlPrefix = 'http:'
+            if url.startswith('//'): url = urlPrefix + url
+            return url
+        
+        def n(e, n):
+            a = ""
+            n = urllib.unquote(n)
+            for r in range(len(n)-1, -1, -1):
+                t = n[r]
+                if (t >= "a" and "z" >= t) or (t >= "A" and "Z" >= t):
+                    a += chr(65 + e.find(t) % 26)
+                else:
+                    a += t
+            return a.lower()
+        
+        retData = {}
+        
+        printDBG(data)
+        url = _getFullUrl(self.cm.ph.getSearchGroups(data, '''['"]([^'^"]*?/captcha/[^'^"]*?)['"]''')[0])
+        url += 'mobile=1&_=' + str(int(time() * 1000))
+        
+        sts, data = self.getPage(url)
+        if not sts: return retData
+        
+        printDBG(data)
+        thumbFileTab = []
+        try:
+            data = json_loads(data)
+            imgUrlTab = []
+            for item in data["a"]:
+                imgUrlTab.append(_getFullUrl(n(data['simple_key'], item['src'])))
+            imgUrlTab.append(_getFullUrl(n(data['simple_key'], data['q'])))
+            printDBG(imgUrlTab)
+            
+            errorOccurred = False
+            params = {'maintype': 'image', 'subtypes':['png'], 'check_first_bytes':['\x89\x50\x4E\x47']}
+            for idx in range(len(imgUrlTab)):
+                imgUrl   = imgUrlTab[idx]
+                filePath = GetTmpDir('.iptvplayer_captcha_%s.png' % idx)
+                ret = self.cm.saveWebFile(filePath, imgUrl, params)
+                if not ret.get('sts'):
+                    SetIPTVPlayerLastHostError(_('Fail to get "%s".') % imgUrl)
+                    errorOccurred = True
+                    break
+                thumbFileTab.append(filePath)
+            if not errorOccurred:
+                verify = data['drag']['verify']
+                challenge = data['drag']['challenge']
+                printDBG(thumbFileTab)
+                printDBG("OK")
+                printDBG(verify)
+                printDBG(challenge)
+                
+                retArg = self.sessionEx.waitForFinishOpen(UnCaptchaSweetCaptchaWidget, params={'icon_list':thumbFileTab, 'title':verify, 'challenge':challenge})
+                printDBG('>>>>>>>> Captcha response %r' % (retArg))
+                if retArg is not None and len(retArg) and retArg[0]:
+                    answer = retArg[0]['resp_idx']
+                    printDBG('>>>>>>>> Captcha answer[%s]' % (answer))
+                    retData = {'sckey':data['k'], 'scvalue':data['a'][answer]['hash'][5:15], 'scvalue2':0}
+                else:
+                    retData = None
+        except Exception:
+            printExc()
+        
+        for file in thumbFileTab:
+            rm(file)
+        
+        return retData
+        
+    def getVideoLinks(self, videoUrl):
+        printDBG("FiliserTv.getVideoLinks [%s]" % videoUrl)
+        urlTab = []
+        
+        # mark requested link as used one
+        if len(self.cacheLinks.keys()):
+            key = self.cacheLinks.keys()[0]
+            for idx in range(len(self.cacheLinks[key])):
+                if videoUrl in self.cacheLinks[key][idx]['url']:
+                    if not self.cacheLinks[key][idx]['name'].startswith('*'):
+                        self.cacheLinks[key][idx]['name'] = '*' + self.cacheLinks[key][idx]['name']
+                    break
+        
+        reCaptcha = False
+        if not self.cm.isValidUrl(videoUrl):
+            linkParams = videoUrl.meta['link_params']
+            url = self.getFullUrl('/embed?type=%s&code=%s&code2=%s&salt=%s&title=%s&title2=%s' % (linkParams['type'], linkParams['code'], linkParams['code2'], videoUrl, urllib.quote(linkParams['title1']), urllib.quote(linkParams['title2'])))
+            salt = '%s|%s' % (videoUrl, linkParams)
+            if salt not in FiliserTv.SALT_CACHE:
+                httpParams = dict(self.defaultParams)
+                tries = 0
+                googleCaptcha = False
+                while tries < 6:
+                    reCaptcha = False
+                    
+                    tries += 1
+                    #if tries > 3:
+                    #    rm(self.COOKIE_FILE)
+                    
+                    if tries > 1 and googleCaptcha: httpParams['header'] = self.getHeaders(tries)
+                    sts, data = self.getPage(url, httpParams)
+                    if not sts: return urlTab
+                    
+                    if '/captchaResponse' in data:
+                        googleCaptcha = True
+                        reCaptcha = True
+                        sleep(1)
+                        continue
+                        
+                    if 'sweetcaptcha' in data:
+                        post_data = self.getSweetCaptchaRespond(data)
+                        printDBG(post_data)
+                        
+                        if post_data == None: # cancelled
+                            videoUrl = ''
+                            break
+                        
+                        if post_data == {}: # retry
+                            continue
+                        
+                        httpParams2 = dict(httpParams)
+                        httpParams2['header']['Referer'] = url
+                        sts, data = self.getPage(url, httpParams2, post_data)
+                        
+                        if not sts or 'sweetcaptcha' in data:
+                            continue # wrong answer? -> Another try 
+                        reCaptcha = True
+                        printDBG("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
+                        printDBG(data)
+                        printDBG("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
+                    
+                    videoUrl = self.cm.ph.getSearchGroups(data, '''var\s*url\s*=\s*['"](http[^'^"]+?)['"]''')[0]
+                    videoUrl = videoUrl.replace('#WIDTH', '800').replace('#HEIGHT', '600')
+                    
+                    if self.cm.isValidUrl(videoUrl):
+                        FiliserTv.SALT_CACHE[salt] = base64.b64encode(videoUrl)
+                    
+                    break
+            else:
+                videoUrl = base64.b64decode(FiliserTv.SALT_CACHE[salt])
+        
+        if self.cm.isValidUrl(videoUrl):
+            urlTab = self.up.getVideoLinkExt(videoUrl)
+            
+        if reCaptcha and 0 == len(urlTab):
+            self.sessionEx.waitForFinishOpen(MessageBox, 'Otwórz stronę http://filiser.tv/ w przeglądarce i odtwórz dowolny film potwierdzając, że jesteś człowiekiem.', type = MessageBox.TYPE_ERROR, timeout = 10 )
+        
+        return urlTab
+
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+
+        printDBG( "handleService: || name[%s], category[%s] " % (name, category) )
+        self.currList = []
+
+    #MAIN MENU
+        if name == None:
+            self.listsTab(self.MAIN_CAT_TAB, {'name':'category'})
+        elif 'list_items' == category:
+            idx = self.currItem.get('f_idx', 0)
+            if 0 == idx:
+                self.fillFilters(self.currItem)
+
+            if idx < len(self.filtersTab):
+                self.listFilter(self.currItem)
+            else:
+                self.listItems(self.currItem, 'list_seasons')
+        elif category == 'list_seasons':
+            self.listSeasons(self.currItem, 'list_episodes')
+        elif category == 'list_episodes':
+            self.listEpisodes(self.currItem)
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, FiliserTv(), True, [])
+
+
diff -ruN o/IPTVPlayer/hosts/hostfilmowood.py pc/IPTVPlayer/hosts/hostfilmowood.py
--- o/IPTVPlayer/hosts/hostfilmowood.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostfilmowood.py	2020-05-12 00:07:45.098290929 +0300
@@ -0,0 +1,219 @@
+# -*- coding: utf-8 -*-
+# typical import for a standard host
+###################################################
+# LOCAL import
+###################################################
+# localization library
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+# host main class
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+# tools - write on log, write exception infos and merge dicts 
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, MergeDicts
+# add metadata to url
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+# library for json (instead of standard json.loads and json.dumps) 
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads, dumps as json_dumps
+# library for parsing html
+from Plugins.Extensions.IPTVPlayer.libs import ph
+# read informations in m3u8
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import getDirectM3U8Playlist
+###################################################
+
+# space for importing standand python libraries
+###################################################
+# FOREIGN import
+###################################################
+import re
+import datetime
+import urllib
+###################################################
+
+def gettytul():
+    return 'https://filmowood.com/' # main url of host
+
+class Filmowood(CBaseHostClass):
+ 
+    def __init__(self):
+        # init global variables for this class
+        
+        CBaseHostClass.__init__(self, {'history':'filmowood', 'cookie':'filmowood.cookie'}) # names for history and cookie files in cache
+        
+        # vars default values
+        # various urls
+        self.MAIN_URL = 'https://filmowood.com/'
+
+        # url for default icon
+        self.DEFAULT_ICON_URL = "https://www.siteshotter.com/website-thumbnail/filmowood.com"
+
+        # default header and http params
+        self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')        
+        self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        
+    def getPage(self, url, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        return self.cm.getPage(url, addParams, post_data)
+
+    
+    def getLinksForVideo(self, cItem):  #cItem is the current item selected in menu
+        # mandatory function when you want to play videos, so everytime!
+        printDBG("Filmowood.getLinksForVideo [%s]" % cItem)
+
+        linksTab=[]
+        if 'links_tab' in cItem:
+            for l in cItem['links_tab']:
+                if self.up.checkHostSupport(l['url']) == 1:
+                    linksTab.extend(self.up.getVideoLinkExt(l['url']))
+            
+            return linksTab
+        
+        videoUrl = cItem['url']
+        # if is enough to pass url to urlparser (because is from a known server)
+        # use these functions
+        if self.up.checkHostSupport(videoUrl) == 1:
+            return self.up.getVideoLinkExt(videoUrl)
+        else:
+            printDBG(videoUrl)
+            # do something to find streaming links in page
+            # ....
+            # ....  
+            # ....
+            
+        return linksTab
+
+    
+    def listMainMenu(self, cItem):   
+        printDBG('Filmowood.listMainMenu')
+        MAIN_CAT_TAB = [{'category':'list_items',      'title': _('Movies') , 'url' : self.getFullUrl('/') },
+                        {'category':'list_items',      'title': _('Popular'), 'url' : self.getFullUrl('/popularni-online-filmovi-sa-prevodom') },
+                        {'category':'list_items',      'title': _('Series') , 'url': self.getFullUrl('/online-serije-sa-prevodom') }    ,
+                        {'category':'search',          'title': _('Search'),    'search_item':True, },
+                        {'category':'search_history',  'title': _('Search history'),     }]
+        self.listsTab(MAIN_CAT_TAB, cItem)  
+
+    # here you should add the functions you need to show users list of items (dirs, videos)           
+    def listItems (self, cItem):
+        printDBG('Filmowood.listItems')
+        url = cItem['url']
+                        
+        sts, data = self.getPage(url)
+                        
+        if not sts:
+            return
+        
+        tmp = self.cm.ph.getDataBeetwenMarkers(data, ('<div','>','id="container"') , ('<div', '>', 'nav-previous'), False)[1]
+        if not tmp:
+            tmp = self.cm.ph.getDataBeetwenMarkers(data, '<div id="content" role="main">' , ('<div', '>', 'nav-previous'), False)[1]
+        if not tmp:
+            tmp = self.cm.ph.getDataBeetwenMarkers(data, ('<main','>','main'), ('<div', '>', 'nav-previous'), False)[1]
+        
+        movies = self.cm.ph.getAllItemsBeetwenMarkers(tmp,'<a','</a>')
+        for m in movies:
+            title = self.cleanHtmlStr(m)
+            url = self.cm.ph.getSearchGroups(m, "href=['\"]([^'^\"]+?)['\"]")[0]
+            icon = self.cm.ph.getSearchGroups(m, "src=['\"]([^'^\"]+?)['\"]")[0]
+            params = {'category':'explore_item','title':title, 'icon': icon , 'url': url}
+            printDBG(str(params))
+            self.addDir(params)
+            
+    def exploreItems (self, cItem):
+        printDBG('Filmowood.exploreItem %s' % cItem)
+        url = cItem['url']
+                        
+        sts, data = self.getPage(url)
+                        
+        if not sts:
+            return
+        
+        # check if is a series
+        tmp_seasons = self.cm.ph.getDataBeetwenMarkers(data, '<div class="seasons">' , '<script', False)[1]
+        
+        if tmp_seasons:
+            # it is a series
+            #printDBG(tmp_seasons)
+            tmp_seasons = tmp_seasons.split('<dt>')
+            if len(tmp_seasons)>1:
+                del(tmp_seasons[0])
+            for s in tmp_seasons:
+                s = '<dt>' +s
+                seasonName = self.cm.ph.getDataBeetwenMarkers(data, '<dt>' , '</dt>', False)[1]
+                printDBG("Season name: %s" % seasonName)
+                eps = self.cm.ph.getAllItemsBeetwenMarkers(s,('<dd','>'),'</dd>') 
+                for ep in eps:
+                    printDBG('----------------------')
+                    printDBG(ep)
+                    printDBG('----------------------')
+                    epName = self.cleanHtmlStr(ep)
+                    # data-open="ssksk" data-very="sjsjs" data-only="sssh"
+                    linksTab = []
+                    video_id_openload = self.cm.ph.getSearchGroups(ep, "data-open=['\"]([^'^\"]+?)['\"]")[0]
+                    
+                    video_id_verystream = self.cm.ph.getSearchGroups(ep, "data-very=['\"]([^'^\"]+?)['\"]")[0]
+                    
+                    video_id_onlystream = self.cm.ph.getSearchGroups(ep, "data-only=['\"]([^'^\"]+?)['\"]")[0]
+                    if video_id_onlystream:
+                        url_onlystream="https://onlystream.tv/e/%s" % video_id_onlystream
+                        linksTab.append({'name':'Onlystream', 'url': url_onlystream}) 
+                    
+                    title = "%s %s %s" % (cItem['title'], seasonName, epName)
+                    params = MergeDicts(cItem, {'title': title, 'url' : cItem['url'], 'links_tab': linksTab})
+                    printDBG(params)
+                    self.addVideo(params)
+                    
+        else:
+            #it is a movie
+            frames = self.cm.ph.getAllItemsBeetwenMarkers(data,'<iframe','</iframe>') 
+            for f in frames:
+                url = self.cm.ph.getSearchGroups(f, "src=['\"]([^'^\"]+?)['\"]")[0]    
+                printDBG("found url %s" % url)
+
+                if not ('facebook' in url):
+                    params = MergeDicts(cItem, {'url': url})
+                    printDBG(str(params))
+                    self.addVideo(params)
+        
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("Filmowood.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        cItem['url'] = self.getFullUrl('/?s=') + urllib.quote_plus(searchPattern)
+        cItem['category'] = 'search_items'
+        self.listItems(cItem)
+
+                        
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('Filmowood.handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        
+        printDBG( "handleService: >> name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+        #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+        elif category == 'list_items':
+            self.listItems(self.currItem)
+        elif category == 'explore_item':
+            self.exploreItems(self.currItem)       
+        #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+        #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, Filmowood(), True, [])
+    
diff -ruN o/IPTVPlayer/hosts/hostfilmydokumentalneeu.py pc/IPTVPlayer/hosts/hostfilmydokumentalneeu.py
--- o/IPTVPlayer/hosts/hostfilmydokumentalneeu.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostfilmydokumentalneeu.py	2020-05-12 00:07:45.098290929 +0300
@@ -0,0 +1,284 @@
+﻿# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass, CDisplayListItem, RetHost, CUrlItem
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, GetLogoDir, byteify
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+import urllib
+try:    import json
+except Exception: import simplejson as json
+###################################################
+
+
+def gettytul():
+    return 'http://filmydokumentalne.eu/'
+
+class FilmyDokumentalneEU(CBaseHostClass):
+    HTTP_HEADER = {'User-Agent': 'Mozilla/5.0', 'Accept': 'text/html'}
+    MAIN_URL = 'http://www.filmydokumentalne.eu/'
+    DEFAULT_ICON = 'http://www.filmydokumentalne.eu/wp-content/themes/filmy/images/b_logo.png'
+    MAIN_CAT_TAB = [{'category':'list_items',      'title':'Główna',    'url':MAIN_URL,             'icon':DEFAULT_ICON},
+                    {'category':'list_items',      'title':'Polecane',  'url':MAIN_URL+'polecane/', 'icon':DEFAULT_ICON},
+                    {'category':'list_cats',       'title':'Kanały',    'key':'kanaly',             'icon':DEFAULT_ICON},
+                    {'category':'list_cats',       'title':'Kategorie', 'key':'kategorie',          'icon':DEFAULT_ICON},
+                    {'category':'list_cats',       'title':'Serwery',   'key':'serwery',            'icon':DEFAULT_ICON},
+                    {'category':'list_cats',       'title':'Archiwum',  'key':'archiwum',           'icon':DEFAULT_ICON},
+                    {'category':'search',          'title': _('Search'), 'search_item':True, 'icon':DEFAULT_ICON},
+                    {'category':'search_history',  'title': _('Search history'),             'icon':DEFAULT_ICON} ]
+    
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'filmydokumentalne.eu', 'cookie':'filmydokumentalne.eu.cookie'})
+        self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        self.cacheCats = {}
+        
+    def _getFullUrl(self, url, api=True):
+        baseUrl = self.MAIN_URL
+        if 0 < len(url):
+            if url.startswith('//'):
+                url = 'http:' + url
+            elif not url.startswith('http'):
+                url =  baseUrl + url
+        if not baseUrl.startswith('https://'):
+            url = url.replace('https://', 'http://')
+        return url
+        
+    def cleanHtmlStr(self, data):
+        data = data.replace('&nbsp;', ' ')
+        data = data.replace('&nbsp', ' ')
+        return CBaseHostClass.cleanHtmlStr(data)
+
+    def listsTab(self, tab, cItem, type='dir'):
+        printDBG("FilmyDokumentalneEU.listsTab")
+        for item in tab:
+            params = dict(cItem)
+            params.update(item)
+            params['name']  = 'category'
+            if type == 'dir':
+                self.addDir(params)
+            else: self.addVideo(params)
+            
+    def fillCats(self):
+        printDBG("FilmyDokumentalneEU.fillCats")
+        self.cacheCats = {}
+        sts, data = self.cm.getPage(self.MAIN_URL)
+        if not sts: return
+        archData = self.cm.ph.getDataBeetwenMarkers(data, 'Archiwum', 'Strony')[1]
+        data = self.cm.ph.getDataBeetwenMarkers(data, '/kanaly/"', 'Archiwum')[1]
+        for cat in ['kanaly', 'kategorie', 'serwery']:
+            tmp = re.compile('href="([^"]+?/%s/[^"]+?)"[^>]*?>([^<]+?)<''' % cat).findall(data)
+            self.cacheCats[cat] = []
+            for item in tmp:
+                self.cacheCats[cat].append({'url':item[0], 'title':item[1]})
+        cat = 'archiwum'
+        self.cacheCats[cat] = []
+        tmp = re.compile('''href=['"]([^"^']+?)['"][^>]*?>([^<]+?)<''').findall(archData)
+        for item in tmp:
+            self.cacheCats[cat].append({'url':item[0], 'title':item[1]})
+            
+    def listCategories(self, cItem, category):
+        printDBG("FilmyDokumentalneEU.listCategories")
+        key = cItem['key']
+        tab = self.cacheCats.get(key, [])
+        if 0 == len(tab):
+            self.fillCats()
+            tab = self.cacheCats.get(key, [])
+        
+        for item in tab:
+            params = dict(cItem)
+            params.update({'category':category, 'url':item['url'], 'title':item['title']})
+            self.addDir(params)
+    
+    def listItems(self, cItem):
+        printDBG("FilmyDokumentalneEU.listItems")
+        
+        page = cItem.get('page', 1)
+        url = cItem['url'] + '?json=1&page=%d' % page
+        sts, data = self.cm.getPage(url)
+        if not sts: return
+        
+        nextPage = False
+        try:
+            data = byteify(json.loads(data))
+            if page < data.get('pages', 0):
+                nextPage = True
+            else: nextPage = False
+            for item in data['posts']:
+                url = item['url']
+                title = self.cleanHtmlStr(item['title'])
+                desc = self.cleanHtmlStr(item.get('excerpt', ''))
+                icon = item.get('thumbnail', '')
+                if '' == icon: icon = self.DEFAULT_ICON
+                params = dict(cItem)
+                params.update({ 'url':url, 'title':title, 'icon':icon, 'desc':desc})
+                self.addVideo(params)
+        except Exception:
+            printExc()
+            
+        if nextPage:
+            params = dict(cItem)
+            params.update({'title':_("Next page"), 'page':page+1})
+            self.addDir(params)
+    
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("FilmyDokumentalneEU.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        url = self.MAIN_URL + '?s=' + urllib.quote(searchPattern)
+        sts, data = self.cm.getPage(url)
+        if not sts: return
+        #data = self.cm.ph.getDataBeetwenMarkers(data, 'Episodes', '</div>')[1]
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div id="news">', '</div>')
+        for item in data:
+            url   = self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0]
+            title = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(item, '<h1>', '</h1>')[1])
+            desc  = self.cleanHtmlStr(item.split('</h1>')[-1])
+            params = dict(cItem)
+            params.update({'url':url, 'title':title, 'desc':desc})
+            self.addVideo(params)
+    
+    def getLinksForVideo(self, cItem):
+        printDBG("FilmyDokumentalneEU.getLinksForVideo [%s]" % cItem)
+        urlTab = []
+        
+        url = cItem['url'] 
+        if '?' in url: url += '&json=1'
+        else: url += '?json=1'
+        sts, data = self.cm.getPage(url)
+        if not sts: return []
+        try:
+            data = byteify(json.loads(data))['post']['content']
+            videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^'^"]+?)['"]''')[0]
+            tmpTab = self.up.getVideoLinkExt(videoUrl)
+            for item in tmpTab:
+                item['need_resolve'] = 0
+                urlTab.append(item)
+        except Exception:
+            printExc()
+        return urlTab
+        
+    def getFavouriteData(self, cItem):
+        return cItem['url']
+        
+    def getLinksForFavourite(self, fav_data):
+        return self.getLinksForVideo({'url':fav_data})
+        
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||||||||||||||||||||||||||||||||||| name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+    #MAIN MENU
+        if name == None:
+            self.listsTab(self.MAIN_CAT_TAB, {'name':'category'})
+        elif category == 'list_cats':
+            self.listCategories(self.currItem, 'list_items')
+        elif category == 'list_items':
+            self.listItems(self.currItem)
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, FilmyDokumentalneEU(), True, [CDisplayListItem.TYPE_VIDEO, CDisplayListItem.TYPE_AUDIO])
+
+    def getLogoPath(self):
+        return RetHost(RetHost.OK, value = [GetLogoDir('filmydokumentalneeulogo.png')])
+    
+    def getLinksForVideo(self, Index = 0, selItem = None):
+        retCode = RetHost.ERROR
+        retlist = []
+        if not self.isValidIndex(Index): return RetHost(retCode, value=retlist)
+        
+        urlList = self.host.getLinksForVideo(self.host.currList[Index])
+        for item in urlList:
+            retlist.append(CUrlItem(item["name"], item["url"], item['need_resolve']))
+
+        return RetHost(RetHost.OK, value = retlist)
+    # end getLinksForVideo
+    
+    def converItem(self, cItem):
+        hostList = []
+        searchTypesOptions = [] # ustawione alfabetycznie
+        
+        hostLinks = []
+        type = CDisplayListItem.TYPE_UNKNOWN
+        possibleTypesOfSearch = None
+
+        if 'category' == cItem['type']:
+            if cItem.get('search_item', False):
+                type = CDisplayListItem.TYPE_SEARCH
+                possibleTypesOfSearch = searchTypesOptions
+            else:
+                type = CDisplayListItem.TYPE_CATEGORY
+        elif cItem['type'] == 'video':
+            type = CDisplayListItem.TYPE_VIDEO
+        elif 'more' == cItem['type']:
+            type = CDisplayListItem.TYPE_MORE
+        elif 'audio' == cItem['type']:
+            type = CDisplayListItem.TYPE_AUDIO
+            
+        if type in [CDisplayListItem.TYPE_AUDIO, CDisplayListItem.TYPE_VIDEO]:
+            url = cItem.get('url', '')
+            if '' != url:
+                hostLinks.append(CUrlItem("Link", url, 1))
+            
+        title       =  cItem.get('title', '')
+        description =  cItem.get('desc', '')
+        icon        =  cItem.get('icon', '')
+        
+        return CDisplayListItem(name = title,
+                                    description = description,
+                                    type = type,
+                                    urlItems = hostLinks,
+                                    urlSeparateRequest = 1,
+                                    iconimage = icon,
+                                    possibleTypesOfSearch = possibleTypesOfSearch)
+    # end converItem
+
+    def getSearchItemInx(self):
+        try:
+            list = self.host.getCurrList()
+            for i in range( len(list) ):
+                if list[i]['category'] == 'search':
+                    return i
+        except Exception:
+            printDBG('getSearchItemInx EXCEPTION')
+            return -1
+
+    def setSearchPattern(self):
+        try:
+            list = self.host.getCurrList()
+            if 'history' == list[self.currIndex]['name']:
+                pattern = list[self.currIndex]['title']
+                search_type = list[self.currIndex]['search_type']
+                self.host.history.addHistoryItem( pattern, search_type)
+                self.searchPattern = pattern
+                self.searchType = search_type
+        except Exception:
+            printDBG('setSearchPattern EXCEPTION')
+            self.searchPattern = ''
+            self.searchType = ''
+        return
diff -ruN o/IPTVPlayer/hosts/hostfokustv.py pc/IPTVPlayer/hosts/hostfokustv.py
--- o/IPTVPlayer/hosts/hostfokustv.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostfokustv.py	2020-05-12 00:07:45.099290929 +0300
@@ -0,0 +1,353 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, CSelOneLink
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import getDirectM3U8Playlist
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import urlparse
+import re
+try:    import json
+except Exception: import simplejson as json
+from Components.config import config, ConfigSelection, ConfigYesNo, getConfigListEntry
+###################################################
+
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.fokustv_format = ConfigSelection(default = "1280", choices = [("0",  "najgorsza"),
+                                                                                        ("480",  "480x270"),
+                                                                                        ("640",  "640x360"),
+                                                                                        ("860",  "852x480"),
+                                                                                        ("1280", "1280x720"),
+                                                                                        ("1920", "1920x1080"),
+                                                                                        ("999999", "najlepsza")])
+config.plugins.iptvplayer.fokustv_df  = ConfigYesNo(default = True)
+
+def GetConfigList():
+    optionList = []
+    optionList.append(getConfigListEntry("Domyślna jakość wideo",          config.plugins.iptvplayer.fokustv_format))
+    optionList.append(getConfigListEntry("Używaj domyślnej jakości wideo", config.plugins.iptvplayer.fokustv_df))
+    return optionList
+###################################################
+
+def gettytul():
+    return 'http://fokus.tv/'
+
+class FokusTV(CBaseHostClass):
+    
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'fokus.tv', 'cookie':'fokus.tv.cookie'})
+        self.DEFAULT_ICON_URL = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Fokus_TV_logo_2015.jpg'
+        self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+        self.MAIN_URL = 'http://www.fokus.tv/'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html', 'Accept-Encoding':'gzip, deflate', 'Referer':self.getMainUrl(), 'Origin':self.getMainUrl()}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With': 'XMLHttpRequest', 'Accept-Encoding':'gzip, deflate', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8', 'Accept':'application/json, text/javascript, */*; q=0.01'} )
+        
+        self.cacheFilters  = {}
+        self.cacheLinks   = {}
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        
+        self.MAIN_CAT_TAB = [
+                             {'category':'list_vod_cats',         'title': 'VOD',             'url':self.getFullUrl('/vod') },
+                             {'category':'list_cats',             'title': 'Kategorie',       'url':self.getMainUrl() },
+                             #{'category':'search',                'title': _('Search'),              'search_item':True, },
+                             #{'category':'search_history',        'title': _('Search history'),                          } 
+                            ]
+    
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        
+        origBaseUrl = baseUrl
+        baseUrl = self.cm.iriToUri(baseUrl)
+        
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url):
+                return url
+            else:
+                return urlparse.urljoin(baseUrl, url)
+            
+        addParams['cloudflare_params'] = {'domain':self.up.getDomain(baseUrl), 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        return self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+        
+    def listMainMenu(self, cItem):
+        printDBG("FokusTV.listMainMenu")
+        
+        params = dict(cItem)
+        params.update({'good_for_fav':True, 'title': 'Oglądaj Fokus TV', 'url':self.getFullUrl('/player')})
+        self.addVideo(params)
+        self.listsTab(self.MAIN_CAT_TAB, cItem)
+        
+    def listVodCats(self, cItem, nextCategory):
+        printDBG("FokusTV.listVodCats")
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        data = self.cm.ph.getAllItemsBeetwenNodes(data, ('<div', '>', 'title_ftv'), ('<a', '>', 'video_img more'))
+        for item in data:
+            url   = self.cm.ph.getSearchGroups(item, '''(<a[^>]+?video_img more[^>]*?>)''')[0]
+            url   = self.getFullUrl( self.cm.ph.getSearchGroups(url, '''href=['"]([^'^"]+?)['"]''')[0] )
+            title = self.cleanHtmlStr( self.cm.ph.getDataBeetwenReMarkers(item, re.compile('<h'), re.compile('</h[0-9]>'))[1] )
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'category':nextCategory, 'title':title, 'url':url})
+            self.addDir(params)
+        
+    def listCats(self, cItem, nextCategory):
+        printDBG("FokusTV.listCats")
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        data = self.cm.ph.getDataBeetwenReMarkers(data, re.compile('''<div[^>]+?class=['"]cat_'''), re.compile('</div>'))[1]
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+        for item in data:
+            url   = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0] )
+            title = self.cleanHtmlStr( item )
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'category':nextCategory, 'title':title, 'url':url})
+            self.addDir(params)
+    
+    def listChannels(self, cItem, nextCategory):
+        printDBG("FokusTV.listChannels")
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        sp = re.compile('''<div[^>]+?class=['"]channel['"][^>]*?>''')
+        data = self.cm.ph.getDataBeetwenReMarkers(data, sp, re.compile('''<div[^>]+?class=['"]site\-footer['"][^>]*?>'''), False)[1]
+        
+        data = sp.split(data)
+        for item in data:
+            url   = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0] )
+            icon  = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''src=['"]([^'^"]+?)['"]''')[0] )
+            title = self.cleanHtmlStr( self.cm.ph.getDataBeetwenMarkers(item, '<span', '</span>')[1] ) 
+            desc  = self.cleanHtmlStr( self.cm.ph.getDataBeetwenMarkers(item, '<p', '</p>')[1] )
+            params = dict(cItem)
+            params.update({'good_for_fav':True, 'category':nextCategory, 'title':title, 'desc':desc, 'url':url, 'icon':icon})
+            self.addDir(params)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("FokusTV.listItems [%s]" % cItem)
+        
+        page = cItem.get('page', 1)
+        url = cItem['url']
+        
+        if page > 1: url += '/%s' % page
+        
+        sts, data = self.getPage(url)
+        if not sts: return
+        
+        nextPage = self.cm.ph.getSearchGroups(data, '''(<a[^>]+?class="next_ftv"[^>]*?>)''')[0]
+        nextPage = self.cm.ph.getSearchGroups(nextPage, '''href=['"]([^'^"]+?)['"]''')[0]
+        if nextPage != '': nextPage = True
+        else: nextPage = False
+        
+        data = self.cm.ph.getAllItemsBeetwenNodes(data, ('<div', '>', 'box_small_video'), ('</div', '>'))
+        for item in data:
+            url   = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0] )
+            icon  = self.getFullIconUrl( self.cm.ph.getSearchGroups(item, '''src=['"]([^'^"]+?)['"]''')[0] )
+            title = self.cleanHtmlStr( item )
+            params = dict(cItem)
+            params.update({'good_for_fav':True, 'category':nextCategory, 'title':title, 'url':url, 'icon':icon})
+            self.addDir(params)
+        
+        if nextPage and len(self.currList) > 0:
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':_("Next page"), 'page':page+1})
+            self.addDir(params)
+            
+    def listItems2(self, cItem, nextCategory):
+        printDBG("FokusTV.listItems2 [%s]" % cItem)
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        splitReObj = re.compile('''<div[^>]+?box_small_video_image[^>]+?>''')
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(data, ('<div', '>', 'box_small_video'), ('<a', '>', 'class="more"'))
+        for data in tmp:
+            data = splitReObj.split(data)
+            if len(data): del data[0]
+            for item in data:
+                tmp = self.cm.ph.getDataBeetwenReMarkers(item, re.compile('''<a[^>]+?cat_vod'''), re.compile('''</a>'''))[1]
+                catUrl   = self.getFullUrl( self.cm.ph.getSearchGroups(tmp, '''href=['"]([^'^"]+?)['"]''')[0] )
+                catTitle = self.cleanHtmlStr( tmp )
+                
+                tmp = self.cm.ph.getDataBeetwenReMarkers(item, re.compile('''<a[^>]+?video_title'''), re.compile('''</a>'''))[1]
+                url   = self.getFullUrl( self.cm.ph.getSearchGroups(tmp, '''href=['"]([^'^"]+?)['"]''')[0] )
+                icon  = self.getFullIconUrl( self.cm.ph.getSearchGroups(item, '''src=['"]([^'^"]+?)['"]''')[0] )
+                title = self.cleanHtmlStr( tmp )
+                desc  = self.cleanHtmlStr( item.split('</div>', 1)[0] )
+                params = dict(cItem)
+                params.update({'good_for_fav':True, 'category':nextCategory, 'title':title, 'desc':desc, 'url':url, 'cat_url':catUrl, 'cat_title':catTitle, 'icon':icon})
+                self.addDir(params)
+        
+    def exploreItem(self, cItem):
+        printDBG("FokusTV.exploreItem [%s]" % cItem)
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        cItem = dict(cItem)
+        
+        catUrl   = cItem.pop('cat_url', '')
+        catTitle = cItem.pop('cat_title', '')
+        
+        desc = []
+        tmp = self.cm.ph.getDataBeetwenMarkers(data, '<div class="wideo_info', '</div>')[1]
+        tmp = self.cm.ph.getAllItemsBeetwenMarkers(tmp, '<span', '</span>')
+        for item in tmp:
+            t = self.cleanHtmlStr( item )
+            if t != '':
+                pg = self.cm.ph.getSearchGroups(item, '''pg_([0-9]+?)[^0-9]''')[0]
+                if pg != '': pg = ' ' + pg
+                desc.append(t + pg)
+        
+        desc = ' | '.join(desc) + '[/br]' + self.cleanHtmlStr( self.cm.ph.getDataBeetwenMarkers(data, '<p class="desc_opis"', '</p>')[1] )
+        
+        if '<video' in data: haveVideoSource = True
+        else: haveVideoSource = False
+        
+        listVideos = False
+        if 'Sezon' in data:
+            data = ''.join(self.cm.ph.getAllItemsBeetwenNodes(data, ('Sezon', 'box_small'), ('<div', '>', 'class="clear"'), False))
+            listVideos = True
+        elif 'zobacz wszystkie odcinki' in data or ('zobacz wszystko' in data and 'Odcinki' in data):
+            listVideos = True
+        
+        if listVideos:
+            data = self.cm.ph.getAllItemsBeetwenNodes(data, ('<div class="box_small', '>', 'video'), ('</div', '>'))
+            for item in data:
+                url = self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0]
+                if url in ['', '#']: continue
+                icon  = self.getFullIconUrl( self.cm.ph.getSearchGroups(item, '''src=['"]([^'^"]+?)['"]''')[0] )
+                title = self.cleanHtmlStr( item )
+                params = dict(cItem)
+                params.update({'good_for_fav':True, 'title':title, 'url':self.getFullUrl(url), 'icon':icon, 'desc':desc})
+                self.addVideo(params)
+        
+        if haveVideoSource and 0 == len(self.currList):
+            params = dict(cItem)
+            params.update({'desc':desc})
+            self.addVideo(params)
+            if self.cm.isValidUrl(catUrl):
+                params = dict(cItem)
+                params.update({'title':catTitle, 'url':catUrl})
+                self.addDir(params)
+        
+    def getLinksForVideo(self, cItem):
+        printDBG("FokusTV.getLinksForVideo [%s]" % cItem)
+        urlTab = []
+        
+        url = cItem['url']
+        sts, data = self.getPage(url)
+        if not sts: return []
+        
+        if url.endswith('/player'):
+            tab = ['fokustv-p/stream1']
+            data = self.cm.ph.getDataBeetwenMarkers(data, '$.post(', 'function', withMarkers=False)[1]
+            secureUri =  self.cm.ph.getSearchGroups(data, '''(https?://[^'^"]+?)['"]''')[0]
+            streamUri = self.cm.ph.getSearchGroups(data, '''streamUri['"\s]*?:\s*?['"]([^'^"]+?)['"]''')[0]
+            
+            if secureUri == '': secureUri = 'https://api.stream.smcdn.pl/api/secureToken.php'
+            elif streamUri not in tab: tab.insert(0, streamUri)
+            
+            for streamUri in tab:
+                sts, url = self.getPage(secureUri, post_data={'streamUri':streamUri})
+                if not sts: continue
+                
+                if self.cm.isValidUrl(url):
+                    data = getDirectM3U8Playlist(url, checkExt=True, checkContent=True)
+                    for item in data:
+                        item['url'] = strwithmeta(item['url'], {'iptv_proto':'m3u8', 'iptv_livestream':True})
+                        urlTab.append(item)
+        else:
+            data = self.cm.ph.getDataBeetwenMarkers(data, '<video', '</video>')[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<source ', '>', False, False)
+            for item in data:
+                url  = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''')[0].replace('&amp;', '&')
+                if url.startswith('//'):
+                    url = 'http:' + url
+                if not url.startswith('http'):
+                    continue
+                
+                if 'video/mp4' in item:
+                    type = self.cm.ph.getSearchGroups(item, '''type=['"]([^"^']+?)['"]''')[0]
+                    res  = self.cm.ph.getSearchGroups(item, '''res=['"]([^"^']+?)['"]''')[0]
+                    label = self.cm.ph.getSearchGroups(item, '''label=['"]([^"^']+?)['"]''')[0]
+                    if label == '': label = res
+                    if label == '': label = type
+                    url = strwithmeta(url, {'Referer':cItem['url'],  'User-Agent':self.USER_AGENT})
+                    urlTab.append({'name':'{0}'.format(label), 'url':url})
+                elif 'mpegurl' in item:
+                    url = strwithmeta(url, {'iptv_proto':'m3u8', 'Referer':cItem['url'], 'Origin':self.up.getDomain(cItem['url'], False), 'User-Agent':self.USER_AGENT})
+                    tmpTab = getDirectM3U8Playlist(url, checkExt=True, checkContent=True)
+                    for idx in range(len(tmpTab)): tmpTab[idx]['url'].meta['iptv_proto'] = 'm3u8'
+                    urlTab.extend(tmpTab)
+                    
+        if 1 < len(urlTab):
+            maxQuality = int(config.plugins.iptvplayer.fokustv_format.value) + 20
+            def __getLinkQuality( itemLink ):
+                try: return int(itemLink['with'])
+                except Exception: return 0
+            oneLink = CSelOneLink(urlTab, __getLinkQuality, maxQuality)
+            if config.plugins.iptvplayer.fokustv_df.value:
+                urlTab = oneLink.getOneLink()
+            else:
+                urlTab = oneLink.getSortedLinks()
+                        
+        return urlTab
+    
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||||||||||||||||||||||||||||||||||| name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+        elif category == 'list_vod_cats':
+            self.listVodCats(self.currItem, 'list_items')
+        elif category == 'list_cats':
+            self.listCats(self.currItem, 'list_items_2')
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'list_items_2':
+            self.listItems2(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem)
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, FokusTV(), True, [])
+    
+    
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostfrancetv.py pc/IPTVPlayer/hosts/hostfrancetv.py
--- o/IPTVPlayer/hosts/hostfrancetv.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostfrancetv.py	2020-05-12 00:07:45.099290929 +0300
@@ -0,0 +1,549 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, GetIPTVNotify
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, rm, NextDay, PrevDay, MergeDicts
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import getDirectM3U8Playlist
+from Plugins.Extensions.IPTVPlayer.tools.e2ijs import js_execute
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads, dumps as json_dumps
+
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import time, sys
+import urllib
+from datetime import date, datetime, timedelta
+from Components.config import config, ConfigText, getConfigListEntry, ConfigYesNo
+import re
+###################################################
+
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Screens.MessageBox import MessageBox
+
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.francetv_skip_geoblocked = ConfigYesNo(default = True)
+#config.plugins.iptvplayer.francetv_use_x_forwarded_for = ConfigYesNo(default = False)
+
+def GetConfigList():
+    optionList = []
+    optionList.append(getConfigListEntry(_("Skip geo-blocked links:"), config.plugins.iptvplayer.francetv_skip_geoblocked))
+#    optionList.append(getConfigListEntry(_("Bypass geo-blocking for VODs (it may be illegal):"), config.plugins.iptvplayer.francetv_use_x_forwarded_for))
+
+    return optionList
+###################################################
+
+
+def gettytul():
+    return 'https://www.france.tv/'
+
+class FranceTv(CBaseHostClass):
+
+    def __init__(self):
+
+        CBaseHostClass.__init__(self)
+
+        self.MAIN_URL = 'https://www.france.tv'
+        self.API_URL = 'http://api-front.yatta.francetv.fr'
+        self.CHANNEL_URL = self.API_URL + '/standard/publish/channels'
+        self.LIVE_URL = self.API_URL + '/standard/edito/directs'
+        self.CATEGORIES_URL = self.API_URL +'/standard/publish/categories'
+        self.PROGRAM_URL = self.API_URL + '/standard/publish/taxonomies'
+        self.VIDEO_API_URL = 'http://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/'
+        self.GEOLOCATION_API_URL = 'http://geo.francetv.fr/ws/edgescape.json'
+        self.VIDEO_TOKEN_URL = 'http://hdfauthftv-a.akamaihd.net/esi/TA'
+        self.DEFAULT_ICON_URL = 'https://eige.europa.eu/sites/default/files/styles/eige_large/public/images/17.png?itok=Z_FsnSYD'
+        self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')        
+        self.defaultParams = {'header':self.HTTP_HEADER}
+        
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+
+    def readDate(self,timestamp):
+        # This regex removes all colons and all
+        # dashes EXCEPT for the dash indicating + or - utc offset for the timezone
+        conformed_timestamp = re.sub(r"[:]|([-](?!((\d{2}[:]\d{2})|(\d{4}))$))", '', timestamp)
+
+        # Split on the offset to remove it. Use a capture group to keep the delimiter
+        split_timestamp = re.split(r"[+|-]",conformed_timestamp)
+        main_timestamp = split_timestamp[0]
+        if len(split_timestamp) == 3:
+            sign = split_timestamp[1]
+            offset = split_timestamp[2]
+        else:
+            sign = None
+            offset = None
+
+        # Generate the datetime object without the offset at UTC time
+        output_datetime = datetime.strptime(main_timestamp , "%Y%m%dT%H%M%S" )
+        if offset:
+            # Create timedelta based on offset
+            offset_delta = datetime.timedelta(hours=int(sign+offset[:-2]), minutes=int(sign+offset[-2:]))
+            # Offset datetime with timedelta
+            output_datetime = output_datetime + offset_delta
+    
+        return output_datetime
+    
+    def parseMediaData(self, media_data):
+        
+        result = {}
+        
+        if not media_data:
+            return result
+
+        for pattern in media_data.get('patterns') or []:
+            if pattern.get('type') in ('hero','carre') and 'w:400' in pattern.get('urls') or {}:
+                thumb_file = pattern['urls'].get('w:400')
+                if thumb_file:
+                    result['thumb'] = self.MAIN_URL + thumb_file
+            elif pattern.get('type') == 'vignette_16x9' and 'w:1024' in pattern.get('urls') or {}:
+                fanart_file = pattern['urls'].get('w:1024')
+                if fanart_file:
+                    result['fanart'] = self.MAIN_URL + fanart_file
+
+        return result
+
+    def parseTopicData(self, data, artwork = True):
+        metadata = {}
+        info = {}
+        art = {}
+
+        result = (metadata, info, art)
+
+        if not data:
+            return result
+
+        metadata['channel_id'] = data.get('channel')
+
+        topic_id = data.get('url_complete')
+        if topic_id:
+            metadata['id'] = topic_id.replace('/', '_')
+
+        info['title'] = data.get('label')
+        if 'title' in info:
+            info['title'] = info['title'].decode('utf-8').capitalize().encode('utf-8')
+        info['plot'] = data.get('description') or data.get('synopsis') or data.get('base_line') or info.get('title')
+
+        if artwork:
+            art.update(self.parseMediaData(data.get('media_image')))
+
+        return result
+
+    
+    def parseVideoData(self, data, live=False):
+        metadata = {}
+        info = {}
+        art = {}
+
+        if not data:
+            return (metadata, info, art)
+
+        info['mediatype'] = 'video'
+        info['plot'] = data.get('text')
+        info['plotoutline'] = data.get('headline_title')
+        info['director'] = data.get('director')
+        info['year'] = data.get('year') or data.get('production_year')
+        info['season'] = data.get('saison')
+        info['episode'] = data.get('episode')
+
+        presenter = data.get('presenter')
+        if presenter:
+            info['cast'] = [presenter.encode('utf-8')]
+        cast = [d for d in (data.get('casting') or '').encode('utf-8').split(', ') if d]
+        info['cast'] = info.get('cast', []) + cast
+
+        if live:
+            metadata['channel_id'] = data.get('channel')
+
+        for media in data.get('content_has_medias') or []:
+            if media.get('type') == 'main':
+                media_data = media.get('media')
+                if media_data:
+                    metadata['video_id'] = media_data.get('si_direct_id' if live else 'si_id')
+                    metadata['mpaa'] = media_data.get('rating_csa')
+                if not live:
+                    info['duration'] = media_data.get('duration')
+                    
+                begin_date = media_data.get('begin_date')
+                if begin_date:
+                    begin_date = self.readDate(begin_date)
+                    info['date'] = begin_date.strftime('%H:%M - %d/%m/%Y')
+                    info['dateadded'] = begin_date.strftime('%Y-%m-%d %H:%M:%S')
+            elif media.get('type') == 'image':
+                art.update(self.parseMediaData(media.get('media')))
+
+        program_title = None
+        program_subtitle = data.get('title')
+        for taxonomy in data.get('content_has_taxonomys') or []:
+            taxonomy_data = taxonomy.get('taxonomy') or {}
+            if taxonomy.get('type') == 'channel':
+                # A video may have been broadcasted on several channels. Take the first one
+                # available
+                if 'channel_name' not in metadata:
+                    metadata['channel_name'] = taxonomy_data.get('label')
+                if 'channel_id' not in metadata:
+                    metadata['channel_id'] = taxonomy_data.get('url')
+            elif taxonomy.get('type') == 'program':
+                program_title = taxonomy_data.get('label')
+                if not art:
+                    # Use program artwork if TV show artwork is unavailable
+                    art.update(self.parseMediaData(taxonomy_data.get('media_image')))
+            elif taxonomy.get('type') == 'category':
+                if taxonomy_data.get('type') == 'sous_categorie':
+                    info['genre'] = taxonomy_data.get('label')
+                elif 'genre' not in info and taxonomy_data.get('type') == 'categorie':
+                    info['genre'] = taxonomy_data.get('label')
+
+        if 'genre' in info:
+            info['genre'] = info['genre'].decode('utf-8').capitalize().encode('utf-8')
+
+        if not program_title and program_subtitle:
+            program_title = program_subtitle
+        if program_title and program_subtitle and program_title != program_subtitle:
+            program_title += ' - ' + program_subtitle
+
+        if live:
+            info['title'] = metadata.get('channel_name')
+            info['plot'] = program_title
+        else:
+            info['title'] = program_title
+
+        return (metadata, info, art)
+    
+    def listLive(self, cItem):
+        printDBG("FranceTv.listLive")
+        
+        results = []
+        sts, data = self.getPage (self.LIVE_URL)
+        if not sts:
+            return results
+
+        data = json_loads(data)
+        for channel in data['result']:
+            if 'collection' in channel:
+                item = channel['collection'][0]
+                r = self.parseVideoData(item, live=True)
+                printDBG(str(r))        
+                url = self.VIDEO_API_URL + "?idDiffusion=%video_id%"
+                url = url.replace("%video_id%", r[0]['video_id'])
+
+                if r[2] != {}:
+                    params={'title' : r[0]['channel_name'], 'desc': r[1]['plot'], 'icon': r[2]['thumb'], 'url': url, 'category': 'live'}
+                else:
+                    params={'title' : r[0]['channel_name'], 'desc': r[1]['plot'], 'url': url, 'category': 'live'}
+                self.addVideo(params)
+    
+    def listChannels(self, cItem):
+        printDBG("FranceTv.listChannels")
+        
+        sts, data = self.getPage(self.CHANNEL_URL)
+        
+        if not sts:
+            return 
+        data = json_loads(data)
+        
+        for item in data.get('result') or []:
+            r = self.parseTopicData(item, True)
+            printDBG(str(r))        
+            
+            if r[2] != {}:
+                params={'title' : r[1]['title'], 'desc': r[1]['plot'], 'icon': r[2]['thumb'], 'id': r[0]['id'], 'category': 'ch_item'}
+            else:
+                params={'title' : r[1]['title'], 'desc': r[1]['plot'], 'id': r[0]['id'], 'category': 'ch_item'}
+            self.addDir(params)
+
+    def listItems(self,cItem):
+        printDBG("FranceTv.listItems")
+        
+        if cItem['category'] == 'ch_item':
+            url = self.CHANNEL_URL + "/%channel%/categories".replace('%channel%', cItem['id'] )
+            next_cat = 'cat_ch_item'
+            next_all = 'ch_all'
+            parent_id = cItem['id']
+        elif cItem['category'] == 'categories':
+            url = self.CATEGORIES_URL
+            next_cat = 'cat_item'
+            next_all = 'cat_all'
+            parent_id = ''
+        else:
+            return 
+        
+        sts, data = self.getPage(url)
+        
+        if not sts: 
+            return
+        
+        data = json_loads(data)
+        
+        if cItem['category'] == 'ch_item':
+            self.addDir({'title' : _('All videos'), 'icon': cItem['icon'], 'desc': cItem['desc'] , 'id': cItem['id'], 'category': next_all})
+            self.addDir({'title' : _('All programs'), 'icon': cItem['icon'], 'desc': cItem['desc'] , 'id': cItem['id'], 'category': 'ch_show' })
+        
+        for item in data.get('result') or []:
+            r = self.parseTopicData(item, artwork = True)
+            printDBG(str(r))        
+            if r[2] != {}:
+                params={'title' : r[1]['title'], 'desc': r[1]['plot'], 'icon': r[2]['thumb'], 'id': r[0]['id'], 'category': next_cat, 'parent_id': parent_id}
+            else:
+                params={'title' : r[1]['title'], 'desc': r[1]['plot'], 'id': r[0]['id'], 'category': next_cat , 'parent_id': parent_id}
+            self.addDir(params)
+
+    def listSubitems(self, cItem):
+        printDBG("FranceTv.listSubitems")
+        
+        results = []
+        url = self.CATEGORIES_URL +  "/%cat%".replace('%cat%', cItem['id'] )
+
+        sts, data = self.getPage(url)
+        
+        if not sts: 
+            return
+        
+        data = json_loads(data)
+
+        self.addDir({'title' : _('All shows'), 'desc': cItem['desc'] , 'id': cItem['id'], 'category': 'cat_subitem'})
+        self.addDir({'title' : _('All videos'), 'desc': cItem['desc'] , 'id': cItem['id'], 'category': 'cat_all'})
+        
+        for item in data.get('sub') or []:
+            r = self.parseTopicData(item, True)
+            printDBG(str(r))        
+            if r[2] != {}:
+                params={'title' : r[1]['title'], 'desc': r[1]['plot'], 'icon': r[2]['thumb'], 'id': r[0]['id'], 'category': 'cat_subitem'}
+            else:
+                params={'title' : r[1]['title'], 'desc': r[1]['plot'], 'id': r[0]['id'], 'category': 'cat_subitem'}
+            self.addDir(params)
+    
+    def listShows(self, cItem):
+        
+        letter = ''
+        
+        if cItem['category'] == 'ch_show_letter':
+            letter = cItem['name']
+            url = self.CHANNEL_URL + '/{0}/programs'.format(cItem['id'])
+        elif cItem['category'] == 'cat_subitem':
+            url = self.CATEGORIES_URL + '/{0}/programs'.format(cItem['id'])
+            self.addDir({'title' : _('All videos'), 'desc': cItem['desc'] , 'id': cItem['id'], 'category': 'cat_all'})
+
+        elif cItem['category'] == 'cat_ch_item':
+            url = self.CATEGORIES_URL + "/{0}/programs/{1}".format(cItem['id'], cItem['parent_id'])
+        else:
+            return 
+
+        url = url + '?sort=title&filter=with-no-vod,only-visible'
+        
+        sts, data = self.getPage(url)
+        
+        if not sts:
+            return 
+
+        data = json_loads(data)
+        
+        for item in data.get('result') or []:
+            r = self.parseTopicData(item, True)
+            
+            title = r[1]['title']
+            if (len(letter)>0 and ((letter == title[:1]) or (letter == '0-9' and title[:1].isdigit()))) or (letter == ''):
+            
+                printDBG(str(r))        
+
+                if r[2] != {}:
+                    params={'title' : title, 'desc': r[1]['plot'], 'icon': r[2]['thumb'], 'id': r[0]['id'], 'category': 'show'}
+                else:
+                    params={'title' : title, 'desc': r[1]['plot'], 'id': r[0]['id'], 'category': 'show'}
+                self.addDir(params)
+           
+    def listVideos(self, cItem):
+        printDBG("FranceTv.listVideos")
+        
+        results = []
+        
+        #if cItem['category'] == 'cat_subitem':
+        #    url = self.CATEGORIES_URL + "/%cat%/contents?sort=begin_date:desc&size=15&page={0}&filter=with-no-vod,only-visible".format(page).replace('%cat%', cItem['id'])
+        if cItem['category'] == 'show':
+            page = 0
+            url = self.PROGRAM_URL + "/%show%/contents?sort=begin_date:desc&size=15&page=0&filter=with-no-vod,only-visible".replace('%show%', cItem['id'])
+            next_cat = 'show_next'
+        elif cItem['category'] == 'show_next':
+            page = cItem['page']
+            url = self.PROGRAM_URL + "/%show%/contents?sort=begin_date:desc&size=15&page={0}&filter=with-no-vod,only-visible".format(page).replace('%show%', cItem['id'])
+            next_cat = 'show_next'
+        elif cItem['category'] == 'ch_all':
+            page = 0
+            url = self.CHANNEL_URL + "/%ch%/contents?sort=begin_date:desc&size=15&page=0&filter=with-no-vod,only-visible".replace('%ch%', cItem['id'])
+            next_cat = 'ch_all_next'
+        elif cItem['category'] == 'ch_all_next':
+            page = cItem['page']
+            url = self.CHANNEL_URL + "/%ch%/contents?sort=begin_date:desc&size=15&page={0}&filter=with-no-vod,only-visible".format(page).replace('%ch%', cItem['id'])
+            next_cat = 'ch_all_next'
+        elif cItem['category'] == 'cat_all':
+            page = 0
+            url = self.CATEGORIES_URL + "/%cat%/contents?sort=begin_date:desc&size=15&page=0&filter=with-no-vod,only-visible".replace('%cat%', cItem['id'])
+            next_cat = 'cat_all_next'
+        elif cItem['category'] == 'cat_all_next':
+            page = cItem['page']
+            url = self.CATEGORIES_URL + "/%cat%/contents?sort=begin_date:desc&size=15&page={0}&filter=with-no-vod,only-visible".format(page).replace('%cat%', cItem['id'])
+            next_cat = 'cat_all_next'
+        else:
+            return 
+
+        sts, data = self.getPage(url)
+        
+        if not sts:
+            return results
+
+        data = json_loads(data)
+        
+        for item in data.get('result') or []:
+            r = self.parseVideoData(item)
+            printDBG(str(r))        
+            url = self.VIDEO_API_URL + "?idDiffusion=%video_id%"
+            url = url.replace("%video_id%", r[0]['video_id'])
+            
+            duration = timedelta(seconds = r[1]['duration'])
+            desc =  _('Duration: {0}').format(str(duration)) +  ' | ' + _('Added: {0}').format(r[1]['date']) 
+
+            if r[1]['plot'] != None:
+                desc = desc + '\n' + r[1]['plot'] 
+            
+            if r[2] != {}:
+                params={'title' : r[1]['title'], 'desc': desc , 'icon': r[2]['thumb'], 'url': url, 'category': 'video'}
+            else:
+                params={'title' : r[1]['title'], 'desc': desc,  'url': url, 'category': 'video'}
+            self.addVideo(params)
+
+        
+        if data.get('cursor'):
+            if data['cursor'].get('next'):
+                self.addMore({'category':  next_cat , 'title': _('Next page'), 'page': (page + 1) , 'id' : cItem['id']})
+
+
+    def listAZ(self,cItem):
+        printDBG("FranceTv.listAZ")
+
+        if cItem['category'] == 'ch_show':
+            next_cat = 'ch_show_letter'
+            
+        # 0-9
+        self.addDir(MergeDicts(cItem, {'category': next_cat, 'title': "0-9" , 'name': "0-9" } ))              
+        
+        #a-z
+        for i in range(26):
+            self.addDir(MergeDicts(cItem, {'category': next_cat, 'title': chr(ord('A')+i) , 'name': chr(ord('A')+i)} ))              
+            
+        
+        
+    def listMainMenu(self, cItem):
+        printDBG("FranceTv.listMainMenu")
+        MAIN_CAT_TAB = [{'category':'channels', 'title': _('Channels')},
+                        {'category':'categories', 'title': _('Categories')},
+                        {'category':'live', 'title': _('Live')}]  
+        self.listsTab(MAIN_CAT_TAB, cItem)  
+        
+    def getLinksForVideo(self, cItem):
+        printDBG("FranceTv.getLinksForVideo [%s]" % cItem)
+        
+        linksTab = []
+        
+        if cItem['category'] == 'video':
+            sts, data = self.getPage(cItem['url'])
+            
+            if not sts: 
+                return
+            
+            data = json_loads(data)
+            
+            v_links=[]
+            v_geoblock_links=[]    
+            
+            for v in data['videos']:
+                # check video format 
+                video_format = v.get('format')
+                if video_format in ("hls_v1_os","hls_v5_os"):
+                    # check georestricted streams
+                    countries = v.get('geoblocage')
+                    if countries:
+                        geoblock = True
+                    else:
+                        geoblock = False
+                    
+                    # check times
+                    now = time.time()
+                    for interval in v.get('plages_ouverture') or []:
+                        if ((interval.get('debut') or 0) <= now ) and (now <= (interval.get('fin') or sys.maxsize)):
+                            video_url = self.VIDEO_TOKEN_URL + '?' + urllib.urlencode({'json':'0', 'url': v.get('url')})
+                            sts, data = self.getPage(video_url)
+                            if not sts: 
+                                continue
+
+                            real_url = data
+                            if geoblock:
+                                v_geoblock_links.append({'url' : v.get('url'), 'real_url': real_url, 'geoblock' : geoblock})
+                            else:
+                                v_links.append({'url' : v.get('url'), 'real_url': real_url, 'geoblock' : geoblock})
+                
+                if len(v_links)>0:
+                    for v in v_links: 
+                        #printDBG(str(v))
+                        linksTab.extend(getDirectM3U8Playlist(v['real_url'], checkExt=False, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999))  
+                elif len(v_geoblock_links)>0:
+                    if config.plugins.iptvplayer.francetv_skip_geoblocked == True :
+                        msg = _('There are some geoblocked links. If you want to use them, change option in the host configuration, available under blue button.' )
+                        self.sessionEx.waitForFinishOpen(MessageBox, msg, type=MessageBox.TYPE_INFO, timeout = 5)
+                    else:
+                        for v in v_geoblock_links:            
+                            #printDBG(str(v))
+                            linksTab.extend(getDirectM3U8Playlist(v['real_url'] , checkExt=False, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999))  
+        
+        return linksTab
+        
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        self.informAboutGeoBlockingIfNeeded('FR')
+        
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||| name[%s], category[%s] " % (name, category) )
+        self.cacheLinks = {}
+        self.currList = []
+        
+        #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+        elif category == 'live':
+            self.listLive(self.currItem)
+        elif category == 'channels':
+            self.listChannels(self.currItem)
+        elif category in ('categories', 'ch_item'):
+            self.listItems(self.currItem)
+        elif category == 'cat_item':
+            self.listSubitems(self.currItem)
+        elif category in ('ch_show', 'cat_show'):
+            self.listAZ(self.currItem)
+        elif category in  ('ch_show_letter', 'cat_ch_item', 'cat_subitem', 'cat_show'):
+            self.listShows(self.currItem)
+        elif category in ('ch_all', 'ch_all_next', 'show', 'show_next', 'cat_all', 'cat_all_next'):
+            self.listVideos(self.currItem)
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, FranceTv(), True, [])
+    
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostkinomanco.py pc/IPTVPlayer/hosts/hostkinomanco.py
--- o/IPTVPlayer/hosts/hostkinomanco.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostkinomanco.py	2020-05-12 00:07:45.099290929 +0300
@@ -0,0 +1,858 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, SetIPTVPlayerLastHostError
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, rm, GetTmpDir, GetDefaultLang, \
+                                                          DaysInMonth, NextMonth, PrevMonth, NextDay, PrevDay
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import urlparse
+import urllib
+import datetime
+from copy import deepcopy
+from Components.config import config, ConfigYesNo, ConfigText, getConfigListEntry
+###################################################
+
+
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvmultipleinputbox import IPTVMultipleInputBox
+from Screens.MessageBox import MessageBox
+###################################################
+
+###################################################
+# Config options for HOST
+###################################################
+#config.plugins.iptvplayer.kinomanco_vip_only = ConfigYesNo(default=False)
+config.plugins.iptvplayer.kinomanco_login    = ConfigText(default = "", fixed_size = False)
+config.plugins.iptvplayer.kinomanco_password = ConfigText(default = "", fixed_size = False)
+
+def GetConfigList():
+    optionList = []
+    #optionList.append(getConfigListEntry(_("VIP only"), config.plugins.iptvplayer.kinomanco_vip_only))
+    optionList.append(getConfigListEntry(_("e-mail")+":", config.plugins.iptvplayer.kinomanco_login))
+    optionList.append(getConfigListEntry(_("password")+":", config.plugins.iptvplayer.kinomanco_password))
+    return optionList
+###################################################
+
+def gettytul():
+    return 'https://kinoman.co/'
+
+class KinomanCO(CBaseHostClass):
+    CAPTCHA_CHALLENGE=''
+    CAPTCHA_HASHKEY=''
+    
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'kinoman.co', 'cookie':'kinoman.co.cookie'})
+        self.DEFAULT_ICON_URL = 'http://i2.wp.com/vodnews.pl/wp-content/uploads/2016/12/film-1594734_1920.jpg?resize=780%2C405' #'http://g1.pcworld.pl/news/thumbnails/2/7/274244_adaptiveresize_370x208.jpg'
+        self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html', 'Accept-Encoding':'gzip, deflate', 'Referer':'https://www.kinoman.co', 'Origin':'https://www.kinoman.co', 'x-captcha-challenge':KinomanCO.CAPTCHA_CHALLENGE, 'x-captcha-hashkey':KinomanCO.CAPTCHA_HASHKEY}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With': 'XMLHttpRequest', 'Accept-Encoding':'gzip, deflate', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8', 'Accept':'application/json, text/javascript, */*; q=0.01'} )
+        self.MAIN_URL = 'https://www.kinoman.co/'
+        self.API_URL = 'https://api.kinoman.co/'
+        self.API_CACHE_URL = 'https://cache_api.kinoman.co/'
+        
+        self.translations = {}
+        self.cacheFilters  = {}
+        self.cacheFiltersKeys = []
+        self.cacheLinks   = {}
+        self.cacheSeasons = {}
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        self.MAIN_CAT_TAB = [{'category':'list_filters',          'title': 'Movies',              'f_filters':'f_is_vip,f_years,f_categories,f_rates,f_order', 'f_type':'movie'   },
+                             {'category':'list_movies_premiere',  'title': 'Movies premiere',                                                                  'f_type':'movie'   },
+                             {'category':'list_filters',          'title': 'Series',              'f_filters':'f_is_vip,f_q,f_years,f_rates,f_order',          'f_type':'series'  },
+                             {'category':'list_series_premiere',  'title': 'Series premiere',                                                                  'f_type':'episode' },
+                             {'category':'list_filters',          'title': 'Playlists',           'f_filters':'f_playlists',                                                      },
+                             
+                             {'category':'search',                'title': _('Search'),              'search_item':True,                                                             },
+                             {'category':'search_history',        'title': _('Search history'),                                                                                      } 
+                            ]
+        #{'category':'list_filters',          'title': _('Episodes'),            'f_filters':'f_is_vip,f_years,f_categories,f_rates,f_order', 'f_type':'episode' },
+        #{'category':'list_filters',          'title': _('Others'),              'f_filters':'f_is_vip,f_years,f_categories,f_rates,f_order', 'f_type':'other'   },
+        #{'category':'list_actors',           'title': 'Actors',                                                                              'f_type':'person'  },
+        #{'category':'list_filters',          'title': 'Episodes',               'f_filters':'f_years,f_categories,f_rates,f_order',          'f_type':'episode' },
+        
+        self.login = ''
+        self.password = ''
+        self.loggedIn = None
+        self.logginInfo = '' 
+        self.isVip = False
+    
+    def cleanHtmlStr(self, txt):
+        txt = CBaseHostClass.cleanHtmlStr(txt)
+        try: txt = txt.decode('string-escape')
+        except Exception: pass
+        return txt
+    
+    def getMainUrl(self):
+        if self.urlType == 'api':
+            return self.API_URL 
+        elif self.urlType == 'api_cache':
+            return self.API_CACHE_URL 
+        else:
+            return self.MAIN_URL 
+            
+    def getFullUrl(self, url, type=''):
+        self.urlType = type
+        return CBaseHostClass.getFullUrl(self, url)
+        
+    def _getStr(self, item, key, default=''):
+        if key not in item: val = default
+        if item[key] == None: val = default
+        val = str(item[key])
+        return self._(val)
+        
+    def _(self, txt):
+        return self.translations.get(txt, _(txt))
+    
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        
+        origBaseUrl = baseUrl
+        baseUrl = self.cm.iriToUri(baseUrl)
+        
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url):
+                return url
+            else:
+                return urlparse.urljoin(baseUrl, url)
+            
+        addParams['cloudflare_params'] = {'domain':self.up.getDomain(baseUrl), 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        sts, data = self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+        return sts, data
+    
+    def listMainMenu(self, cItem):
+        if self.translations == {} and 'pl' == GetDefaultLang():
+            while True:
+                url = self.getFullUrl('/api/translate?lang=1', 'api')
+                sts, data = self.getPage(url)
+                if not sts: break
+                try:
+                    data = json_loads(data, '',  baseTypesAsString=True)
+                    for item in data:
+                        self.translations[item['key']] = item['value']
+                except Exception:
+                    printExc()
+                break
+        
+        if self.cacheFilters == {}:
+            url = self.getFullUrl('/api/config?cache=3600', 'api_cache')
+            sts, data = self.getPage(url)
+            if not sts: return
+            try:
+                data = json_loads(data, noneReplacement='', baseTypesAsString=True)
+                
+                key = 'f_is_vip'
+                tab = []
+                for item in [('yes', self._('Only VIP') + ' -> ' + self._('Yes') ), ('no', self._('Only VIP') + ' -> ' + self._('No') )]:
+                    tab.append({key:item[0], 'title':item[1]})
+                if len(tab):
+                    tab.insert(0, {'title':self._('All')})
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                
+                key = 'f_type'
+                tab = []
+                for item in data['types']:
+                    tab.append({key:item, 'title':self.translations.get(item, item)})
+                if len(tab):
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+
+                # fix missing year 2018
+                key = 'f_years'
+                currYear = datetime.datetime.now().year
+                years = []
+                for year in range(currYear, currYear-10, -1):
+                    years.append(str(year))
+                for year in data['years']:
+                    if year not in years:
+                        years.append(year)
+                tab = []
+                for item in years:
+                    tab.append({key:item, 'title':item})
+                if len(tab):
+                    tab.insert(0, {'title':self._('All')})
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                
+                key = 'f_categories'
+                tab = []
+                for item in data['categories']:
+                    tab.append({key:item['slug'], 'title':item['name']})
+                if len(tab):
+                    tab.insert(0, {'title':self._('All')})
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                    
+                key = 'f_rates'
+                tab = []
+                tmp = "9876543210"
+                for idx in range(len(tmp)): #data['rates']:
+                    tab.append({key:','.join(tmp[0:idx+1]), 'title':'%s.0 - 10.0' % tmp[idx]})
+                if len(tab):
+                    tab.insert(0, {'title':self._('All')})
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                
+                key = 'f_order'
+                tab = []
+                for item in data['order']:
+                    tab.append({key:item['display'], 'title':self._getStr(item, 'display')})
+                if len(tab):
+                    tab.insert(0, {'title':_('Default')})
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                    
+                key = 'f_q'
+                tab = []
+                for item in 'ABCDEFGHIJKLMNOPQRSTUWZ':
+                    tab.append({key:item.lower(), 'title':item})
+                if len(tab):
+                    tab.insert(0, {'title':_('Any')})
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                    
+                key = 'f_playlists'
+                tab = []
+                for item in data['playlists']:
+                    params = {'title':self._getStr(item, 'name')}
+                    if len(item.get('related', [])):
+                        subFilters = []
+                        for subItem in item['related']:
+                            subFilters.insert(0,{key:subItem['slug'], 'title':self._getStr(subItem, 'name')})
+                        params.update({'f_sub':subFilters})
+                    else:
+                        params.update({key:item['slug']})
+                    tab.append(params)
+                    
+                if len(tab):
+                    self.cacheFilters[key] = tab
+                    self.cacheFiltersKeys.append(key)
+                
+            except Exception:
+                printExc()
+                return
+        
+        for item in self.MAIN_CAT_TAB:
+            params = dict(item)
+            params['title'] = self._(params['title'])
+            params.update({'name':'category', 'desc':self.logginInfo})
+            self.addDir(params)
+        
+    def listFilters(self, cItem, nextCategory):
+        printDBG("KinomanCO.listFilters")
+        cItem = dict(cItem)
+        
+        filters = cItem.get('f_filters', '').split(',')
+        f_idx = cItem.get('f_idx', 0)
+        
+        if len(cItem.get('f_sub', [])):
+            tab = cItem.pop('f_sub', [])
+        else:
+            if f_idx >= len(filters): return
+            tab = self.cacheFilters.get(filters[f_idx], [])
+            f_idx += 1
+        
+        cItem['f_idx'] = f_idx
+        for item in tab:
+            params = dict(cItem)
+            params.update(item)
+            if 0 == len(item.get('f_sub', [])) and f_idx >= len(filters):
+                params['category'] = nextCategory
+            self.addDir(params)
+    
+    def listSeriesPremiere(self, cItem, nextCategory):
+        printDBG("KinomanCO.listSeriesPremiere [%s]" % cItem)
+        dt = cItem.get('f_date', None)
+        ITEMS_PER_PAGE = 3
+        if dt == None:
+            dt = PrevDay(datetime.date.today())
+            spin = 1
+            nextPage = False
+        else:
+            try:
+                dt = datetime.datetime.strptime(dt, '%Y-%m-%d').date()
+                spin = cItem['f_direction']
+                nextPage = True
+            except Exception:
+                printExc()
+                return
+        
+        dtIt = dt
+        for m in range(ITEMS_PER_PAGE):
+            premiere = []
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'category':nextCategory, 'title':dtIt.strftime("%d-%m-%Y"), 'f_premiere':dtIt.strftime("%Y-%m-%d")})
+            self.addDir(params)
+            dtIt = NextDay(dtIt) if spin == 1 else PrevDay(dtIt)
+                
+        if spin == -1: self.currList.reverse()
+        
+        if nextPage:
+            if spin == -1: title = _('Older')
+            else: title = _('Newer')
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':title, 'f_date': dtIt.strftime('%Y-%m-%d')})
+            self.addDir(params)
+        else:
+            dt = PrevDay(dt)
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':_('Older'), 'f_direction':-1, 'f_date': dt.strftime('%Y-%m-%d')})
+            self.addDir(params)
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':_('Newer'), 'f_direction':1, 'f_date': dtIt.strftime('%Y-%m-%d')})
+            self.addDir(params)
+    
+    def listMoviesPremiere(self, cItem, nextCategory):
+        printDBG("KinomanCO.listMoviesPremiere [%s]" % cItem)
+        dt = cItem.get('f_date', None)
+        ITEMS_PER_PAGE = 3
+        if dt == None:
+            dt = PrevMonth(datetime.date.today())
+            spin = 1
+            nextPage = False
+        else:
+            try:
+                dt = datetime.datetime.strptime(dt, '%Y-%m-%d').date()
+                spin = cItem['f_direction']
+                nextPage = True
+            except Exception:
+                printExc()
+                return
+        
+        dtIt = dt
+        for m in range(ITEMS_PER_PAGE):
+            premiere = []
+            base = dtIt.strftime("%Y-%m-")
+            for d in range(1, DaysInMonth(dtIt)+1, 1):
+                premiere.append(base + str(d).zfill(2))
+            
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'category':nextCategory, 'title':dtIt.strftime("%m/%y"), 'f_premiere':','.join(premiere)})
+            self.addDir(params)
+            
+            dtIt = NextMonth(dtIt) if spin == 1 else PrevMonth(dtIt)
+                
+        if spin == -1: self.currList.reverse()
+        
+        if nextPage:
+            if spin == -1: title = _('Older')
+            else: title = _('Newer')
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':title, 'f_date': dtIt.strftime('%Y-%m-%d')})
+            self.addDir(params)
+        else:
+            dt = PrevMonth(dt)
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':_('Older'), 'f_direction':-1, 'f_date': dt.strftime('%Y-%m-%d')})
+            self.addDir(params)
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':_('Newer'), 'f_direction':1, 'f_date': dtIt.strftime('%Y-%m-%d')})
+            self.addDir(params)
+            
+    def _addItem(self, item, cItem, nextCategory):
+        title = item['name']
+        try: icon  = item['main_image']['path']['cover_big']
+        except Exception: icon = ''
+        type = item['type']
+        url  = item['slug']
+        
+        descTab = []
+        tmp = item['is_new']
+        if tmp == 'True': descTab.append('NEW')
+        
+        tmp = item['is_vip']
+        if tmp == 'True': descTab.append('VIP')
+        
+        tmp = item['year']
+        if tmp != '' and type == 'series': tmp += '-%s' % item.get('year_to', '')
+        if tmp != '': descTab.append(tmp)
+        
+        tmp = self.cm.ph.getSearchGroups(item['duration'], '''PT([0-9]+?)M''')[0]
+        if tmp != '': descTab.append(tmp + ' min')
+        
+        tmp = item['media_rate']['rate']
+        if tmp != '': descTab.append(tmp+'/10')
+        
+        tmp = item.get('categories', '')
+        tmp2 = []
+        if tmp != '':
+            for t in tmp: tmp2.append(t['name'])
+        if len(tmp2): descTab.append(', '.join(tmp2))
+        
+        desc = [' | '.join(descTab), item['description']]
+        desc = '[/br]'.join(desc)
+        
+        if type == 'episode': title = '%s - s%se%s %s' % (self.cleanHtmlStr(item['series']['name']), str(item['season_num']).zfill(2), str(item['episode_num']).zfill(2), title)
+        
+        params = dict(cItem)
+        params.update({'good_for_fav':True, 'f_type':type, 'title':title, 'url':url, 'icon':icon, 'desc':desc})
+        if type == 'episode':
+            self.addVideo(params)
+        else:
+            params['category'] = nextCategory
+            self.addDir(params)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("KinomanCO.listItems [%s]" % cItem)
+        ITEMS_PER_PAGE = 30
+        page = cItem.get('page', 0)
+        
+        query = {'cache':3600, 'page':page+1, 'limit':ITEMS_PER_PAGE, 'offset':page*ITEMS_PER_PAGE}
+        
+        type = cItem.get('f_type', '')
+        if 'person' == type:
+            url = '/api/person?' 
+        else:
+            url = '/api/search?'
+            if type != '': query['types'] = type
+        
+        for key in ['is_vip', 'years', 'categories', 'rates', 'order', 'q', 'playlists', 'premiere']:
+            val = cItem.get('f_%s' % key, '')
+            if val != '': query[key] = val
+        #if config.plugins.iptvplayer.kinomanco_vip_only.value:
+        #    query['is_vip'] = 'yes'
+        
+        url = self.getFullUrl(url + urllib.urlencode(query), 'api_cache')
+        sts, data = self.getPage(url)
+        if not sts: return
+        
+        try:
+            data = json_loads(data, noneReplacement='', baseTypesAsString=True)
+            for item in data['objects']:
+                self._addItem(item, cItem, nextCategory)
+        except Exception:
+            printExc()
+
+        try:
+            nextPage = False
+            if int(data['pagination']['next_page']) > (page + 1):
+                nextPage = True
+        except Exception:
+            printExc()
+        
+        if nextPage:
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'title':_("Next page"), 'page':page+1})
+            self.addDir(params)
+    
+    def listLangVersions(self, cItem, nextCategory):
+        printDBG("KinomanCO.listLangVersions")
+    
+        try:
+            imdbID = cItem['imdb_id']
+            sts, data = self.getPage(self.getFullUrl('/request'), post_data={'mID':imdbID})
+            if not sts: return
+        
+            # type: 0 == cinema, 2 == series, 1 == movies
+            data = json_loads(data)[0]
+            for item in data['languages']:
+                icon = cItem.get('icon', '')
+                cover = self._getStr(data, 'cover')
+                if '/' in cover and not cover.endswith('/'): icon = self.getFullIconUrl(cover)
+                title = self.cleanHtmlStr('%s (%s)' % (data['name'], item['text']))
+                desc = []
+                desc.append(self._getStr(data, 'year'))
+                desc.append('~%s %s' % (self._getStr(data, 'duration'), _('min')))
+                desc.append('%s/10' % (self._getStr(data, 'rating')))
+                desc.append(', '.join(data.get('genres', [])))
+                desc.append(', '.join(data.get('actors', []))[:3])
+                desc.append(', '.join(data.get('directors', [])[:3]))
+                desc = ' | '.join(desc) + '[/br]' + self.cleanHtmlStr(str(data['plot']))
+                params = dict(cItem)
+                params.update({'good_for_fav':True, 'category':nextCategory, 'icon':icon, 'desc':desc, 'title':title, 'item_type_id':data['type'], 'f_lang':item['symbol'].lower(), 'lang':{'id':item['ID'], 'symbol':item['symbol']}})
+                self.addDir(params)
+        except Exception:
+            printExc()
+            
+    def exploreItem(self, cItem, nextCategory):
+        printDBG("KinomanCO.exploreItem")
+        
+        try:
+            type = cItem.get('f_type', '')
+            printDBG('>> type[%s]' % type)
+            url = self.getFullUrl('/api/media?slug=%s&cache=3600' % cItem['url'], 'api_cache')
+            sts, data = self.getPage(url)
+            if not sts: return
+            data = json_loads(data, '', True)
+            if "youtube" == data.get("trailer", {}).get("host", ""):
+                url = 'https://www.youtube.com/watch?v=' +  data['trailer']['host_code']
+                title = self.cleanHtmlStr(data['trailer']['name'])
+                if type == 'episode': title = '%s (%s)' % (self.cleanHtmlStr(data['series']['name']), title)
+                params = dict(cItem)
+                params.pop('f_type')
+                params.update({'good_for_fav':False, 'title':title, 'url':url, 'desc':_('Trailer')})
+                self.addVideo(params)
+            
+            if type in ['movie']:
+                params = dict(cItem)
+                if data['is_vip'] == 'True':
+                    params.update({'with_vip_link':True})
+                self.addVideo(params)
+            elif type == 'series':
+                for item in data['series']['seasons']:
+                    params = dict(cItem)
+                    title = '%s %s (%s)' % (_('Season'), item['season'], self.cleanHtmlStr(item['episode_cnt']))
+                    params.update({'good_for_fav':False, 'category':nextCategory, 'title':title, 's_num':item['season']})
+                    self.addDir(params)
+        except Exception:
+            printExc()
+        
+    def listEpisodes(self, cItem, nextCategory):
+        printDBG("KinomanCO.listEpisodes")
+        
+        try:
+            url = self.getFullUrl('/api/media/season?slug=%s&season=%s&cache=1800' % (cItem['url'], cItem['s_num']), 'api_cache')
+            sts, data = self.getPage(url)
+            if not sts: return
+            data = json_loads(data, '', True)
+            for item in data['episodes']:
+                self._addItem(item['media'], cItem, nextCategory)
+        except Exception:
+            printExc()
+        
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("KinomanCO.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        cItem = dict(cItem)
+        cItem['f_q'] = searchPattern
+        cItem['f_type'] = searchType
+        
+        self.listItems(cItem, 'explore_item')
+        
+    def getLinksForVideo(self, cItem):
+        printDBG("KinomanCO.getLinksForVideo [%s]" % cItem)
+        self.tryTologin()
+        
+        retTab = []
+        if 1 == self.up.checkHostSupport(cItem.get('url', '')):
+            videoUrl = cItem['url'].replace('youtu.be/', 'youtube.com/watch?v=')
+            return self.up.getVideoLinkExt(videoUrl)
+
+        cacheKey = cItem['url']
+        cacheTab = self.cacheLinks.get(cacheKey, [])
+        if len(cacheTab):
+            return cacheTab
+            
+        try:
+            url = self.getFullUrl('/api/link?media_slug=%s' % cItem['url'], 'api')
+            sts, data = self.getPage(url)
+            if not sts: return []
+            data = json_loads(data, '', True)
+            printDBG(data)
+            
+            vipItems = []
+            for item in data:
+                tmp = [item['site_name'], item['type'], item['quality'], item['rate']]
+                if '' != item.get('file_info', ''): 
+                    tmp.append('%sx%s' % (item['file_info']['width'], item['file_info']['height']))
+                name = self.cleanHtmlStr(' | '.join(tmp))
+                if 'True' == item['is_vip']:
+                    vipItems.append({'name':name, 'url':item['code'], 'need_resolve':1})
+                else:
+                    retTab.append({'name':name, 'url':item['code'], 'need_resolve':1})
+            #if cItem.get('with_vip_link', False):
+            #    if True or self.isVip:
+            #        vipItems.extend(retTab)
+            #        retTab = vipItems
+            #    else:
+            #        retTab.extend(vipItems)
+            vipItems.extend(retTab)
+            retTab = vipItems
+                    
+        except Exception:
+            printExc()
+        
+        if len(retTab):
+            self.cacheLinks[cacheKey] = retTab
+        
+        return retTab
+        
+    def getVideoLinks(self, videoUrl):
+        printDBG("KinomanCO.getVideoLinks [%s]" % videoUrl)
+        self.tryTologin()
+        
+        videoUrl = strwithmeta(videoUrl)
+        urlTab = []
+        
+        # mark requested link as used one
+        if len(self.cacheLinks.keys()):
+            for key in self.cacheLinks:
+                for idx in range(len(self.cacheLinks[key])):
+                    if videoUrl in self.cacheLinks[key][idx]['url']:
+                        if not self.cacheLinks[key][idx]['name'].startswith('*'):
+                            self.cacheLinks[key][idx]['name'] = '*' + self.cacheLinks[key][idx]['name']
+                        break
+                        
+        url = self.getFullUrl('/api/link/embed?width=500&height=500', 'api')
+        post_data = '{"code":"%s","secure": 1}' % (videoUrl)
+        videoUrl = ''
+        try:
+            while True:
+                httpParams = dict(self.defaultParams)
+                httpParams.update({'raw_post_data':True, 'ignore_http_code_ranges':[(401,401), (500,500)]})
+                httpParams['header'] = dict(httpParams['header'])
+                httpParams['header']['Content-Type'] = 'application/json; charset=UTF-8'
+                sts, data = self.getPage(url, httpParams, post_data)
+                printDBG(data)
+                if sts:
+                    data = json_loads(data, '', True)
+                    if not isinstance(data, str):
+                        videoUrl = data['link']
+                    elif 'captcha' in data.lower():
+                        sts, data = self.getPage(self.getFullUrl('/api/captcha', 'api'))
+                        if not sts:
+                            SetIPTVPlayerLastHostError(_('Network connection failed.'))
+                            break
+                        data = json_loads(data, '', True)
+                        captchaTitle = self._('Fill captcha')
+                        imgUrl = data['image']
+                        KinomanCO.CAPTCHA_HASHKEY = data['key']
+                        self.defaultParams['header']['x-captcha-hashkey'] = KinomanCO.CAPTCHA_HASHKEY
+                        
+                        if self.cm.isValidUrl(imgUrl):
+                            header = dict(self.HEADER)
+                            header['Accept'] = 'image/png,image/*;q=0.8,*/*;q=0.5'
+                            params = dict(self.defaultParams)
+                            params.update( {'maintype': 'image', 'subtypes':['jpeg', 'png'], 'check_first_bytes':['\xFF\xD8','\xFF\xD9','\x89\x50\x4E\x47'], 'header':header} )
+                            filePath = GetTmpDir('.iptvplayer_captcha.jpg')
+                            rm(filePath)
+                            ret = self.cm.saveWebFile(filePath, imgUrl, params)
+                            if not ret.get('sts'):
+                                SetIPTVPlayerLastHostError(_('Fail to get "%s".') % imgUrl)
+                                return []
+
+                            params = deepcopy(IPTVMultipleInputBox.DEF_PARAMS)
+                            params['accep_label'] = _('Send')
+                            params['title'] = _('Captcha')
+                            params['status_text'] = captchaTitle
+                            params['with_accept_button'] = True
+                            params['list'] = []
+                            item = deepcopy(IPTVMultipleInputBox.DEF_INPUT_PARAMS)
+                            item['label_size'] = (160,75)
+                            item['input_size'] = (480,25)
+                            item['icon_path'] = filePath
+                            item['title'] = _('Answer')
+                            item['input']['text'] = ''
+                            params['list'].append(item)
+                            params['vk_params'] = {'invert_letters_case':True}
+                
+                            ret = 0
+                            retArg = self.sessionEx.waitForFinishOpen(IPTVMultipleInputBox, params)
+                            printDBG(retArg)
+                            if retArg and len(retArg) and retArg[0]:
+                                printDBG(retArg[0])
+                                KinomanCO.CAPTCHA_CHALLENGE = retArg[0][0]
+                                self.defaultParams['header']['x-captcha-challenge'] = KinomanCO.CAPTCHA_CHALLENGE
+                                continue
+                            break
+                    elif 'x-user-token' not in httpParams['header'] and '_user_token' in data:
+                        msg = _('The host %s requires registration. \nPlease fill your login and password in the host configuration. Available under blue button.' % self.getMainUrl())
+                        SetIPTVPlayerLastHostError(msg)
+                    else:
+                        SetIPTVPlayerLastHostError(_('Unknown server response: "%s"') % data)
+                else:
+                    SetIPTVPlayerLastHostError(_('Network connection failed.'))
+                break
+        except Exception:
+            SetIPTVPlayerLastHostError(_('Unknown server response.'))
+            printExc()
+        
+        directLink = False
+        if self.cm.isValidUrl(videoUrl):
+            if 0 == self.up.checkHostSupport(videoUrl):
+                params = dict(self.defaultParams)
+                params.update({'max_data_size':0})
+                sts = self.cm.getPage(videoUrl, params)[0]
+                try:
+                    videoUrl = self.cm.meta['url']
+                    if 'video' in self.cm.meta['content-type']:
+                        directLink = True
+                except Exception:
+                    printExc()
+            if directLink:
+                urlTab.append({'name':'direct_link', 'url':strwithmeta(videoUrl, {})})
+            else:
+                urlTab = self.up.getVideoLinkExt(videoUrl)
+        
+        return urlTab
+        
+    def getArticleContent(self, cItem):
+        printDBG("KinomanCO.getArticleContent [%s]" % cItem)
+        self.tryTologin()
+        retTab = []
+        
+        otherInfo = {}
+        
+        title = ''
+        desc = ''
+        icon = ''
+        try:
+            type = cItem.get('f_type', '')
+            printDBG('> > > > type[%s]' % type)
+            url = self.getFullUrl('/api/media?slug=%s&cache=3600' % cItem['url'], 'api_cache')
+            sts, data = self.getPage(url)
+            if not sts: return []
+            data = json_loads(data, '', True)
+            
+            printDBG(data)
+            
+            title = self.cleanHtmlStr(data['name'])
+            try: icon  = data['main_image']['path']['cover_big']
+            except Exception: icon = ''
+            desc = self.cleanHtmlStr(data.get('description', ''))
+            
+            tmp = data.get('year', '')
+            if tmp != '': otherInfo['year'] = tmp
+            
+            tmp = data.get('premiere', '')
+            if tmp != '': otherInfo['released'] = tmp
+            
+            tmp = self.cm.ph.getSearchGroups(data['duration'], '''PT([0-9]+?)M''')[0]
+            if tmp != '': otherInfo['duration'] = tmp + ' min'
+            
+            tmp = data.get('categories', '')
+            tmp2 = []
+            if tmp != '':
+                for item in tmp: tmp2.append(item['name'])
+            if len(tmp2): otherInfo['categories'] = ', '.join(tmp2)
+            
+            tmp = data.get('original_name', '')
+            if tmp != '': otherInfo['alternate_title'] = self.cleanHtmlStr(tmp)
+            
+            tmp = data['media_rate']['imdb_rate']
+            if tmp != '': otherInfo['imdb_rating'] = '%s/10' % (data['media_rate']['imdb_rate'])
+            
+        except Exception:
+            printExc()
+            
+        if title == '': title = cItem['title']
+        if desc == '':  desc = cItem.get('desc', '')
+        if icon == '':  icon = cItem.get('icon', self.DEFAULT_ICON_URL)
+        
+        return [{'title':self.cleanHtmlStr( title ), 'text': self.cleanHtmlStr( desc ), 'images':[{'title':'', 'url':self.getFullUrl(icon)}], 'other_info':otherInfo}]
+    
+    def tryTologin(self):
+        printDBG('tryTologin start')
+        
+        if self.login == config.plugins.iptvplayer.kinomanco_login.value and \
+           self.password == config.plugins.iptvplayer.kinomanco_password.value:
+           return 
+        
+        self.login = config.plugins.iptvplayer.kinomanco_login.value
+        self.password = config.plugins.iptvplayer.kinomanco_password.value
+        
+        self.defaultParams['header'].pop('x-user-token', None)
+        self.logginInfo = ''
+        self.isVip = False
+        
+        if '' == self.login.strip() or '' == self.password.strip():
+            printDBG('tryTologin wrong login data')
+            self.loggedIn = None
+            return
+            
+        url = self.getFullUrl('/api/user/login', 'api')
+        post_data = '{"password":"%s","login":"%s"}' % (self.password, self.login)
+        httpParams = dict(self.defaultParams)
+        httpParams.update({'raw_post_data':True, 'ignore_http_code_ranges':[(401,401)]})
+        httpParams['header'] = dict(httpParams['header'])
+        httpParams['header']['Content-Type'] = 'application/json; charset=UTF-8'
+        
+        sts, data = self.getPage(url, httpParams, post_data)
+        printDBG(data)
+        if sts:
+            try:
+                data = json_loads(data, '', True)
+                if not isinstance(data, str):
+                    self.defaultParams['header']['x-user-token'] = data['token']
+                    self.loggedIn = True
+                    logginInfo = []
+                    logginInfo.append(self._('Points') + '\t' + data['points'])
+                    logginInfo.append(self._('Vip valid') + '\t' + data['vip_valid'])
+                    logginInfo.append(self._('Vip level') + '\t' + data['vip_level'])
+                    self.logginInfo = '[/br]'.join(logginInfo)
+                    if data['vip_valid'] != '' and data['vip_level'] > 0:
+                        self.isVip = True
+                    return
+                else:
+                    msg = data
+            except Exception:
+                msg = _('Unknown server response.')
+                printExc()
+        else:
+            msg = _('Network connection failed.')
+        
+        self.sessionEx.open(MessageBox, _('Login failed.') + '\n' + (_('Error message "%s".') % msg), type = MessageBox.TYPE_ERROR, timeout = 10)
+        printDBG('tryTologin failed')
+        self.loggedIn = False
+    
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||||||||||||||||||||||||||||||||||| name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+        self.tryTologin()
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+        elif category == 'list_filters':
+            self.listFilters(self.currItem, 'list_items')
+        elif category == 'list_movies_premiere':
+            self.listMoviesPremiere(self.currItem, 'list_items')
+        elif category == 'list_series_premiere':
+            self.listSeriesPremiere(self.currItem, 'list_items')
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem, 'list_episodes')
+        elif category == 'list_episodes':
+            self.listEpisodes(self.currItem, 'explore_item')
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, KinomanCO(), True, [])
+        
+    def getSearchTypes(self):
+        searchTypesOptions = []
+        searchTypesOptions.append((_("Movies"),      "movie"))
+        searchTypesOptions.append((_("Series"),     "series"))
+        searchTypesOptions.append((_("Episodes"),  "episode"))
+        return searchTypesOptions
+        
+    def withArticleContent(self, cItem):
+        if cItem.get('f_type') in ['movie', 'series', 'episode'] and (cItem.get('category') in ['explore_item', 'list_episodes'] or cItem.get('type') in ['video']):
+            return True
+        return False
+    
+    
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostla7it.py pc/IPTVPlayer/hosts/hostla7it.py
--- o/IPTVPlayer/hosts/hostla7it.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostla7it.py	2020-05-12 00:07:45.099290929 +0300
@@ -0,0 +1,353 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, MergeDicts
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import getDirectM3U8Playlist
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+import urllib
+import datetime
+import HTMLParser
+###################################################
+
+
+def gettytul():
+    return 'http://www.la7.it/'
+
+class La7it(CBaseHostClass):
+ 
+    def __init__(self):
+
+        CBaseHostClass.__init__(self)
+        
+        self.MAIN_URL = "http://www.la7.it"
+        
+        self.RIVEDILA7_URL= self.MAIN_URL + "/rivedila7/{0}/{1}"
+        # {0} day number (0 today, 1 yesterday and so on) 
+        # {1} channel code 'la7' or 'la7d'
+
+        self.PROGRAM_URL= self.MAIN_URL + "/tutti-i-programmi"
+        self.LIVE_URL= self.MAIN_URL + "/dirette-tv"
+        self.TG_LA7D_URL = "http://tg.la7.it/listing/tgla7d"
+        
+        self.USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36"      
+        self.defaultParams = { 'header': {'User-Agent': self.USER_AGENT}}
+
+    def getPage(self, url, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        #printDBG(self.defaultParams)
+        return self.cm.getPage(url, addParams, post_data)
+
+    def getFullUrl(self, url):
+        if url == "" : return ""
+        
+        # Add the server to the URL if missing
+        if url.find("://") == -1:
+            if url.startswith("//"):
+                url = "http:" + url
+            elif url.startswith("/"):
+                url = self.MAIN_URL + url
+            else:
+                url = self.MAIN_URL + "/" + url
+        return url
+
+    
+    def getLinksForVideo(self, cItem):
+        printDBG("La7 getLinksForVideo [%s]" % cItem)
+        linksTab=[]
+        
+        if cItem["category"] == 'live' or cItem["category"] == 'epg_item' :
+            url = self.findUrlInPage(cItem["url"])
+            linksTab.extend(getDirectM3U8Playlist(strwithmeta(url, {'User-Agent': self.USER_AGENT }), checkExt=False, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999))  
+            
+        else:
+            printDBG("La7: video form category %s with url %s not handled" % (cItem["category"],cItem["url"]));
+            linksTab.append({'url': cItem["url"], 'name': 'link1'})
+        
+        return linksTab
+
+    def findUrlInPage(self, url):
+        url = self.getFullUrl(url)
+        sts, html = self.getPage(url)
+        if not sts: return ""
+        
+        link_video = re.findall("vS = [\"'](.*?)[\"']", html)
+        if link_video:
+            link_video = link_video[0]
+            printDBG("findUrlInPage.Case 1")
+        else:
+            link_video = re.findall('/content/(.*?).mp4', html)
+            if link_video:
+                link_video = 'https://awsvodpkg.iltrovatore.it/local/hls/,/content/' + link_video[0] + '.mp4.urlset/master.m3u8'
+                printDBG("findUrlInPage.Case 2")
+            else: 
+                link_video = re.findall('m3u8: "(.*?)"', html)
+                if link_video:
+                    link_video = link_video[0]
+                    printDBG("findUrlInPage.Case 3")
+                else:
+                    iframe = re.findall('  <iframe src="(.*?)"', html)
+                    if iframe:
+                        printDBG("findUrlInPage.Case 4")
+                        sts, html2 = self.getPage(iframe[0])
+                        if not sts: 
+                            return ""
+                        link_video = re.findall('/content/(.*?).mp4')
+                        if link_video:
+                            link_video = str("https:") + link_video[0]
+                            
+        printDBG("Found link %s " % str(link_video))
+        return link_video
+        
+
+    def listMainMenu(self, cItem):
+        self.addVideo({'title': 'Diretta Live la7', 'category':'live', 'url': self.LIVE_URL})
+        MAIN_CAT_TAB = [{'category':'tg', 'title': 'Tg e meteo'},
+                        {'category':'rivedila7', 'title': 'Rivedi la7'},
+                        {'category':'rivedila7d', 'title': 'Rivedi la7d'},
+                        {'category':'ondemand', 'title': 'Programmi'}]  
+        self.listsTab(MAIN_CAT_TAB, cItem)
+
+    def listReplayDate (self, cItem, ch='rivedila7'):
+        printDBG("La7 - start replay/EPG section")
+
+        days = ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"]
+        months = ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", 
+        "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre"]
+    
+        epgEndDate = datetime.date.today()
+
+        for n in range(7): 
+            day = epgEndDate - datetime.timedelta(days = n)
+            day_str = days[int(day.strftime("%w"))] + " " + day.strftime("%d") + " " + months[int(day.strftime("%m"))-1]
+            label = 'epg_{0}'.format(n) + ch[6:]
+            printDBG(label)
+            self.addDir(MergeDicts(cItem, {'category': label, 'title': day_str , 'name': day.strftime("%d-%m-%Y")}))              
+    
+    def listEPG (self, cItem):
+        printDBG("La7 - start replay/EPG section - single day")
+        label = cItem["category"]
+        day_number = label[4:5]
+        ch = label[5:]
+        url = self.RIVEDILA7_URL.format(day_number, ch)
+        sts, html = self.getPage(url) 
+        
+        if not sts: return
+        
+        guida_tv = ph.findall(html, "<div id=\"content_guida_tv_rivedi", "<!-- THEME DEBUG -->")   
+        if len(guida_tv)>0:
+            #printDBG(guida_tv[0])
+
+            items=ph.findall(guida_tv[0], '<div id="item', '</div>\r\n                  </div>\r\n')
+            for item in items:
+                t, orario = ph.find(item,"<div class=\"orario\">", "</div>", flags=0)
+                t, desc = ph.find(item,"<div class=\"occhiello\">", "</div>", flags=0)
+                if desc:
+                    desc = self.cleanHtmlStr(desc)
+                
+                # search for icon
+                icon = re.findall("data-background-image=\"(.*?)\"",item)
+                if icon:
+                    icon = icon[0]
+                    if icon.startswith('//'):
+                        icon = 'https:' + icon 
+                #search for url
+                url = re.findall("href=\"(.*?)\"", item)
+                if url:
+                    url = url[0]
+                    cat = 'epg_item'
+                    tc = 'white'
+                else:
+                    url = ' '
+                    desc = "NON DISPONIBILE \n" + desc
+                    cat = 'epg_item_nop'
+                    tc = 'red'
+                    
+                # search for title    
+                title = ph.findall(item, '<h2>', '</h2>')
+                if title:
+                    title = self.cleanHtmlStr(title[0])
+                    title = "{0} {1}".format(orario,title)
+
+                params = MergeDicts(cItem, {'category': cat , 'title': title , 'url': url, 'desc': desc, 'icon': icon, 'text_color': tc })
+                printDBG(str(params))
+                self.addVideo(params)              
+    
+    def listPrograms(self,cItem):
+        printDBG('La7 - start ondemand list')
+        sts, html = self.getPage(self.PROGRAM_URL) 
+        if not sts: return
+        
+        shows={}
+        for i in range(10):
+            shows[str(i)] = []
+        for i in range(26):
+            shows[chr(ord('A')+i)] = []
+        
+        items = re.findall("<a href=\"(.*?)\" data-anchor=\"(.*?)\">(.|\n)*?background-image=\"(.*?)\">((.|\n)*?)</a>", html)
+
+        for item in items:
+            url = item[0]
+            anchor = item[1]
+            icon = self.getFullUrl(item[3])
+            title = self.cleanHtmlStr(item[4])
+            #title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+            params = MergeDicts(cItem, {'category': 'program', 'title': title , 'url': url, 'icon': icon })                
+            printDBG(str(params))
+            shows[anchor].append(params)            
+
+        for i in range(10):
+            letter = str(i)
+            if shows[letter]:
+                params = MergeDicts(cItem, {'category': 'program_list', 'title': letter, 'icon': icon, 'sub_items' : shows[letter] })               
+                printDBG(str(params))
+                self.addDir(params)    
+        
+        for i in range(26):
+            letter = chr(ord('A')+i)
+            if shows[letter]:
+                params = MergeDicts(cItem, {'category': 'program_list', 'title': letter, 'icon': icon, 'sub_items' : shows[letter] })               
+                printDBG(str(params))
+                self.addDir(params)    
+
+    def listProgramsByLetter(self,cItem):
+        printDBG('La7 - start ondemand list by letter')
+        for i in cItem['sub_items']:
+            self.addDir(i)
+                
+    def listTgMenu (self, cItem):
+        printDBG('La7 - start news menu')
+        MAIN_CAT_TAB = [{'category':'program', 'title': 'Tg La7', 'url': '/tgla7'},
+                        {'category':'program', 'title': 'Tg La7d', 'url': self.TG_LA7D_URL },
+                        {'category':'program', 'title': 'Bersaglio mobile', 'url': '/bersaglio-mobile' },
+                        {'category':'program', 'title': 'Coffee-break', 'url': '/coffee-break'},
+                        {'category':'program', 'title': 'Omnibus', 'url': '/omnibus'},
+                        {'category':'program', 'title': 'Meteo La7', 'url': '/meteola7'}]  
+        self.listsTab(MAIN_CAT_TAB, cItem)
+                
+    def showProgram(self, cItem, pagenum=0):
+        printDBG('La7 - start ondemand single program list')
+        url = self.getFullUrl(cItem["url"] + "/rivedila7")
+        
+        sts, html = self.getPage(url) 
+        if not sts: 
+            return
+
+        if pagenum == 0 : 
+            # last episode
+            t, replica = ph.find(html, "<div class=\"ultima_puntata\">", "</div>\r\n                                    </div>", flags=0)
+            if replica:
+                icon = re.findall("background-image=\"(.*?)\"",replica)[0]
+                url = re.findall("<a href=\"(.*?)\"",replica)[0]
+                t, title = ph.find(replica, "<div class=\"title_puntata\">", "</div>", flags=0)
+                t, data = ph.find(replica, "<div class=\"scritta_ultima\">", "</div>", flags=0)
+                data = self.cleanHtmlStr(data)
+                t, desc = ph.find(replica, "<div class=\"occhiello\">", "</div>", flags=0)
+
+                title = title + " (" + data + ")"
+                title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+                desc = HTMLParser.HTMLParser().unescape(desc).encode('utf-8')
+                self.addVideo(MergeDicts(cItem, {'category': 'epg_item', 'title': title , 'url': url, 'icon': icon , 'desc' : desc}))              
+            else:
+                printDBG("la7 - no last episode video box for program '{0}'".format(cItem["title"]))
+        
+            # last week episodes
+            t, settimana = ph.find(html, "> LA SETTIMANA <", "Puntate Cult", flags=0)
+            if not settimana:
+                t, settimana = ph.find(html, "> LA SETTIMANA <", "</body>", flags=0)
+            if settimana:
+                episodi = re.findall("<a.*href=\"(.*?)\">\r\n.*<div class=\"holder-bg\">\r\n.*<div.*-image=\"(.*?)\"((.|\n)*?)</a>", settimana)
+
+                for r in episodi:
+                        url = r[0]
+                        icon = self.getFullUrl(r[1])
+                        t, title = ph.find(r[2], "<div class=\"title\">", "</div>", flags=0)
+                        if title:
+                            title = self.cleanHtmlStr(title)
+                        t, data = ph.find(r[2], "<div class=\"data\">", "</div>", flags=0)
+                        if data:
+                            title = title + " (" + data + ")"
+                        title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+                        self.addVideo(MergeDicts(cItem, {'category': 'epg_item', 'title': title , 'url': url, 'icon': icon }))              
+            else:
+                printDBG("la7 - error searching last week episodes for program '{0}'".format(cItem["title"]))
+        
+        # older episodes
+        url = self.getFullUrl(cItem["url"] + "/rivedila7/?page={0}".format(pagenum))
+        
+        sts, html = self.getPage(url) 
+        if not sts: return
+
+        t, finale = ph.find(html, "Puntate Cult", "</body>", flags=0)
+        repliche = re.findall("<a.*href=\"(.*?)\">\r\n.*<div class=\"holder-bg\">\r\n.*<div.*-image=\"(.*?)\"((.|\n)*?)</a>", finale)
+        
+        for r in repliche:
+                url = r[0]
+                icon = self.getFullUrl(r[1])
+                t, title = ph.find(r[2], "<div class=\"title\">", "</div>", flags=0)
+                if title:
+                    title = self.cleanHtmlStr(title)
+                t, data = ph.find(r[2], "<div class=\"data\">", "</div>", flags=0)
+                if data:
+                    title = title + " (" + data + ")"
+                title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+                self.addVideo(MergeDicts(cItem, {'category': 'epg_item', 'title': title , 'url': url, 'icon': icon }))              
+            
+        # look for next button in page
+        if html.find("<li class=\"pager-next\">") != -1:   
+                pagenum = pagenum + 1
+                self.addMore(MergeDicts(cItem, {'category': 'program_next', 'title': _('Next page'), 'page_number': pagenum}))              
+                
+    
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('La7 handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        self.informAboutGeoBlockingIfNeeded('IT')
+        
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        
+        printDBG( "handleService: >> name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+        #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+        elif category == 'rivedila7' or category == 'rivedila7d':
+            self.listReplayDate(self.currItem, category)
+        elif category[:3] == 'epg':
+            self.listEPG(self.currItem)
+        elif category == 'tg':
+            self.listTgMenu(self.currItem)
+        elif category == 'ondemand':
+            self.listPrograms(self.currItem)
+        elif category == 'program':
+            self.showProgram(self.currItem)
+        elif category == 'program_list':
+            self.listProgramsByLetter(self.currItem)
+        elif category == 'program_next':
+            self.showProgram(self.currItem, self.currItem["page_number"])
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, La7it(), True, [])
+    
diff -ruN o/IPTVPlayer/hosts/hostlookmovieag.py pc/IPTVPlayer/hosts/hostlookmovieag.py
--- o/IPTVPlayer/hosts/hostlookmovieag.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostlookmovieag.py	2020-05-12 00:07:45.099290929 +0300
@@ -0,0 +1,292 @@
+# -*- coding: utf-8 -*-
+
+#
+#
+# @Codermik release, based on @Samsamsam's E2iPlayer public.
+# Released with kind permission of Samsamsam.
+# All code developed by Samsamsam is the property of the Samsamsam and the E2iPlayer project,  
+# all other work is � E2iStream Team, aka Codermik.  TSiPlayer is � Rgysoft, his group can be
+# found here:  https://www.facebook.com/E2TSIPlayer/
+#
+# https://www.facebook.com/e2iStream/
+#
+#
+
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, rm
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs import ph
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+import urllib
+
+def gettytul():
+    return 'https://lookmovie.ag/'
+
+class LookMovieag(CBaseHostClass):
+
+    def __init__(self):
+        printDBG("..:: E2iStream ::..   __init__(self):")
+        CBaseHostClass.__init__(self, {'history':'lookmovie.ag', 'cookie':'lookmovie.ag.cookie'})
+        
+        self.MAIN_URL = 'https://lookmovie.ag'
+
+        self.USER_AGENT = 'Mozilla/5.0'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html', 'Accept-Encoding':'gzip, deflate', 'Referer':self.getMainUrl(), 'Origin':self.getMainUrl()}
+        self.AJAX_HEADER = dict(self.HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With':'XMLHttpRequest', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8'} )
+        
+        self.DEFAULT_ICON_URL = 'https://lookmovie.ag/assets/logo1.png'
+
+        self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}     
+        
+        self.HOST_VER = '1.5 (19/08/2019)'
+
+        self.MAIN_CAT_TAB =     [
+                                    {'category':'movies',         'title': _('Movies'),       'url':self.MAIN_URL, 'desc': '\c00????00 Info: \c00??????Movies\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},
+                                    {'category':'tvseries',       'title': _('TV Series'),    'url':self.MAIN_URL + '/shows/filter?r=&so=', 'desc': '\c00????00 Info: \c00??????TV Series and Episodes\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},
+                                    {'category':'search',   'title': _('Search'), 'desc': '\c00????00 Info: \c00??????Search for Movies\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'search_item':True},
+                                    {'category':'search_history', 'desc': '\c00????00 Info: \c00??????Select from your search history\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'title': _('Search history')} 
+                                ]
+
+        self.MOVIE_SUB_CAT =    [
+                                    {'category':'allmovies',      'title': _('All'),       'url':self.MAIN_URL, 'desc': '\c00????00 Info: \c00??????Show all available movies (no filtering).\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},
+                                    {'category':'latestmovies',   'title': _('Latest Added Movies'),       'url':self.MAIN_URL + '/movies/', 'desc': '\c00????00 Info: \c00??????Show all movies just added.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},
+                                    {'category':'sortbyyear',   'title': _('Filter By Year'),       'url':self.MAIN_URL + '/movies/', 'desc': '\c00????00 Info: \c00??????Show all movies in a chosen year.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},
+                                    {'category':'moviegenres',    'title': _('Genres'),       'url':self.MAIN_URL + '/genres/', 'desc': '\c00????00 Info: \c00??????Browse movies by Genre.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL}                               
+                                ]
+
+        self.GENRE_SUB_CAT =    [
+                                    {'category':'listgenre',    'title': _('Action Movies'),       'url':self.MAIN_URL + '/movies/genre/action', 'desc': '\c00????00 Info: \c00??????Filter by action movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Adventure Movies'),       'url':self.MAIN_URL + '/movies/genre/adventure', 'desc': '\c00????00 Info: \c00??????Filter by adventure movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Animation Movies'),       'url':self.MAIN_URL + '/movies/genre/animation', 'desc': '\c00????00 Info: \c00??????Filter by animation movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Comedy Movies'),       'url':self.MAIN_URL + '/movies/genre/comedy', 'desc': '\c00????00 Info: \c00??????Filter by comedy movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Crime Movies'),       'url':self.MAIN_URL + '/movies/genre/crime', 'desc': '\c00????00 Info: \c00??????Filter by crime movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Drama Movies'),       'url':self.MAIN_URL + '/movies/genre/drama', 'desc': '\c00????00 Info: \c00??????Filter by drama movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Documentary Movies'),       'url':self.MAIN_URL + '/movies/genre/documentary', 'desc': '\c00????00 Info: \c00??????Filter by documentary movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Sci-Fi Movies'),       'url':self.MAIN_URL + '/movies/genre/science-fiction', 'desc': '\c00????00 Info: \c00??????Filter by Sci-Fi movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Family Movies'),       'url':self.MAIN_URL + '/movies/genre/family', 'desc': '\c00????00 Info: \c00??????Filter by action movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('History Movies'),       'url':self.MAIN_URL + '/movies/genre/history', 'desc': '\c00????00 Info: \c00??????Filter by history movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Fantasy Movies'),       'url':self.MAIN_URL + '/movies/genre/fantasy', 'desc': '\c00????00 Info: \c00??????Filter by fantasy movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Horror Movies'),       'url':self.MAIN_URL + '/movies/genre/horror', 'desc': '\c00????00 Info: \c00??????Filter by horror movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Music Movies'),       'url':self.MAIN_URL + '/movies/genre/music', 'desc': '\c00????00 Info: \c00??????Filter by music movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Mystery Movies'),       'url':self.MAIN_URL + '/movies/genre/mystery', 'desc': '\c00????00 Info: \c00??????Filter by mystery movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Romance Movies'),       'url':self.MAIN_URL + '/movies/genre/romance', 'desc': '\c00????00 Info: \c00??????Filter by romance movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Thriller Movies'),       'url':self.MAIN_URL + '/movies/genre/thriller', 'desc': '\c00????00 Info: \c00??????Filter by thriller movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('War Movies'),       'url':self.MAIN_URL + '/movies/genre/war', 'desc': '\c00????00 Info: \c00??????Filter by war movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                    {'category':'listgenre',    'title': _('Western Movies'),       'url':self.MAIN_URL + '/movies/genre/western', 'desc': '\c00????00 Info: \c00??????Filter by western movies.\\n \c00????00Version: \c00??????'+self.HOST_VER+'\\n \c00????00Developer: \c00??????Codermik\\n', 'icon':self.DEFAULT_ICON_URL},                               
+                                ]
+    
+
+    def _getFullUrl(self, url):
+        if 0 < len(url) and not url.startswith('http'):
+            url = self.MAIN_URL + url
+        return url
+
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url):
+                return url
+            else:
+                return urljoin(baseUrl, url)             
+        addParams['cloudflare_params'] = {'domain':self.up.getDomain(baseUrl), 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        return self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+
+    def buildYears(self, cItem):
+        # years 1921 - 2019, newest first
+        year = 2019
+        while year >= 1921:
+            tmpyear = '%s' % year
+            params = dict(cItem)
+            url = 'https://lookmovie.ag/?y[]=%s&r=&so=' % year
+            params.update({'category':'listyears', 'title':tmpyear, 'url':url})
+            self.addDir(params)
+            year-=1
+
+    def buildGenres(self, cItem):
+        printDBG('E2iStream >>>>>> buildGenres!')
+
+    def listEpisodes(self, cItem):
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        block = self.cleanHtmlStr(self.cm.ph.getAllItemsBeetwenNodes(data,'<script>window.route="shows/view";', ('</script>'))[0])
+        block = block.replace('\\','')
+        block = self.cm.ph.getAllItemsBeetwenNodes(block,'{', '}')
+        for episodes in block:
+            if 'id_episode' in episodes:
+                title = self.cm.ph.getAllItemsBeetwenNodes(episodes,'title":"', '",',False)[0]  
+                episodeId = self.cm.ph.getAllItemsBeetwenNodes(episodes,'id_episode\":\"', '\"',False)[0]
+                m3u8Url = 'https://lookmovie.ag/manifests/shows/9C60XF7yiUOfSOXUlkk4jg/4066244082/%s/master.m3u8' % episodeId
+                season = self.cm.ph.getAllItemsBeetwenNodes(episodes,'season":"', '",',False)[0]  
+                episode = self.cm.ph.getAllItemsBeetwenNodes(episodes,'"episode":"', '",',False)[0]
+                desc = self.cm.ph.getAllItemsBeetwenNodes(episodes,'description":"', '",',False)[0]  
+                airing = self.cm.ph.getAllItemsBeetwenNodes(episodes,'air_date":"', '"}',False)[0]
+                title = '%s   \c00????00[Season %s Episode %s]' %(title, season, episode)
+                desc = '\c00????00 Title: \c00??????%s\\n \c00????00Aired: \c00??????%s\\n \c00????00Description: \c00??????%s\\n' %(title, airing, desc)
+                params = dict(cItem) 
+                params.update({'good_for_fav':True, 'title':self.cleanHtmlStr(title), 'url':m3u8Url, 'desc':self.cleanHtmlStr(desc)})
+                self.addVideo(params)
+
+    def listItems(self, cItem):          
+        page = cItem.get('page', 1)        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url']) 
+        tmpurl = self.cm.meta['url']
+        nextPage = ''
+
+        if 'Found 0' in data:
+            printDBG('E2iStream >>>>>> listItems >>>>>>> No results found!')
+        else:
+            try:
+                if 'a class="pagination_next"' in data:
+                    nextPage = self.cm.ph.getAllItemsBeetwenNodes(data, ('a class="pagination_next"', 'ion-arrow-right-b'), ('</a>'))[0]
+                    nextPage = self.MAIN_URL + self.cm.ph.getAllItemsBeetwenNodes(nextPage,'href="//lookmovie.ag/', ('">'),False)[0]
+                block = self.cm.ph.getAllItemsBeetwenNodes(data, ('div class="flex-wrap-movielist"', 'movie-item'), ('<div class="pagination-template"'))[0]
+                block = self.cm.ph.getAllItemsBeetwenNodes(block, ('div class="movie-item', 'movie-item'), ('</h6>'))
+                # site contains "next page" arrow even if we have 1 result, lets patch this otherwise we will have a "Next Page" where its not needed.
+                # For info: website has 40 items per page therefore anything lower than that requires no "next page".
+                if len(block) < 40: nextPage = ''
+                for items in block:
+                    title = self.cm.ph.getAllItemsBeetwenNodes(items,'<div class="mv-item-infor">', ('</h6>'),False)[0]
+                    title = self.cm.ph.getAllItemsBeetwenNodes(title,'">', ('</a>'),False)[0]
+                    title = title.replace(' ', ' ')
+                    self.cleanHtmlStr(data)
+                    year = self.cm.ph.getAllItemsBeetwenNodes(items,'<p class="year">', ('</p>'),False)[0]
+                    if '<div class="quality-tag tooltip">' in items: 
+                        quality = self.cm.ph.getAllItemsBeetwenNodes(items,'<div class="quality-tag tooltip">', ('<span'),False)[0]
+                        if 'HD' in quality: 
+                            quality = 'HD' 
+                            tooltip = 'High Definition. Look Movie brings you this movie in multiple Definitions. 1080p, 720p, 480p, 360p - for all types of connection speeds.  This movie was encoded directly from a Blu-ray disc to 4 variations.'
+                            title += '  \c00????00('+quality+')'
+                    elif '<div class="bad quality-tag tooltip">' in items:
+                        quality = self.cm.ph.getAllItemsBeetwenNodes(items,'<div class="bad quality-tag tooltip">', ('<span'),False)[0]
+                        if 'LQ' in quality: 
+                            quality = 'LQ' 
+                            tooltip = 'Low Quality (Cam?) - Sometimes Look Movie does not update LQ to HQ when a cam version is replaced on the website - its always good practice to check the movie manually. CM'
+                            title += '  \c00????00('+quality+')'
+                    else:
+                        quality = ''
+                        if '/shows/' in tmpurl: tooltip = 'Minimum 720p Quality'
+                        else: tooltip = 'No quality has been specified.'
+                    videoUrl = self.cm.ph.getSearchGroups(items, 'href="([^"]+?)"')[0]
+                    videoUrl = self.MAIN_URL + videoUrl[:0] + videoUrl[1:]  # removing the the double // at the start of the url
+                    imageUrl = self.cm.ph.getSearchGroups(items, 'data-src="([^"]+?)"')[0]
+                    desc = '\c00????00 Title: \c00??????'+title+'\\n \c00????00Year: \c00??????'+year+'\\n \c00????00Description: \c00??????'+tooltip
+                    params = dict(cItem)                    
+                    if '/shows/' in tmpurl: 
+                        params.update({'category':'tvshow', 'title':self.cleanHtmlStr(title), 'url':videoUrl, 'icon':imageUrl, 'desc':self.cleanHtmlStr(desc)})
+                        self.addDir(params)
+                    else: 
+                        params.update({'good_for_fav':True, 'title':self.cleanHtmlStr(title), 'url':videoUrl, 'icon':imageUrl, 'desc':self.cleanHtmlStr(desc)})
+                        self.addVideo(params)
+            except:
+                printDBG('e2iStream >>>>>>>>>>> failed to parse website data - please report!')
+
+        if nextPage != '':
+           params = dict(cItem)
+           params.update({'good_for_fav': False, 'title': _('Next Page'), 'page': cItem.get('page', 1) + 1, 'url': self._getFullUrl(nextPage)})
+           self.addDir(params)
+              
+    def listSearchResult(self, cItem, searchPattern, searchType):   
+        cItem = dict(cItem)
+        if searchType == 'movies': cItem['url'] = self.getFullUrl('/movies/search/?q=') + urllib.quote(searchPattern) 
+        elif searchType == 'tvseries': cItem['url'] = self.getFullUrl('/shows/search/?q=') + urllib.quote(searchPattern)
+        cItem['category'] = 'list_items'
+        self.listItems(cItem)
+
+    def getVideoLinks(self, videoUrl):
+        return  self.up.getVideoLinkExt(videoUrl)
+
+    def getLinksForVideo(self, cItem):
+        urlTab = []
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return []
+        self.setMainUrl(self.cm.meta['url'])           
+        tmpurl = self.cm.meta['url']
+        if '/shows/' in tmpurl:
+            # episodes only have one quality and feed (720p), 
+            # just return the 720p full url.
+            urlTab.append({'name': 'episodeplay', 'url': tmpurl, 'need_resolve': 1})
+        else:
+            movieId = self.cm.ph.getAllItemsBeetwenNodes(data,'window.id_movie=\'', ('\';</script>'),False)[0]  
+            tmpUrl = 'https://lookmovie.ag/manifests/movies/json/%s/1564684248/kSrTkeFjYz3FUOpCjEHiGw/master.m3u8?extClient=true' % movieId
+            sts, tmpData = self.getPage(tmpUrl)
+            videoUrls = self.cm.ph.getAllItemsBeetwenNodes(tmpData,'p":"', ('"'),False)
+            quality = ''
+            avail1080 = False
+            for links in videoUrls:
+                if '1080p' in links:
+                    avail1080 = True
+                    continue
+                if '720p' in links: 
+                    if avail1080:
+                        # option was there for the fake 1080 so it must exist for
+                        # those vip members.  Backup the 720 link and also include
+                        # it once we update 1080p link.
+                        avail1080 = False
+                        tmpUrl = links    # temporarily store the 720p url
+                        links = links.replace("720p", "1080p")
+                        urlTab.append({'name': '1080p Quality', 'url': links, 'need_resolve': 1})
+                        urlTab.append({'name': '720p Quality', 'url': tmpUrl, 'need_resolve': 1})                
+                        continue
+                    else: quality = '720p Quality'
+                elif '480p' in links: quality = '480p Quality'
+                elif '360p' in links: quality = '360p Quality'
+                else: continue            
+                urlTab.append({'name': quality, 'url': links, 'need_resolve': 1})
+        return urlTab
+    
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')   
+        
+        self.currList = []
+        
+        # First Menu    
+        if name == None:
+            self.listsTab(self.MAIN_CAT_TAB, self.currItem)        
+        # movie section
+        elif category == 'movies': self.listsTab(self.MOVIE_SUB_CAT, self.currItem)
+        elif category == 'allmovies': self.listItems(self.currItem)
+        elif category == 'latestmovies': self.listItems(self.currItem)
+        elif category == 'sortbyyear': self.buildYears(self.currItem)
+        elif category == 'listyears': self.listItems(self.currItem)
+        elif category == 'moviegenres': self.listsTab(self.GENRE_SUB_CAT, self.currItem)
+        elif category == 'listgenre': self.listItems(self.currItem)
+        elif category == 'tvseries': self.listItems(self.currItem)
+        elif category == 'tvshow': self.listEpisodes(self.currItem)
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, LookMovieag(), True, favouriteTypes=[]) 
+
+    def getSearchTypes(self):
+        searchTypesOptions = []
+        searchTypesOptions.append((_("Movies"), "movies"))
+        searchTypesOptions.append((_("TV Series"), "tvseries"))
+        return searchTypesOptions
+
diff -ruN o/IPTVPlayer/hosts/hostnaszekinotv.py pc/IPTVPlayer/hosts/hostnaszekinotv.py
--- o/IPTVPlayer/hosts/hostnaszekinotv.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostnaszekinotv.py	2020-05-12 00:07:45.100290928 +0300
@@ -0,0 +1,740 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, SetIPTVPlayerLastHostError
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, rm, GetTmpDir
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import urlparse
+import re
+import urllib
+from copy import deepcopy
+import base64
+from Components.config import config, ConfigText, getConfigListEntry
+###################################################
+
+
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvmultipleinputbox import IPTVMultipleInputBox
+from Screens.MessageBox import MessageBox
+###################################################
+
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.naszekinotv_login    = ConfigText(default = "", fixed_size = False)
+config.plugins.iptvplayer.naszekinotv_password = ConfigText(default = "", fixed_size = False)
+
+def GetConfigList():
+    optionList = []
+    optionList.append(getConfigListEntry(_("login")+":",   config.plugins.iptvplayer.naszekinotv_login))
+    optionList.append(getConfigListEntry(_("password")+":", config.plugins.iptvplayer.naszekinotv_password))
+    return optionList
+###################################################
+
+def gettytul():
+    return 'https://nasze-kino.tv/'
+
+class NaszeKinoTv(CBaseHostClass):
+    
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'nasze-kino.tv.com', 'cookie':'nasze-kino.tv.cookie'})
+        self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+        self.MAIN_URL = 'https://www.nasze-kino.tv/'
+        self.DEFAULT_ICON_URL = 'https://raw.githubusercontent.com/podpis/kodi/master/zips/plugin.video.naszekinotv/icon.png'
+        self.HTTP_HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html', 'Accept-Encoding':'gzip, deflate', 'Referer':self.getMainUrl(), 'Origin':self.getMainUrl()}
+        self.AJAX_HEADER = dict(self.HTTP_HEADER)
+        self.AJAX_HEADER.update( {'X-Requested-With': 'XMLHttpRequest', 'Accept-Encoding':'gzip, deflate', 'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8', 'Accept':'application/json, text/javascript, */*; q=0.01'} )
+        
+        self.cacheLinks    = {}
+        self.defaultParams = {'header':self.HTTP_HEADER, 'with_metadata':True, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        
+        self.cacheSeriesLetter = []
+        self.cacheSetiesByLetter = {}
+        self.cacheFilters = {}
+        self.cacheFiltersKeys = []
+        
+        self.loggedIn = None
+        self.login    = ''
+        self.password = ''
+        
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        origBaseUrl = baseUrl
+        baseUrl = self.cm.iriToUri(baseUrl)
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url): return url
+            else: return urlparse.urljoin(baseUrl, url)
+        addParams['cloudflare_params'] = {'domain':self.up.getDomain(baseUrl), 'cookie_file':self.COOKIE_FILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        return self.cm.getPageCFProtection(baseUrl, addParams, post_data)
+        
+    def getFullIconUrl(self, url, currUrl=None):
+        url = CBaseHostClass.getFullIconUrl(self, url.strip(), currUrl)
+        if url == '': return ''
+        cookieHeader = self.cm.getCookieHeader(self.COOKIE_FILE, ['PHPSESSID', "cf_clearance"])
+        return strwithmeta(url, {'Cookie':cookieHeader, 'User-Agent':self.USER_AGENT})
+        
+    def setMainUrl(self, url):
+        if self.cm.isValidUrl(url):
+            self.MAIN_URL = self.cm.getBaseUrl(url)
+    
+    def listMainMenu(self, cItem):
+        printDBG("NaszeKinoTv.listMainMenu")
+        
+        sts, data = self.getPage(self.getMainUrl())
+        if not sts: return
+        self.setMainUrl(data.meta['url'])
+        
+        MAIN_CAT_TAB = [{'category':'sections',       'title': 'Strona Główna',    'url':self.getMainUrl()}, 
+                        {'category':'movies',         'title': 'Filmy Online',     'url':self.getFullUrl('/filmy-online/')}, 
+                        {'category':'series',         'title': 'Seriale Online',   'url':self.getFullUrl('/seriale-online/')}, 
+                        {'category':'sections',       'title': 'Dla Dzieci',       'url':self.getFullUrl('/dla-dzieci/')}, 
+                        {'category':'raiting',        'title': 'Ranking',          'url':self.getFullUrl('/ranking')}, 
+                        {'category':'search',         'title': _('Search'),        'search_item':True}, 
+                        {'category':'search_history', 'title': _('Search history')},]
+        self.listsTab(MAIN_CAT_TAB, cItem)
+        
+    def _parseSectionItems(self, nextCategory, data):
+        printDBG("NaszeKinoTv._parseSectionItems")
+        retItems = []
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+        for item in data:
+            url = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''')[0])
+            if '/serial' not in url and '/film' not in url: continue
+            icon = self.getFullIconUrl(self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''')[0])
+            title = ''
+            desc = ''
+            tab = []
+            for m in ['title', 'view', 'year', 'info', 'description']:
+                t = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(item, ('<div', '>', m), ('</div', '>'), False)[1])
+                if t == '': continue
+                if m == 'title': title = t
+                elif m == 'description': desc = t
+                else: tab.insert(0, t)
+            if title == '': continue
+            desc = [desc]
+            if len(tab): desc.insert(0, ' | '.join(tab))
+            retItems.append({'name':'category', 'type':'category', 'good_for_fav':True, 'category':nextCategory, 'url':url, 'title':title, 'desc':'[/br]'.join(desc), 'icon':icon})
+        return retItems
+        
+    def listSections(self, cItem, nextCategory1, nextCategory2, skipSubSections=False):
+        printDBG("NaszeKinoTv.exploreItem [%s]" % cItem)
+        page = cItem.get('page', 1)
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        curl = data.meta['url']
+        self.setMainUrl(curl)
+        
+        data = data.split('</footer>', 1)[0]
+        
+        # main section
+        sTitle = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'headline'), ('</div', '>'), False)[1])
+        if sTitle != '':
+            tmp = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'item-list'), ('<div', '>', 'row'), False)[1]
+            tmp = self._parseSectionItems(nextCategory2, tmp)
+            if len(tmp):
+                nextPage = self.cm.ph.getDataBeetwenNodes(data, ('<ul', '>', 'pagination'), ('</ul', '>'), False)[1]
+                nextPage = self.cm.ph.getSearchGroups(nextPage, '''(<a[^>]+?pagenumber=['"]%s['"][^>]*?>)''' % (page + 1))[0]
+                nextPage = self.getFullUrl(self.cm.ph.getSearchGroups(nextPage, '''href=['"]([^"^']+?)['"]''')[0], curl)
+                if nextPage != '':  tmp.append({'name':'category', 'type':'category', 'category':cItem['category'], 'url':nextPage, 'title':_('Next page'), 'page':page+1})
+                self.addDir({'name':'category', 'category':nextCategory1, 'title':sTitle, 'sub_items':tmp})
+        
+        if page == 1 and not skipSubSections:
+            data = self.cm.ph.getAllItemsBeetwenNodes(data, ('<div', '>', 'col-md'), ('<div', '>', '"row"'), False)
+            for tmp in data:
+                sTitle = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(tmp, '<h3', '</h3>')[1])
+                tmp = self._parseSectionItems(nextCategory2, tmp)
+                if len(tmp): self.addDir({'name':'category', 'category':nextCategory1, 'title':sTitle, 'sub_items':tmp})
+            
+    def listSubItems(self, cItem):
+        printDBG("NaszeKinoTv.listSubItems")
+        self.currList = cItem['sub_items']
+        
+    def listMovies(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listMovies [%s]" % cItem)
+        cItem = dict(cItem)
+        cItem['category'] = 'sections'
+        self.listSections(cItem, 'list_sub_items', 'explore_item')
+        self.addDir({'name':'category', 'type':'category', 'category':nextCategory, 'url':cItem['url'], 'title':_('Filters')})
+        
+    def listSeries(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listSeries [%s]" % cItem)
+        self.listSections(cItem, 'list_sub_items', 'explore_item')
+        if 1 == len(self.currList): self.currList[0]['title'] = 'Ostatnio dodane seriale'
+        self.addDir({'name':'category', 'type':'category', 'category':nextCategory, 'url':cItem['url'], 'title':_('A-Z')})
+    
+    def listAZ(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listAZ")
+        self._listLetters(cItem, nextCategory, self.cacheSeriesLetter, self.cacheSetiesByLetter)
+        
+    def listByLetter(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listByLetter")
+        self._listByLetter(cItem, nextCategory, self.cacheSetiesByLetter)
+        
+    def _listLetters(self, cItem, nextCategory, cacheLetter, cacheByLetter):
+        printDBG("NaszeKinoTv._listLetters")
+        
+        if 0 == len(cacheLetter):
+            del cacheLetter[:]
+            cacheByLetter.clear()
+            
+            sts, data = self.getPage(cItem['url'])
+            if not sts: return
+
+            data = self.cm.ph.getDataBeetwenNodes(data, ('<ul', '>', 'series-list'), ('</ul', '>'))[1]
+            data = self.cm.ph.getAllItemsBeetwenNodes(data, ('<a', '>'), ('</a', '>'))
+            for item in data:
+                url = self.getFullUrl( self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''')[0] )
+                if url == '': continue
+                title = self.cleanHtmlStr( item )
+                if title == '': continue
+                letter = url.split('/')[-1]
+                if letter == '': letter = title[0]
+                else: letter = letter[0]
+                letter = letter.decode('utf-8').upper().encode('utf-8')
+                if not letter.decode('utf-8').isalpha(): letter = '#'
+                
+                if letter not in cacheLetter:
+                    cacheLetter.append(letter)
+                    cacheByLetter[letter] = []
+                cacheByLetter[letter].append({'title':title, 'url':url, 'desc':'', 'icon':url + '?fake=need_resolve.jpeg'})
+            
+        for letter in cacheLetter:
+            params = dict(cItem)
+            params.update({'good_for_fav':False, 'category':nextCategory, 'title':letter, 'desc':'', 'f_letter':letter})
+            self.addDir(params)
+    
+    def _listByLetter(self, cItem, nextCategory, cacheByLetter):
+        printDBG("NaszeKinoTv._listByLetter")
+        letter = cItem['f_letter']
+        tab = cacheByLetter[letter]
+        cItem = dict(cItem)
+        cItem.update({'good_for_fav':True, 'category':nextCategory, 'desc':''})
+        self.listsTab(tab, cItem)
+        
+    def _fillCacheFilters(self, cItem):
+        printDBG("NaszeKinoTv._fillCacheFilters")
+        self.cacheFilters = {}
+        self.cacheFiltersKeys = []
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        self.setMainUrl(data.meta['url'])
+        
+        def addFilter(data, marker, baseKey, addAll=True, titleBase=''):
+            key = 'f_' + baseKey
+            self.cacheFilters[key] = []
+            for item in data:
+                value = self.cm.ph.getSearchGroups(item, marker + '''=['"]([^"^']+?)['"]''')[0]
+                title = self.cleanHtmlStr(item)
+                self.cacheFilters[key].append({'title':title, key:value})
+                
+            if len(self.cacheFilters[key]):
+                if addAll: self.cacheFilters[key].insert(0, {'title':_('--All--')})
+                self.cacheFiltersKeys.append(key)
+        
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(data, ('<ul', '>', 'multiple-select'), ('</ul', '>'))
+        for item in tmp:
+            key = self.cm.ph.getSearchGroups(item, '''id=['"]filter\-([^'^"]+?)['"]''')[0]
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item, '<li', '</li>')
+            addFilter(item, 'data\-id', key, True)
+            
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(data, ('<ul', '>', 'single-select'), ('</ul', '>'))
+        for item in tmp:
+            key = self.cm.ph.getSearchGroups(item, '''id=['"]filter\-([^'^"]+?)['"]''')[0]
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item, '<li', '</li>')
+            addFilter(item, 'data\-sort', key, False)
+        
+        printDBG(self.cacheFilters)
+        
+    def listFilters(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listFilters")
+        cItem = dict(cItem)
+        
+        f_idx = cItem.get('f_idx', 0)
+        if f_idx == 0: self._fillCacheFilters(cItem)
+        if f_idx >= len(self.cacheFiltersKeys): return
+        
+        filter = self.cacheFiltersKeys[f_idx]
+        f_idx += 1
+        cItem['f_idx'] = f_idx
+        if f_idx  == len(self.cacheFiltersKeys):
+            cItem['category'] = nextCategory
+        self.listsTab(self.cacheFilters.get(filter, []), cItem)
+        
+    def listItems(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listItems [%s]" % cItem)
+        if 1 == cItem.get('page', 1):
+            filters = []
+            for key in self.cacheFiltersKeys:
+                baseKey = key[2:] # "f_"
+                if key not in cItem: continue
+                if cItem[key].startswith(baseKey): value = cItem[key]
+                else: value = baseKey + ':' + cItem[key]
+                filters.append(value)
+            url = cItem['url']
+            if not url.startswith('/'): url += '/'
+            cItem['url'] = url + '/'.join(filters) + '/'
+        
+        self.listSections(cItem, 'list_sub_items', nextCategory, True)
+        if 1 == len(self.currList): self.listSubItems(self.currList[0])
+        
+    def listRaitingItems(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.listRaitingItems")
+        self.cacheFilters = {}
+        self.cacheFiltersKeys = []
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        self.setMainUrl(data.meta['url'])
+        
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', '"ranking" '), ('<footer', '>'))[1]
+        self.currList = self._parseSectionItems(nextCategory, data)
+
+    def exploreItem(self, cItem, nextCategory):
+        printDBG("NaszeKinoTv.exploreItem [%s]" % cItem)
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        cUrl = data.meta['url']
+        self.setMainUrl(cUrl)
+        
+        desc = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'description'), ('</p', '>'))[1])
+        posterData = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'single-poster'), ('<img', '>'))[1]
+        icon = self.getFullIconUrl(self.cm.ph.getSearchGroups(posterData, '<img[^>]+?src="([^"]+?\.(:?jpe?g|png)(:?\?[^"]+?)?)"')[0], cUrl)
+        
+        tmp = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'trailer'), ('</div', '>'))[1]
+        url = self.getFullUrl(self.cm.ph.getSearchGroups(tmp, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''', 1, True)[0])
+        if url != '':
+            params = dict(cItem)
+            params.update({'good_for_fav':True, 'title':'%s - %s' % (cItem['title'], _('trailer')), 'url':url, 'icon':icon, 'desc':desc})
+            self.addVideo(params)
+            
+        if '/film/' in cUrl:
+            params = dict(cItem)
+            params.update({'type':'video', 'icon':icon, 'desc':desc})
+            self.currList.insert(0, params)
+        else:
+            if 'episode-list' not in data:
+                url = self.getFullUrl(self.cm.ph.getSearchGroups(posterData, '''href=['"]([^'^"]*?serial\-online[^'^"]+?)['"]''')[0])
+                if url != '':
+                    sts, data = self.getPage(url)
+                    if not sts: return
+                elif 'link-to-video' in data:
+                    params = dict(cItem)
+                    params.update({'icon':icon, 'desc':desc})
+                    self.addVideo(params)
+                    return
+            seriesTitle = self.cleanHtmlStr(self.cm.ph.getSearchGroups(data, '''<meta[^>]+?property=['"]og\:title['"][^>]+?content=['"]([^"^']+?)['"]''')[0])
+            if seriesTitle == '': seriesTitle = cItem['title']
+            data = self.cm.ph.getDataBeetwenNodes(data, ('<ul', '>', 'episode-list'), ('<', '>', '/dodaj-odcinek/'), False)[1]
+            data = data.split('</ul>')
+            sId = 0
+            for sItem in data:
+                sTitle = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(sItem, '<span', '</span>')[1])
+                sItem = self.cm.ph.getAllItemsBeetwenMarkers(sItem.split('<ul', 1)[-1], '<li', '</li>')
+                episodesTab = []
+                for item in sItem:
+                    title = self.cleanHtmlStr(item)
+                    url = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^'^"]+?)['"]''')[0])
+                    episodesTab.append({'good_for_fav':True, 'type':'video', 'title':'%s - %s' % (seriesTitle, title), 'url':url, 'icon':icon})
+                sId += 1
+                if len(episodesTab):
+                    self.addDir({'good_for_fav':False, 'name':'category', 'type':'category', 'category':nextCategory, 'sub_items':episodesTab, 'title':sTitle, 'icon':icon, 'desc':desc})
+        
+            if 1 == len(self.currList):
+                self.listSubItems(self.currList[0])
+        
+    def listSearchResult(self, cItem, searchPattern, searchType):
+        printDBG("NaszeKinoTv.listSearchResult cItem[%s], searchPattern[%s] searchType[%s]" % (cItem, searchPattern, searchType))
+        
+        url = self.getFullUrl('/wyszukiwarka?phrase=') + urllib.quote_plus(searchPattern)
+        sts, data = self.getPage(url)
+        if not sts: return
+        self.setMainUrl(data.meta['url'])
+        
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'advanced-search'), ('<footer', '>'))[1]
+        if searchType == 'movie': m1 = '<h3>Filmy</h3>'
+        else: m1 = '<h3>Seriale</h3>'
+        data = re.compile('''<div[^>]+?class=['"]row['"][^>]*?>''').split(data)
+        for idx in range(len(data)):
+            if m1 in data[idx] and (idx+1) < len(data):
+                self.currList = self._parseSectionItems('explore_item', data[idx+1])
+                break
+        
+    def getLinksForVideo(self, cItem):
+        printDBG("NaszeKinoTv.getLinksForVideo [%s]" % cItem)
+        self.tryTologin()
+        
+        if 1 == self.up.checkHostSupport(cItem.get('url', '')):
+            videoUrl = cItem['url'].replace('youtu.be/', 'youtube.com/watch?v=')
+            return self.up.getVideoLinkExt(videoUrl)
+        
+        cacheKey = cItem['url']
+        cacheTab = self.cacheLinks.get(cacheKey, [])
+        if len(cacheTab): return cacheTab
+        
+        self.cacheLinks = {}
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        cUrl = data.meta['url']
+        self.setMainUrl(cUrl)
+        
+        paramsUrl = dict(self.defaultParams)
+        paramsUrl['header'] = dict(paramsUrl['header'])
+        
+        ##############################################################################################
+        while sts and 'captcha-info' in data:
+            # parse form data
+            data = self.cm.ph.getDataBeetwenMarkers(data, 'captcha-info', '</form>')[1]
+            
+            captchaTitle = self.cm.ph.getAllItemsBeetwenMarkers(data, '<p', '</p>')
+            if len(captchaTitle): captchaTitle = self.cleanHtmlStr(captchaTitle[-1])
+            else: captchaTitle = ''
+            
+            sendLabel = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(data, '<button', '</button>')[1])
+            captchaLabel = self.cleanHtmlStr(self.cm.ph.getSearchGroups(data, '''\splaceholder=['"]([^'^"]+?)['"]''')[0])
+            captchaLabel = '%s %s' % (sendLabel, captchaLabel)
+            
+            if captchaLabel.strip() == '': captchaLabel = _('Captcha')
+            if captchaTitle == '': captchaTitle = captchaLabel
+            sendLabel = _('Send')
+            
+            imgUrl = self.getFullIconUrl(self.cm.ph.getSearchGroups(data, '<img[^>]+?src="([^"]+?\.(:?jpe?g|png)(:?\?[^"]+?)?)"')[0], cUrl)
+            
+            actionUrl = self.getFullUrl(self.cm.ph.getSearchGroups(data, 'action="([^"]+?)"')[0], cUrl)
+            if actionUrl == '': actionUrl = cUrl
+            tmp = re.compile('''<input[^>]+?>''').findall(data)
+            printDBG(tmp)
+            captcha_post_data = {}
+            for it in tmp:
+                val = self.cm.ph.getSearchGroups(it, '''\svalue=['"]?([^'^"^\s]+?)['"\s]''')[0].strip()
+                name = self.cm.ph.getSearchGroups(it, '''\sname=['"]([^'^"]+?)['"]''')[0]
+                captcha_post_data[name] = val
+            
+            header = dict(self.HTTP_HEADER)
+            header['Accept'] = 'image/png,image/*;q=0.8,*/*;q=0.5'
+            params = dict(self.defaultParams)
+            params.update( {'maintype': 'image', 'subtypes':['jpeg', 'png'], 'check_first_bytes':['\xFF\xD8','\xFF\xD9','\x89\x50\x4E\x47'], 'header':header} )
+            filePath = GetTmpDir('.iptvplayer_captcha.jpg')
+            rm(filePath)
+            ret = self.cm.saveWebFile(filePath, imgUrl.replace('&amp;', '&'), params)
+            if not ret.get('sts'):
+                SetIPTVPlayerLastHostError(_('Fail to get "%s".') % imgUrl)
+                return []
+            params = deepcopy(IPTVMultipleInputBox.DEF_PARAMS)
+            params['accep_label'] = sendLabel
+            params['title'] = captchaLabel
+            params['status_text'] = captchaTitle
+            params['status_text_hight'] = 200
+            params['with_accept_button'] = True
+            params['list'] = []
+            item = deepcopy(IPTVMultipleInputBox.DEF_INPUT_PARAMS)
+            item['label_size'] = (660,110)
+            item['input_size'] = (680,25)
+            item['icon_path'] = filePath
+            item['title'] = _('Answer')
+            item['input']['text'] = ''
+            params['list'].append(item)
+            params['vk_params'] = {'invert_letters_case':True}
+
+            ret = 0
+            retArg = self.sessionEx.waitForFinishOpen(IPTVMultipleInputBox, params)
+            printDBG(retArg)
+            if retArg and len(retArg) and retArg[0]:
+                printDBG(retArg[0])
+                captcha_post_data['captcha'] = retArg[0][0]
+                paramsUrl['header']['Referer'] = cUrl
+                sts, data = self.cm.getPage(actionUrl, paramsUrl, captcha_post_data)
+                if sts: cUrl = data.meta['url'] 
+                else: return []
+            else:
+                return []
+        ##############################################################################################
+        
+        msg = self.cm.ph.getDataBeetwenNodes(data, ('', '>', 'alert-info'), ('</div', '>'), False)[1]
+        SetIPTVPlayerLastHostError(msg)
+        
+        retTab = []
+        
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<tbody', '>'), ('</tbody', '>'), False)[1]
+        data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<tr', '</tr>', False)
+        for item in data:
+            url = ''
+            tmp = ph.getattr(item, 'data-iframe')
+            try:
+                tmp = json_loads(base64.b64decode(tmp))['src']
+                url = self.getFullUrl(tmp)
+            except Exception:
+                printExc()
+                url = self.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0])
+            if url == '': continue
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item, '<td', '</td>')
+            name = []
+            for t in item:
+                t = self.cleanHtmlStr(t)
+                if t != '': name.append(t)
+            name = ' | '.join(name)
+            retTab.append({'name':name, 'url':strwithmeta(url, {'Referer':cUrl}), 'need_resolve':1})
+        
+        if len(retTab):
+            self.cacheLinks[cacheKey] = retTab
+        return retTab
+        
+    def getVideoLinks(self, baseUrl):
+        printDBG("NaszeKinoTv.getVideoLinks [%s]" % baseUrl)
+        baseUrl = strwithmeta(baseUrl)
+        urlTab = []
+        
+        # mark requested link as used one
+        if len(self.cacheLinks.keys()):
+            for key in self.cacheLinks:
+                for idx in range(len(self.cacheLinks[key])):
+                    if baseUrl in self.cacheLinks[key][idx]['url']:
+                        if not self.cacheLinks[key][idx]['name'].startswith('*'):
+                            self.cacheLinks[key][idx]['name'] = '*' + self.cacheLinks[key][idx]['name'] + '*'
+                        break
+                        
+        if 1 == self.up.checkHostSupport(baseUrl):
+            return self.up.getVideoLinkExt(baseUrl)
+                        
+        urlParams = dict(self.defaultParams)
+        urlParams['header'] = dict(urlParams['header'])
+        urlParams['header']['Referer'] = baseUrl.meta.get('Referer', self.getMainUrl())
+        
+        sts, data = self.getPage(baseUrl, urlParams)
+        if not sts: return
+        
+        videoUrl = self.getFullUrl(self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''', 1, True)[0])
+        videoUrl = strwithmeta(videoUrl, {'Referer':urlParams['header']['Referer']})
+        return self.up.getVideoLinkExt(videoUrl)
+        
+    def getArticleContent(self, cItem, data=None, cUrl=''):
+        printDBG("NaszeKinoTv.getArticleContent [%s]" % cItem)
+        
+        retTab = []
+        
+        otherInfo = {}
+        
+        if data == None:
+            sts, data = self.getPage(cItem['url'])
+            if not sts: return []
+            cUrl = data.meta['url']
+            self.setMainUrl(cUrl)
+            
+        if '/odcinek' in cUrl and cItem['type'] == 'category':
+            posterData = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'single-poster'), ('<img', '>'))[1]
+            url = self.getFullUrl(self.cm.ph.getSearchGroups(posterData, '''href=['"]([^'^"]*?serial\-online[^'^"]+?)['"]''')[0])
+            
+            sts, data = self.getPage(url)
+            if not sts: return []
+            cUrl = data.meta['url']
+            self.setMainUrl(cUrl)
+        
+        data = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'item-headline'), ('<footer', '>'))[1] #, 'clearfix'
+        desc = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<p', '>', 'description'), ('</p', '>'))[1])
+        icon = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'single-poster'), ('<img', '>'))[1]
+        icon = self.getFullIconUrl(self.cm.ph.getSearchGroups(icon, '<img[^>]+?src="([^"]+?\.(:?jpe?g|png)(:?\?[^"]+?)?)"')[0], cUrl)
+        tmp = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'item-headline'), ('</div', '>'))[1]
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(tmp, ('<h', '>'), ('</h', ''), False)
+        title = []
+        for t in tmp:
+            t = self.cleanHtmlStr(t)
+            if t != '': title.append(t)
+        title = ' '.join(title)
+        
+        keysMap = {'Odsłony:':          'views',
+                   'Kategoria:':        'genre',
+                   'Kraj:':             'country',
+                   'Dodał:':            'added',
+                   'director':          'director',
+                   'productionCompany': 'writer',
+                   'actors':            'actors',}
+        tmp = self.cm.ph.getDataBeetwenNodes(data, ('<div', '>', 'info'), ('</div', '>'))[1]
+        tmp = self.cm.ph.getAllItemsBeetwenMarkers(tmp, '<ul', '</ul>')
+        for item in tmp:
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item, '<li', '</li>')
+            tab = []
+            for it in item:
+                it = self.cleanHtmlStr(it)
+                tab.append(it)
+            if len(tab) > 1:
+                key = keysMap.get(tab[0], '')
+                otherInfo[key] = ', '.join(tab[1:])
+        
+        tmp = self.cm.ph.getAllItemsBeetwenNodes(data.split('</p>', 1)[-1], ('<h4', '</h4>'), ('</ul', '>'))
+        for item in tmp:
+            key = self.cm.ph.getSearchGroups(item, '''itemprop=['"]([^'^"]+?)['"]''')[0]
+            key = keysMap.get(key, '')
+            if key == '': continue
+            item = self.cm.ph.getAllItemsBeetwenMarkers(item, '<li', '</li>')
+            tab = []
+            for it in item:
+                it = self.cleanHtmlStr(it)
+                tab.append(it)
+            if len(tab): otherInfo[key] = ', '.join(tab)
+        
+        item = self.cleanHtmlStr(self.cm.ph.getDataBeetwenNodes(data, ('<', '>', 'ratingValue'), ('</div', '>'))[1])
+        if item != '': otherInfo['rating'] = item
+        item = self.cleanHtmlStr(self.cm.ph.getDataBeetwenMarkers(data, '<sup', '</sup>')[1])
+        if item != '': otherInfo['year'] = item
+        
+        if title == '': title = cItem['title']
+        if icon == '':  icon = cItem.get('icon', self.DEFAULT_ICON_URL)
+        #if desc == '':  desc = cItem.get('desc', '')
+        
+        return [{'title':self.cleanHtmlStr( title ), 'text': self.cleanHtmlStr( desc ), 'images':[{'title':'', 'url':self.getFullUrl(icon)}], 'other_info':otherInfo}]
+    
+    def tryTologin(self):
+        printDBG('tryTologin start')
+        
+        if None == self.loggedIn or self.login != config.plugins.iptvplayer.naszekinotv_login.value or\
+            self.password != config.plugins.iptvplayer.naszekinotv_password.value:
+        
+            self.login = config.plugins.iptvplayer.naszekinotv_login.value
+            self.password = config.plugins.iptvplayer.naszekinotv_password.value
+            
+            sts, data = self.getPage(self.getFullUrl('/profil'))
+            if not sts: return False
+            
+            login = self.cm.ph.getSearchGroups(data, '''alogowany jako:([^<]+?)<''')[0].strip()
+
+            self.loggedIn = False
+            if '' == self.login.strip() or '' == self.password.strip():
+                if login != '':
+                    rm(self.COOKIE_FILE)
+                return False
+            elif self.login.strip() == login:
+                self.loggedIn = True
+                return True
+            
+            rm(self.COOKIE_FILE)
+            
+            url = self.getFullUrl('/logowanie')
+            sts, data = self.getPage(url)
+            if not sts: return False
+            
+            sts, data = self.cm.ph.getDataBeetwenNodes(data, ('<form', '>', 'post'), ('</form', '>'))
+            if not sts: return False
+            
+            actionUrl = self.getFullUrl(self.cm.ph.getSearchGroups(data, '''action=['"]([^'^"]+?)['"]''')[0])
+            if actionUrl == '': actionUrl = url
+            
+            post_data = {}
+            tmp = self.cm.ph.getAllItemsBeetwenMarkers(data, '<input', '>')
+            tmp.extend(self.cm.ph.getAllItemsBeetwenMarkers(data, '<button', '>'))
+            for item in tmp:
+                name  = self.cm.ph.getSearchGroups(item, '''name=['"]([^'^"]+?)['"]''')[0]
+                value = self.cm.ph.getSearchGroups(item, '''value=['"]([^'^"]+?)['"]''')[0]
+                post_data[name] = value
+            
+            post_data.update({'login':self.login, 'password':self.password, 'remember':'on'})
+            
+            httpParams = dict(self.defaultParams)
+            httpParams['header'] = dict(httpParams['header'])
+            httpParams['header']['Referer'] = url
+            sts, data = self.cm.getPage(actionUrl, httpParams, post_data)
+            printDBG(data)
+            if sts and '/wylogowanie' in data:
+                printDBG('tryTologin OK')
+                self.loggedIn = True
+            else:
+                if sts:
+                    errMsg = []
+                    tmp = self.cm.ph.getAllItemsBeetwenNodes(data, ('<div', '>', 'alert-danger'), ('</div', '>'), False)
+                    for it in tmp:
+                        errMsg.append(self.cleanHtmlStr(it))
+                else:
+                    errMsg = [_('Connection error.')]
+                self.sessionEx.open(MessageBox, _('Login failed.') + '\n' + '\n'.join(errMsg), type = MessageBox.TYPE_ERROR, timeout = 10)
+                printDBG('tryTologin failed')
+        return self.loggedIn
+    
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        self.tryTologin()
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||| name[%s], category[%s] " % (name, category) )
+        self.cacheLinks = {}
+        self.currList = []
+        
+    #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+    #SECTIONS
+        elif category == 'sections':
+            self.listSections(self.currItem, 'list_sub_items', 'explore_item')
+            if 1 == len(self.currList): self.listSubItems(self.currList[0])
+        elif category == 'list_sub_items':
+            self.listSubItems(self.currItem)
+    #MOVIES
+        elif category == 'movies':
+            self.listMovies(self.currItem, 'list_filters')
+        elif category == 'list_filters':
+            self.listFilters(self.currItem, 'list_items')
+        elif category == 'list_items':
+            self.listItems(self.currItem, 'explore_item')
+    #SERIES
+        elif category == 'series':
+            self.listSeries(self.currItem, 'a_z')
+        elif category == 'a_z':
+            self.listAZ(self.currItem, 'list_by_letter')
+        elif category == 'list_by_letter':
+            self.listByLetter(self.currItem, 'explore_item')
+    #RAITING
+        elif category == 'raiting':
+            self.listRaitingItems(self.currItem, 'explore_item')
+        
+        elif category == 'explore_item':
+            self.exploreItem(self.currItem, 'list_sub_items')
+    #SEARCH
+        elif category in ["search", "search_next_page"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, NaszeKinoTv(), True, [])
+        
+    def getSearchTypes(self):
+        searchTypesOptions = []
+        searchTypesOptions.append((_("Movies"), "movie"))
+        searchTypesOptions.append((_("Series"), "serie"))
+        return searchTypesOptions
+        
+    def withArticleContent(self, cItem):
+        if '.nasze-kino.' in cItem.get('url', '') and \
+           ('video' == cItem.get('type', '') or \
+            'explore_item' == cItem.get('category', '')):
+            return True
+        else: return False
+    
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostpmgsport.py pc/IPTVPlayer/hosts/hostpmgsport.py
--- o/IPTVPlayer/hosts/hostpmgsport.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostpmgsport.py	2020-05-12 00:07:45.100290928 +0300
@@ -0,0 +1,190 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, MergeDicts
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import getDirectM3U8Playlist
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import re
+import urllib
+import HTMLParser
+from datetime import datetime, tzinfo
+###################################################
+
+
+def gettytul():
+    return 'https://www.pmgsport.it/'
+
+class PmgSport(CBaseHostClass):
+ 
+    def __init__(self):
+
+        CBaseHostClass.__init__(self)
+
+        self.MAIN_URL = "https://www.pmgsport.it/"
+        self.DEFAULT_ICON_URL = "https://yt3.ggpht.com/a/AGF-l781bCdM1exHda4m0Ih0VB7phr0EJOPNKxKOnw=s288-mo-c-c0xffffffff-rj-k-no"
+        self.MENU_ITEMS={}
+        self.defaultParams = {'header': {'User-Agent' : 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36'}}
+        
+    def getPage(self, url, addParams = {}, post_data = None):
+        if addParams == {}:
+            addParams = dict(self.defaultParams)
+        return self.cm.getPage(url, addParams, post_data)
+
+    
+    def getLinksForVideo(self, cItem):
+        printDBG("PmgSport.getLinksForVideo [%s]" % cItem)
+        
+        linksTab=[]
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        
+        vm_url = re.findall("<iframe src=['\"](.*?)['\"]", data)
+        if len(vm_url) > 0:
+            sts, data = self.getPage(vm_url[0])
+            if not sts: return linksTab
+            
+            jdata = re.findall("var settings=\{(.*?)\};", data)
+            if len(jdata)>0:
+                printDBG("%%%%%%%")
+                printDBG(jdata[0])
+                jdata_mod = "{" + jdata[0].replace("false","False").replace("true","True") + "}"
+                printDBG(jdata_mod)
+                jdata = eval(jdata_mod)
+                if 'bitrates' in jdata:
+                    if 'mp4' in jdata['bitrates']:
+                        v = jdata['bitrates']['mp4']
+                        if isinstance(v,list):
+                            for vv in v:
+                                name = re.findall("/([\w-]*?).mp4", vv)
+                                linksTab.append({'url': vv, 'name': name[0] })
+                        else:
+                            name = re.findall("/([\w-]*?).mp4", v)
+                            linksTab.append({'url': v, 'name': name[0] })
+                            
+                    if 'hls' in jdata['bitrates']:
+                        v = jdata['bitrates']['hls']
+                        if isinstance(v,list): 
+                            for vv in v:
+                                linksTab.extend(getDirectM3U8Playlist(vv, checkExt=False, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999))  
+                        else:
+                            linksTab.extend(getDirectM3U8Playlist(v, checkExt=False, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999))  
+                            
+        return linksTab
+
+   
+    def listMainMenu(self):
+        printDBG("PmgSport.listMainMenu")
+        sts, data = self.getPage(self.MAIN_URL)
+        if not sts: return
+        
+        
+        menu_h = ph.findall(data, "id=\"ts_menu_topic\"", "<div id=\"ts-mobile-menu\"")
+        sport_h = ph.findall(menu_h[0], "<li id=\"menu-item-", "</li>")
+        
+        topsports=[]
+        for s in sport_h:
+            url, title = re.findall("<a href=\"(.*?)\">(.*?)</a", s)[0]
+            title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+            topsports.append(title)
+            
+            self.addDir({'category': 'sport', 'title': title , 'url': url, 'text_color': 'yellow'})              
+        
+        menu = ph.findall(data, "<ul id=\"menu-main-header\" class=\"main-menu \">", "</ul></nav>")   
+        #printDBG(menu[0])
+        sports = ph.findall(menu[0],"<li id=\"menu-item-", "</ul>")
+                           
+        for s in sports:
+            items = ph.findall(s, "<li id=\"menu-item-", "</a>")
+            url, title = re.findall("<a href=\"(.*?)\">(.*?)</a", items[0])[0]
+            title = HTMLParser.HTMLParser().unescape(title).encode('utf-8')
+            if not title in topsports:
+                self.addDir({'category': 'sport', 'title': title , 'url': url})              
+
+            sport_items=[]
+            for i in range(1,len(items)):
+                url, title_s = re.findall("<a href=\"(.*?)\">(.*?)</a", items[i])[0]
+                title_s = HTMLParser.HTMLParser().unescape(title_s).encode('utf-8')
+                sport_items.append({'category': 'sport_subitem', 'title': title_s , 'url': url })
+                
+            self.MENU_ITEMS[title]=sport_items
+        
+        #printDBG(str(self.MENU_ITEMS))
+    
+    def listSportItems(self,cItem):
+        printDBG("PmgSport.listMainMenu")
+        
+        category = self.currItem.get("category", '')
+        title     = self.currItem.get("title", '')
+        url     = self.currItem.get("url", '')
+
+        if category == 'sport':
+            if title in self.MENU_ITEMS:
+                for i in self.MENU_ITEMS[title]:
+                    self.addDir({'category': 'sport_subitem', 'title': i['title'] , 'url': i['url'] })
+                    
+        sts, data = self.getPage(url)
+        if not sts: return
+        
+        items = ph.findall(data, "<article ", "</article>")   
+        for i in items:
+            #printDBG(i)
+            #printDBG("%%%%%%%%%%%%%%%%%")
+            url, title = re.findall("<h3 class=\"entry-title\" >\n.*<a href=\"(.*?)\">\n(.*?)<i", i)[0]
+            title = HTMLParser.HTMLParser().unescape(title).encode('utf-8').strip()
+            
+            desc = re.findall("div class=\"entry-excerpt\">\n(.*?)</div>", i)[0]
+            desc = HTMLParser.HTMLParser().unescape(desc).encode('utf-8').strip()
+            
+            icon = re.findall("<img class=\"lazy\" data-original=\"(.*?)\"",i)
+            if len(icon) > 0:
+                icon = icon[0]
+            else:
+                icon = self.DEFAULT_ICON_URL
+            self.addVideo({'title': title , 'url': url, 'desc': desc, 'icon': icon })
+            
+        next = re.findall("<li><a class=\"next page-numbers\" href=\"(.*?)\"", data)
+        if len(next)>0 :
+            self.addMore({'category': 'sport_subitem', 'title': _('Next page') , 'url': next[0] })
+    
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('PmgSport.handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        self.informAboutGeoBlockingIfNeeded('IT')
+        
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        subtype  = self.currItem.get("sub-type",'')
+        
+        printDBG( "handleService: >> name[%s], category[%s] " % (name, category) )
+        self.currList = []
+        
+        #MAIN MENU
+        if name == None:
+            self.listMainMenu()
+        elif category == 'sport' or category == 'sport_subitem':
+            self.listSportItems(self.currItem)
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, PmgSport(), True, [])
+   
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostsportitalia.py pc/IPTVPlayer/hosts/hostsportitalia.py
--- o/IPTVPlayer/hosts/hostsportitalia.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostsportitalia.py	2020-05-12 00:07:45.100290928 +0300
@@ -0,0 +1,279 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, GetIPTVNotify
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, rm, NextDay, PrevDay
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import getDirectM3U8Playlist
+from Plugins.Extensions.IPTVPlayer.tools.e2ijs import js_execute
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads, dumps as json_dumps
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+import time
+import urllib
+import re
+from datetime import date, datetime, timedelta
+###################################################
+
+def gettytul():
+    return 'https://www.sportitalia.com/'
+
+class Sportitalia(CBaseHostClass):
+    
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'sportitalia.com', 'cookie':'sportitalia.com.cookie'})
+        self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'
+        self.MAIN_URL = "https://www.sportitalia.com" 
+        self.PAGES_URL = self.MAIN_URL + "/it-int/page/" 
+        self.HOME_URL = self.PAGES_URL + "home-sportitalia"
+
+        self.DEFAULT_ICON_URL = 'https://www.sportitalia.com/image/original/5cd2d4995a029.png?v=20190516104423'
+        self.IMG_URL = 'https://www.sportitalia.com/image/{0}/{1}?v={2}'
+        # {0} = item['logo_id']['manipulations'] ex. 'original', 'thumbnail'
+        # {1} = item['logo_id']['path'] ex. 5cd43a9ee9cc9.png 
+        # {2} = item['logo_id']['version'] ex. 20190509143512
+
+        self.API_URL = "https://www.sportitalia.com/api"
+        self.API_MODULE_URL =  self.API_URL + "/module/{0}/content?page={1}"
+        # {0} module id
+        # {1} page number
+        self.API_CONTENTBOX_URL = self.API_URL + "/content-box/?baseconfig={0}&module={1}&live={2}"
+        # {0} = base config id ex. 38 
+        # {1} = module *
+        # {2} = true: select live streams, false: select recorded ones
+        self.API_CONTENT_URL = self.API_URL + "/content"
+        # self.API_CONTENT_URL = "https://www.sportitalia.com/api/content/{0}"
+        # {0} = video id *
+        # {1} = module id
+        self.API_RELATED_CONTENT_URL = self.API_URL + "/related-content/{0}/?module={1}"
+        # {0} = video id *
+        # {1} = module id *
+        self.API_PLAYERPAGE_URL = self.API_URL + "/playerpage/{0}?portal={1}"
+        # {0} = video id *
+        # {1} = portal id ex. 44 *
+        self.API_PLAYERSETTING_URL = self.API_URL + "/v2/content/{0}/player-setting"
+        # {0} = video id *
+        self.API_VIDEO_URL = self.API_URL + "/video/{0}/access" 
+        # ?device_category_id=1"
+        # {0} = video id *
+        
+        self.HTTP_HEADER = {'User-Agent': self.USER_AGENT}
+        
+        self.defaultParams = {'header':self.HTTP_HEADER, 'with_metadata':True, 'use_cookie': True, 
+                              'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+        
+        
+        self.OFFSET = datetime.now() - datetime.utcnow()
+        seconds = self.OFFSET.seconds + self.OFFSET.days * 24 * 3600
+        if ((seconds + 1) % 10) == 0: seconds += 1  
+        elif ((seconds - 1) % 10) == 0: seconds -= 1 
+        self.OFFSET = timedelta(seconds=seconds)
+        
+        self.MONTH_NAME_TAB = [_('January'), _('February'), _('Mars'), _('April'), _('May'), _('June'), _('July'), _('August'), _('September'), _('October'), _('November'), _('December')]
+        self.DAYS_NAME_TAB = [_('Monday'), _('Tuesday'), _('Wednesday'), _('Thursday'), _('Friday'), _('Saturday'), _('Sunday')]
+        
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+    
+    def getThumb(self, img):
+        url = self.IMG_URL.format('original', img['path'], img['version'])
+        return url
+    
+    def listMainMenu(self, cItem):
+        printDBG("Sportitalia.listMainMenu")
+
+        sts, data = self.getPage(self.HOME_URL)
+        if not sts: return
+        
+        # embedded player
+        j=re.findall("window\.pageTree = (\{.*?);\n", data)
+
+        d1 = json_loads(j[0])
+        d1 = d1['children'][1]
+        
+        for page in d1['children']:
+            if page['name'] == 'Player Page':
+                params = {'title': _('LIVE STREAMING'), 'module_id': page['page']['modules'][0]['id'], 'category' : 'si_player', 'icon': self.DEFAULT_ICON_URL}
+                printDBG(str(params))
+                self.addDir (params)
+
+        
+        # menu item
+        
+        j=re.findall("window\.pageTree = (\{.*?);\n", data)
+
+        data = json_loads(j[0])
+        data = data['children'][0]
+        
+        for item in data['children']:
+            title = item['name']
+            #printDBG(title)
+            if not(title in ["Sportitalia HD","SI SOLOCALCIO","SI MOTORI","SI LIVE 24", "SPORTS CENTER"]):
+                
+                url = self.PAGES_URL + item['page']['slug']
+                if item['page']['logo_id'] != None:
+                    icon = self.getThumb( item['page']['logo_id'])           
+                else:
+                    icon = self.DEFAULT_ICON_URL
+
+                children=[]
+                if 'children' in item:
+                    if len(item['children'])>0:
+                        for ii in item['children']:
+
+                            url_child = self.PAGES_URL + ii['page']['slug']
+
+                            if ii['page']['logo_id'] != None:
+                                icon_child = self.getThumb( ii['page']['logo_id'])           
+                            else:
+                                icon_child = self.DEFAULT_ICON_URL
+
+                            children.append({'name': ii['page']['languages'][0]['nav_title'], 'slug': ii['page']['slug'], 'logo_data' : ii['page']['logo_id'], 'url' : url_child , 'icon': icon_child })
+
+                            params = {'title': item['page']['languages'][0]['nav_title'], 'slug': item ['page']['slug'], 'category': 'si_menu', 'children': children}
+                    else:
+                            params = {'title': item['page']['languages'][0]['nav_title'], 'slug': item ['page']['slug'], 'url': url, 'category': 'si_page', 'icon': icon}
+
+                printDBG(str(params))
+                self.addDir (params)
+    
+    def listMenu(self,cItem):
+        printDBG("Sportitalia.listMenu")
+ 
+        for item in cItem['children']:
+            params = {'title': item['name'], 'slug': item['slug'], 'url': item ['url'], 'category': 'si_page', 'icon' : item['icon']}
+            printDBG(str(params))
+            self.addDir (params)
+    
+
+    def listPage(self,cItem):
+        printDBG("Sportitalia.listPage %s"  % cItem['slug'])
+        
+        if not ('url' in cItem):
+            return
+        
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+
+        # search for collections
+        j=re.findall("window\.pages = \[(\{.*?)\];\n", data)
+
+        data = json_loads("[" + j[0] + "]")
+        
+        for page in data:  
+            if page['slug'] == cItem['slug']:        
+                #printDBG(str(data))
+                for m in page['modules']:
+                    #printDBG(str(m))
+                    if m['type']['category'] == 'Content':
+                        params = {'title': m['languages'][0]['title'], 'desc': m['languages'][0]['description'] , 'module_id': m['id'], 'category' : 'si_module', 'icon': cItem['icon']}
+                        printDBG(str(params))
+                        self.addDir (params)
+
+                        
+    def listModule(self,cItem):
+        printDBG("Sportitalia.listModule %s"  % cItem['module_id'])
+        if 'page' in cItem:
+            page = int(cItem['page'])
+        else:
+            page = 1
+        
+        if cItem['category'] == 'si_module':
+            url = self.API_MODULE_URL.format(cItem['module_id'], page)
+        elif cItem['category'] == 'si_player':
+            url = self.API_CONTENTBOX_URL.format(38, cItem['module_id'], 'true')
+
+        else:        
+            return
+        
+        sts, data = self.getPage(url)
+        
+        if not sts:
+            return
+        
+        data = json_loads(data)
+        
+        for item in data['data']:
+            title = item['fields']['Title'][0]['title']
+            
+            if cItem['category'] == 'si_module':
+                length = timedelta(seconds = item['video_length'])
+                desc =  _('Duration: {0}').format(str(length)) +  ' | ' + _('Added: {0}').format(item['content']['start_datetime']) 
+                if item['fields']['Title'][0]['description'] != None:
+                    desc = desc +  '\n' + item['fields']['Title'][0]['description']
+            else:
+                desc = ''
+                
+            video_id = item['id']
+            icon = "https://www.sportitalia.com/image/original/{0}".format(item['editorial']['images'][0]['image']['path'])
+            
+            params = {'title': title, 'desc': desc, 'id': video_id, 'icon': icon, 'category' : 'si_video'}
+            self.addVideo (params)
+        
+        if cItem['category'] == 'si_module':
+            if int(data['meta']['last_page']) > page:
+                self.addMore ({'title': _('Next page'), 'module_id': cItem['module_id'], 'page' : str(page +1), 'category' : 'si_module'})
+            
+            
+    def getLinksForVideo(self, cItem):
+        printDBG("Sportitalia.getLinksForVideo [%s]" % cItem)
+        
+        linksTab = []
+        
+        if cItem['category'] == 'si_video':
+            video_id = cItem['id']
+            url = self.API_VIDEO_URL.format(video_id)
+    
+            post_data = {'device_category_id' : '1'}
+            sts, data = self.getPage(url, self.defaultParams, post_data)
+            
+            if not sts:
+                return linksTab
+            
+            printDBG(data)
+            data = json_loads(data)
+            if data['status'] == 'success':
+                video_url = strwithmeta(data['data']['stream'],{'Referer' : 'https://www.sportitalia.com/', 'User-Agent': self.USER_AGENT })
+                printDBG(video_url)
+                linksTab.extend(getDirectM3U8Playlist(video_url , checkExt=False, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999))  
+              
+        return linksTab
+        
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        mode     = self.currItem.get("mode", '')
+        
+        printDBG( "handleService: |||| name[%s], category[%s] " % (name, category) )
+        self.cacheLinks = {}
+        self.currList = []
+        
+        #MAIN MENU
+        if name == None:
+            self.listMainMenu({'name':'category'})
+        elif category == 'si_menu':
+            self.listMenu(self.currItem)
+        elif category == 'si_page':
+            self.listPage(self.currItem)
+        elif category == 'si_module' or category == 'si_player':
+            self.listModule(self.currItem)
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, Sportitalia(), True, [])
+    
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostturcjatv.py pc/IPTVPlayer/hosts/hostturcjatv.py
--- o/IPTVPlayer/hosts/hostturcjatv.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostturcjatv.py	2020-05-12 00:07:45.100290928 +0300
@@ -0,0 +1,235 @@
+# -*- coding: utf-8 -*-
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _
+from Plugins.Extensions.IPTVPlayer.components.ihost import CHostBase, CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, MergeDicts, rm, GetCookieDir, ReadTextFile, WriteTextFile
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.libs.pCommon import common
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.libs.e2ijson import loads as json_loads
+###################################################
+
+###################################################
+# FOREIGN import
+###################################################
+from binascii import hexlify
+from hashlib import md5
+import urllib
+from datetime import datetime
+from Components.config import config, ConfigText, getConfigListEntry
+###################################################
+
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Screens.MessageBox import MessageBox
+###################################################
+
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.dixmax_login     = ConfigText(default = "", fixed_size = False)
+config.plugins.iptvplayer.dixmax_password  = ConfigText(default = "", fixed_size = False)
+
+def GetConfigList():
+    optionList = []
+    optionList.append(getConfigListEntry(_("login"), config.plugins.iptvplayer.dixmax_login))
+    optionList.append(getConfigListEntry(_("password"), config.plugins.iptvplayer.dixmax_password))
+    return optionList
+###################################################
+
+def gettytul():
+    return 'http://turcjatv.pl'
+
+class TurcjaTv(CBaseHostClass):
+
+    def __init__(self):
+        CBaseHostClass.__init__(self, {'history':'turcjatv.pl', 'cookie':'turcjatv.pl.cookie'})
+
+        self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+        self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': self.COOKIE_FILE}
+
+        self.MAIN_URL = 'http://turcjatv.pl/'
+        self.DEFAULT_ICON_URL = self.getFullIconUrl('/wp-content/uploads/2017/05/0e0nwZk.png')
+
+    def getPage(self, baseUrl, addParams={}, post_data=None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+
+    def listMain(self, cItem):
+        printDBG("TurcjaTv.listMain")
+        sts, data = self.getPage(self.getMainUrl())
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+
+        subItems = []
+        tmp = ph.find(data, ('<ul', '>', 'menu-depth'), '</ul>', flags=0)[1]
+        tmp = ph.findall(tmp, ('<a', '>'), '</a>', flags=ph.START_S)
+        for idx in range(1, len(tmp), 2):
+            url = ph.getattr(tmp[idx-1], 'href')
+            title = self.cleanHtmlStr(tmp[idx])
+            subItems.append( MergeDicts(cItem, {'good_for_fav':True, 'category':'list_items', 'title':title, 'url':url}) )
+
+        MAIN_CAT_TAB = [{'category':'sub_items',      'title': 'SERIALE ABC',   'url':self.getMainUrl(), 'sub_items':subItems},
+                        {'category':'list_items',     'title': 'SERIALE',       'url':self.getMainUrl()},
+                        {'category':'list_items',     'title': 'FILMY',         'url':self.getFullUrl('channel/filmy/')},
+                        {'category':'search',         'title': _('Search'),       'search_item':True       },
+                        {'category':'search_history', 'title': _('Search history'),                        }]
+        self.listsTab(MAIN_CAT_TAB, cItem)
+
+    def listSubItems(self, cItem):
+        printDBG("TurcjaTv.listSubItems")
+        self.currList = cItem['sub_items']
+
+    def listItems(self, cItem):
+        printDBG("TurcjaTv.listItems")
+        page = cItem.get('page', 0)
+        post_data = cItem.get('post_data', None)
+        nextPage = cItem['url']
+        if page == 0:
+            sts, data = self.getPage(cItem['url'])
+            if not sts: return
+            self.setMainUrl(self.cm.meta['url'])
+
+            tmp = ph.find(data, ('<div', '>', 'entry-content'), '<footer')[1].split('page-navigation', 1)
+            if len(tmp) == 2:
+                template = ph.getattr(tmp[-1], 'data-template')
+                playlist = ph.getattr(tmp[-1], 'id_post_playlist')
+
+                np = ph.search(data.split('<body', 1)[-1], 'var\s+?cactus_ajax_paging\s*?=\s*?(\{[^>]+\})')[0]
+                printDBG(">> \n%s" % np)
+                try:
+                    np = json_loads(np)
+                    nextPage = self.getFullUrl(np['ajaxurl'])
+                    post_data = {'vars':np['query_vars'], 'action':'load_more', 'template':template, 'id_playlist':playlist}
+                    printDBG(post_data)
+                except Exception:
+                    printExc()
+            data = tmp[0]
+        else:
+            post_data['page'] = page
+            sts, data = self.getPage(cItem['url'], post_data=self.cm.buildHTTPQuery(post_data))
+            if not sts: return
+            printDBG("++++++++++++++++++++++++++++++++++++++++++")
+            printDBG(data)
+            printDBG("++++++++++++++++++++++++++++++++++++++++++")
+
+        data = ph.rfindall(data, '</div>', ('<div', '>', 'entry-content'), flags=0)
+        for item in data:
+            url = self.getFullUrl(ph.search(item, ph.A_HREF_URI_RE)[1])
+            icon = self.getFullIconUrl(ph.search(item, ph.IMAGE_SRC_URI_RE)[1])
+            item = item.split('</h3>', 1)
+            title = self.cleanHtmlStr( item[0] )
+            desc = []
+            tmp = ph.findall(item[-1], ('<div', '>'), '</div>', flags=0)
+            for t in tmp:
+                t = self.cleanHtmlStr(t)
+                if t: desc.append(t)
+
+            params = {'good_for_fav':True, 'title':title, 'url':url, 'icon':icon, 'desc':' | '.join(desc)}
+            if '/channel/' in url or '/playlist/' in url:
+                params.update({'name':'category', 'category':cItem['category']})
+                self.addDir( params )
+            else:
+                self.addVideo( params )
+
+        if post_data:
+            post_data['page'] = page + 1
+            sts, data = self.getPage(nextPage, post_data=self.cm.buildHTTPQuery(post_data))
+            if not sts: return
+            if data.count('entry-content'):
+                self.addDir(MergeDicts(cItem, {'url':nextPage, 'title':_('Next page'), 'post_data':post_data, 'page':page + 1}))
+
+    def listSearchResult(self, cItem, searchPattern=None, searchType=None):
+        page = cItem.get('page', 0)
+        if page == 0:
+            url = self.getFullUrl('/?s=%s' % urllib.quote(searchPattern))
+        else:
+            url = cItem['url']
+
+        sts, data = self.getPage(url)
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+
+        nextPage = ''
+        tmp = ph.find(data, ('{', '}', 'maxPages'))[1]
+        try:
+            nextPage = self.getFullUrl(json_loads(tmp)['nextLink'])
+        except Exception:
+            printExc()
+
+        data = ph.find(data, ('<div', '>', 'post-'), '</section>')[1]
+        data = ph.rfindall(data, '</div>', ('<div', '>', 'post-'), flags=0)
+        for item in data:
+            url = self.getFullUrl(ph.search(item, ph.A_HREF_URI_RE)[1])
+            icon = self.getFullIconUrl(ph.search(item, ph.IMAGE_SRC_URI_RE)[1])
+            item = item.split('</h3>', 1)
+            title = self.cleanHtmlStr( item[0] )
+            desc = []
+            tmp = ph.findall(item[-1], ('<span', '>'), '</span>', flags=0)
+            for t in tmp:
+                t = self.cleanHtmlStr(t)
+                if t: desc.append(t)
+
+            params = {'good_for_fav':True, 'title':title, 'url':url, 'icon':icon, 'desc':' | '.join(desc)}
+            if '/channel/' in url or '/playlist/' in url:
+                params.update({'name':'category', 'category':'list_items'})
+                self.addDir( params )
+            else:
+                self.addVideo( params )
+
+        if nextPage:
+            self.addDir(MergeDicts(cItem, {'category':'list_search_items', 'url':nextPage, 'title':_('Next page'), 'page':page + 1}))
+
+    def getLinksForVideo(self, cItem):
+
+        sts, data = self.getPage(cItem['url'])
+        if not sts: return
+        self.setMainUrl(self.cm.meta['url'])
+
+        data = ph.find(data, ('<div', '>', 'player'), '</div>')[1]
+        url = self.getFullUrl(ph.search(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''', flags=ph.IGNORECASE)[0])
+        return self.up.getVideoLinkExt(url)
+
+    def handleService(self, index, refresh = 0, searchPattern = '', searchType = ''):
+        printDBG('handleService start')
+        
+        CBaseHostClass.handleService(self, index, refresh, searchPattern, searchType)
+
+        name     = self.currItem.get("name", '')
+        category = self.currItem.get("category", '')
+        printDBG( "handleService: ||| name[%s], category[%s] " % (name, category) )
+        self.currList = []
+
+    #MAIN MENU
+        if name == None:
+            self.listMain({'name':'category', 'type':'category'})
+
+        elif category == 'sub_items':
+            self.listSubItems(self.currItem)
+
+        elif category == 'list_items':
+            self.listItems(self.currItem)
+
+        elif category == 'list_search_items':
+            self.listSearchResult(self.currItem)
+
+    #SEARCH
+        elif category in ["search"]:
+            cItem = dict(self.currItem)
+            cItem.update({'search_item':False, 'name':'category'}) 
+            self.listSearchResult(cItem, searchPattern, searchType)
+    #HISTORIA SEARCH
+        elif category == "search_history":
+            self.listsHistory({'name':'history', 'category': 'search'}, 'desc', _("Type: "))
+        else:
+            printExc()
+        
+        CBaseHostClass.endHandleService(self, index, refresh)
+
+class IPTVHost(CHostBase):
+
+    def __init__(self):
+        CHostBase.__init__(self, TurcjaTv(), True, [])
diff -ruN o/IPTVPlayer/hosts/hosturllist.py pc/IPTVPlayer/hosts/hosturllist.py
--- o/IPTVPlayer/hosts/hosturllist.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/hosts/hosturllist.py	2020-05-12 00:07:45.100290928 +0300
@@ -22,7 +22,7 @@
 ###################################################
 # Config options for HOST
 ###################################################
-config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default = "/hdd/")
+config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default = "/media/hdd/")
 config.plugins.iptvplayer.grupujurllist  = ConfigYesNo(default = True)
 config.plugins.iptvplayer.sortuj         = ConfigYesNo(default = True)
 
diff -ruN o/IPTVPlayer/hosts/hostXXX.py pc/IPTVPlayer/hosts/hostXXX.py
--- o/IPTVPlayer/hosts/hostXXX.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostXXX.py	2020-05-12 01:07:38.663238570 +0300
@@ -0,0 +1,11358 @@
+# -*- coding: utf-8 -*-
+ 
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.components.ihost import IHost, CDisplayListItem, RetHost, CUrlItem
+import Plugins.Extensions.IPTVPlayer.libs.pCommon as pCommon
+from Plugins.Extensions.IPTVPlayer.libs import ph
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, CSearchHistoryHelper, CSelOneLink, GetTmpDir, GetCookieDir, iptv_system, GetPluginDir, byteify, rm
+from Plugins.Extensions.IPTVPlayer.iptvdm.iptvdh import DMHelper
+from Plugins.Extensions.IPTVPlayer.libs.urlparser import urlparser 
+from Plugins.Extensions.IPTVPlayer.tools.iptvfilehost import IPTVFileHost
+from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, SetIPTVPlayerLastHostError, GetIPTVSleep, GetIPTVNotify
+from Plugins.Extensions.IPTVPlayer.libs.youtube_dl.utils import clean_html 
+from Plugins.Extensions.IPTVPlayer.libs.urlparserhelper import decorateUrl, getDirectM3U8Playlist, unpackJSPlayerParams, TEAMCASTPL_decryptPlayerParams
+###################################################
+# FOREIGN import
+###################################################
+import re, urllib, urllib2, base64, math, hashlib, random
+try:
+    import simplejson
+except:
+    import json as simplejson   
+from Tools.Directories import resolveFilename, SCOPE_PLUGINS
+from Components.config import config, ConfigSelection, ConfigYesNo, ConfigText, ConfigInteger, getConfigListEntry, ConfigPIN, ConfigDirectory
+from time import sleep, time as time_time
+from datetime import datetime
+from os import remove as os_remove, path as os_path, system as os_system
+import urlparse
+###################################################
+# E2 GUI COMMPONENTS 
+###################################################
+from Plugins.Extensions.IPTVPlayer.tools.e2ijs import js_execute
+from Screens.MessageBox import MessageBox
+from Plugins.Extensions.IPTVPlayer.components.asynccall import MainSessionWrapper
+###################################################
+# Config options for HOST
+###################################################
+config.plugins.iptvplayer.xxxwymagajpin = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxlist = ConfigDirectory(default = "/media/hdd/")
+config.plugins.iptvplayer.xxxsortuj = ConfigYesNo(default = True)
+config.plugins.iptvplayer.xxxsearch = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxsortmfc = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxsortall = ConfigYesNo(default = True)
+config.plugins.iptvplayer.camsoda = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.xhamstertag = ConfigYesNo(default = False)
+config.plugins.iptvplayer.chaturbate = ConfigSelection(default="", choices = [("",_("all")), ("female/",_("female")), ("couple/",_("couple")), ("trans/",_("trans")), ("male/",_("male"))])
+config.plugins.iptvplayer.cam4 = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.fotka = ConfigSelection(default="0", choices = [("0",_("https")), ("1",_("rtmp"))])
+config.plugins.iptvplayer.xxxupdate = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxxzbiornik = ConfigYesNo(default = False)
+config.plugins.iptvplayer.xxx4k = ConfigYesNo(default = False)
+config.plugins.iptvplayer.yourporn = ConfigInteger(4, (1, 99))  
+config.plugins.iptvplayer.beeg = ConfigYesNo(default = True)
+
+def GetConfigList():
+    optionList = []
+    optionList.append( getConfigListEntry(_("Pin protection for plugin")+" :", config.plugins.iptvplayer.xxxwymagajpin ) )
+    optionList.append( getConfigListEntry(_("Path to xxxlist.txt :"), config.plugins.iptvplayer.xxxlist) )
+    optionList.append( getConfigListEntry(_("Sort xxxlist :"), config.plugins.iptvplayer.xxxsortuj) )
+    optionList.append( getConfigListEntry(_("Sort Myfreecams :"), config.plugins.iptvplayer.xxxsortmfc) )
+    optionList.append( getConfigListEntry(_("Global search :"), config.plugins.iptvplayer.xxxsearch) )
+    optionList.append( getConfigListEntry(_("Global sort :"), config.plugins.iptvplayer.xxxsortall) )
+    optionList.append( getConfigListEntry(_("CHATURBATE preferences :"), config.plugins.iptvplayer.chaturbate) )
+    #optionList.append( getConfigListEntry(_("Cam4 stream :"), config.plugins.iptvplayer.cam4) )
+    #optionList.append( getConfigListEntry(_("Camsoda stream :"), config.plugins.iptvplayer.camsoda) )
+    #optionList.append( getConfigListEntry(_("Fotka.pl stream :"), config.plugins.iptvplayer.fotka) )
+    optionList.append( getConfigListEntry(_("Add tags to XHAMSTER :"), config.plugins.iptvplayer.xhamstertag) )
+    optionList.append( getConfigListEntry(_("Show Profiles in ZBIORNIK MINI :"), config.plugins.iptvplayer.xxxzbiornik) )
+    optionList.append( getConfigListEntry(_("YOURPORN Server :"), config.plugins.iptvplayer.yourporn) )
+    optionList.append( getConfigListEntry(_("Show changelog :"), config.plugins.iptvplayer.xxxupdate) )
+    optionList.append( getConfigListEntry(_("BEEG FullHD :"), config.plugins.iptvplayer.beeg) )
+    optionList.append( getConfigListEntry(_("Playback UHD :"), config.plugins.iptvplayer.xxx4k) )
+
+    return optionList
+###################################################
+
+###################################################
+# Title of HOST
+###################################################
+def gettytul():
+    return 'XXX'
+
+class IPTVHost(IHost):
+    LOGO_NAME = 'XXXlogo.png'
+    PATH_TO_LOGO = resolveFilename(SCOPE_PLUGINS, 'Extensions/IPTVPlayer/icons/logos/' + LOGO_NAME )
+
+    def __init__(self):
+        printDBG( "init begin" )
+        self.host = Host()
+        self.prevIndex = []
+        self.currList = []
+        self.prevList = []
+        printDBG( "init end" )
+        
+    def isProtectedByPinCode(self):
+        return config.plugins.iptvplayer.xxxwymagajpin.value
+    
+    def getLogoPath(self):  
+        return RetHost(RetHost.OK, value = [self.PATH_TO_LOGO])
+
+    def getInitList(self):
+        printDBG( "getInitList begin" )
+        self.prevIndex = []
+        self.currList = self.host.getInitList()
+        self.host.setCurrList(self.currList)
+        self.prevList = []
+        printDBG( "getInitList end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getListForItem(self, Index = 0, refresh = 0, selItem = None):
+        printDBG( "getListForItem begin" )
+        self.prevIndex.append(Index)
+        self.prevList.append(self.currList)
+        self.currList = self.host.getListForItem(Index, refresh, selItem)
+        printDBG( "getListForItem end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getPrevList(self, refresh = 0):
+        printDBG( "getPrevList begin" )
+        if(len(self.prevList) > 0):
+            self.prevIndex.pop()
+            self.currList = self.prevList.pop()
+            self.host.setCurrList(self.currList)
+            printDBG( "getPrevList end OK" )
+            return RetHost(RetHost.OK, value = self.currList)
+        else:
+            printDBG( "getPrevList end ERROR" )
+            return RetHost(RetHost.ERROR, value = [])
+
+    def getCurrentList(self, refresh = 0):
+        printDBG( "getCurrentList begin" )
+        printDBG( "getCurrentList end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    def getLinksForVideo(self, Index = 0, item = None):
+        return RetHost(RetHost.NOT_IMPLEMENTED, value = [])
+        
+    def getResolvedURL(self, url):
+        printDBG( "getResolvedURL begin" )
+        if url != None and url != '':        
+            ret = self.host.getResolvedURL(url)
+            if ret != None and ret != '':        
+               printDBG( "getResolvedURL ret: "+str(ret))
+               list = []
+               list.append(ret)
+               printDBG( "getResolvedURL end OK" )
+               return RetHost(RetHost.OK, value = list)
+            else:
+               printDBG( "getResolvedURL end" )
+               return RetHost(RetHost.NOT_IMPLEMENTED, value = [])                
+        else:
+            printDBG( "getResolvedURL end" )
+            return RetHost(RetHost.NOT_IMPLEMENTED, value = [])
+
+    def getSearchResults(self, pattern, searchType = None):
+        printDBG( "getSearchResults begin" )
+        printDBG( "getSearchResults pattern: " +pattern)
+        self.prevIndex.append(0)
+        self.prevList.append(self.currList)
+        self.currList = self.host.getSearchResults(pattern, searchType)
+        printDBG( "getSearchResults end" )
+        return RetHost(RetHost.OK, value = self.currList)
+
+    ###################################################
+    # Additional functions on class IPTVHost
+    ###################################################
+
+class Host:
+    XXXversion = "2020.05.11.1"
+    XXXremote  = "0.0.0.0"
+    currList = []
+    MAIN_URL = ''
+    SEARCH_proc = ''
+    
+    def __init__(self):
+        printDBG( 'Host __init__ begin' )
+        self.cm = pCommon.common()
+        self.up = urlparser() 
+        self.history = CSearchHistoryHelper('xxx')
+        self.sessionEx = MainSessionWrapper() 
+        self.currList = []
+        printDBG( 'Host __init__ end' )
+
+    def setCurrList(self, list):
+        printDBG( 'Host setCurrList begin' )
+        self.currList = list
+        printDBG( 'Host setCurrList end' )
+        return 
+
+    def getInitList(self):
+        printDBG( 'Host getInitList begin' )
+        _url = 'https://gitlab.com/iptv-host-xxx/iptv-host-xxx/raw/master/IPTVPlayer/hosts/hostXXX.py'
+        query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+        try:
+           data = self.cm.getURLRequestData(query_data)
+           #printDBG( 'Host init data: '+data )
+           r=self.cm.ph.getSearchGroups(data, '''XXXversion = ['"]([^"^']+?)['"]''', 1, True)[0]
+           if r:
+              printDBG( 'XXXremote = '+r )
+              self.XXXremote=r
+        except:
+           printDBG( 'Host init query error' )
+        self.currList = self.listsItems(-1, '', 'main-menu')
+        printDBG( 'Host getInitList end' )
+        return self.currList
+
+    def getListForItem(self, Index = 0, refresh = 0, selItem = None):
+        printDBG( 'Host getListForItem begin' )
+        valTab = []
+        if len(self.currList[Index].urlItems) == 0:
+           return valTab
+        valTab = self.listsItems(Index, self.currList[Index].urlItems[0], self.currList[Index].urlSeparateRequest)
+        self.currList = valTab
+        printDBG( 'Host getListForItem end' )
+        return self.currList
+
+    def getSearchResults(self, pattern, searchType = None):
+        printDBG( "Host getSearchResults begin" )
+        printDBG( "Host getSearchResults pattern: " +pattern)
+        valTab = []
+        valTab = self.listsItems(-1, pattern, 'SEARCH')
+        self.currList = valTab
+        printDBG( "Host getSearchResults end" )
+        return self.currList
+
+    def _cleanHtmlStr(self, str):
+        str = str.replace('<', ' <').replace('\n', ' ').replace('\r', ' ').replace('\t', ' ')
+        return clean_html(str).strip()
+
+    def FullUrl(self, url):
+        if url.startswith('//'):
+            url = 'http:' + url
+        return url
+
+    def getPage(self, baseUrl, cookie_domain, cloud_domain, params={}, post_data=None):
+        COOKIEFILE = os_path.join(GetCookieDir(), cookie_domain)
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+        self.HEADER = {'User-Agent': self.USER_AGENT, 'Accept': 'text/html'}
+        params['cloudflare_params'] = {'domain':cloud_domain, 'cookie_file':COOKIEFILE, 'User-Agent':self.USER_AGENT}
+        return self.cm.getPageCFProtection(baseUrl, params, post_data)
+
+    def getPage4k(self, baseUrl, cookie_domain, cloud_domain, params={}, post_data=None):
+        COOKIEFILE = os_path.join(GetCookieDir(), cookie_domain)
+        self.USER_AGENT = 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0'
+        def _getFullUrl(url):
+            if self.cm.isValidUrl(url):
+                return url
+            else:
+                return urlparse.urljoin(baseUrl, url) 
+        if params == {}: params = dict(self.defaultParams)
+        params['cookie_items'] = {'xxx':'ok'}
+        params['cloudflare_params'] = {'domain':cloud_domain, 'cookie_file':COOKIEFILE, 'User-Agent':self.USER_AGENT, 'full_url_handle':_getFullUrl}
+        return self.cm.getPageCFProtection(baseUrl, params, post_data)
+
+    def _getPage(self, url, addParams = {}, post_data = None):
+        
+        try:
+            import httplib
+            def patch_http_response_read(func):
+                def inner(*args):
+                    try:
+                        return func(*args)
+                    except httplib.IncompleteRead, e:
+                        return e.partial
+                return inner
+            prev_read = httplib.HTTPResponse.read
+            httplib.HTTPResponse.read = patch_http_response_read(httplib.HTTPResponse.read)
+        except Exception: printExc()
+        sts, data = self.cm.getPage(url, addParams, post_data)
+        try: httplib.HTTPResponse.read = prev_read
+        except Exception: printExc()
+        return sts, data
+
+    def get_Page(self, baseUrl, addParams={}, post_data=None):
+        if addParams == {}: addParams = dict(self.defaultParams)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+
+    def listsItems(self, Index, url, name = ''):
+        printDBG( 'Host listsItems begin' )
+        printDBG( 'Host listsItems url: '+url )
+        valTab = []
+        self.format4k = config.plugins.iptvplayer.xxx4k.value
+        self.beegfullhd = config.plugins.iptvplayer.beeg.value
+
+        if name == 'main-menu':
+           printDBG( 'Host listsItems begin name='+name )
+           if self.XXXversion <> self.XXXremote and self.XXXremote <> "0.0.0.0":
+              valTab.append(CDisplayListItem('---UPDATE---','UPDATE MENU',        CDisplayListItem.TYPE_CATEGORY,           [''], 'UPDATE',  '', None)) 
+           valTab.append(CDisplayListItem('XHAMSTER',       'xhamster.com',       CDisplayListItem.TYPE_CATEGORY, ['https://xhamster.com/categories'],     'xhamster','https://1000logos.net/wp-content/uploads/2018/12/xHamster-Logo-768x432.png', None)) 
+           valTab.append(CDisplayListItem('HOME MOVIES TUBE',     'http://www.homemoviestube.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.homemoviestube.com/channels/'],'HomeMoviesTube', 'http://www.homemoviestube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ZBIORNIK MINI',     'https://mini.zbiornik.com', CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/filmy'],'ZBIORNIKMINI', 'https://static.zbiornik.com/upimg/0160d9c44a354d20e81f0e6df5fe832e.jpg', None)) 
+           valTab.append(CDisplayListItem('HCLIPS',     'http://www.hclips.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.hclips.com/categories/'],'hclips', 'https://i.pinimg.com/474x/d3/16/78/d31678f3c99564740ab5b097e7792927.jpg', None)) 
+           valTab.append(CDisplayListItem('4TUBE',          'www.4tube.com',      CDisplayListItem.TYPE_CATEGORY, ['https://www.4tube.com/tags'],          '4TUBE',   'http://cdn1.ht.ui.4tube.com/assets/img/layout/4tube-logo-1f503fd81c.png', None)) 
+           valTab.append(CDisplayListItem('EPORNER',        'www.eporner.com',    CDisplayListItem.TYPE_CATEGORY, ['https://www.eporner.com/cats/'],   'eporner', 'http://static.eporner.com/new/logo.png', None)) 
+           valTab.append(CDisplayListItem('TUBE8',          'www.tube8.com',      CDisplayListItem.TYPE_CATEGORY, ['http://www.tube8.com/categories.html'], 'tube8',   'http://cdn1.static.tube8.phncdn.com/images/t8logo.png', None)) 
+           valTab.append(CDisplayListItem('YOUPORN',        'wwww.youporn.com',   CDisplayListItem.TYPE_CATEGORY, ['https://www.youporn.com/categories/'],'youporn', 'https://fs.ypncdn.com/cb/bundles/youpornwebfront/images/l_youporn_black.png?v=9b34af679da9f8f8279fb875c7bcea555a784ec3', None)) 
+           valTab.append(CDisplayListItem('PORNHUB',        'www.pornhub.com',    CDisplayListItem.TYPE_CATEGORY, ['https://www.pornhub.com/categories'],    'pornhub', 'https://mk0onemorecupofd9ppb.kinstacdn.com/wp-content/uploads/2018/11/Make-Money-Pornhub.jpg', None)) 
+           valTab.append(CDisplayListItem('HDPORN',         'www.hdporn.net',     CDisplayListItem.TYPE_CATEGORY, ['http://www.hdporn.net/channels/'],      'hdporn',  'http://www.hdporn.com/gfx/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('REDTUBE',        'www.redtube.com',    CDisplayListItem.TYPE_CATEGORY, ['http://www.redtube.com/categories'],      'redtube', 'http://img02.redtubefiles.com/_thumbs/design/logo/redtube_260x52_black.png', None)) 
+           valTab.append(CDisplayListItem('HENTAIGASM',     'hentaigasm.com',     CDisplayListItem.TYPE_CATEGORY, ['http://hentaigasm.com'],                'hentaigasm','http://hentaigasm.com/wp-content/themes/detube/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('XVIDEOS',        'www.xvideos.com',    CDisplayListItem.TYPE_CATEGORY, ['http://www.xvideos.com'],               'xvideos', 'http://emblemsbf.com/img/31442.jpg', None)) 
+           valTab.append(CDisplayListItem('XNXX',           'www.xnxx.com',       CDisplayListItem.TYPE_CATEGORY, ['http://www.xnxx.com'],                  'xnxx',    'http://www.naughtyalysha.com/tgp/xnxx/xnxx-porn-recip.jpg', None)) 
+           valTab.append(CDisplayListItem('BEEG',           'beeg.com',           CDisplayListItem.TYPE_CATEGORY, ['https://beeg.com'],                      'beeg',    'https://i.pinimg.com/474x/8e/89/91/8e89916e7e4d8c0b314d548578d4aba5.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNRABBIT',     'www.pornrabbit.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornrabbit.com/channels/'],'pornrabbit','https://www.pornrabbit.com/templates/pornrabbit/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNHD',     'www.pornhd.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.pornhd.com/category'],'pornhd','https://pbs.twimg.com/profile_images/527104689444093952/PbRNZmMT_400x400.png', None)) 
+           valTab.append(CDisplayListItem('AH-ME',     'www.ah-me.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.ah-me.com/channels.php'],'AH-ME','http://ahmestatic.fuckandcdn.com/ah-me/ahmestatic/v20/common/ah-me/img/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('AMATEURPORN',     'https://www.amateurporn.me', CDisplayListItem.TYPE_CATEGORY, ['https://www.amateurporn.me/categories/'],'AMATEURPORN', 'https://www.amateurporn.me/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('YOUJIZZ',     'http://www.youjizz.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.youjizz.com/categories'],'YOUJIZZ', 'http://www.sample-made.com/cms/content/uploads/2015/05/youjizz_logo-450x400.jpg', None)) 
+           valTab.append(CDisplayListItem('DACHIX',     'http://www.dachix.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.dachix.com/categories'],'DACHIX', 'http://thumbs.dachix.com/images/dachixcom_logo_noir.png', None)) 
+           valTab.append(CDisplayListItem('DRTUBER',     'http://www.drtuber.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.drtuber.com/categories'],'DRTUBER', 'http://static.drtuber.com/templates/frontend/mobile/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('TNAFLIX',     'https://www.tnaflix.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.tnaflix.com/categories'],'TNAFLIX', 'https://pbs.twimg.com/profile_images/1109542593/logo_400x400.png', None)) 
+           #valTab.append(CDisplayListItem('EL-LADIES',     'http://www.el-ladies.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.el-ladies.com'],'EL-LADIES', 'http://www.el-ladies.com/img/v3/header-logo.jpg', None)) 
+           valTab.append(CDisplayListItem('EXTREMETUBE',     'http://www.extremetube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.extremetube.com/video-categories'],'EXTREMETUBE', 'http://www.wp-tube-plugin.com/feed-images/extremetube.png', None)) 
+           valTab.append(CDisplayListItem('RUS.PORN',     'https://rusvidos.tv', CDisplayListItem.TYPE_CATEGORY, ['http://rus.porn/'],'RUSPORN', 'http://mixporn24.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORN720',     'http://porn720.net/', CDisplayListItem.TYPE_CATEGORY, ['http://porn720.net/'],'PORN720', 'http://porn720.net/wp-content/themes/porn720/img/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNTREX',     'http://www.porntrex.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porntrex.com/categories/'],'PORNTREX', 'https://www.porntrex.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNDOE',     'http://www.porndoe.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.porndoe.com/categories'],'PORNDOE', 'https://sih.avn.com/1024x500/top/filters:extract_focal()/article-images/2015/4/593284/TopStory_BBD79930-DC94-11E4-8F7E-9046D33E6151.jpg', None)) 
+           valTab.append(CDisplayListItem('PORNfromCZECH',     'http://www.pornfromczech.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.pornfromczech.com/'],'PORNFROMCZECH', 'https://www.bing.com/th?id=OIP.LA7c-hQkzRto2v_bqXV1MQHaBJ&pid=Api', None)) 
+           valTab.append(CDisplayListItem('FILMYPORNO',     'http://www.filmyporno.tv', CDisplayListItem.TYPE_CATEGORY, ['http://www.filmyporno.tv/channels/'],'FILMYPORNO', 'http://www.filmyporno.tv/templates/default_tube2016/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('CLIPHUNTER',     'http://www.cliphunter.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.cliphunter.com/categories/'],'CLIPHUNTER', 'http://www.cliphunter.com/gfx/new/logo.png', None)) 
+           valTab.append(CDisplayListItem('EMPFLIX',     'http://www.empflix.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.empflix.com/categories.php'],'EMPFLIX', 'https://www.empflix.com/images/logo_emp.jpg', None)) 
+           valTab.append(CDisplayListItem('THUMBZILLA',     'http://www.thumbzilla.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.thumbzilla.com/'],'THUMBZILLA', 'https://cdn-d-static.pornhub.com/tz-static/images/pc/logo.png?cache=2016111010', None)) 
+           valTab.append(CDisplayListItem('YUVUTU',     'http://www.yuvutu.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.yuvutu.com/categories/'],'YUVUTU', 'http://www.yuvutu.com/themes/yuvutu_v2/images/yuvutu_logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNICOM',     'http://pornicom.com', CDisplayListItem.TYPE_CATEGORY, ['http://pornicom.com/categories/'],'PORNICOM', 'http://pornicom.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('HDZOG',     'http://www.hdzog.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.hdzog.com/categories/'],'HDZOG', 'https://pbs.twimg.com/profile_images/484686238402629632/5fzwWkJQ_bigger.png', None)) 
+           #valTab.append(CDisplayListItem('PORNOMENGE',     'https://www.pornomenge.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornomenge.com/kategorien/'],'PORNOMENGE', 'https://th.servitubes.com/videos/8/1/b/5/1/81b51795337b047be07d3b3790b97c923535dffb.mp4-preview-3.jpg', None)) 
+           valTab.append(CDisplayListItem('TUBEPORNCLASSIC',     'http://tubepornclassic.com/', CDisplayListItem.TYPE_CATEGORY, ['http://tubepornclassic.com/categories/'],'TUBEPORNCLASSIC', 'http://www.tubepornclassic.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('KOLOPORNO',     'https://www.koloporno.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.koloporno.com/kategoriach/'],'KOLOPORNO', 'https://pbs.twimg.com/profile_images/638608521072934912/sqy78GQm.png', None)) 
+           valTab.append(CDisplayListItem('REALGFPORN',     'https://www.realgfporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.realgfporn.com/channels/'],'REALGFPORN', 'https://www.realgfporn.com/assets/img/logo.png', None)) 
+           valTab.append(CDisplayListItem('PLAYVIDS',     'https://www.playvids.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.playvids.com/categories&jsclick=1'],'PLAYVIDS', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS9PrWdcYR2t0pJjXg_Wi02ZyiP6E1PJ0mmilizp745_fazgzxu&s', None)) 
+           valTab.append(CDisplayListItem('FUX',     'http://www.fux.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.fux.com'],'fux', 'https://cdn1-ht-assets.fux.com/Fux.png', None)) 
+           valTab.append(CDisplayListItem('PORNTUBE',     'http://www.porntube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.porntube.com'],'PORNTUBE', 'https://cdn1-ht-assets.porntube.com/PornTube.png', None)) 
+           valTab.append(CDisplayListItem('PORNERBROS',     'http://www.pornerbros.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornerbros.com'],'pornerbros', 'https://cdn1-ht-assets.pornerbros.com/PornerBros.png', None)) 
+           valTab.append(CDisplayListItem('MOVIEFAP',     'http://www.moviefap.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.moviefap.com/browse/'],'MOVIEFAP', 'http://www.moviefap.com/images/logo.gif', None)) 
+           valTab.append(CDisplayListItem('YOURPORN.SEXY',     'https://sxyprn.com', CDisplayListItem.TYPE_CATEGORY, ['https://sxyprn.com'],'yourporn', 'http://cdn.itsyourporn.com/assets/images/logo.jpg', None)) 
+           valTab.append(CDisplayListItem('FREEOMOVIE',     'http://www.freeomovie.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.freeomovie.com'],'freeomovie', 'http://www.freeomovie.com/wp-content/uploads/2013/04/logo.png', None)) 
+           valTab.append(CDisplayListItem('KATESTUBE',     'http://www.katestube.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.katestube.com/categories/'],'KATESTUBE', 'https://www.katestube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('VPORN',     'https://www.vporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.vporn.com/categories/'],'vporn', 'https://image.spreadshirtmedia.com/image-server/v1/mp/compositions/1012679167/views/1,width=300,height=300,backgroundColor=E8E8E8,version=1485256808/vporn-brand-dark.jpg', None)) 
+           valTab.append(CDisplayListItem('HOTMOVS',     'http://hotmovs.com', CDisplayListItem.TYPE_CATEGORY, ['http://hotmovs.com/categories/'],'hotmovs', 'http://hotmovs.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNOXO',     'https://www.pornoxo.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornoxo.com'],'pornoxo', 'http://www.web-tv-sexe.fr/logo/pornoxo.jpg', None)) 
+           valTab.append(CDisplayListItem('PINFLIX',     'http://www.pinflix.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.pinflix.com/category'],'pinflix', 'https://pbs.twimg.com/profile_images/568766044114657280/JYh2ZSF_.png', None)) 
+           valTab.append(CDisplayListItem('UPORNIA',     'http://www.upornia.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.upornia.com/categories/'],'upornia', 'https://pbs.twimg.com/profile_images/603525677451640833/AE2qwJ5C_400x400.png', None)) 
+           valTab.append(CDisplayListItem('TXXX',     'http://www.txxx.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.txxx.com/categories/'],'txxx', 'https://www.txxx.com/images/desktop-logo.png', None)) 
+           valTab.append(CDisplayListItem('SUNPORNO',     'https://www.sunporno.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.sunporno.com/channels/'],'sunporno', 'https://sunstatic.fuckandcdn.com/sun/sunstatic/v31/common/sunporno/img/logo_top.png', None)) 
+           valTab.append(CDisplayListItem('SEXU',     'http://sexu.com', CDisplayListItem.TYPE_CATEGORY, ['http://sexu.com/'],'sexu', 'https://images-platform.99static.com/-xYD7Tguk14AOVySxG_bMkoJodU=/500x500/top/smart/99designs-contests-attachments/41/41945/attachment_41945457', None)) 
+           valTab.append(CDisplayListItem('TUBEWOLF',     'http://www.tubewolf.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.tubewolf.com'],'tubewolf', 'http://images.tubewolf.com/logo.png', None)) 
+           valTab.append(CDisplayListItem('ALPHAPORNO',     'http://www.alphaporno.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.alphaporno.com'],'tubewolf', 'http://images.alphaporno.com/logo.png', None)) 
+           valTab.append(CDisplayListItem('ZEDPORN',     'http://zedporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://zedporn.com'],'tubewolf', 'http://images.zedporn.com/new-logo.png', None)) 
+           valTab.append(CDisplayListItem('CROCOTUBE',     'http://crocotube.com', CDisplayListItem.TYPE_CATEGORY, ['http://crocotube.com'],'tubewolf', 'http://crocotube.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ASHEMALETUBE',     'https://www.ashemaletube.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.ashemaletube.com/'],'ASHEMALETUBE', 'https://adminex.ashemaletube.com/images/logo/ast.png', None)) 
+           valTab.append(CDisplayListItem('MOMXXXFUN',     'https://momxxxfun.com/', CDisplayListItem.TYPE_CATEGORY, ['https://momxxxfun.com/categories'],'MOMXXXFUN', 'https://momxxxfun.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('STREAMPORN',     'https://streamporn.pw', CDisplayListItem.TYPE_CATEGORY, ['https://streamporn.pw'],'streamporn', 'https://streamporn.pw/wp-content/uploads/2018/05/fsfsfsf-1.png', None)) 
+           valTab.append(CDisplayListItem('ONLINEPORNFREE',     'https://onlinepornfree.xyz/', CDisplayListItem.TYPE_CATEGORY, ['https://onlinepornfree.xyz/'],'onlinepornfree', 'https://onlinepornfree.xyz/wp-content/uploads/2018/09/onlinepornfree-1.png', None)) 
+           valTab.append(CDisplayListItem('MYDIRTYHOBBY',     'https://www.mydirtyhobby.to', CDisplayListItem.TYPE_CATEGORY, ['https://www.mydirtyhobby.to'],'MYDIRTYHOBBY', 'https://www.mydirtyhobby.to/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('XXXSTREAMS',     'http://xxxstreams.org/', CDisplayListItem.TYPE_CATEGORY, ['http://xxxstreams.org/'],'xxxstreams', 'https://previews.123rf.com/images/sila5775/sila57751506/sila5775150600244/40710228-xxx-designed-using-grunge-brush-on-white-background-sign-logo-symbol-icon-graphic-vector-.jpg', None)) 
+           valTab.append(CDisplayListItem('PANDAMOVIE',     'https://pandamovie.info', CDisplayListItem.TYPE_CATEGORY, ['https://pandamovie.info'],'123PANDAMOVIE', 'https://pandamovie.info/wp-content/uploads/2019/01/pandamovie-new-clolor.png', None)) 
+           valTab.append(CDisplayListItem('FULLXXXMOVIES',     'http://fullxxxmovies.net', CDisplayListItem.TYPE_CATEGORY, ['http://fullxxxmovies.net/'],'FULLXXXMOVIES', 'http://fullxxxmovies.net/wp-content/uploads/2016/09/FullXXXMovies_3.png', None)) 
+           valTab.append(CDisplayListItem('PORNREWIND',     'https://www.pornrewind.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.pornrewind.com/categories/'],'PORNREWIND', 'https://www.pornrewind.com/static/images/logo-light-pink.png', None)) 
+           valTab.append(CDisplayListItem('BALKANJIZZ',     'https://www.balkanjizz.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.balkanjizz.com/kategorije-pornica'],'BALKANJIZZ', 'https://www.balkanjizz.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNORUSSIA',     'https://pornorussia.tv/', CDisplayListItem.TYPE_CATEGORY, ['https://pornorussia.tv/'],'PORNORUSSIA', 'https://pornorussia.tv/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('LETMEJERK',     'https://www.letmejerk.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.letmejerk.com/category'],'LETMEJERK', 'https://image.freepik.com/darmowe-ikony/gra%C4%87_318-135191.jpg', None)) 
+           valTab.append(CDisplayListItem('GOTPORN',     'https://www.gotporn', CDisplayListItem.TYPE_CATEGORY, ['https://www.gotporn.com/categories?src=hm'],'GOTPORN', 'https://cdn2-static-cf.gotporn.com/desktop/img/gotporn-logo.png', None)) 
+           valTab.append(CDisplayListItem('ANALDIN',     'https://www.analdin.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.analdin.com/categories/'],'ANALDIN', 'https://www.analdin.com/images/logo-retina.png', None)) 
+           valTab.append(CDisplayListItem('NETFLIXPORNO',     'https://netflixporno.net/', CDisplayListItem.TYPE_CATEGORY, ['https://netflixporno.net/'],'NETFLIXPORNO', 'https://netflixporno.net/wp-content/uploads/2018/04/netflixporno-1.png', None)) 
+           valTab.append(CDisplayListItem('FAPSET',     'https://fapset.com', CDisplayListItem.TYPE_CATEGORY, ['https://fapset.com'],'fapset', 'https://fapset.com/templates/Default/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('DAFTSEX',     'https://daftsex.com', CDisplayListItem.TYPE_CATEGORY, ['https://daftsex.com/categories'],'daftsex', 'https://daftsex.com/img/daftlogo196x196.png', None)) 
+           valTab.append(CDisplayListItem('LOVE HOME PORN',     'https://lovehomeporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://lovehomeporn.com/videos'],'lovehomeporn', 'https://cdn.static.lovehomeporn.com/templates/frontend/purple/new_images/logo-helloween.png', None)) 
+           valTab.append(CDisplayListItem('EROPROFILE',     'http://www.eroprofile.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.eroprofile.com'],'EROPROFILE', 'http://amateurblogs.eroprofile.com/img/ep_new_gallery_header.png', None)) 
+           valTab.append(CDisplayListItem('ABSOLUPORN',     'http://www.absoluporn.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.absoluporn.com/en/lettre-tag.html'],'absoluporn', 'http://www.absoluporn.com/image/deco/logo.gif', None)) 
+           valTab.append(CDisplayListItem('AMATEUR COOL',     'https://www.amateurcool.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.amateurcool.com/channels/'],'amateurcool', 'https://www.amateurcool.com/templates/amateurcool/images/logo.png', None)) 
+           #valTab.append(CDisplayListItem('YES PORN PLEASE',     'https://yespornplease.com', CDisplayListItem.TYPE_CATEGORY, ['https://yespornplease.com/categories'],'yespornplease', 'https://1000logos.net/wp-content/uploads/2019/02/YesPornPlease-Logo.png', None)) 
+           valTab.append(CDisplayListItem('ANYBUNNY',     'http://anybunny.com', CDisplayListItem.TYPE_CATEGORY, ['http://anybunny.com'],'anybunny', 'http://anybunny.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('DATOPORN',     'http://dato.porn', CDisplayListItem.TYPE_CATEGORY, ['https://dato.porn/categories/'],'datoporn', 'https://pbs.twimg.com/media/CtzxPlEWgAAiIjH.png', None)) 
+           valTab.append(CDisplayListItem('HQPORNER',     'https://hqporner.com', CDisplayListItem.TYPE_CATEGORY, ['https://hqporner.com/porn-categories.php'],'hqporner', 'https://www.filmyporno.blog/wp-content/uploads/2018/12/channel-hqporner.jpg', None)) 
+           valTab.append(CDisplayListItem('SPANKBANG',     'https://spankbang.com', CDisplayListItem.TYPE_CATEGORY, ['https://spankbang.com/categories'],'spankbang', 'https://static.spankbang.com/static_desktop/Images/logo_desktop_v4@2x.png', None)) 
+           valTab.append(CDisplayListItem('CUMLOUDER',     'https://www.cumlouder.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.cumlouder.com/categories'],'cumlouder', 'https://1000logos.net/wp-content/uploads/2019/02/CumLouder-Logo.png', None)) 
+           valTab.append(CDisplayListItem('PORN00',     'http://www.porn00.org', CDisplayListItem.TYPE_CATEGORY, ['http://www.porn00.org/categories/'],'porn00', 'http://www.porn00.org/wp-content/themes/porn00v3/assets/img/logo4.png', None)) 
+           valTab.append(CDisplayListItem('WATCHPORNX',     'https://watchpornx.com/', CDisplayListItem.TYPE_CATEGORY, ['https://watchpornx.com/'],'watchpornx', 'https://watchpornfree.info/wp-content/uploads/2019/01/watchpornfreews-1-e1525276673535.png', None)) 
+           #valTab.append(CDisplayListItem('VOLIMEEE',     'https://www.volimeee.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.volimeee.com/categories'],'volimeee', 'https://www.volimeee.com/images/logo/logo.png', None)) 
+           valTab.append(CDisplayListItem('P720',     'https://p720.net', CDisplayListItem.TYPE_CATEGORY, ['https://p720.net/categories/'],'P720', 'https://p720.net/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('PORNOPERSIK',     'https://pornopersik.com', CDisplayListItem.TYPE_CATEGORY, ['https://pornopersik.com/categories/'],'pornopersik', 'https://pornopersik.com/static/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ANYPORN',     'https://anyporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://anyporn.com/categories/'],'ANYPORN', 'https://anyporn.com/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('ANON-V',     'https://anon-v.com', CDisplayListItem.TYPE_CATEGORY, ['https://anon-v.com/categories/'],'ANON-V', 'https://anon-v.com/logo350.png', None)) 
+           valTab.append(CDisplayListItem('BRAVOPORN',     'https://www.bravoporn.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.bravoporn.com/c/'],'bravoporn', 'https://www.bravoporn.com/v/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('BRAVOTEENS',     'https://www.bravoteens.com/', CDisplayListItem.TYPE_CATEGORY, ['https://www.bravoteens.com//cats/'],'bravoteens', 'https://www.bravoteens.com/tb/images/logo.png', None)) 
+           valTab.append(CDisplayListItem('SLEAZYNEASY',     'https://www.sleazyneasy.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.sleazyneasy.com/categories/'],'sleazyneasy', 'https://cdni.sleazyneasy.com/images/favicon-152.png', None)) 
+           valTab.append(CDisplayListItem('VJAV',     'https://vjav.com', CDisplayListItem.TYPE_CATEGORY, ['https://vjav.com/categories/'],'vjav', 'https://vjav.com/images/favicons/apple-touch-icon.png', None)) 
+           valTab.append(CDisplayListItem('JAVHOHO',     'https://javhoho.com', CDisplayListItem.TYPE_CATEGORY, ['https://javhoho.com/category/free-jav-uncensored/'],'javhoho', 'https://javhoho.com/wp-content/uploads/2019/11/JAVhoho.com-logo.png', None)) 
+
+
+           if config.plugins.iptvplayer.xxxsortall.value:
+               valTab.sort(key=lambda poz: poz.name)
+
+           if config.plugins.iptvplayer.xxxsearch.value:
+               self.SEARCH_proc=name
+               valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+               valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),             CDisplayListItem.TYPE_SEARCH,             [''], '',        '', None)) 
+
+           valTab.insert(0,CDisplayListItem(_('PROSZĘ PRZEKAŻ 1% PODATKU NA KRS 0000049063'),  _('KRS 0000049063\nSTOWARZYSZENIE "OTWÓRZMY PRZED NIMI ŻYCIE"\nUL. KOŚCIUSZKI 43   32-065 KRZESZOWICE\nPRZEKAŻ 1 % SWOJEGO PODATKU\nPODARUJ NASZYM NIEPEŁNOSPRAWNYM SŁOŃCE'),             CDisplayListItem.TYPE_MORE,             [''], '',        '', None)) 
+           valTab.append(CDisplayListItem('FOTKA-PL-KAMERKI',     'http://www.fotka.pl/kamerki', CDisplayListItem.TYPE_CATEGORY, ['http://api.fotka.pl/v2/cams/get?page=1&limit=100&gender=f'],'FOTKA-PL-KAMERKI', 'https://pbs.twimg.com/profile_images/3086758992/6fb5cc2ee2735c334d0363bcb01a52ca_400x400.png', None)) 
+           url = 'https://chaturbate.com/tags/%s' % config.plugins.iptvplayer.chaturbate.value
+           valTab.append(CDisplayListItem('CHATURBATE',     'chaturbate.com', CDisplayListItem.TYPE_CATEGORY, [url],'CHATURBATE','http://www.adultcamfriendx.com/wp-content/uploads/2016/11/chaturbate-cams-logo.png', None)) 
+           valTab.append(CDisplayListItem('XHAMSTERLIVE',       "Kamerki",       CDisplayListItem.TYPE_CATEGORY,['http://xhamsterlive.com'], 'xhamsterlive', 'https://cdn.stripst.com/assets/icons/favicon-196x196_xhamsterlive.com.png',None))
+           valTab.append(CDisplayListItem('CAM4',     'https://www.cam4.com', CDisplayListItem.TYPE_CATEGORY, ['https://www.cam4.com'],'CAM4-KAMERKI', 'https://www.cam4models.com/images/c4logo_white.png', None)) 
+           valTab.append(CDisplayListItem('MYFREECAMS',     'http://www.myfreecams.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.myfreecams.com/#Homepage'],'MYFREECAMS', 'http://www.adultcamfriendx.com/wp-content/uploads/2016/11/myfreecams-webcams-logo.png', None)) 
+           #valTab.append(CDisplayListItem('LIVEJASMIN',     'http://www.livejasmin.com', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/girl/free+chat?selectedFilters=12'],'LIVEJASMIN', 'http://livejasmins.fr/livejasmin-france.png', None)) 
+           valTab.append(CDisplayListItem('BONGACAMS',     'https://bongacams.com/', CDisplayListItem.TYPE_CATEGORY, ['https://en.bongacams.com/ajax-categories'],'BONGACAMS', 'http://i.bongacams.com/images/bongacams_logo3_header.png', None)) 
+           valTab.append(CDisplayListItem('SHOWUP   - live cams',       'showup.tv',          CDisplayListItem.TYPE_CATEGORY, ['http://showup.tv'],                     'showup',  'https://i.pinimg.com/originals/cd/73/1d/cd731d0be3bb2cabcecd6d7bdfe50ae9.png', None)) 
+           #valTab.append(CDisplayListItem('ZBIORNIK - live cams',       'zbiornik.tv',       CDisplayListItem.TYPE_CATEGORY, ['http://zbiornik.com/live/'],            'zbiornik','http://static.zbiornik.com/images/zbiornikBig.png', None)) 
+           valTab.append(CDisplayListItem('CAMSODA',       'http://www.camsoda.com',       CDisplayListItem.TYPE_CATEGORY, ['http://www.camsoda.com/api/v1/browse/online'],            'CAMSODA','https://cachew.camsoda.com/assets/img/camsoda-logo-160x50.png', None)) 
+           valTab.append(CDisplayListItem('STREAMATE',       'https://streamate.com',       CDisplayListItem.TYPE_CATEGORY, ['https://streamate.com'],            'STREAMATE','https://m2.nsimg.net/3.0/auto/skin/sm/assets/ffe71-1453326178-logo.png', None)) 
+           try: 
+               phImage = urlparser.decorateUrl('http://media4.nkdcdn.com/images/siteImages/textImages/common/phtml/whiteLabel/new.naked/logo.png', {'Referer': 'https://www.naked.com'})
+               valTab.append(CDisplayListItem('CAMSTER',       'https://www.naked.com',       CDisplayListItem.TYPE_CATEGORY, ['https://www.naked.com/'],            'NAKED', phImage, None)) 
+           except Exception: 
+               printExc()
+           valTab.append(CDisplayListItem('ADULT-TV',     'http://www.adulttvlive.net/category/live-18-tv/', CDisplayListItem.TYPE_CATEGORY, ['http://www.adulttvlive.net/category/live-18-tv/'],'ADULTTV', 'http://www.adultstv.net/wp-content/uploads/2018/10/adulogo-e1540927937315.png', None)) 
+           valTab.append(CDisplayListItem('+++ XXXLIST +++   XXXversion = '+str(self.XXXversion), '+++ XXXLIST +++   XXXversion = '+str(self.XXXversion), CDisplayListItem.TYPE_CATEGORY, [''],'XXXLIST', '', None)) 
+           if config.plugins.iptvplayer.xxxupdate.value:
+               valTab.append(CDisplayListItem('CHANGELOG',                    'CHANGELOG',   CDisplayListItem.TYPE_CATEGORY, ['https://gitlab.com/iptv-host-xxx/iptv-host-xxx/commits/master.atom'], 'UPDATE-ZMIANY', '', None)) 
+           self.yourporn = config.plugins.iptvplayer.yourporn.value
+
+           return valTab
+
+        # ########## #
+        if 'HISTORY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           for histItem in self.history.getHistoryList():
+               valTab.append(CDisplayListItem(histItem['pattern'], 'Szukaj ', CDisplayListItem.TYPE_CATEGORY, [histItem['pattern'],histItem['type']], 'SEARCH', '', None))          
+            
+           return valTab           
+        # ########## #
+        if 'SEARCH' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           pattern = url 
+           if Index==-1: 
+              self.history.addHistoryItem( pattern, 'video')
+           if self.SEARCH_proc == '': return []               
+           if self.SEARCH_proc == 'main-menu':
+              valTab=[]
+              self.MAIN_URL = 'https://www.4tube.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='4TUBE - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'ahme-search')
+              for item in valtemp: item.name='AH-ME - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.cliphunter.com' 
+              valtemp = self.listsItems(-1, url, 'CLIPHUNTER-search')
+              for item in valtemp: item.name='CLIPHUNTER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.dachix.com' 
+              valtemp = self.listsItems(-1, url, 'DACHIX-search')
+              for item in valtemp: item.name='DACHIX - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.drtuber.com' 
+              valtemp = self.listsItems(-1, url, 'DRTUBER-search')
+              for item in valtemp: item.name='DRTUBER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.eporner.com' 
+              valtemp = self.listsItems(-1, url, 'eporner-search')
+              for item in valtemp: item.name='EPORNER - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.fux.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='FUX - '+item.name
+              valTab = valTab + valtemp
+
+#              valtemp = self.listsItems(-1, url, 'hdzog-search')
+#              for item in valtemp: item.name='HDZOG - '+item.name              
+#              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.homemoviestube.com'
+              valtemp = self.listsItems(-1, url, 'HomeMoviesTube-search')
+              for item in valtemp: item.name='HomeMoviesTube - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'KATESTUBE-search')
+              for item in valtemp: item.name='KATESTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.koloporno.com' 
+              valtemp = self.listsItems(-1, url, 'KOLOPORNO-search')
+              for item in valtemp: item.name='KOLOPORNO - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'MOVIEFAP-search')
+              for item in valtemp: item.name='MOVIEFAP - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://porndoe.com' 
+              valtemp = self.listsItems(-1, url, 'porndoe-search')
+              for item in valtemp: item.name='PORNDOE - '+item.name              
+              valTab = valTab + valtemp 
+
+              self.MAIN_URL = 'https://www.pornerbros.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='PORNERBROS - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.pornhd.com' 
+              valtemp = self.listsItems(-1, url, 'pornhd-search')
+              for item in valtemp: item.name='PORNHD - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.pornhub.com' 
+              valtemp = self.listsItems(-1, url, 'pornhub-search')
+              for item in valtemp: item.name='PORNHUB - '+item.name              
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'pornicom-search')
+              for item in valtemp: item.name='PORNICOM - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'https://www.porntube.com'
+              valtemp = self.listsItems(-1, url, '4TUBE-search')
+              for item in valtemp: item.name='PORNTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'PORNFROMCZECH-search')
+              for item in valtemp: item.name='PORNFROMCZECH - '+item.name              
+              valTab = valTab + valtemp 
+
+              valtemp = self.listsItems(-1, url, 'REALGFPORN-search')
+              for item in valtemp: item.name='REALGFPORN - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.redtube.com' 
+              valtemp = self.listsItems(-1, url, 'redtube-search')
+              for item in valtemp: item.name='REDTUBE - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.thumbzilla.com' 
+              valtemp = self.listsItems(-1, url, 'THUMBZILLA-search')
+              for item in valtemp: item.name='THUMBZILLA - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.tube8.com' 
+              valtemp = self.listsItems(-1, url, 'tube8-search')
+              for item in valtemp: item.name='TUBE8 - '+item.name
+              valTab = valTab + valtemp
+
+              valtemp = self.listsItems(-1, url, 'xhamster-search')
+              for item in valtemp: item.name='XHAMSTER - '+item.name              
+              valTab = valTab + valtemp 
+ 
+              self.MAIN_URL = 'http://www.xnxx.com' 
+              valtemp = self.listsItems(-1, url, 'xnxx-search')
+              for item in valtemp: item.name='XNXX - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.xvideos.com' 
+              valtemp = self.listsItems(-1, url, 'xvideos-search')
+              for item in valtemp: item.name='XVIDEOS - '+item.name              
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.youjizz.com' 
+              valtemp = self.listsItems(-1, url, 'YOUJIZZ-search')
+              for item in valtemp: item.name='YOUJIZZ - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = 'http://www.youporn.com' 
+              valtemp = self.listsItems(-1, url, 'youporn-search')
+              for item in valtemp: item.name='YOUPORN - '+item.name
+              valTab = valTab + valtemp
+ 
+              self.MAIN_URL = 'https://yourporn.sexy'
+              valtemp = self.listsItems(-1, url, 'yourporn-search')
+              for item in valtemp: item.name='YOURPORN.SEXY - '+item.name
+              valTab = valTab + valtemp
+
+              self.MAIN_URL = '' 
+              return valTab
+           valTab = self.listsItems(-1, url, self.SEARCH_proc)
+           return valTab
+
+        if 'UPDATE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab.append(CDisplayListItem(self.XXXversion+' - Local version',   'Local  XXXversion', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           valTab.append(CDisplayListItem(self.XXXremote+ ' - Remote version',  'Remote XXXversion', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           valTab.append(CDisplayListItem('Changelog',                    'Changelog',   CDisplayListItem.TYPE_CATEGORY, ['https://gitlab.com/iptv-host-xxx/iptv-host-xxx/commits/master.atom'], 'UPDATE-ZMIANY', '', None)) 
+           valTab.append(CDisplayListItem('Update Now',                         'Update Now',        CDisplayListItem.TYPE_CATEGORY, [''], 'UPDATE-NOW',    '', None)) 
+           valTab.append(CDisplayListItem('Update Now & Restart Enigma2',                         'Update Now & Restart Enigma2',        CDisplayListItem.TYPE_CATEGORY, ['restart'], 'UPDATE-NOW',    '', None)) 
+           return valTab
+        if 'UPDATE-ZMIANY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           try:
+              data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host listsItems query error' )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phCats = re.findall("<entry>.*?<title>(.*?)</title>.*?<updated>(.*?)</updated>.*?<name>(.*?)</name>", data, re.S)
+           if phCats:
+              for (phTitle, phUpdated, phName ) in phCats:
+                  phUpdated = phUpdated.replace('T', '   ')
+                  phUpdated = phUpdated.replace('Z', '   ')
+                  phUpdated = phUpdated.replace('+01:00', '   ')
+                  phUpdated = phUpdated.replace('+02:00', '   ')
+                  printDBG( 'Host listsItems phTitle: '+phTitle )
+                  printDBG( 'Host listsItems phUpdated: '+phUpdated )
+                  printDBG( 'Host listsItems phName: '+phName )
+                  valTab.append(CDisplayListItem(phUpdated+' '+phName+'  >>  '+decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [''],'', '', None)) 
+           return valTab
+        if 'UPDATE-NOW' == name:
+           printDBG( 'HostXXX listsItems begin name='+name )
+           _url = 'https://gitlab.com/iptv-host-xxx/iptv-host-xxx/commits/master'
+           query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+              #printDBG( 'Host init data: '+data )
+              crc=self.cm.ph.getSearchGroups(data, '''/commit/([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'crc = '+crc )
+              if not crc: error
+           except:
+              printDBG( 'Host init query error' )
+              valTab.append(CDisplayListItem('ERROR - Błąd init: '+_url,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+           tmpDir = GetTmpDir() 
+           source = os_path.join(tmpDir, 'iptv-host-xxx.tar.gz') 
+           dest = os_path.join(tmpDir , '') 
+           _url = 'https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/archive.tar.gz?ref=master'              
+           output = open(source,'wb')
+           query_data = { 'url': _url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              output.write(self.cm.getURLRequestData(query_data))
+              output.close()
+              os_system ('sync')
+              printDBG( 'HostXXX pobieranie iptv-host-xxx.tar.gz' )
+           except:
+              if os_path.exists(source):
+                 os_remove(source)
+              printDBG( 'HostXXX Błąd pobierania iptv-host-xxx.tar.gz' )
+              valTab.append(CDisplayListItem('ERROR - Blad pobierania: '+_url,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+           if os_path.exists(source):
+              printDBG( 'HostXXX Jest plik '+source )
+           else:
+              printDBG( 'HostXXX Brak pliku '+source )
+
+           cmd = 'tar -xzf "%s" -C "%s" 2>&1' % ( source, dest )  
+           try: 
+              os_system (cmd)
+              os_system ('sync')
+              printDBG( 'HostXXX rozpakowanie  ' + cmd )
+           except:
+              printDBG( 'HostXXX Błąd rozpakowania iptv-host-xxx.tar.gz' )
+              os_system ('rm -f %s' % source)
+              os_system ('rm -rf %siptv-host-xxx-%s' % (dest, crc))
+              valTab.append(CDisplayListItem('ERROR - Blad rozpakowania %s' % source,   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+
+           try:
+              od = '%siptv-host-xxx-master-%s/'% (dest, crc)
+              do = resolveFilename(SCOPE_PLUGINS, 'Extensions/') 
+              cmd = 'cp -rf "%s"/* "%s"/ 2>&1' % (os_path.join(od, 'IPTVPlayer'), os_path.join(do, 'IPTVPlayer'))
+              printDBG('HostXXX kopiowanie1 cmd[%s]' % cmd)
+              os_system (cmd)
+              #printDBG('HostXXX kopiowanie2 cmd[%s]' % cmd)
+              #iptv_system(cmd)
+              os_system ('sync')
+           except:
+              printDBG( 'HostXXX blad kopiowania' )
+              os_system ('rm -f %s' % source)
+              os_system ('rm -rf %siptv-host-xxx-master-%s' % (dest, crc))
+              valTab.append(CDisplayListItem('ERROR - blad kopiowania',   'ERROR', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+              return valTab
+
+
+           ikony = GetPluginDir('icons/PlayerSelector/')
+           if os_path.exists('%sXXX100' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX100 ' )
+              os_system('mv %sXXX100 %sXXX100.png' % (ikony, ikony)) 
+           if os_path.exists('%sXXX120' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX120 '  )
+              os_system('mv %sXXX120 %sXXX120.png' % (ikony, ikony))
+           if os_path.exists('%sXXX135' % ikony):
+              printDBG( 'HostXXX Jest '+ ikony + 'XXX135 '  )
+              os_system('mv %sXXX135 %sXXX135.png' % (ikony, ikony))
+
+           try:
+              cmd = GetPluginDir('hosts/hostXXX.py')
+              with open(cmd, 'r') as f:  
+                 data = f.read()
+                 f.close() 
+                 wersja = re.search('XXXversion = "(.*?)"', data, re.S)
+                 aktualna = wersja.group(1)
+                 printDBG( 'HostXXX aktualna wersja wtyczki '+aktualna )
+           except:
+              printDBG( 'HostXXX error openfile ' )
+
+
+           printDBG( 'HostXXX usuwanie plikow tymczasowych' )
+           os_system ('rm -f %s' % source)
+           os_system ('rm -rf %siptv-host-xxx-master-%s' % (dest, crc))
+
+           if url:
+              try:
+                 msg = '\n\n Wersja hostXXX w tunerze %s' % aktualna
+                 self.sessionEx.open(MessageBox, _("Update completed successfully. For the moment, the system will reboot.")+ msg, type = MessageBox.TYPE_INFO, timeout = 10)
+                 sleep (10)
+                 from enigma import quitMainloop
+                 quitMainloop(3)
+              except: pass
+           valTab.append(CDisplayListItem('Update End. Please manual restart enigma2',   'Restart', CDisplayListItem.TYPE_CATEGORY, [''], '', '', None)) 
+           printDBG( 'HostXXX listsItems end' )
+           return valTab
+
+##################################################################
+        if 'tube8' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.tube8.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'categories-subnav', '</ul>', False)[1]
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'tube8-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Most Viewed ---', 'Most Viewed',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/most-viewed/page/1/'],      'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Top Rated ---', 'Top Rated',                 CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/top/page/1/'],       'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Longest ---', 'Longest', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/longest/page/1/'],      'tube8-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/newest/page/1/'],       'tube8-clips', '', None)) 
+           self.SEARCH_proc='tube8-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'tube8-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.tube8.com/searches.html?q='+url.replace(' ','+'), 'tube8-clips')
+           return valTab              
+        if 'tube8-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.tube8.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           nextPage = self.cm.ph.getSearchGroups(data, '''rel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="category_video_list', 'footer', False)[1]
+           if '' == data2: data2 = self.cm.ph.getDataBeetwenMarkers(data, 'Video Results For', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<figure', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''data-video_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''video-duration">([^>]+?)<''', 1, True)[0] 
+              if phUrl and not 'title]' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if nextPage:
+              valTab.append(CDisplayListItem('Next', 'Page: '+nextPage, CDisplayListItem.TYPE_CATEGORY, [nextPage], name, '', None))                
+           return valTab
+
+        if 'xnxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xnxx.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xnxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           parse = re.search('"categories":(.*?),"more_links"', data, re.S)
+           if not parse: return valTab
+           #printDBG( 'Host listsItems parse.group(1): '+parse.group(1) )
+           result = simplejson.loads(parse.group(1))
+           if result:
+              for item in result:
+                 phUrl = str(item["url"].replace('\/','/'))  
+                 phTitle = str(item["label"]) 
+                 if not 'jpg' in phTitle:
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'xnxx-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem('--- Hits ---', 'Hits',               CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/hits/'],      'xnxx-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Best Videos ---', 'Best Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/best/'],      'xnxx-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],       'xnxx-clips', '', None)) 
+           self.SEARCH_proc='xnxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),_('Search'),                  CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xnxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xnxx.com/?k='+url.replace(' ','+'), 'xnxx-clips')
+           return valTab              
+        if 'xnxx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xnxx.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xnxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.search("pagination(.*?)Next", data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'id="video', '</p></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/video[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''</span></span>([^>]+?)<''', 1, True)[0].strip()
+              if not phTime: phTime = self.cm.ph.getSearchGroups(item, '''<p class="metadata">([^>]+?)-''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if match: match = re.findall('href="(.*?)"', match.group(1), re.S)
+           if match:
+              phUrl = match[-1]
+              #printDBG( 'Host listsItems page phUrl: '+phUrl )
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl], name, '', None))                
+           return valTab
+
+        if 'zbiornik' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://zbiornik.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornik.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page('http://zbiornik.tv/accept/yes/Lw==')
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           sex = ''
+           hash = ''
+           ph1 = re.search('var streams = (.*?)}];', data, re.S)
+           if ph1: 
+              ph1 = ph1.group(1)+'}]'
+              #printDBG( 'Host listsItems json: '+ph1 )
+              result = simplejson.loads(ph1)
+              try:
+                 for item in result:
+                     phash = re.search('"phash":"(.*?)"', data, re.S)
+                     if phash: hash=phash.group(1)
+                     if str(item["accType"])=='1': sex = 'male'
+                     if str(item["accType"])=='2': sex = 'female'
+                     if str(item["accType"])=='3': sex = 'couple'
+                     phImage = 'http://camshot.zbiornik.com/'+str(item["broadcasturl"])+'-224.jpg'
+                     rtmpUrl = 'rtmp://'+str(item["server"])+'/videochat/?'+hash
+                     playpath = str(item["broadcasturl"])
+                     swfUrl = 'https://zbiornik.tv/wowza.swf?v50&b=100'
+                     baseUrl = 'https://zbiornik.tv/'+str(item["nick"])
+                     app = ' app=videochat/?'+hash
+                     flashVer = ' flashVer=WIN 28,0,0,161'
+                     #streamUrl = 'rtmp://'+str(item["server"])+'/videochat/?'+hash+' playpath='+str(item["broadcasturl"])+' swfUrl=http://zbiornik.tv/wowza.swf?v50&b=100 pageUrl=http://zbiornik.tv/'+str(item["nick"])+' live=1'
+                     #streamUrl = rtmpUrl + ' playpath=' + playpath +  ' tcUrl=' + rtmpUrl + ' swfUrl=' + swfUrl + ' pageUrl=' + baseUrl + ' app='+app+' live=1 conn=S:OK'+ flashVer
+                     streamUrl = 'rtmp://'+str(item["server"])+'/videochat/ playpath='+str(item["broadcasturl"])+' swfVfy=https://zbiornik.tv/wowza.swf?v50&b=100 pageUrl=https://zbiornik.tv/'+str(item["nick"])+app+' live=1'
+                     if str(item["accType"])<>'1':
+                        valTab.append(CDisplayListItem(str(item["nick"])+'    {'+sex+'}',str(item["nick"]),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', streamUrl, 0)], 0, phImage, None)) 
+              except Exception as e:
+                 printExc()
+           return valTab
+
+        if 'showup' == name:
+           self.MAIN_URL = 'http://showup.tv' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'showup.cookie')
+           #url = 'https://showup.tv/site/accept_rules?ref=https://showup.tv/'
+           url = 'https://showup.tv'
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           #accept_rules.showup.tv/
+           self.defaultParams['cookie_items'] = {'accept_rules':'true'}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li data-equalizer-watch class="stream"', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl[1:] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phDesc = self.cm.ph.getSearchGroups(item, '''<p>([^>]+?)</p>''', 1, True)[0]
+              transcoderaddr = self.cm.ph.getSearchGroups(item, '''transcoderaddr=['"]([^"^']+?)['"]''', 1, True)[0] 
+              streamid = self.cm.ph.getSearchGroups(item, '''streamid=['"]([^"^']+?)['"]''', 1, True)[0] 
+              uid = self.cm.ph.getSearchGroups(item, '''uid=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl =  'rtmp://'+transcoderaddr+':1935/webrtc/'+streamid+'_aac'
+              phImage = 'http://showup.tv/'+phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle+'     '+decodeHtml(phDesc),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 0)], 0, phImage, None)) 
+           return valTab
+
+        if 'xvideos' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="dyn', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''href=.*?>([^>]+?)</a>''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'xvideos-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name) 
+           valTab.insert(0,CDisplayListItem('--- Pornstars ---',   'Pornstars',   CDisplayListItem.TYPE_CATEGORY, ['https://www.xvideos.com/pornstars-index/list'], 'xvideos-pornstars', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Best Videos ---', 'Best Videos', CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/best/'],     'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- New Videos ---',  'New Videos',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],              'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- 100% Verified ---',  '100% Verified',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/verified/videos'],              'xvideos-clips', '', None)) 
+           #valTab.insert(0,CDisplayListItem('--- Channels ---',  'Channels',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/channels'],              'xvideos-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem('--- Porno po polsku ---',  'Porno po polsku',  CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/porn/polski'],              'xvideos-clips', '', None)) 
+           self.SEARCH_proc='xvideos-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xvideos-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tags-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xvideos-clips', '', None)) 
+           return valTab
+        if 'xvideos-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xvideos.com/?k='+url.replace(' ','+'), 'xvideos-clips')
+           return valTab              
+        if 'xvideos-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xvideos.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xvideos.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '"active" href=', '</ul></div>', False)[1]
+           next = self.cm.ph.getSearchGroups(next, '''href=['"](/[^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace(' ','+')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'id="video', '</p></div>')
+           for item in data:
+              phTitle = re.compile('''title=['"]([^'^"]+?)['"]''').findall(item) 
+              for titel in phTitle:
+                 if not 'Verified' in titel: 
+                    phTitle = titel
+                    break
+              if not phTitle: phTitle = 'VIDEO'
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/video[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime.strip()+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Page: '+self.MAIN_URL+next, CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+next], name, '', None))                
+           return valTab
+
+        if 'hentaigasm' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://hentaigasm.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hentaigasm.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('Genres(.*?)</div></div>', data, re.S|re.I)
+           if not parse: return valTab
+           phCats = re.findall("<a href='(.*?)'.*?>(.*?)<", parse.group(1), re.S)
+           if phCats:
+              for (phUrl, phTitle) in phCats:
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hentaigasm-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- New ---", "New",        CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL], 'hentaigasm-clips', '',None))
+           return valTab
+        if 'hentaigasm-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('<div class="thumb">.*?title="(.*?)" href="(.*?)".*?<img src="(.*?)"', data, re.S)
+           if phMovies:
+              for (phTitle, phUrl, phImage) in phMovies:
+                  phImage = phImage.replace(' ','%20')
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           match = re.search("<div class='wp-pagenavi'>(.*?)</div>", data, re.S)
+           if match: match = re.findall("href='(.*?)'", match.group(1), re.S)
+           if match:
+                  phUrl = match[-1]
+                  valTab.append(CDisplayListItem('Next', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))                
+           return valTab
+
+        if 'youporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a data-espnode=', '</a>')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'categories_list porn-categories action', 'footer', False)[1]
+           if not data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href="/category/', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              #phTitle = self.cm.ph.getSearchGroups(item, '''ListElement">([^>]+?)<''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/category/[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl + 'time/?'
+              if phTitle and phUrl: 
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'youporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Discussed ---",     "Most Discussed",     CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_discussed/"],                   'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Favorited ---",     "Most Favorited",     CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_favorited/"],                   'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",        "Most Viewed",        CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/most_viewed/"],                      'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",          "Top Rated",          CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/top_rated/"],                        'youporn-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",                "New",                CDisplayListItem.TYPE_CATEGORY,["https://www.youporn.com/"],                                  'youporn-clips', '',None))
+           self.SEARCH_proc='youporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'youporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.youporn.com/search/?query=%s' % url.replace(' ','+'), 'youporn-clips')
+           return valTab              
+        if 'youporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-video-id', '<i class="icon-thin-x">')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'data-espnode="videolist', 'footer', False)[1]
+           if len(data2): data = data2
+           data = data.split('data-video-id=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?jpg)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0].replace("&amp;","&")
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace("&amp;","&") 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.youporn.com' + phUrl
+              if len(phUrl)>5 and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime.strip()+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = next.replace("&amp;","&")
+              if next.startswith('/'): next = 'https://www.youporn.com' + next
+              valTab.append(CDisplayListItem('Next', 'Next: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           self.MAIN_URL = '' 
+           return valTab
+
+        if 'redtube' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.redtube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="categor', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'redtube-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Favored ---", "Most Favored", CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/mostfavored?period=alltime"], 'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",  "Most Viewed",  CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/mostviewed?period=alltime"],  'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",    "Top Rated",    CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/top?period=alltime"],         'redtube-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["http://www.redtube.com/"],                           'redtube-clips', '',None))
+           self.SEARCH_proc='redtube-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'redtube-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.redtube.com/?search=%s' % url.replace(' ', '+'), 'redtube-clips')
+           return valTab      
+        if 'redtube-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.redtube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul id="block_browse"', 'footer', False)[1]
+           if not data2: data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul id="search_results_block"', '</ul>', False)[1]
+           if not data2: data2 = data
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li id=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-mediumthumb=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-thumb_url=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getDataBeetwenMarkers(item, '<span class="duration">', '</a>', False)[1]
+              phRuntime = self._cleanHtmlStr(phRuntime).strip() 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phRuntime and not '/premium/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'xhamster' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://xhamster.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'letter-block', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/categories/[^"^']+?)['"]''', 1, True)[0]
+              if config.plugins.iptvplayer.xhamstertag.value and not phUrl:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/tags/[^"^']+?)['"]''', 1, True)[0] 
+                 if phUrl and phTitle: phTitle = phTitle+'   (tags)'
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle.strip(),phTitle.strip(),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xhamster-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/categories/hd-videos"], 'xhamster-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Best monthly ---",       "Best monthly",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/best/monthly"], 'xhamster-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---",       "Pornstars",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/pornstars"], 'xhamster-pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://xhamster.com/"], 'xhamster-clips', '',None))
+           self.SEARCH_proc='xhamster-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xhamster-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.xhamster.com/search.php?from=suggestion&q=%s&qcat=video' % url.replace(' ','+'), 'xhamster-clips')
+           return valTab              
+        if 'xhamster-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''data-page="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next: next = self.cm.ph.getSearchGroups(data, '''rel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="thumb-list__item video-thumb video-thumb--dated">', '</div><div')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="thumb-list__item video-thumb">', '</div><div')
+           for item in data2:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = 'https://xhamster.com' + next
+              next = decodeUrl(next)
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           data2 = None
+           return valTab
+        if 'xhamster-pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'letter-block', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://xhamster.com/pornstars/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle.strip(),phTitle.strip(),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xhamster-clips', '', None)) 
+           return valTab
+
+        if 'xhamsterlive' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://xhamsterlive.com' 
+           url='http://xhamsterlive.com/api/front/models'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           country = ''
+           result = simplejson.loads(data)
+           try:
+              for item in result["models"]:
+                 ID = str(item["id"]) 
+                 Name = str(item["username"])
+                 BroadcastServer = str(item["broadcastServer"])
+                 Image = str(item["previewUrl"].replace('\/','/'))  
+                 status = str(item["status"])
+                 try:
+                    country = ' [Country: '+str(item["country"]).upper()+']'
+                 except Exception:
+                    printExc()
+                 if status == "public":
+                    valTab.append(CDisplayListItem(Name,Name+country,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', ID, 1)], 0, Image, None)) 
+           except Exception:
+              printExc()
+           return valTab
+
+        if 'eporner' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.eporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'div class="categoriesbox', '</div> </div>')
+           data = data.split('class="categoriesbox')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phTitle.replace(' movies', '').replace('Porn Videos', '')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'eporner-clips', phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- 4k ---",        "4k",        CDisplayListItem.TYPE_CATEGORY,["https://www.eporner.com/category/4k-porn/"], 'eporner-clips', '','/4k/'))
+           valTab.insert(0,CDisplayListItem("--- HD ---",        "HD",        CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/hd/"], 'eporner-clips', '','/hd/'))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/top_rated/"], 'eporner-clips', '','/top_rated/'))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",   "Popular",   CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/weekly_top/"], 'eporner-clips', '','/weekly_top/'))
+           valTab.insert(0,CDisplayListItem("--- On Air ---",    "On Air",    CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/currently/"], 'eporner-clips', '','/currently/'))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://www.eporner.com/"], 'eporner-clips', '',''))
+           self.SEARCH_proc='eporner-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'eporner-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.eporner.com/search/%s/' % url.replace(' ','+'), 'eporner-clips')
+           return valTab    
+        if 'eporner-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.eporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eporner.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = data.split('data-vp')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''mbtim".+?>([^>]+?)<''', 1, True)[0]
+              mbrate = self.cm.ph.getSearchGroups(item, '''mbrate".+?>([^>]+?)<''', 1, True)[0]
+              mbvie = self.cm.ph.getSearchGroups(item, '''mbvie".+?>([^>]+?)<''', 1, True)[0]
+              if mbrate: mbrate = '['+mbrate+'] '
+              if mbvie: mbvie = '[Views: '+mbvie+'] '
+              size = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)</span>''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle)+'    '+size,'['+phRuntime+'] '+decodeHtml(phTitle)+'    '+size+'\n'+mbrate+mbvie,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', 'Next: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', catUrl))                
+           return valTab
+
+        if 'pornhub' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="cat', '</li>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'pornhub-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---",         "HD",          CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?c=38"], 'pornhub-clips', 'http://cdn1a.static.pornhub.phncdn.com/images/categories/38.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---",    "Longest",     CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=lg"], 'pornhub-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",  "Top Rated",   CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=tr"], 'pornhub-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed", CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=mv"], 'pornhub-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent", CDisplayListItem.TYPE_CATEGORY,["https://www.pornhub.com/video?o=mr"], 'pornhub-clips', '',None))
+           self.SEARCH_proc='pornhub-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornhub-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornhub.com/video/search?search=%s' % url.replace(' ','+'), 'pornhub-clips')
+           return valTab    
+        if 'pornhub-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhub.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host2 getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''"page_next"><a href=['"]([^"^']+?)['"]''')[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'videoblock', '</li>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-mediumthumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"duration">([^"^']+?)<''', 1, True)[0] 
+              phAdded = self.cm.ph.getSearchGroups(item, '''class="added">([^"^']+?)<''', 1, True)[0] 
+              OldImage = self.cm.ph.getSearchGroups(item, '''data-image=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.MAIN_URL+phUrl
+              if not OldImage:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+ '\n[Added: '+phAdded+'] ',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', 'Next '+re.sub('.+page=', '', next), CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+next.replace('&amp;','&')], name, '', None))        
+           return valTab
+
+        if 'hdporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hdporn.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="content">', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.getFullUrl(phUrl, self.MAIN_URL)
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hdporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",           CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top-rated/"]  , 'hdporn-clips','', None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",           CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL]  , 'hdporn-clips','', None))
+           return valTab
+        if 'hdporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next = re.findall('<div id="pagination">.*?</div>', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="content', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''TIME:([^"^']+?)<''', 1, True)[0].strip()
+              phUrl = self.cm.getFullUrl(phUrl, self.MAIN_URL)
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+'] '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.findall("</a><a href='(.*?)'>", next[0], re.S)
+              if len(next)>0:
+                 #next = self.cm.getFullUrl(next[0], self.MAIN_URL)
+                 valTab.append(CDisplayListItem('Next', next[0].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [self.cm.getFullUrl(next[0], url)], name, '', None))                
+              return valTab
+  
+        if 'beeg' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://beeg.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'beeg.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           self.beeg_version = self.cm.ph.getSearchGroups(data, '''cpl/(\d+)\.js''', 1, True)[0] 
+           if not self.beeg_version: self.beeg_version = self.cm.ph.getSearchGroups(data, '''beeg_version = (\d+);''', 1, True)[0] 
+
+           printDBG( 'Host beeg_version: '+str(self.beeg_version) )
+           url = 'https://beeg.com/static/cpl/%s.js' % self.beeg_version
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data2: '+data )
+           self.beeg_salt = self.cm.ph.getSearchGroups(data, '''beeg_salt=['"]([^"^']+?)['"]''', 1, True)[0] 
+           self.beeg_api = '//beeg.com/api/v6/' 
+
+           printDBG( 'Host self.beeg_salt: '+self.beeg_salt )
+           printDBG( 'Host self.beeg_api: '+self.beeg_api )
+
+           url = 'https:%s%s/index/main/0/mobile' % (self.beeg_api, self.beeg_version)
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data3: '+data )
+           result = byteify(simplejson.loads(data))
+           for item in result["tags"]:
+              phTitle = str(item["tag"]).title()
+              phUrl = 'http:%s%s/index/tag/$PAGE$/mobile?tag=%s' % (self.beeg_api, self.beeg_version, urllib.quote(phTitle, '').lower())
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'beeg-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           return valTab    
+        if 'beeg-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.beegfullhd = config.plugins.iptvplayer.beeg.value
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 0
+           else:
+              self.page += 1
+           url = url.replace('$PAGE$', '%s' % str(self.page))
+           printDBG( 'Host current url: '+url )
+           printDBG( 'Host current next: '+next )
+           printDBG( 'Host current page: '+ str(self.page) )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'beeg.cookie')
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 for item in result["videos"]:
+                    phTitle = str(item["title"])
+                    if not phTitle: phTitle = str(item["ps_name"])
+                    #phVideoId = str(item["id"])
+                    try:
+                       Added = str(item["datetime"])
+                    except Exception:
+                       printExc()
+                       Added = ''
+                    try:
+                       Time = str(item["duration"])
+                       m, s = divmod(int(Time), 60)
+                       Time = "[%02d:%02d] " % (m, s)
+                    except Exception:
+                       printExc()
+                       Time = ''
+                    try:
+                       pid = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''pid['"]:([^"^']+?),''', 1, True)[0].strip()
+                       start = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''start['"]:([^"^']+?),''', 1, True)[0].strip()
+                       end = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''end['"]:([^"^']+?),''', 1, True)[0].strip()
+                       phVideoSvId = str(item["svid"])+'?v=2&p='+pid+'&s='+start+'&e='+end
+                    except Exception:
+                       printExc()
+                       phVideoSvId = ''
+                    phUrl = 'https:%s%s/video/%s' % (self.beeg_api, self.beeg_version, phVideoSvId)
+                    try:
+                        Image = self.cm.ph.getSearchGroups(str(item["thumbs"]), '''image['"]:\s['"]([^"^']+?)['"]''', 1, True)[0]
+                        phImage = 'http://img.beeg.com/236x177/%s' % Image
+                        if not Image: phImage = 'https://i.pinimg.com/474x/8e/89/91/8e89916e7e4d8c0b314d548578d4aba5.jpg'
+                    except:
+                        phImage = 'https://i.pinimg.com/474x/8e/89/91/8e89916e7e4d8c0b314d548578d4aba5.jpg'
+                    valTab.append(CDisplayListItem(phTitle,Time+phTitle+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, phVideoSvId)) 
+           except Exception:
+              printExc()
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+2), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+           return valTab
+
+        if 'pornrabbit' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornrabbit.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="top-category-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace(' Porn Videos','')
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornrabbit-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/most-viewed/'],             'pornrabbit-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/top-rated/'],             'pornrabbit-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornrabbit.com/videos/'],             'pornrabbit-clips',    '', None))
+           self.SEARCH_proc='pornrabbit-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornrabbit-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornrabbit.com/%s/' % url.replace(' ','+'), 'pornrabbit-clips')
+           return valTab
+        if 'pornrabbit-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'NEXT', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<!-- item -->', '<!-- item END -->')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace(' Porn Videos','')
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''desc">([^>]+?)<''', 1, True)[0] 
+              if Runtime:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'https://www.pornrabbit.com' + next
+                 if next.startswith('page'): next = re.sub('page.+', '', url) + next
+                 valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+           return valTab
+
+        if 'pornhd' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhd.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tag-150', 'class="footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'http://www.pornhd.com' + phUrl 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornhd-clips', self.FullUrl(phImage), phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channel ---",       "Channel",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhd.com/channel"], 'pornhd-pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---",       "Pornstars",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhd.com/pornstars"], 'pornhd-pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["https://www.pornhd.com/"], 'pornhd-clips', '',None))
+           self.SEARCH_proc='pornhd-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornhd-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornhd.com/search?search=%s' % url.replace(' ','+'), 'pornhd-clips')
+           return valTab
+        if 'pornhd-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article class="video-item ">', '</article>')
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0].replace('.webp','.jpg')
+              if not Image: Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('.webp','.jpg')
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              if Url.startswith('/'): Url = 'http://www.pornhd.com' + Url 
+              valTab.append(CDisplayListItem(decodeHtml(Title),'['+Runtime+'] '+decodeHtml(Title),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'http://www.pornhd.com' + next
+                 valTab.append(CDisplayListItem('Next', 'Page : '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))             
+           return valTab
+        if 'pornhd-channel' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhd.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="tag', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if Url.startswith('/'): Url = 'http://www.pornhd.com' + Url 
+              if Title:
+                 valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'pornhd-clips', Image, None)) 
+           return valTab
+        if 'pornhd-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornhd.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article class="small-thumb">', '</article>')
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.FullUrl(self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0])
+              if not Image: Image = self.FullUrl(self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0])
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if Url.startswith('/'): Url = 'http://www.pornhd.com' + Url 
+              Image = strwithmeta(Image, {'Referer':url, 'Cookie':cookieHeader})
+              valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'pornhd-clips', Image, None)) 
+           if next:
+              next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+              if next:
+                 next = next[-1]
+                 if next.startswith('/'): next = 'http://www.pornhd.com' + next
+                 valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+           return valTab
+
+        if 'AH-ME' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.ah-me.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="moviec', '</div>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'AH-ME-clips', phImage, phUrl)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Long movies ---",       "Long movies",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/long-movies/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top rated ---",       "Top rated",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/top-rated/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- High definition ---",       "High definition",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/high-definition/page1.html"], 'AH-ME-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most favorited ---",       "Most favorited",       CDisplayListItem.TYPE_CATEGORY,["https://www.ah-me.com/mostfavorites/page1.html"], 'AH-ME-clips', '',None))
+           self.SEARCH_proc='ahme-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ahme-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.ah-me.com/search/%s/' % url.replace(' ','+'), 'AH-ME-clips')
+           return valTab
+        if 'AH-ME-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.ah-me.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'next"><a class="color" href="', '">Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="moviec', '/span></p>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Runtime = self.cm.ph.getSearchGroups(item, '''class="time">([^"^']+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(Title),'['+Runtime+'] '+decodeHtml(Title),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if next:
+              printDBG( 'Host next: '+next )
+              valTab.append(CDisplayListItem('Next', 'Next', CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'CHATURBATE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://chaturbate.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="paging">', '</ul>', False)[1]
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl<>'next':
+              valTab.append(CDisplayListItem('Female', 'Female',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/female-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Featured', 'Featured',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Couple', 'Couple',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/couple-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Transsexual', 'Transsexual',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/transsexual-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('HD', 'HD',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/hd-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Teen (18+)', 'Teen',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/teen-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('18 to 21', '18 to 21',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/18to21-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('20 to 30', '20 to 30',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/20to30-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('30 to 50', '30 to 50',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/30to50-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Euro Russian', 'Euro Russian',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/euro-russian-cams/'],'CHATURBATE-clips', '', None)) 
+              valTab.append(CDisplayListItem('Exhibitionist', 'Exhibitionist',CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+'/exhibitionist-cams/'],'CHATURBATE-clips', '', None)) 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/tag/', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'CHATURBATE-clips', '', None)) 
+           if next_page:
+              next_page = self.cm.ph.getAllItemsBeetwenMarkers(next_page, '<li', '</li>')
+              for item in next_page:
+                 next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next 
+              if next == '#': return valTab
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))  
+           return valTab
+        if 'CHATURBATE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           match = re.search('class="endless_separator".*?<li><a href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="room_list_room', 'viewers</li>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Gender=''
+              Age=self.cm.ph.getSearchGroups(item, '''<span class="age gender.">([^>]+?)<''', 1, True)[0]
+              Description=''
+              Location=self.cm.ph.getSearchGroups(item, '''location" style="display: none;">([^>]+?)<''', 1, True)[0]
+              Viewers=''
+              bitrate = self.cm.ph.getSearchGroups(item, '''thumbnail_label.*?>([^>]+?)<''', 1, True)[0]
+              if Url.startswith('/'): Url = self.MAIN_URL + Url 
+              Image = strwithmeta(Image, {'Referer':url, 'Cookie':cookieHeader})
+              valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title)+'   [Age: '+decodeHtml(Age)+']           [Location: '+decodeHtml(Location)+']   [info: '+bitrate+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, Image, None)) 
+           if match:
+              printDBG( 'Host listsItems Next: '  +match.group(1) )
+              if match.group(1).startswith('/'): Url = self.MAIN_URL + match.group(1) 
+              valTab.append(CDisplayListItem('Next', match.group(1), CDisplayListItem.TYPE_CATEGORY, [Url], name, '', None))                
+           return valTab
+
+        if 'AMATEURPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.amateurporn.net' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           match = re.search('class="endless_separator".*?<li><a href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="item"', '</a>')
+           #printDBG( 'Host2 data: '+str(data) )
+           for item in data:
+              Title = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Image = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Gender=''
+              Age=self.cm.ph.getSearchGroups(item, '''<span class="age gender.">([^>]+?)<''', 1, True)[0]
+              Description=''
+              Location=self.cm.ph.getSearchGroups(item, '''location" style="display: none;">([^>]+?)<''', 1, True)[0]
+              Viewers=''
+              bitrate = self.cm.ph.getSearchGroups(item, '''thumbnail_label.*?>([^>]+?)<''', 1, True)[0]
+              if Url.startswith('/'): Url = self.MAIN_URL + Url 
+              valTab.append(CDisplayListItem(Title,Url,CDisplayListItem.TYPE_CATEGORY, [Url],'AMATEURPORN-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='AMATEURPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'AMATEURPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.amateurporn.me/search/%s/' % url.replace(' ','+'), 'AMATEURPORN-clips')
+           return valTab
+        if 'AMATEURPORN-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+            data = data.split('<div class="item  ">')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('Model ','')
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+                Runtime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0] 
+                Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0] 
+                if Added: Added = 'Added: '+ Added
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+phTitle+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            if next:
+                page = self.cm.ph.getSearchGroups(str(next), '''from:([^"^']+?)['"]''')[0]
+                next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+                valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+            return valTab
+
+        if 'FOTKA-PL-KAMERKI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = url 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('"rooms":(.*?),"status":"OK"', data, re.S)
+           if not parse: return valTab
+           #printDBG( 'Host listsItems parse.group(1): '+parse.group(1) )
+           result = simplejson.loads(parse.group(1))
+           if result:
+              for item in result:
+                 try:
+                    Name = str(item["name"])
+                    Age = str(item["age"])
+                    Url = str(item["streamUrl"].replace('\/','/'))+' live=1'
+                    Title = str(item["title"])
+                    Viewers = str(item["viewers"])
+                    Image = str(item["av_126"].replace('\/','/'))
+                    hls = str(item["streamMPEGHLSUrl"].replace('\/','/'))
+                    try:
+                       Image = str(item["av_640"].replace('\/','/'))
+                    except Exception: printExc()
+                    if config.plugins.iptvplayer.fotka.value == '0': Url = hls.replace('https','http').replace('manifest.hls','index.m3u8')
+                    valTab.append(CDisplayListItem(Name,'[Age : '+Age+']'+'   [Views:  '+Viewers+']      '+Title, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 0)], 0, Image, None)) 
+                 except Exception: printExc()
+           return valTab
+
+        if 'CAM4-KAMERKI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.cam4.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cam4.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           url = 'https://cam4.com/tags?json=true&index=0&count=75&category='
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           self.page = 1
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 for item in result:
+                    phTitle = str(item["name"])
+                    valTab.append(CDisplayListItem(phTitle, phTitle, CDisplayListItem.TYPE_CATEGORY, [phTitle], 'CAM4-KAMERKI-clips', '', None))                
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["hd"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Poland ---",       "Polskie",       CDisplayListItem.TYPE_CATEGORY,["female&country=pl"], 'CAM4-KAMERKI-clips', '',None))
+           #valTab.insert(0,CDisplayListItem("--- Couples ---",       "Pary",       CDisplayListItem.TYPE_CATEGORY,["couple"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Male ---",       "Mężczyźni",       CDisplayListItem.TYPE_CATEGORY,["male"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Transsexual ---",       "Transseksualiści",       CDisplayListItem.TYPE_CATEGORY,["shemale"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "Nowe",       CDisplayListItem.TYPE_CATEGORY,["new"], 'CAM4-KAMERKI-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Female ---",       "Kobiety",       CDisplayListItem.TYPE_CATEGORY,["female"], 'CAM4-KAMERKI-clips', '',None))
+           return valTab 
+        if 'CAM4-KAMERKI-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cam4.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           Url = 'https://www.cam4.com/directoryCams?directoryJson=true&online=true&url=true&gender={0}&page={1}'.format(url, str(self.page))
+           sts, data = self.get_Page(Url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 for item in result["users"]:
+                    phTitle = str(item["username"])
+                    try:
+                       phImage = 'https://snapshots.xcdnpro.com/thumbnails/{0}?s={1}'.format(str(item["username"]), str(item["thumbnailId"])) 
+                    except Exception:
+                       printExc()
+                       phImage = str(item["profileImageLink"])
+                    #phUrl = str(item["hlsPreviewUrl"])
+                    try:
+                       age = str(item["age"])
+                       countryCode = str(item["countryCode"])
+                    except Exception:
+                       printExc()
+                    phUrl = 'https://www.cam4.com/{0}'.format(str(item["username"]))
+                    valTab.append(CDisplayListItem(phTitle,'[Age: '+age+']  ' + phTitle+'\nCountry: '+countryCode.upper(),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+
+           valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))                
+           return valTab 
+
+        if 'CAMSODA' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            self.MAIN_URL = 'https://www.camsoda.com/' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'camsoda.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return
+            #printDBG( 'Host listsItems data: '+data )
+            #"template":["username","display_name","connections","sort_value","subject_html","stream_name","tsize","server_prefix"]
+            dane = re.search('"results":(.*?)}]', data, re.S)
+            if dane: 
+                dane = dane.group(1)+'}]'
+                printDBG( 'Host listsItems json: '+dane )
+                try:
+                    result = simplejson.loads(dane)
+                    tsize = '355x200'
+                    Image = ''
+                    if result:
+                        for item in result:
+                            subject_html = ''
+                            try:
+                                Name = str(item["username"]) #.encode("utf-8")
+                                printDBG( 'Host Name: '+Name )
+                            except Exception: printExc()
+                            try:
+                                Name = str(item["tpl"][1])
+                                printDBG( 'Host Name: '+Name )
+                            except Exception: printExc()
+                            try:
+                                stream_name = str(item["stream_name"]) #.encode("utf-8")
+                                printDBG( 'Host stream_name: '+stream_name )
+                            except Exception: printExc()
+                            try:
+                                stream_name = str(item["tpl"][2])
+                                printDBG( 'Host stream_name: '+stream_name )
+                            except Exception: printExc()
+                            try:
+                                subject_html = str(item["tpl"][5])
+                                printDBG( 'Host subject_html: '+subject_html )
+                            except Exception: printExc()
+                            try:
+                                enc = stream_name.split('-')[-1]
+                            except Exception: printExc()
+                            try:
+                                Image = str(item["tpl"][9])
+                            except Exception: printExc()
+         
+                            videourl = "https://www.camsoda.com/api/v1/video/vtoken/" + Name + "?username=guest_" + str(random.randrange(100, 55555))
+                            if Image.startswith('//'): Image = 'http:' + Image 
+                            try:
+                               phImage = urlparser.decorateUrl(phImage, {'Referer': 'http://www.camsoda.com'})
+                            except: pass
+                            if config.plugins.iptvplayer.camsoda.value == '1':
+                                videourl = 'rtmp'+videourl
+                                stream = 'rtmp'
+                            else:
+                                stream = 'm3u8'
+                            if stream_name:
+                                valTab.append(CDisplayListItem(stream_name, stream_name+'   '+stream+'\n'+subject_html, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', videourl, 1)], 0, Image, None)) 
+                except Exception: printExc()
+            return valTab 
+
+        if 'STREAMATE' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://streamate.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            query_data = { 'url': url,  'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="cats__content">', 'class="recents__list">', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+            for item in data:
+                Title = self._cleanHtmlStr(item).split(' ')[1]
+                Title = self.cm.ph.getDataBeetwenMarkers(item, '</span>', '</a>', False)[1]
+                Title = str(Title).strip()
+                Url = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                if Url.startswith('/'): Url = 'https://streamate.com' + Url 
+                valTab.append(CDisplayListItem(decodeHtml(Title),decodeHtml(Title),CDisplayListItem.TYPE_CATEGORY, [Url],'STREAMATE-clips', '', None)) 
+            return valTab 
+        if 'STREAMATE-clips' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://streamate.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            query_data = { 'url': url,  'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination">', 'Next', False)[1]
+            data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="js-dynamicsearch" data-status="online"', '</figure>')
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''data-name=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-thumbid=['"]([^"^']+?)['"]''', 1, True)[0] 
+                age = self.cm.ph.getSearchGroups(item, '''"year">([^>]+?)<''', 1, True)[0].strip()
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                phImage = 'http://m2.nsimg.net/biopic/original4x3/' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'  [Age:'+age+']', CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phTitle, 1)], 0, phImage, None)) 
+            if next:
+                next = re.compile('''href=['"]([^'^"]+?)['"]''').findall(next) 
+                if next:
+                    next = next[-1]
+                    if next.startswith('/'): next = 'https://streamate.com' + next
+                    valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None)) 
+            return valTab 
+
+        if 'NAKED' == name:
+            printDBG( 'Host listsItems begin name='+name ) 
+            self.MAIN_URL = 'https://www.naked.com' 
+            COOKIEFILE = os_path.join(GetCookieDir(), 'naked.cookie')
+            host = 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Mobile Safari/537.36'
+            header = {'User-Agent': host, 'Accept':'application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest','Content-Type':'application/x-www-form-urlencoded'} 
+            query_data = {'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                #data = self.cm.getURLRequestData(query_data)
+                sts, data = self.cm.getPage(url, query_data)
+            except Exception as e:
+                printExc()
+                return valTab 
+            printDBG( 'Host listsItems data: '+data )
+            #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-model-card', '<div class="each-model" data-cam-score=')
+            data = data.split('<a class="model-wrapper"')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('Model ','')
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''live-image-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                desc = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+                age = self.cm.ph.getSearchGroups(item, '''model-age">([^>]+?)<''', 1, True)[0] 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle)+'\n'+desc, CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            return valTab 
+
+        if 'YOUJIZZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.youjizz.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'class="footer-category category-link', 'footer-links', False)[1]
+           if len(data2): data = data2
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li><a href="/categories/', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)<''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'YOUJIZZ-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---",       "HD",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/search/HighDefinition-1.html#"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/top-rated/1.html"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",       "Newest",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/newest-clips/1.html"], 'YOUJIZZ-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---",       "Popular",       CDisplayListItem.TYPE_CATEGORY,["http://www.youjizz.com/most-popular/1.html"], 'YOUJIZZ-clips', '',None))
+           self.SEARCH_proc='YOUJIZZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'YOUJIZZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.youjizz.com/search/%s-1.html' % url.replace(' ','+'), 'YOUJIZZ-clips')
+           return valTab
+        if 'YOUJIZZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://www.youjizz.com' 
+           url = url.replace(' ','%20')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           next=''
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '</div>', False)[1]
+           next_page = self.cm.ph.getAllItemsBeetwenMarkers(next_page, '<li', '</li>')
+           for item in next_page:
+              next = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+           if next.startswith('/'): next = self.MAIN_URL + next
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-thumb', 'format-views')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''html'>([^"^']+?)</a>''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"time">([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle).strip(),'['+phRuntime+'] '+decodeHtml(phTitle).strip(),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'DACHIX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.dachix.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="listing-categories">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl+"/videos"],'DACHIX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---",       "Longest",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=longest"], 'DACHIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=popular"], 'DACHIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---",       "Most Viewed",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=viewed"], 'DACHIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["http://www.dachix.com/videos?sort=rated"], 'DACHIX-clips', '',None))
+           self.SEARCH_proc='DACHIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'DACHIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.dachix.com/s/%s' % url.replace(' ','+'), 'DACHIX-clips')
+           return valTab
+        if 'DACHIX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class=\'thumb_container video\'', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getSearchGroups(item, '''S">([^>]+?)[-<]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'http://www.dachix.com' + phUrl
+              if phUrl.startswith('www'): phUrl = 'http://' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'http://www.dachix.com' + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'DRTUBER' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.drtuber.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'drtuber.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'contain_cols', '</div> </div> </div> </div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if '/gay/' in phUrl: phTitle = phTitle + ' gay'
+              if '/shemale/' in phUrl: phTitle = phTitle + ' shemale'
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'DRTUBER-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='DRTUBER-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'DRTUBER-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.drtuber.com/search/videos/%s' % url.replace(' ','+'), 'DRTUBER-clips')
+           return valTab
+        if 'DRTUBER-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'drtuber.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/video/', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'http://www.drtuber.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next 
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'MYFREECAMS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.myfreecams.com/' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'myfreecams.cookie')
+           rm(COOKIEFILE)
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage('https://new.myfreecams.com/server', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #serwery = self.cm.ph.getDataBeetwenMarkers(data, 'ServerConfig = ', ';', False)[1]
+           try:
+              result = byteify(simplejson.loads(data))
+              if result:
+                 self.h5video_servers = result["h5video_servers"]
+                 self.wzobs_servers = result["wzobs_servers"]
+                 self.ngvideo_servers = result["ngvideo_servers"]
+                 #self.websocket_servers = result["websocket_servers"]
+                 #self.video_servers = result["video_servers"]
+           except Exception:
+              printExc()
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(self.MAIN_URL, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+
+           self.cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           self.baf = 'baf='+self.cm.getCookieItem(COOKIEFILE,'baf')+';'
+           self.cid = 'cid='+self.cm.getCookieItem(COOKIEFILE,'cid')+';'
+
+           age = ''
+           country = ''
+           city = ''
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class=slm_c>', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,age +phTitle+'\n'+city+' '+country,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phTitle, 1)], 0, phImage, None)) 
+           if config.plugins.iptvplayer.xxxsortmfc.value: valTab.sort(key=lambda poz: poz.name)
+           return valTab 
+
+        if 'TNAFLIX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.tnaflix.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'TNAFLIX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Featured ---",       "Featured",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/featured/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/popular/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/toprated/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["https://www.tnaflix.com/new/?d=all&period=all"], 'TNAFLIX-clips', '',None))
+           self.SEARCH_proc='TNAFLIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'TNAFLIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.tnaflix.com/search.php?what=%s&tab=' % url.replace(' ','+'), 'TNAFLIX-clips')
+           return valTab
+        if 'TNAFLIX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-vid=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''videoDuration'>([^>]+?)<''', 1, True)[0] 
+              Added = self.cm.ph.getSearchGroups(item, '''floatLeft\'>([^>]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle)+'\nAdded: '+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.tnaflix.com' + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'LIVEJASMIN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab.insert(0,CDisplayListItem('--- Transgender ---', 'Transgender', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/transgender'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Couple ---', 'Couple', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/couple'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Mature ---', 'Mature', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/mature'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Fetish ---', 'Fetish', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/fetish'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Lesbian ---', 'Lesbian', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/lesbian'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Soul_mate ---', 'Soul_mate', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/soul_mate'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Hot_flirt ---', 'Hot_flirt', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/hot_flirt'], 'LIVEJASMIN-clips', '', None))
+           valTab.insert(0,CDisplayListItem('--- Girl ---', 'Girl', CDisplayListItem.TYPE_CATEGORY, ['http://www.livejasmin.com/en/girl'], 'LIVEJASMIN-clips', '', None))
+           return valTab 
+        if 'LIVEJASMIN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.livejasmin.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try: data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error cookie' )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           sessionID = self.cm.ph.getSearchGroups(data, '''"jsm2session":['"]([^"^']+?)['"]''')[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'listPagePerformers =', '];', False)[1]
+           result = simplejson.loads(data2+']')
+           phImage = ''
+           if result:
+              for item in result:
+                 try:
+                    phTitle = str(item["pid"])
+                    phUrl = 'http://www.livejasmin.com/en/chat/'+phTitle+'?session='+sessionID
+                    try:
+                       ID = str(item["id"])
+                       phImage = self.cm.ph.getDataBeetwenMarkers(data, 'container_'+ID, '</picture>', False)[1]
+                       phImage = self.cm.ph.getSearchGroups(phImage, '''jpg-src=['"]([^"^']+?)['"]''')[0] 
+                       #printDBG( 'Host phImage: '+str(phImage) )
+                    except Exception:
+                       printExc()
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 except Exception:
+                    printExc()
+           data2 = None
+           return valTab 
+
+        if 'EL-LADIES' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.el-ladies.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ladies.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data ) 
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Niches', 'Archive', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = decodeHtml(phTitle)
+              #phUrl = '%s/?search=%s&fun=0&niche=%s&pnum=%s&hd=%s' % (self.MAIN_URL, phTitle, ID, str(1), 1) 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'EL-LADIES-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,["http://just.eroprofile.com/rss.xml"], 'EL-LADIES-new', '',None))
+           self.SEARCH_proc='EL-LADIES-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EL-LADIES-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://search.el-ladies.com/?hd=0&search=%s&fun=0&niche=0' % url.replace(' ','+'), 'EL-LADIES-clips')
+           return valTab
+        if 'EL-LADIES-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'ladies.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data ) 
+            data = data.split('<div class="cnt">')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self._cleanHtmlStr(item)
+                if '\n' in phTitle: phTitle = phTitle.split('\n')[0]
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle), decodeHtml(phTitle), CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            return valTab 
+
+        if 'EL-LADIES-new' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('CDATA\[(.*?)\].*?src="(.*?)".*?<link>(.*?)</link>', data, re.S) 
+           if phMovies:
+              for (phTitle, phImage, phUrl) in phMovies:
+                  valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'EXTREMETUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.extremetube.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'extremetube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h1>', 'footer', False)[1]
+           printDBG( 'Host listsItems data: '+data )
+           if '<option value' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<option value', '</option>')
+           elif 'fromPage=categories' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="thumb-cat', '</a>')
+           else:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item) 
+              phUrl = self.cm.ph.getSearchGroups(item, '''value=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              #phUrl = phUrl.replace('?fromPage=categories', '') + '?format=json&page=$PAGE$'
+              #if not 'json' in phUrl: phUrl = phUrl + '?format=json&page=$PAGE$'
+              if phTitle != "Select a Category":
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'EXTREMETUBE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='EXTREMETUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EXTREMETUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.extremetube.com/videos?search=%s' % url.replace(' ','+'), 'EXTREMETUBE-clips')
+           return valTab
+        if 'EXTREMETUBE-clips' == name:
+            printDBG( 'Host listsItems begin name='+name )
+            COOKIEFILE = os_path.join(GetCookieDir(), 'extremetube.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return valTab
+            printDBG( 'Host listsItems data: '+data )
+            next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0]
+            data = data.split('<li id="obj')
+            if len(data): del data[0]
+            for item in data:
+                phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                phImage = self.cm.ph.getSearchGroups(item, '''data-srcmedium=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+                Runtime = self.cm.ph.getSearchGroups(item, '''data-duration=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&') 
+                if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+                if phImage.startswith('//'): phImage = 'http:' + phImage
+                valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Runtime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+            if next:
+                if next.startswith('/'): next = self.MAIN_URL + next
+                valTab.append(CDisplayListItem('Next', 'Next: '+ next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+            return valTab
+
+
+        if 'XXXLIST' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'xxxlist.txt' 
+           URLLIST_FILE    = 'xxxlist.txt'
+           self.filespath = config.plugins.iptvplayer.xxxlist.value
+           self.sortList = config.plugins.iptvplayer.xxxsortuj.value
+           self.currFileHost = IPTVFileHost() 
+           self.currFileHost.addFile(self.filespath + URLLIST_FILE, encoding='utf-8')
+           tmpList = self.currFileHost.getGroups(self.sortList)
+           for item in tmpList:
+               if '' == item: title = (_("Other"))
+               else:          title = item
+               valTab.append(CDisplayListItem(title,title,CDisplayListItem.TYPE_CATEGORY, [title],'XXXLIST-clips', '', None)) 
+           return valTab
+        if 'XXXLIST-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           desc = ''
+           icon = ''
+           tmpList = self.currFileHost.getAllItems(self.sortList)
+           for item in tmpList:
+               if item['group'] == url:
+                   Title = item['title_in_group']
+                   Url = item['url']
+                   if item.get('icon', '') != '':
+                      icon = item.get('icon', '')
+                   if item.get('desc', '') != '':
+                      desc = item['desc']
+                   if Url.endswith('.mjpg') or Url.endswith('.cgi'):
+                      valTab.append(CDisplayListItem(Title, Url,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', Url, 1)], 0, '', None)) 
+                   else:
+                      valTab.append(CDisplayListItem(Title, Url+'\n'+desc,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, icon, None)) 
+               elif url == (_("Other")) and item['group'] == '':
+                   Title = item['full_title']
+                   Url = item['url']
+                   if item.get('icon', '') != '':
+                      icon = item.get('icon', '')
+                   if item.get('desc', '') != '':
+                      desc = item['desc']
+                   if Url.endswith('.mjpg') or Url.endswith('.cgi'):
+                      valTab.append(CDisplayListItem(Title, Url,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', Url, 1)], 0, '', None)) 
+                   else:
+                      valTab.append(CDisplayListItem(Title, Url+'\n'+desc,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', Url, 1)], 0, icon, None)) 
+           return valTab
+
+        if 'BONGACAMS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pl.bongacams.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           #self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           #self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           #sts, data = self.get_Page(url)
+           #if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data ) 
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           #for item in data:
+           #   phTitle = self._cleanHtmlStr(item).strip()
+           #   phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('/','')
+           #   valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BONGACAMS-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- Couples ---", "Pary",       CDisplayListItem.TYPE_CATEGORY,["couples"], 'BONGACAMS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Male ---",       "Mężczyźni",       CDisplayListItem.TYPE_CATEGORY,["male"], 'BONGACAMS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Transsexual ---",       "Transseksualiści",       CDisplayListItem.TYPE_CATEGORY,["transsexual"], 'BONGACAMS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "Nowe",       CDisplayListItem.TYPE_CATEGORY,["new"], 'BONGACAMS-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Female ---",       "Kobiety",       CDisplayListItem.TYPE_CATEGORY,["females"], 'BONGACAMS-clips', '',None))
+           return valTab 
+        if 'BONGACAMS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           url = 'https://en.bongacams.com/tools/listing_v3.php?livetab=%s&online_only=true&offset=%s&category=%s' % (url, str((self.page*24)-24), url)
+           host = 'Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4'
+           header = {'User-Agent': host, 'Accept':'application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest','Content-Type':'application/x-www-form-urlencoded', 'Referer':'https://en.bongacams.com/', 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'second bonga-clips data: '+data )  
+
+           x = 0
+
+           result = byteify(simplejson.loads(data))
+           if result:
+              try:
+                 for item in result["models"]:
+                    age = ''
+                    phImage = ''
+                    #printDBG( 'Host item: '+str(item) )
+                    try:
+                       online = str(item["online"])  
+                       room = str(item["room"])
+                       phTitle = str(item["username"]) 
+                       phTitle2 = str(item["display_name"])
+                    except Exception:
+                       printExc()
+                       continue
+                    try:
+                       phImage = str(item["thumb_image"]) 
+                       if phImage.startswith('//'): phImage = 'http:' + phImage
+                    except Exception:
+                       printExc()
+                    bitrate = '' 
+                    try:
+                       bitrate = str(item["vq"]) 
+                    except Exception:
+                       printExc()
+                    try: 
+                       age = ' [Age: '+str(item["display_age"])+']  ' 
+                    except Exception:
+                       printExc()
+                    printDBG( 'Host phTitle: '+phTitle )
+                    printDBG( 'Host online: '+online )
+                    printDBG( 'Host room: '+room )
+                    phUrl = phTitle
+                    if room != 'vip' and online == 'True':
+                       x += 1
+                       valTab.append(CDisplayListItem(phTitle2+'   ['+bitrate.upper()+']',phTitle2+'  ('+phTitle+')   '+age+' ['+bitrate.upper()+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 printDBG( 'Host ile: '+str(x) )
+              except Exception:
+                 printExc() 
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))                
+
+           return valTab 
+
+        if 'RUSPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://rusporn.tv' 
+           url = 'https://rusvidos.tv/index2.php'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'rusporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'category-list', '<div class="cls">', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)[<"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              printDBG( 'Host listsItems phUrl: '  +phUrl )
+              printDBG( 'Host listsItems phTitle: '+phTitle )
+              valTab.append(CDisplayListItem(phTitle,phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'RUSPORN-clips', '', phUrl)) 
+           self.SEARCH_proc='RUSPORN-search'
+           #valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           #valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'RUSPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://rusvidos.tv/poisk/?q=%s' % url.replace(' ','+'), 'RUSPORN-clips')
+           return valTab
+        if 'RUSPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data = data.split('class="item')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if 'base64' in phImage:  phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              Time = self.cm.ph.getSearchGroups(item, '''</i>([^>]+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time.strip()+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'PORN720' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://porn720.net' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'id="menu-menu', 'class="sub-header', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phUrl.split('/')[-1],phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORN720-clips', '', phUrl)) 
+           return valTab
+        if 'PORN720-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = re.search('rel="next".*?href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<figure', '</figure>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              phUrl = next.group(1)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', catUrl))                
+           return valTab
+
+        if 'PORNTREX' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.porntrex.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           self.page = 0
+           #printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="list-categories', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="item"', '</a>')
+           for item in data:
+              #printDBG( 'Host item data: '+str(item) )
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNTREX-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNTREX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNTREX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.porntrex.com/search/%s/' % url.replace(' ','+'), 'PORNTREX-clips')
+           return valTab
+        if 'PORNTREX-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s' % self.page
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href="#videos".*?data-parameters="sort_by:post_date;from:([^"^']+?)['"]''', 1, True)[0]
+           if not next:  next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href="#.*?from_albums:([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-', '</li></ul></div>')
+           #printDBG( 'Host2 getResolvedURL data: '+str(data) )
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''fa-clock-o"></i>([^"^']+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': phUrl})
+              except: pass
+              if not '>Private<' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'PORNDOE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://porndoe.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndoe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/category/[^"^']+?)['"]''', 1, True)[0] 
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'PORNDOE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- By duration ---", "By duration", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=duration-down'], 'PORNDOE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most popular ---", "Most popular", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=likes-down'], 'PORNDOE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---", "Most viewed", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views-down'], 'PORNDOE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most recent ---", "Most recent", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos'], 'PORNDOE-clips', '',None))
+           self.SEARCH_proc='porndoe-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porndoe-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://porndoe.com/search?keywords=%s' % url.replace(' ','+'), 'PORNDOE-clips')
+           return valTab
+        if 'PORNDOE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           self.MAIN_URL = 'http://porndoe.com' 
+           host = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndoe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link\srel=['"]next['"]\shref=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-id=', 'item -->')
+           data = data.split('data-id=')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.porndoe.com'+ phUrl
+
+              phImage = urlparser.decorateUrl(phImage, {'Referer': phUrl, 'User-Agent': host}) 
+
+              Time = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+            
+           return valTab
+
+        if 'PORNFROMCZECH' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.pornfromczech.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornfromczech.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornfromczech.cookie', 'pornfromczech.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNFROMCZECH-clips', '', phUrl)) 
+           self.SEARCH_proc='PORNFROMCZECH-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNFROMCZECH-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://pornfromczech.com/?s=%s&x=0&y=0' % url.replace(' ','+'), 'PORNFROMCZECH-clips')
+           return valTab              
+        if 'PORNFROMCZECH-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornfromczech.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornfromczech.cookie', 'pornfromczech.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           Movies = re.findall('<div\sclass="thumb">.*?<a\shref="(.*?)".*?title="(.*?)">.*?<img\ssrc="(.*?)".*?<p class="duration">(.*?)</p>', data, re.S) 
+           if Movies:
+              for (phUrl, phTitle, phImage, Time) in Movies:
+                  Time = Time.strip()
+                  phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle), '['+Time+']    '+decodeHtml(phTitle), CDisplayListItem.TYPE_CATEGORY, [phUrl], 'PORNFROMCZECH-serwer', phImage, decodeHtml(phTitle)))                
+           match = re.search('rel="next" href="(.*?)"', data, re.S)
+           if match:
+              phUrl = match.group(1)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))                
+           return valTab
+        if 'PORNFROMCZECH-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornfromczech.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornfromczech.cookie', 'pornfromczech.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           phserwer = ''
+           phName = catUrl 
+           data = ph.IFRAME.findall(data)
+           for item in data:
+              phUrl = self.cm.getFullUrl(item[1])
+              phserwer = phUrl.split('/')[2]+' - '
+              if 'exosrv' in phUrl: continue
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(phserwer+phName,phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, '', None)) 
+           return valTab
+
+        if 'FILMYPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.filmyporno.tv' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<h2>Kategorie', 'footer-top-col', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item--channel col', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FILMYPORNO-clips', phImage, phUrl)) 
+           valTab.insert(0,CDisplayListItem("--- NAJDŁUŻSZE ---",       "NAJDŁUŻSZE",                    CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/longest/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJCZĘŚCIEJ DYSKUTOWANE ---","NAJCZĘŚCIEJ DYSKUTOWANE", CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/most-discussed/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJLEPIEJ OCENIONE ---",     "NAJLEPIEJ OCENIONE",      CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/top-rated/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NAJPOPULARNIEJSZE ---",      "NAJPOPULARNIEJSZE",       CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/most-viewed/"], 'FILMYPORNO-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- NOWE FILMY ---",             "NOWE FILMY",              CDisplayListItem.TYPE_CATEGORY,["http://www.filmyporno.tv/videos/"], 'FILMYPORNO-clips', '',None))
+           self.SEARCH_proc='FILMYPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'FILMYPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.filmyporno.tv/search/%s/' % url.replace(' ','+'), 'FILMYPORNO-clips')
+           return valTab  
+        if 'FILMYPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'item-col col', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              Time = Time.strip()
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              url = re.sub('page.+', '', url)
+              valTab.append(CDisplayListItem('Next ', 'Page: '+url+next_page, CDisplayListItem.TYPE_CATEGORY, [url+next_page], name, '', None))                
+           return valTab
+
+        if 'CLIPHUNTER' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.cliphunter.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cliphunter.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           parse = re.search('id="submenu-categories">(.*?)</div>', data, re.S)
+           if parse:
+              phCats = re.findall('href="(/categories/.*?)".*?>(.*?)<', parse.group(1), re.S)
+              if phCats:
+                 for (phUrl, phTitle) in phCats:
+                     phUrl = 'http://www.cliphunter.com%s/' % phUrl.replace(' ','%20')
+                     if phTitle <> "More ... " and phTitle <> "HD": 
+                        valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_CATEGORY, [phUrl],'CLIPHUNTER-clips', '', phUrl)) 
+           self.SEARCH_proc='CLIPHUNTER-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'CLIPHUNTER-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.cliphunter.com/search/%s' % url.replace(' ','+'), 'CLIPHUNTER-clips')
+           return valTab
+        if 'CLIPHUNTER-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cliphunter.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.search('rel="next" href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li mId=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''vttl.*?">([^>]+?)<''', 1, True)[0].strip() 
+              if not phTitle: phTitle = self._cleanHtmlStr(item).split('                    ')[4].strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''pop-execute">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              Time = Time.strip()
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']    '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if match:
+              next = match.group(1)
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'EMPFLIX' == name:
+           self.MAIN_URL = 'https://www.empflix.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'empflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           #printDBG( 'Host listsItems data: '+data )
+           genre = re.findall('"thumb"\shref="(.*?)".*?src="(.*?)".*?title="(.*?)"', data, re.S) 
+           if genre:
+              for (phUrl, phImage, phTitle) in genre:
+                 phTitle = decodeHtml(phTitle).strip()
+                 phImage = 'http:'+phImage
+                 if not phTitle == "All": 
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'EMPFLIX-clips', phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- Featured ---",       "Featured",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/featured/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---",       "Most Popular",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---",       "Top Rated",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/toprated/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---",       "New",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/new/?d=all&period=all"], 'EMPFLIX-clips', '',None))
+           self.SEARCH_proc='EMPFLIX-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EMPFLIX-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.empflix.com/search.php?what=%s&tab=' % url.replace(' ','+'), 'EMPFLIX-clips')
+           return valTab
+        if 'EMPFLIX-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), 'empflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           match = re.findall('<a class="llNav".*?href="(.*?)"', data, re.S)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-vid=', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''data-name=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''videoDuration\'>([^>]+?)<''', 1, True)[0]
+              Added = self.cm.ph.getSearchGroups(item, '''floatLeft\'>([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,'['+phRuntime+'] '+phTitle+'\nAdded: '+ Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if match:
+              phUrl = match[0]
+              printDBG( 'Host listsItems page phUrl: '+phUrl )
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl.split('/')[-1].replace('?d=all',''), CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl], name, '', None))
+           return valTab
+
+        if 'THUMBZILLA' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.thumbzilla.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           Cats = re.findall('href="(/categories/.*?)".*?click\',\s\'(.*?)\'', data, re.S) 
+           if Cats:
+              for (phUrl, phTitle) in Cats:
+                 phTitle = decodeHtml(phTitle)
+                 if not phTitle == "All": 
+                    valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [self.MAIN_URL+phUrl],'THUMBZILLA-clips', '', None)) 
+           valTab.insert(0,CDisplayListItem("--- Homemade ---",     "Homemade",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/homemade"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- HD Videos ---","HD Videos", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/hd"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",     "Popular Videos",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Videos ---",     "Top Videos",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---",     "Trending",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/trending"], 'THUMBZILLA-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---",     "Newest",      CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/newest"], 'THUMBZILLA-clips', '',None))
+           self.SEARCH_proc='THUMBZILLA-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'THUMBZILLA-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.thumbzilla.com/tags/%s' % url.replace(' ','+'), 'THUMBZILLA-clips')
+           return valTab          
+        if 'THUMBZILLA-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.thumbzilla.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           phMovies = re.findall('href="(/video/.*?)".*?src="(.*?)".*?"title">(.*?)<.*?"duration">(.*?)<', data, re.S)  
+           if phMovies:
+              for ( phUrl, phImage, phTitle, phRuntime) in phMovies:
+                  if phUrl[:2] == "//":
+                     phUrl = "http:" + phUrl
+                  else:
+                     phUrl = self.MAIN_URL + phUrl
+                  if phImage[:2] == "//":
+                     phImage = "http:" + phImage
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           match = re.findall('"next" href="(.*?)"', data, re.S)
+           if match:
+              phUrl = match[0]
+              valTab.append(CDisplayListItem('Next', 'Page: '+phUrl, CDisplayListItem.TYPE_CATEGORY, [phUrl], name, '', None))
+           self.MAIN_URL = '' 
+           return valTab
+
+        if 'ADULTTV' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.adulttvlive.net' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'adulttv.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = 'http://www.adulttvlive.net' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'http://www.adulttvlive.net' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None:
+              valTab.insert(0,CDisplayListItem('BSX24','BSX24',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', 'http://publish.thewebstream.co:1935/bsx24/livestream/playlist.m3u8', 0)], 0, 'http://ero-tv.org/wp-content/uploads/2014/08/babestation24.gif', None)) 
+              valTab.insert(0,CDisplayListItem('PassionXXX','PassionXXX',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', 'http://publish.thewebstream.co:1935/ppv/_definst_/rampanttv_passionxxx/playlist.m3u8', 0)], 0, 'https://pbs.twimg.com/profile_images/1001362356264464384/fQVOhNLk_400x400.jpg', None)) 
+
+           if next_page:
+              valTab.append(CDisplayListItem('Next', 'Page: '+next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))
+           return valTab
+
+        if 'YUVUTU' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.yuvutu.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           self.page = 1
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="yv-element', 'videos</span>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phTitle = re.sub(' - .+', '', phTitle)
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'YUVUTU-clips', phImage, None)) 
+           return valTab
+        if 'YUVUTU-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           self.page += 1
+           phMovies = re.findall('class="thumb-image">.*?href="(.*?)".*?src="(.*?)".*?title="(.*?)"', data, re.S)  
+           if phMovies:
+              for ( phUrl, phImage, phTitle ) in phMovies:
+                  phTitle = phTitle.replace(' - ','')
+                  valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', self.MAIN_URL+phUrl, 1)], 0, phImage, None)) 
+           url = re.sub('page.+', '', url)
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page), CDisplayListItem.TYPE_CATEGORY, [url+'page/'+str(self.page)+'/'], name, '', None))
+           return valTab
+
+        if 'PORNICOM' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornicom.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="items-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item">', 'quantity')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNICOM-clips', phImage, None))
+           valTab.insert(0,CDisplayListItem("--- Most popular ---", "Most popular", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/most-popular/'], 'PORNICOM-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest updates ---", "Latest updates", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/latest-updates/'], 'PORNICOM-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top rated ---", "Top rated", CDisplayListItem.TYPE_CATEGORY,['http://www.pornicom.com/top-rated/'], 'PORNICOM-clips', '',None))
+           self.SEARCH_proc='pornicom-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornicom-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.pornicom.com/search/?q=%s' % url.replace(' ','+'), 'PORNICOM-clips')
+           return valTab
+        if 'PORNICOM-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://pornicom.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valtab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '</div>', False)[1]
+           next_page = self.cm.ph.getDataBeetwenMarkers(next_page, '</span>', 'Page', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="link"', 'views-info')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''<img\sclass="thumb"\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''"duration">([^"^']+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''"duration" content=['"]([^"^']+?)['"]''', 1, True)[0].strip()
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(phTitle,'['+Time+']   '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              numer = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'HDZOG' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hdzog.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host getResolvedURL data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-categories">', 'video thumbs list', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''"title">([^"^']+?)<''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'HDZOG-clips', phImage, None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---", "Longest", CDisplayListItem.TYPE_CATEGORY,['http://www.hdzog.com/longest/'], 'HDZOG-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---", "Popular", CDisplayListItem.TYPE_CATEGORY,['http://www.hdzog.com/popular/'], 'HDZOG-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---", "Newest", CDisplayListItem.TYPE_CATEGORY,['http://www.hdzog.com/new/'], 'HDZOG-clips', '',None))
+           self.SEARCH_proc='hdzog-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hdzog-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hdzog.com/search/%s/' % url.replace(' ','+'), 'HDZOG-clips')
+           return valTab
+        if 'HDZOG-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="next">', '</li>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = 'http://www.hdzog.com' + next_page
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-videos">', 'video thumbs list', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''class="time">([^"^']+?)<''', 1, True)[0] 
+              valTab.append(CDisplayListItem(phTitle,'['+Time+']   '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              numer = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'PORNOMENGE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornomenge.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', '</h4>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)</a>''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNOMENGE-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Kanale ---", "Kanale", CDisplayListItem.TYPE_CATEGORY,['https://www.pornomenge.com/websites/videos/'], 'PORNOMENGE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornostars ---", "Pornostars", CDisplayListItem.TYPE_CATEGORY,['https://www.pornomenge.com/pornostars/'], 'PORNOMENGE-Pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Beste Videos ---", "Beste Videos", CDisplayListItem.TYPE_CATEGORY,['https://www.pornomenge.com/am-meisten-gestimmt/m/'], 'PORNOMENGE-clips', '',None))
+           self.SEARCH_proc='PORNOMENGE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNOMENGE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.heuteporno.com/suchen/?q=%s' % url.replace(' ','+'), 'PORNOMENGE-clips')
+           return valTab
+        if 'PORNOMENGE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-ajax-url=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', 'class="votar-escena')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('aHR'): next_page = urllib.unquote(base64.b64decode(next_page))
+              if '/?page=0' in next_page: next_page = next_page.replace('page=0','page=2')
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PORNOMENGE-Pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-chica">', 'class="clear"></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNOMENGE-clips', '', None))
+           if next_page: 
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'TUBEPORNCLASSIC' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://tubepornclassic.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+		   
+           #host = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"
+           #header = {'Cookie': 'language=en', 'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           #try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           #except Exception as e:
+           #   printExc()
+           #   msg = _("Last error:\n%s" % str(e))
+           #   GetIPTVNotify().push('%s' % msg, 'error', 20)
+           #   printDBG( 'Host getResolvedURL query error url: '+url )
+           #   return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, 'name="category_dirs', '</li>')
+           if not data2:
+              data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="list-item', '</li>')
+           for item in data2:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'http://tubepornclassic.com' + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'TUBEPORNCLASSIC-clips', '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---", "Most Viewed", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'], 'TUBEPORNCLASSIC-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'], 'TUBEPORNCLASSIC-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---", "Latest", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'], 'TUBEPORNCLASSIC-clips', '',None))
+           self.SEARCH_proc='TUBEPORNCLASSIC-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           data2 = None
+           return valTab
+        if 'TUBEPORNCLASSIC-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://en.tubepornclassic.com/search/%s/?mode=async&function=get_block&block_id=list_videos_videos_list_search_result&from_videos=1' % url.replace(' ', '+'), 'TUBEPORNCLASSIC-clips')
+           return valTab
+        if 'TUBEPORNCLASSIC-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://tubepornclassic.com' 
+           #url = url.replace('//tubepornclassic.com','//de.tubepornclassic.com')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubepornclassic.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = 'http://tubepornclassic.com' + next_page
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="list-videos">', 'class="footer', False)[1]
+           if not data2:
+              data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="list-videos">', 'class="pagination"', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle: 
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page<>'#search' and next_page<>'': 
+              numer = next_page.split('/')[-2]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           data2 = None
+           return valTab
+
+        if 'KOLOPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.koloporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', '</h4>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''">([^"^']+?)</a>''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'KOLOPORNO-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---", "Pornstars", CDisplayListItem.TYPE_CATEGORY,['https://www.koloporno.com/pornstars/'], 'KOLOPORNO-Pornostars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Najlepsze Filmy ---", "Najlepsze Filmy", CDisplayListItem.TYPE_CATEGORY,['https://www.koloporno.com/najlepiej-oceniane/m/'], 'KOLOPORNO-clips', '',None))
+           self.SEARCH_proc='KOLOPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'KOLOPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.koloporno.com/search/?q=%s' % url.replace(' ','+'), 'KOLOPORNO-clips')
+           return valTab
+        if 'KOLOPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.koloporno.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-ajax-url=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-escena">', 'class="votar-escena')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('aHR'): next_page = urllib.unquote(base64.b64decode(next_page))
+              if '/?page=0' in next_page: next_page = next_page.replace ('page=0','page=2')
+              numer = next_page.split('=')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'KOLOPORNO-Pornostars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'rel="next"', '/>', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''')[0] 
+           if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="wrap-box-chica">', 'class="clear"></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duracion">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'KOLOPORNO-clips', '', None))
+           if next_page: 
+              numer = next_page.split('/')[-1]
+              valTab.append(CDisplayListItem('Next', 'Next '+numer, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'REALGFPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.realgfporn.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-spot">', 'clearfix')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'REALGFPORN-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---", "Longest", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/longest/'], 'REALGFPORN-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---", "Most Viewed", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/most-viewed/'], 'REALGFPORN-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---", "Top Rated", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/top-rated/'], 'REALGFPORN-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---", "Most Recent", CDisplayListItem.TYPE_CATEGORY,['https://www.realgfporn.com/most-recent/'], 'REALGFPORN-clips', '',None))
+           self.SEARCH_proc='REALGFPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'REALGFPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.realgfporn.com/search/%s/page1.html' % url.replace(' ','+'), 'REALGFPORN-clips')
+           return valTab
+        if 'REALGFPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.realgfporn.com' 
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           next_page = re.compile('href="(.*?)"').findall(next_page)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video-spot', '</strong>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.realgfporn.com/videos/[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if Time<>'Link' and phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']   '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              url = re.sub('page.+', '', url)
+              valTab.append(CDisplayListItem('Next', url+next_page[-1], CDisplayListItem.TYPE_CATEGORY, [url+next_page[-1]], name, '', None))
+           return valTab
+
+        if 'PLAYVIDS' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           if 'Rate Limit Exceeded' in data:
+              msg = _("Last error:\n%s" % 'Rate Limit Exceeded')
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="category-list', 'card-promotion', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1].replace('-',' ').replace('%20',' ').replace('%26','-')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstar ---", "Pornstar", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/pornstars&jsclick=1'], 'PLAYVIDS-pornstar', '',None))
+           valTab.insert(0,CDisplayListItem("--- Channels ---", "Channels", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/channels&jsclick=1'], 'PLAYVIDS-channels', '',None))
+           valTab.insert(0,CDisplayListItem("--- Trending ---", "Trending", CDisplayListItem.TYPE_CATEGORY,['https://www.playvids.com/Trending-Porn'], 'PLAYVIDS-clips', '',None))
+           self.SEARCH_proc='PLAYVIDS-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PLAYVIDS-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.playvids.com/sq?q=%s&jsclick=1&content=straight' % url.replace(' ','+'), 'PLAYVIDS-clips')
+           return valTab
+        if 'PLAYVIDS-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == 'channels':
+              data = data.split('<div id=')
+           else:
+              data = data.split('<div class="card thumbs_rotate')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^"^']+?)<''', 1, True)[0] 
+              added = self.cm.ph.getSearchGroups(item, '''addition">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle and Time:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+']  '+decodeHtml(phTitle)+'\n'+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PLAYVIDS-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'Popular channels', 'pagination', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="card">', '</div>')
+           data = data.split('<div class="card">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('%20',' ').replace('%26','-') 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, 'channels'))
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+        if 'PLAYVIDS-pornstar' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.playvids.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination"', '</ul>', False)[1]
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="stars_list">', '</ul>', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           data = data.split('<div class="card">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1].replace('-',' ')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20') 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'PLAYVIDS-clips', phImage, None))
+           if next_page: 
+              match = re.compile('href="(.*?)"').findall(next_page)
+              if match:
+                 next_page = self.MAIN_URL+match[-1]
+                 printDBG( 'Host listsItems next_page: '  +next_page )
+                 valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if '4TUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.4tube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '>Categories<', '>Channels<', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].lower().replace('sex movies','')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'4TUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","Channels",   CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/channels"]  ,         '4TUBE-channels', '',None))
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/pornstars"],          '4TUBE-channels','',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos?sort=views&time=month"],             '4TUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Highest Rated ---","Highest Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos?sort=rating&time=month"],             '4TUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Lastest ---","Lastest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/videos"],             '4TUBE-clips',    '',None))
+           self.SEARCH_proc='4TUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if '4TUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search?q=%s' % url.replace(' ','+'), '4TUBE-clips')
+           return valTab              
+        if '4TUBE-channels' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\srel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="thumb-link"', '</div></a></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phVid = self.cm.ph.getSearchGroups(item, '''icon-video"></i>([^"^']+?)<''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\sdata-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'[Video: '+phVid+']   '+phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], '4TUBE-clips', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if '4TUBE-clips' == name:
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.MAIN_URL = url.split('com/')[0]+'com'
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\srel="next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="col thumb_video"', '</div></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''img data-master=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"duration-top">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phRuntime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'HomeMoviesTube' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.homemoviestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homemoviestube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'class="films', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="category-item', 'category-counter')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'HomeMoviesTube-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/longest/"],          'HomeMoviesTube-clips','',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/most-viewed/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/top-rated/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/most-recent/"],             'HomeMoviesTube-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest Videos ---","Latest Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'HomeMoviesTube-clips',    '',None))
+           self.SEARCH_proc='HomeMoviesTube-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'HomeMoviesTube-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/%s/page1.html' % url.replace(' ','+'), 'HomeMoviesTube-clips')
+           return valTab              
+        if 'HomeMoviesTube-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.homemoviestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'homemoviestube.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.cm.getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<li\sclass='next'><a href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if re.search('id="featured-videos"', data, re.S):
+              data = self.cm.ph.getDataBeetwenMarkers(data, '<!-- featured-end', '</html>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="film-item', 'stat-rated')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''this\.src=['"]([^"^']+?)['"]''', 1, True)[0].replace(' ','%20')
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"film-time">([^"^']+?)<''', 1, True)[0]
+              added = self.cm.ph.getSearchGroups(item, '''"stat-added">([^"^']+?)<''', 1, True)[0] 
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+']  '+phTitle+'\n'+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('page'): next_page = '/' + next_page
+              next_page = re.sub('page.+', '', url)+next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MOVIEFAP' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.moviefap.com'
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host listsItems query error url:'+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories</h1>', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'MOVIEFAP-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/browse/?category=mr&page="],             'MOVIEFAP-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/browse/?category=tr&page="],             'MOVIEFAP-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Being Watched ---","Being Watched",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/browse/?category=bw&page="],             'MOVIEFAP-clips',    '',None))
+           self.SEARCH_proc='MOVIEFAP-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'MOVIEFAP-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/%s' % url.replace(' ','+'), 'MOVIEFAP-clips')
+           return valTab              
+        if 'MOVIEFAP-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.moviefap.com'
+           query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              printDBG( 'Host listsItems query error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="current"', 'next', False)[1]
+           next_page = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video', '</div></div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phRuntime = self.cm.ph.getSearchGroups(item, '''"videoleft">([^"^']+?)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,'['+phRuntime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'yourporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sxyprn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, "<a class='tdn'", '</a>')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''>#([^#]+?)<''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'https://sxyprn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'yourporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Viewed ---","Top Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/top-viewed.html"],             'yourporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/popular/top-rated.html"],             'yourporn-clips',    '',None))
+           self.SEARCH_proc='yourporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'yourporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://sxyprn.com/%s.html' % url.replace(' ','+'), 'yourporn-clips')
+           return valTab              
+        if 'yourporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://sxyprn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('data-postid=')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/post/[^"^']+?)['"]''', 1, True)[0] 
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](http[^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"](//[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''html\'\stitle=['"]([^"^']+?)['"]''', 1, True)[0]
+              printDBG( 'Host phTitle1: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''data-title=['"]([^"^'^{]+?)['"}]''', 1, True)[0]
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''class=\'tdn\'\stitle=['"]([^"^'^{]+?)['"}]''', 1, True)[0]
+              printDBG( 'Host phTitle2: '+phTitle )
+              if ' porn blog' in phTitle or len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''blog">([^"^']+?)<''', 1, True)[0] 
+              printDBG( 'Host phTitle3: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''title\'>([^>]+?)<''', 1, True)[0]
+              printDBG( 'Host phTitle4: '+phTitle )
+              if len(phTitle)<4: phTitle = self.cm.ph.getSearchGroups(item, '''text_el">([^>]+?)<''', 1, True)[0]
+              printDBG( 'Host phTitle5: '+phTitle )
+              #if len(phTitle)<4: phTitle = 'No Title'
+              phRuntime = self.cm.ph.getSearchGroups(item, '''>(\d\d:\d\d)<''', 1, True)[0] 
+              if not phRuntime: phRuntime = self.cm.ph.getSearchGroups(item, '''>(\d\d:\d\d:\d\d)<''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://sxyprn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              phTitle = phTitle.replace('\n','')
+              Title = phTitle[:95].split('#')[0]
+              if 'External Link' in item:
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://gounlimited[^"^']+?)['"]''', 1, True)[0]
+                 phRuntime = 'External Link'
+                 if phUrl.startswith('https://gounlimited.to'):
+                    if not 'embed' in phUrl:
+                       phUrl = 'https://gounlimited.to' + '/embed-'+ phUrl.split('/')[3] +'.html'
+              if phRuntime=='': continue 
+              printDBG( 'Host phTitle6: '+phTitle )
+              printDBG( 'Host phUrl: '+phUrl )
+              printDBG( 'Host phImage: '+phImage )
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(Title),'['+phRuntime+']  '+decodeHtml(phTitle[:95]),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'freeomovie' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.freeomovie.com/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories<', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'freeomovie-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://www.freeomovie.com'],             'freeomovie-clips',    '',None))
+           self.SEARCH_proc='freeomovie-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'freeomovie-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.freeomovie.com/?s=%s' % url.replace(' ','+'), 'freeomovie-clips')
+           return valTab              
+        if 'freeomovie-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.freeomovie.com/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="boxtitle">', 'class="metargt">')
+           for item in data:
+              #printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [ phUrl], 'freeomovie-serwer', phImage, phImage)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'freeomovie-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'freeomovie.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage4k(url, 'freeomovie.cookie', 'freeomovie.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           Title = self.cm.ph.getSearchGroups(data, '''"headline":['"]([^"^']+?)['"&]''', 1, True)[0] 
+           if not Title: Title = self.cm.ph.getSearchGroups(data, '''<title>([^>]+?)<''', 1, True)[0]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div id="videocont"', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''(http[^"^']+?)['"&]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[2]
+              if phTitle=='': phTitle=phUrl
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              if not 'filecrypt' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(Title)+' > '+phTitle,decodeHtml(Title)+' > '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+
+        if 'KATESTUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.katestube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'katestube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="thumbs-list">', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'KATESTUBE-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/most-popular/'],             'KATESTUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/top-rated/'],             'KATESTUBE-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://www.katestube.com/latest-updates/'],             'KATESTUBE-clips',    '',None))
+           self.SEARCH_proc='KATESTUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'KATESTUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.katestube.com/search/?q=%s' % url.replace(' ','+'), 'KATESTUBE-clips')
+           return valTab              
+        if 'KATESTUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'katestube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = ph.findall(data, '<a data=', 'Next') 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="thumb"', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration" class="length">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page[-1], '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'https://www.katestube.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'ZBIORNIKMINI' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://mini.zbiornik.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<div class="collapse navbar-collapse" id="photos-menu">', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a href=', '</a>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              printDBG( 'Host phTitle: '+phTitle )
+              printDBG( 'Host phUrl: '+phUrl )
+              if len(phUrl)>3:
+                 if phTitle<>'2004' and phTitle<>'2005' and phTitle<>'2006':
+                    valTab.append(CDisplayListItem(phTitle,phUrl.split('/')[-1],     CDisplayListItem.TYPE_CATEGORY,[phUrl],'ZBIORNIKMINI-filmy','https://static.zbiornik.com/upimg/0160d9c44a354d20e81f0e6df5fe832e.jpg',None))
+           valTab.insert(0,CDisplayListItem("--- Ranking ---","Ranking",     CDisplayListItem.TYPE_CATEGORY,['https://mini.zbiornik.com/ludzie/ranking'],             'ZBIORNIKMINI-ranking',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Wyświetl profile ---","Wyświetl profile",     CDisplayListItem.TYPE_CATEGORY,['https://mini.zbiornik.com/ludzie/szukaj/0,1,1,1,0,1:0:0:0:18:50:2:0:0:1:0'],             'ZBIORNIKMINI-szukaj',    '',None))
+           data2 = None
+           return valTab    
+        if 'ZBIORNIKMINI-szukaj' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="search-profile-box">', '</h5>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''url\(['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?filmy)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ZBIORNIKMINI-filmy', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           return valTab
+        if 'ZBIORNIKMINI-ranking' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="panel-body">', '</h3>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''url\(['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item) 
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl +'/filmy'
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl], 'ZBIORNIKMINI-filmy', phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           return valTab
+        if 'ZBIORNIKMINI-filmy' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a></div>    </div>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a>')
+           for item in data2:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)\n''', 1, True)[0]  
+              exTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)Widoczne''', 1, True)[0]  
+              Name = re.compile('cropped-info"><a href="/(.*?)"').findall(item)
+              if Name: 
+                 Name = Name[-1]
+              else:
+                 Name = ''
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              if phTitle<>'#01':
+                 valTab.append(CDisplayListItem(Name+' - '+decodeHtml(phTitle),Name+' - '+decodeHtml(exTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+                 if Name != '' and config.plugins.iptvplayer.xxxzbiornik.value:
+                    valTab.append(CDisplayListItem(Name, Name, CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/' +Name+'/filmy'], name, '', None))  
+                    valTab.append(CDisplayListItem(Name+' fotki', Name, CDisplayListItem.TYPE_CATEGORY, ['https://mini.zbiornik.com/' +Name+'/zdjecia'], 'ZBIORNIKMINI-fotki', '', None))  
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           data2 = None
+           return valTab
+        if 'ZBIORNIKMINI-fotki' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="pager">', '</ul>', False)[1]
+           if next_page:
+              next_page = re.compile('href="(.*?)"').findall(next_page)
+              if next_page[-1].startswith('/'): next_page = 'https://mini.zbiornik.com' + next_page[-1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="cropped-wrap">', '</div>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href="/film/', '</a>')
+           for item in data2:
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)\n''', 1, True)[0]  
+              exTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)Widoczne''', 1, True)[0]  
+              Name = re.compile('cropped-info"><a href="/(.*?)"').findall(item)
+              if Name: 
+                 Name = Name[-1]
+              else:
+                 Name = ''
+              if phUrl.startswith('/'): phUrl = 'https://mini.zbiornik.com' + phUrl
+              if phTitle<>'#01':
+                 valTab.append(CDisplayListItem(phTitle, phTitle,CDisplayListItem.TYPE_PICTURE, [CUrlItem('', phImage, 0)], 0, phImage, None)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))  
+           data2 = None
+           return valTab
+
+        if 'vporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.vporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '>All Categories<', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a', '</a>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''categoryName">([^>]+?)<''', 1, True)[0] 
+              #phTitle = self._cleanHtmlStr(item) 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'vporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/longest/'],             'vporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Votes ---","Most Votes",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/votes/'],             'vporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Comments ---","Most Comments",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/comments/'],             'vporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Favorited ---","Most Favorited",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/favorites/'],             'vporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/views/'],             'vporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/rating/'],             'vporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://www.vporn.com/newest/'],             'vporn-clips',    '',None))
+           self.SEARCH_proc='vporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'vporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.vporn.com/search?q=%s' % url.replace(' ','+'), 'vporn-clips')
+           return valTab              
+        if 'vporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, '<link rel="next"', '>', False)[1]
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb"', '</div>')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="video"', 'Rating')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"time">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.vporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'https://www.vporn.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'hotmovs' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://hotmovs.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hotmovs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'class="cats-all categories-list">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hotmovs-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/longest/'],             'hotmovs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/most-popular/'],             'hotmovs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/top-rated/'],             'hotmovs-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://hotmovs.com/latest-updates/'],             'hotmovs-clips',    '',None))
+           self.SEARCH_proc='hotmovs-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hotmovs-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://hotmovs.com/search/?q=%s' % url.replace(' ','+'), 'hotmovs-clips')
+           return valTab              
+        if 'hotmovs-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hotmovs.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host getResolvedURL data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="next"', '</a>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'data-video-id=', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="thumbnail__info__right">([^"^']+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'http://hotmovs.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next = self.cm.ph.getSearchGroups(next_page, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if next.startswith('/'): next = 'http://hotmovs.com' + next
+              if '/categories/' in next: next = next+'?mode=async&function=get_block&block_id=sphinx_list_cat_videos_videos_list'
+              if next <> '#search':
+                 valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'pornoxo' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornoxo.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornoxo.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'title="Main Page"', 'Top Users</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('Tube','') 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phTitle.startswith('+'): phTitle = ''
+              if phTitle<>'':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornoxo-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/longest/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/most-popular/today/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/top-rated/'],             'pornoxo-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.pornoxo.com/videos/newest/'],             'pornoxo-clips',    '',None))
+           self.SEARCH_proc='pornoxo-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornoxo-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornoxo.com/search/%s/?sort=mw&so=y' % url.replace(' ','+'), 'pornoxo-clips')
+           return valTab              
+        if 'pornoxo-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornoxo.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'Referer':url, 'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'vidItem', 'class="clear"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('/'): phUrl = 'https://www.pornoxo.com' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(phTitle,'['+phTime+']  '+phTitle,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.pornoxo.com' + next
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'pinflix' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pinflix.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pinflix-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/pornstars'], 'pinflix-pornstars', '',None))
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=longest'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Featured ---","Featured", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=featured'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=top-rated'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=most-popular'], 'pinflix-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest", CDisplayListItem.TYPE_CATEGORY,['http://www.pinflix.com/?order=newest'], 'pinflix-clips', '',None))
+           self.SEARCH_proc='pinflix-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pinflix-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pinflix.com/search?search=%s' % url.replace(' ','+'), 'pinflix-clips')
+           return valTab              
+        if 'pinflix-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''data-next-page=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''srcset=['"]([^"^']+?\.jpg)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''img alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if 'video-item' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              url = re.sub('&page.+', '', url)
+              url = re.sub('\?page.+', '', url)
+              if '?order' in url:
+                 next_page = url+'&page='+next_page
+              else:
+                 next_page = url+'?page='+next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'pinflix-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'page active">', '<', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = 'https://www.pinflix.com' + phUrl
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pinflix-clips', phImage, None)) 
+           if next_page:
+              next_page = 'https://www.pinflix.com/pornstars?page=' + str(int(next_page)+1)
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab  
+
+        if 'upornia' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.upornia.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upornia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'upornia-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/longest/'],             'upornia-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/most-popular/'],             'upornia-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/top-rated/'],             'upornia-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://www.upornia.com/latest-updates/'],             'upornia-clips',    '',None))
+           self.SEARCH_proc='upornia-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'upornia-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://upornia.com/search/?q=%s' % url.replace(' ','+'), 'upornia-clips')
+           return valTab              
+        if 'upornia-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upornia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''<li class="next">[^>]+?href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''right">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://upornia.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'txxx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.txxx.com'
+           url = 'https://txxx.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://txxx.com/categories/%s/1/?sort=latest-updates&date=day&type=all' % str(item["dir"])
+                 phUrl = 'https://txxx.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'txxx-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/longest/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/most-popular/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/top-rated/'],             'txxx-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.txxx.com/latest-updates/'],             'txxx-clips',    '',None))
+           self.SEARCH_proc='txxx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'txxx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://txxx.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'txxx-clips')
+           return valTab              
+        if 'txxx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://txxx.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'hclips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.hclips.com'
+           url = 'https://hclips.com/api/json/categories/14400/str.all.json'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return valTab
+           self.page=1
+           printDBG( 'Host data:%s' % data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["categories"]:
+                 phUrl = 'https://hclips.com/categories/%s/1/?sort=latest-updates&date=day&type=all' % str(item["dir"])
+                 phUrl = 'https://hclips.com/api/json/videos/86400/str/latest-updates/60/categories.%s.%s.all..day.json'  % (str(item["dir"]), str(self.page))
+                 phTitle = str(item["title"])
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hclips-clips', '', None)) 
+           except Exception:
+              printExc()
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.hclips.com/longest/'],             'hclips-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://www.hclips.com/most-popular/'],             'hclips-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.hclips.com/top-rated/'],             'hclips-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['https://www.hclips.com/latest-updates/'],             'hclips-clips',    '',None))
+           self.SEARCH_proc='hclips-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hclips-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hclips.com/api/videos.php?params=86400/str/relevance/60/search..1.all..day&s=%s' % url.replace(' ','+'), 'hclips-clips')
+           return valTab              
+        if 'hclips-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           printDBG( 'Host listsItems cat-url: '+str(catUrl) )
+           next = url
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              for item in result["videos"]:
+                 phTitle = str(item["title"])
+                 video_id = str(item["video_id"])
+                 scr = str(item["scr"])
+                 phUrl = "https://hclips.com/api/videofile.php?video_id=%s&lifetime=8640000" % video_id
+                 phTime = str(item["duration"])
+                 added = str(item["post_date"])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle)+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, scr, None)) 
+           except Exception:
+              printExc()
+           next_page = url.replace('.'+str(self.page)+'.','.'+str(self.page+1)+'.')
+           valTab.append(CDisplayListItem('Next', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', 'next'))                
+           return valTab
+
+        if 'sunporno' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sunporno.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb-container', '</div>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'sunporno-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Longest ---","Longest",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/long-movies/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most viewed ---","Most viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-viewed/date-last-week/'],             'sunporno-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- HD Porn ---","HD Porn",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/high-definition/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/top-rated/date-last-week/'],             'sunporno-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Recent videos ---","Recent videos",     CDisplayListItem.TYPE_CATEGORY,['https://www.sunporno.com/most-recent/date-last-week/'],             'sunporno-clips',    '',None))
+           self.SEARCH_proc='sunporno-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sunporno-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sunporno.com/search/%s/' % url.replace(' ','+'), 'sunporno-clips')
+           return valTab              
+        if 'sunporno-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''pag-next"\shref=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = data.split('data-id=')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''"btime">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = 'https://www.sunporno.com' + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://www.sunporno.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'sexu' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://sexu.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/tag[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item).strip() 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'sexu-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Trending ---","Trending",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/trending/1'],             'sexu-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Hall of Fame ---","Hall of Fame",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/all/1'],             'sexu-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,['http://sexu.com/1'],             'sexu-clips',    '',None))
+           self.SEARCH_proc='sexu-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sexu-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://sexu.com/search?q=%s' % url.replace(' ','+'), 'sexu-clips')
+           return valTab              
+        if 'sexu-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next_page = self.cm.ph.getSearchGroups(data, '''pagination__arrow--next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="grid__item">', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''counter">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = 'http://sexu.com' + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'http://sexu.com' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'tubewolf' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = url #'http://www.tubewolf.com'
+           url = url + '/categories/'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           if url.startswith('http://crocotube.com'): 
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'A-Z porn categories', 'Footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="ct-az-list-item', '</a>')
+           elif url.startswith('https://www.alphaporno.com'): 
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>Categories<', 'Footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb', '</li>')
+           else:
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Categories<', 'Categories<', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self._cleanHtmlStr(item).strip() 
+              phTitle = phTitle.replace(' Movies','')
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = url + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'tubewolf-clips', phImage, url)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated'],             'tubewolf-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular'],             'tubewolf-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates'],             'tubewolf-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='tubewolf-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'tubewolf-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'tubewolf-clips')
+           return valTab              
+        if 'tubewolf-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not next_page: next_page = self.cm.ph.getDataBeetwenMarkers(data, '<div class="ct-pagination">', 'Next', False)[1]
+           if url.startswith('https://www.alphaporno.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop="url"', '</li>')
+           if 'crocotube' in url: 
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'class="ct-videos-list', 'footer', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           if url.startswith('https://www.tubewolf.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a itemprop="url"', '</div>')
+           if url.startswith('https://zedporn.com'): data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title="([^"]+?)"''', 1, True)[0]  
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt="([^"]+?)"''', 1, True)[0]  
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0]  
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              if not 'Sponsored' in item and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if not next_page.startswith('http'):
+                 next_page = re.compile('<a href="(.*?)"').findall(next_page)
+                 next_page = next_page[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'PORNTUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.porntube.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PORNTUBE.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNTUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'PORNTUBE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='PORNTUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNTUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'PORNTUBE-clips')
+           return valTab              
+        if 'PORNTUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'PORNTUBE.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ASHEMALETUBE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.ashemaletube.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not 'Tube' in phTitle: continue
+              if not '/videos/' in phUrl: continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.ashemaletube.com' + phUrl 
+              phTitle = phTitle.replace ('Porn Tube','').replace ('Tube','')
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'ASHEMALETUBE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Stories ---","Stories",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/stories/'],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Models ---","Models",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/models/'],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Best Recent ---","Best Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'ASHEMALETUBE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='ASHEMALETUBE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ASHEMALETUBE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.ashemaletube.com/search/%s/' % url.replace(' ','+'), 'ASHEMALETUBE-clips')
+           return valTab              
+        if 'ASHEMALETUBE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="js-pop thumb-item videospot', '</li>')
+           if not data2: data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="thumb-item videospot', '</li>')
+           for item in data2:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.ashemaletube.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://www.ashemaletube.com' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MOMXXXFUN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://momxxxfun.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momxxxfun.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a href', '</a>')
+           data = data.split('<div class="popular-tag">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/search/videos/[^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1] #self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://momxxxfun.com' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://momxxxfun.com' + phImage 
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl+'?type=public'],'momxxxfun-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='momxxxfun-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'momxxxfun-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://momxxxfun.com/search/videos/%s' % url.replace(' ','+'), 'momxxxfun-clips')
+           return valTab              
+        if 'momxxxfun-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'momxxxfun.cookie')
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = data.split('<div class=" col-sm')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://momxxxfun.com' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://momxxxfun.com' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'streamporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://streamporn.pw'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self._cleanHtmlStr(item).strip() 
+              if phTitle=='Studios': phTitle='.:'+phTitle+':.'
+              if phTitle=='Years': phTitle='.:'+phTitle+':.'
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://streamporn.pw' + phImage 
+              if phTitle<>'Hollywood Movies' and phTitle<>'Tvshows':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'streamporn-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='streamporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'streamporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://streamporn.pw/?s=%s' % url.replace(' ','+'), 'streamporn-clips')
+           return valTab              
+        if 'streamporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if next_page =='': next_page = self.cm.ph.getSearchGroups(data, '''class='active'>.*?class='page larger' href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div data-movie-id', '<div class="jtip-bottom">')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'streamporn-serwer', phImage, phImage)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'https://streamporn.pw' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'streamporn-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'streamporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://streamporn.pw' + phUrl 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+           return valTab
+
+        if 'onlinepornfree' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://onlinepornfree.xyz'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'onlinepornfree.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phTitle = self._cleanHtmlStr(item).strip() 
+              #if phTitle=='Studios': phTitle='.:'+phTitle+':.'
+              #if phTitle=='Years': phTitle='.:'+phTitle+':.'
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://onlinepornfree.xyz' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://onlinepornfree.xyz' + phImage 
+              if phTitle<>'Studios' and phTitle<>'Sitemap'  and phTitle<>'Contact'  and phTitle<>'Movies TV Series':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'onlinepornfree-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='onlinepornfree-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'onlinepornfree-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://onlinepornfree.xyz/?s=%s' % url.replace(' ','+'), 'onlinepornfree-clips')
+           return valTab              
+        if 'onlinepornfree-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'onlinepornfree.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           if next_page =='': next_page = self.cm.ph.getSearchGroups(data, '''class='active'>.*?class='page larger' href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.getFullUrl(self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0], self.cm.getBaseUrl(url)) 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://onlinepornfree.xyz' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'onlinepornfree-serwer', phImage, phImage)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [self.cm.getFullUrl(next_page, self.cm.getBaseUrl(url))], name, '', None))                
+           return valTab
+        if 'onlinepornfree-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'onlinepornfree.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://onlinepornfree.xyz' + phUrl 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, catUrl, None)) 
+           return valTab
+
+        if 'fux' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.fux.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fux.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'fux-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'fux-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'fux-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'fux-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='fux-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'fux-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'fux-clips')
+           return valTab              
+        if 'fux-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fux.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'pornerbros' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornerbros.com'
+           url = url + '/tags'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornerbros.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except Exception as e:
+              printExc()
+              msg = _("Last error:\n%s" % str(e))
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           result = byteify(simplejson.loads(data))
+           for item in result["page"]["embedded"]["topTags"]:
+              phUrl = self.MAIN_URL + "/tags/" + str(item["slug"])
+              phTitle = str(item["name"]).title()
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'pornerbros-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=rating&time=month'],             'pornerbros-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=views&time=month'],             'pornerbros-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?sort=date'],             'pornerbros-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='pornerbros-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornerbros-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/search/?q=%s' % url.replace(' ','+'), 'pornerbros-clips')
+           return valTab              
+        if 'pornerbros-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornerbros.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host error url: '+url )
+              return valTab
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           data = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE = ['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = urllib.unquote(base64.b64decode(data))
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              result = byteify(simplejson.loads(data))
+              if result["page"]["embedded"].has_key('videos'):
+                 node = result["page"]["embedded"]
+              else:
+                 node = result["page"]
+              for item in node["videos"]["_embedded"]["items"]:
+                 phUrl = self.MAIN_URL + "/api/videos/" + str(item["uuid"]) + "?ssr=false&slug=" + str(item["slug"]) + "&orientation="
+                 phTitle = str(item["title"])
+                 m, s = divmod(item['durationInSeconds'], 60)
+                 phTime = "%02d:%02d" % (m, s)
+                 phImage = str(item["thumbnailsList"][0])
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           except Exception:
+              printExc()
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'MYDIRTYHOBBY' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.mydirtyhobby.to'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="well well-sm', 'div class="clearfix"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.mydirtyhobby.to' + phUrl 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             'MYDIRTYHOBBY-pornstars',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Videos ---","Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos'],             'MYDIRTYHOBBY-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='MYDIRTYHOBBY-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'MYDIRTYHOBBY-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.mydirtyhobby.to/search/videos?search_query=%s' % url.replace(' ','+'), 'MYDIRTYHOBBY-clips')
+           return valTab              
+        if 'MYDIRTYHOBBY-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '&raquo;', False)[1]
+           next_page = re.compile('href="(.*?)"').findall(next_page)
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="well well-sm', 'div class="clearfix"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''<img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.mydirtyhobby.to' + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next_page = next_page[-1]
+              if next_page.startswith('/'): next_page = 'https://www.mydirtyhobby.to' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'MYDIRTYHOBBY-pornstars' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '&raquo;', False)[1]
+           next_page = re.compile('href="(.*?)"').findall(next_page)
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'Neuste</a>', 'footer', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'class="well well-sm', 'div class="clearfix"')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = phUrl.split('/')[-1]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].strip()
+              if phTime=='': phTime = self.cm.ph.getSearchGroups(item, '''>HD </span>([^>]+?)<''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = 'https://www.mydirtyhobby.to' + phUrl 
+              if phImage.startswith('/'): phImage = 'https://www.mydirtyhobby.to' + phImage 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'MYDIRTYHOBBY-clips', phImage, phImage)) 
+           if next_page:
+              next_page = next_page[-1]
+              if next_page.startswith('/'): next_page = 'https://www.mydirtyhobby.to' + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+ 
+        if 'xxxstreams' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.xxxstreams.org'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxstreams.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxstreams.cookie', 'xxxstreams.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if not 'xxxstreams' in phUrl: phTitle=''
+              if 'Siterips' in phTitle: phTitle=''
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'xxxstreams-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='xxxstreams-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'xxxstreams-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://xxxstreams.org/?s=%s' % url.replace(' ','+'), 'xxxstreams-clips')
+           return valTab              
+        if 'xxxstreams-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxstreams.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxstreams.cookie', 'xxxstreams.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           cookieHeader = self.cm.getCookieHeader(COOKIEFILE)
+           next_page = self.cm.ph.getSearchGroups(data, '''rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phImage = self.cm.ph.getSearchGroups(item, '''<img\ssrc=['"]([^"^']+?)['"]''', 1, True)[0] 
+              item = self.cm.ph.getDataBeetwenMarkers(item, '<h1 class="entry-title">', '</h1>', False)[1]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL, 'Cookie':cookieHeader})
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phUrl = strwithmeta(phUrl, {'Referer':self.MAIN_URL})
+              if not 'UBIQFILE' in phTitle.upper():
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'xxxstreams-serwer', phImage, phTitle)) 
+           if next_page:
+              if next_page.startswith('/'): next_page = 'http://xxxstreams.org' + next_page
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'xxxstreams-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xxxstreams.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'xxxstreams.cookie', 'xxxstreams.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTitle = self.cm.ph.getSearchGroups(data, '''title" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTime = self.cm.ph.getSearchGroups(data, '''description" content=['"]([^"^']+?)['"|]''', 1, True)[0].strip()
+           if len(phTime)>8: phTime=phTime.split(' ')[-1]
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<span id=', '</div>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data, '<p>', '</p>')
+           for item in data2:
+              if '|' in item:
+                 phTime = item.split('|')[0].replace('<p>','')
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if 'HITFILE' in phTitle.upper(): continue
+              if 'SHARE-ONLINE' in phTitle.upper(): continue
+              if 'UBIQFILE' in phTitle.upper(): continue
+              if 'RAPIDGATOR' in phTitle.upper(): continue
+              if 'OPENLOAD' in phTitle.upper(): continue
+              if 'SEVEREPORN' in phTitle.upper(): continue
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              if 'clipwatching.com' in phUrl:
+                 if 'embed' not in phUrl:
+                     video_id = self.cm.ph.getSearchGroups(phUrl, 'clipwatching.com/([A-Za-z0-9]{12})[/.-]')[0]
+                     phUrl = 'http://clipwatching.com/embed-{0}.html'.format(video_id)
+              if phTitle and catUrl:
+                 phUrl = urlparser.decorateUrl(phUrl, {'Referer': self.MAIN_URL})
+                 valTab.append(CDisplayListItem(decodeHtml(catUrl),'['+str(phTime.strip())+']  '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if '123PANDAMOVIE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pandamovie.info'
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="genres scrolling">', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/pornstars'],             '123PANDAMOVIE-years',    '',self.MAIN_URL))
+           #valTab.insert(0,CDisplayListItem("--- Studios ---","Studios",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             '123PANDAMOVIE-years',    '', 'studios'))
+           valTab.insert(0,CDisplayListItem("--- Years ---","Years",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             '123PANDAMOVIE-years',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Movies ---","Movies",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/movies'],             '123PANDAMOVIE-clips',    '',self.MAIN_URL))
+           self.SEARCH_proc='123PANDAMOVIE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if '123PANDAMOVIE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, self.MAIN_URL+'/?s=%s' % url.replace(' ','+'), '123PANDAMOVIE-clips')
+           return valTab              
+        if '123PANDAMOVIE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'arrow_pag', 'resppages', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-serwer', phImage, None)) 
+           if next_page:
+              #printDBG( 'Host listsItems next_page: '+next_page )
+              next_page = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next_page)[-1]
+              #printDBG( 'Host listsItems next_page one: '+next_page )
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page 
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if '123PANDAMOVIE-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           phTime = '' #self.cm.ph.getSearchGroups(data, '''description" content=['"]([^"^']+?)['"|]''', 1, True)[0].strip()
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self._cleanHtmlStr(item)
+              if 'RapidGator' in phTitle: phTitle=''
+              if 'Share-online' in phTitle: phTitle=''
+              if 'Ubiqfile' in phTitle: phTitle=''
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = 'http:' + phImage
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+        if '123PANDAMOVIE-years' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), '123PANDAMOVIE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, '123PANDAMOVIE.cookie', '123pandamovie.me', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #printDBG( 'Host catUrl: '+str(catUrl) )
+           if catUrl == 'studios':
+              data = self.cm.ph.getDataBeetwenMarkers(data, '>Studios<', '</ul>', False)[1]
+           else:
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Release Year', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'123PANDAMOVIE-clips', '', None)) 
+           return valTab
+
+        if 'FULLXXXMOVIES' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://fullxxxmovies.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullxxxmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullxxxmovies.cookie', 'fullxxxmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''rel=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl.endswith('/'): phUrl = phUrl[ :(len(phUrl)-1)]
+              if '/tag/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'FULLXXXMOVIES-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- NEW ---","NEW",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'FULLXXXMOVIES-clips',    '', None))
+           self.SEARCH_proc='FULLXXXMOVIES-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'FULLXXXMOVIES-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://fullxxxmovies.net/?s=%s' % url.replace(' ','+'), 'FULLXXXMOVIES-clips')
+           return valTab              
+        if 'FULLXXXMOVIES-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullxxxmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullxxxmovies.cookie', 'fullxxxmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''reader-text">([^>]+?)<''', 1, True)[0].strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''datetime=['"]([^"^']+?)['"]''', 1, True)[0].replace('T','').replace('+00:00','').replace('+01:00','')
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Added: '+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'FULLXXXMOVIES-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'FULLXXXMOVIES-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fullxxxmovies.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'fullxxxmovies.cookie', 'fullxxxmovies.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="entry-content">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              if phUrl.startswith('https://gounlimited.to'):
+                 if not 'embed' in phUrl:
+                    phUrl = 'https://gounlimited.to' + '/embed-'+ phUrl.split('/')[3] +'.html'
+              if 'Streaming' in item:
+                 valTab.append(CDisplayListItem(decodeHtml(catUrl)+' > '+phUrl.split('/')[2],phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'PORNREWIND' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.pornrewind.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           cats = ['3d','amateur','asmr','arab','anal','webcam','voyeur','teen','romantic', 'beards', 'big tits', 'big butt', 'big dick',
+           'bisexual', 'blonde', 'blowjob', 'bondage', 'bukkake', 'casting', 'college', 'compilation', 'cosplay', 'couples', 'cuckold',
+           'cumshots','dp', 'dildos toys', 'ebony', 'european', 'facial'
+           ]
+           for item in cats:
+              phUrl = 'https://www.pornrewind.com/categories/%s/' % item.replace(' ','-')
+              valTab.append(CDisplayListItem(item.upper(),item,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNREWIND-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNREWIND-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNREWIND-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.pornrewind.com/search/%s/' % url.replace(' ','+'), 'PORNREWIND-clips')
+           return valTab
+        if 'PORNREWIND-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s' % self.page
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="direction"><a', '</li>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="th', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''thumb-time">\s*<span>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''thumb-added">\s*<span>([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.pornrewind.com'})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Time: ['+Time+']'+'\n'+'Added: ['+Added+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = self.cm.ph.getSearchGroups(next, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if next.startswith('/'): next = 'https://www.pornrewind.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+
+        if 'BALKANJIZZ' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.balkanjizz.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm', '</div> </a> </div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.balkanjizz.com' + phUrl
+              if phImage.startswith('/'): phImage = 'https://www.balkanjizz.com' + phImage
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.balkanjizz.com'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'BALKANJIZZ-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='BALKANJIZZ-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'BALKANJIZZ-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.balkanjizz.com/search/videos?search_query=%s' % url.replace(' ','+'), 'BALKANJIZZ-clips')
+           return valTab
+        if 'BALKANJIZZ-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''</a></li><li><a href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm', '</div> </div> </div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration-bar pull-right">([^>]+?)<''', 1, True)[0].strip()
+              Views = self.cm.ph.getSearchGroups(item, '''views-bar pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.balkanjizz.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.balkanjizz.com'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Time: ['+Time+']'+'\n'+'Views: ['+Views+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.balkanjizz.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'PORNORUSSIA' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornorussia.tv' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="th', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://pornorussia.tv' + phUrl
+              if phImage.startswith('/'): phImage = 'https://pornorussia.tv' + phImage
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://pornorussia.tv'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'PORNORUSSIA-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='PORNORUSSIA-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'PORNORUSSIA-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornorussia.tv/s.php?poisk=%s' % url.replace(' ','+'), 'PORNORUSSIA-clips')
+           return valTab
+        if 'PORNORUSSIA-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="more" href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="th', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''th-duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://pornorussia.tv' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://pornorussia.tv'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://pornorussia.tv' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'LETMEJERK' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.letmejerk.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = url
+           self.defaultParams['header']['Origin'] = self.MAIN_URL
+           #sts, data = self.get_Page(url)
+           sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              clas = self.cm.ph.getSearchGroups(item, '''class=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.letmejerk.com' + phUrl
+              if clas=='category':
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'LETMEJERK-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- TOP ---","TOP",     CDisplayListItem.TYPE_CATEGORY,['https://www.letmejerk.com/?sort=top'],             'LETMEJERK-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.letmejerk.com/?sort=latest'],             'LETMEJERK-clips',    '', None))
+           self.SEARCH_proc='LETMEJERK-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'LETMEJERK-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.letmejerk.com/search.php?q=%s' % url.replace(' ','+'), 'LETMEJERK-clips')
+           return valTab
+        if 'LETMEJERK-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           for x in range(1, 20): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              self.defaultParams['header']['Referer'] = url
+              self.defaultParams['header']['Origin'] = self.MAIN_URL
+              self.defaultParams['header']['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0"
+              self.defaultParams['cookie_items'] = {'visited':'yes'}
+              sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+              if not sts: return valTab
+              #printDBG( 'Host listsItems data: '+data )
+              next = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="paginator">', '</ul>', False)[1]
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="th-image">', '</div>')
+              if not len(data): continue
+              for item in data:
+                 phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 phImage = self.cm.ph.getSearchGroups(item, '''img src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+                 Time = self.cm.ph.getSearchGroups(item, '''clock"></i>([^>]+?)<''', 1, True)[0].strip()
+                 if phUrl.startswith('/'): phUrl = 'https://www.letmejerk.com' + phUrl
+                 if phImage.startswith('//'): phImage = 'https:' + phImage
+                 try:
+                    phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.letmejerk.com'})
+                 except: pass
+                 if phTitle and not phUrl.endswith('/.html'):
+                    valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+              if len(next)>180:
+                 match = re.compile('href="(.*?)"').findall(next)
+                 if not match: return valTab
+                 next = match[-1].replace('&sort=','')
+                 url1 = url.replace(url.split('/')[-1],'')
+                 next = url1 + next
+                 valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+              if len(data): break
+           return valTab
+
+        if 'GOTPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.gotporn.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="list categories-list', '</ul>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'GOTPORN-clips', '', None)) 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="list tags-list', '</ul>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'GOTPORN-clips', '', None))
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- CHANNELS ---","CHANNELS",     CDisplayListItem.TYPE_CATEGORY,['https://www.gotporn.com/channels?src=hm'],             'GOTPORN-channels',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.gotporn.com'],             'GOTPORN-clips',    '', None))
+           self.SEARCH_proc='GOTPORN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'GOTPORN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.gotporn.com/results?search_query=%s' % url.replace(' ','+'), 'GOTPORN-clips')
+           return valTab
+        if 'GOTPORN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="video-item', '</li>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''data-default-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.gotporn.com'})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.gotporn.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        if 'GOTPORN-channels' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel='next' href=['"]([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="channel-card', '</li> </ul>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://www.gotporn.com' + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://www.gotporn.com'})
+              except: pass
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'GOTPORN-clips', phImage, None)) 
+              #   valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = 'https://www.gotporn.com' + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'ANALDIN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.analdin.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'class="list-categories', 'footer', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<a class="item', '</a>')
+           for item in data2:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'ANALDIN-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- MOST VIEWED ---","MOST VIEWED",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/most-popular/?mode=async&action=js_stats'],             'ANALDIN-clips',    '', None))
+           #valTab.insert(0,CDisplayListItem("--- TOP RATED ---","TOP RATED",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/top-rated/'],             'ANALDIN-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,['https://www.analdin.com/latest-updates/'],             'ANALDIN-clips',    '', None))
+           self.SEARCH_proc='ANALDIN-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'ANALDIN-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.analdin.com/search/%s/' % url.replace(' ','+'), 'ANALDIN-clips')
+           return valTab
+        if 'ANALDIN-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == None: 
+              self.page = 1
+           else:
+              self.page += 1
+           if not '/search/' in url:
+              url = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from=%s&_=%s' % (self.page, time_time())
+           else:
+              if self.page>1:
+                 url = url + '?mode=async&function=get_block&block_id=list_videos_videos&q=dildo&category_ids=&sort_by=post_date&from_videos=%s&from_albums=%s' % (self.page, self.page)
+           if 'latest-updates' in url:
+              url = url.replace(url.split('/')[-1],'')
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', 'Next', False)[1]
+           next = self.cm.ph.getSearchGroups(data, '''from:([^"^']+?)['"]''', 1, True)[0]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="item', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''class="title">([^>]+?)<''', 1, True)[0].strip() 
+              phImage = self.cm.ph.getSearchGroups(item, '''thumb=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phImage: phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              #next = url
+              if next.startswith('/'): next = self.MAIN_URL + next
+              url = url.replace(url.split('/')[-1],'')
+              #printDBG( 'Host time data: '+str(time_time()*10)) #.encode('utf-8') )
+              valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'NETFLIXPORNO' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://netflixporno.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li id="menu-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              phImage = self.cm.ph.getSearchGroups(item, '''rel=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl.endswith('/'): phUrl = phUrl[ :(len(phUrl)-1)]
+              if '/genre/' in phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'NETFLIXPORNO-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- NEW ---","NEW",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'NETFLIXPORNO-clips',    '', None))
+           self.SEARCH_proc='NETFLIXPORNO-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'NETFLIXPORNO-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://netflixporno.net/?s=%s' % url.replace(' ','+'), 'NETFLIXPORNO-clips')
+           return valTab              
+        if 'NETFLIXPORNO-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''rel="tag">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+'Added: '+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'NETFLIXPORNO-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'NETFLIXPORNO-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'netflixporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'netflixporno.cookie', 'netflixporno.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="entry-content">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'fapset' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://fapset.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<nav class="menu-inner" id="menu-inner">', '</nav>', False)[1]
+           data2 = self.cm.ph.getAllItemsBeetwenMarkers(data2, '<li>', '</li>')
+           for item in data2:
+              phTitle = self._cleanHtmlStr(item)
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'fapset-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'fapset-clips',    '', None))
+           self.SEARCH_proc='fapset-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'fapset-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://fapset.com/search/%s/' % url.replace(' ','+'), 'fapset-clips')
+           return valTab
+        if 'fapset-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<span class="navigation">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="thumb">', '</a></div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].strip() 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = self.cm.ph.getSearchGroups(next, '''</span>\s*<a href=['"]([^"^']+?/page/\d+/)['"]''', 1, True)[0]
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'daftsex' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://daftsex.com' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'daftsex.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="video-item">', '</div>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'daftsex-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- LATEST ---","LATEST",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'daftsex-clips',    '', None))
+           self.SEARCH_proc='daftsex-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'daftsex-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://daftsex.com/video/%s' % url.replace(' ','+'), 'daftsex-clips')
+           return valTab
+        if 'daftsex-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'daftsex.cookie')
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           if catUrl == 'next':
+              self.page += 1
+              post_data = {'page' : str(self.page)}
+           else:
+              self.page = 0
+              post_data = {}
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams, post_data)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, '>&uarr;<', '</div>', False)[1]
+           data = data.split('<div class="video-item">')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\nAdded['+Added+']',CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next ', 'Page: '+str(self.page+1), CDisplayListItem.TYPE_CATEGORY, [url], name, '', 'next'))
+           return valTab
+
+        if 'lovehomeporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://lovehomeporn.com/' 
+           self.format4k = config.plugins.iptvplayer.xxx4k.value
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           self.page = 0
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class="tag2', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(item).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'lovehomeporn-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=mv'],             'lovehomeporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=tr'],             'lovehomeporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'videos?o=mr'],             'lovehomeporn-clips',    '', None))
+           self.SEARCH_proc='lovehomeporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'lovehomeporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://lovehomeporn.com/search?search_type=videos&search_query=%s' % url.replace(' ','+'), 'lovehomeporn-clips')
+           return valTab
+        if 'lovehomeporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'Next', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              Time = self.cm.ph.getSearchGroups(item, '''info">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phImage.endswith('.webp'): phImage = re.sub(r'/260(.*?)195/', '/260%D1%85195/', phImage.replace('webp','jpg'))
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'EROPROFILE' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.eroprofile.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           cats = '[{"title":"Amateur Moms/Mature","url":"13"},{"title":"Amateur Teens","url":"14"},{"title":"Amateurs","url":"12"},\
+           {"title":"Asian","url":"19"},{"title":"Ass","url":"27"},{"title":"BDSM","url":"25"},{"title":"Big Ladies","url":"5"},\
+           {"title":"Big Tits","url":"11"},{"title":"Bisexual","url":"18"},{"title":"Black / Ebony","url":"20"},{"title":"Celeb","url":"23"},\
+           {"title":"Dogging","url":"33"},{"title":"Facial / Cum","url":"24"},{"title":"Fetish / Kinky","url":"10"},{"title":"Fucking / Sucking","url":"26"},\
+           {"title":"Hairy","url":"7"},{"title":"Interracial","url":"15"},{"title":"Lesbian","url":"6"},{"title":"Lingerie / Panties","url":"30"},\
+           {"title":"Nudist / Voyeur / Public","url":"16"},{"title":"Other / Cartoon","url":"28"},{"title":"Pregnant","url":"32"},\
+           {"title":"Shemale / TS","url":"9"},{"title":"Squirting","url":"34"},{"title":"Swingers / Gangbang","url":"8"}]'
+           result = simplejson.loads(cats)
+           for item in result:
+              title = str(item["title"])
+              id = str(item["url"])
+              url = 'http://www.eroprofile.com/m/videos/search?niche=%s&pnum=%s' % (id, '1')
+              valTab.append(CDisplayListItem(title,title,CDisplayListItem.TYPE_CATEGORY, [url],'EROPROFILE-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Fun Videos ---",       "Fun Videos",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/search?niche=17"], 'EROPROFILE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular Videos ---",       "Popular Videos",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/popular"], 'EROPROFILE-clips', '',None))
+           valTab.insert(0,CDisplayListItem("--- Videos Home ---",       "Videos Home",       CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+"/m/videos/home"], 'EROPROFILE-clips', '',None))
+           self.SEARCH_proc='EROPROFILE-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'EROPROFILE-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.eroprofile.com/m/videos/search?niche=13.14.12.19.27.25.5.11.18.20.23.24.10.26.17.7.15.6.30.16.28.9.8.32.33.34&text=%s&pnum=1' % url.replace(' ','+'), 'EROPROFILE-clips')
+           return valTab
+        if 'EROPROFILE-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'VideoListPageNav', 'marL', False)[1]
+           data = data.split('<div class="video">')
+           for item in data:
+              printDBG( 'Host listsItems item: '+str(item) )
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': phTitle = self.cm.ph.getSearchGroups(item, '''videoTtl">([^>]+?)<''', 1, True)[0].strip()
+              time = self.cm.ph.getSearchGroups(item, '''videoDur">([^>]+?)<''', 1, True)[0].strip()
+              added = self.cm.ph.getSearchGroups(item, '''fsSmall">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': url})
+              except: pass
+              if time and not 'Web Analytics' in phTitle and not 'tools' in time:
+                 valTab.append(CDisplayListItem(phTitle,'['+time+'] '+phTitle+'\nAdded: '+added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next', 'Page: '+next.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))
+           return valTab
+
+        if 'absoluporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.absoluporn.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl.replace('..','')
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'absoluporn-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-main-1.html'],             'absoluporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-note-1.html'],             'absoluporn-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,['http://www.absoluporn.com/en/wall-date-1.html'],             'absoluporn-clips',    '', None))
+           self.SEARCH_proc='absoluporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'absoluporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.absoluporn.com/en/search-%s-1.html' % url.replace(' ','+'), 'absoluporn-clips')
+           return valTab
+        if 'absoluporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           #data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           data = data.split('<div class="thumb-main">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'amateurcool' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.amateurcool.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurcool.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'amateurcool.cookie', 'amateurcool.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li>', '</li>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.amateurcool.com/channels/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'amateurcool-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://www.amateurcool.com/most-viewed/page1.html'],             'amateurcool-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['https://www.amateurcool.com/top-rated/page1.html'],             'amateurcool-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,['https://www.amateurcool.com/most-recent/page1.html'],             'amateurcool-clips',    '', None))
+           self.SEARCH_proc='amateurcool-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'amateurcool-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.amateurcool.com/search/%s/page1.html' % url.replace(' ','+'), 'amateurcool-clips')
+           return valTab
+        if 'amateurcool-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurcool.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'amateurcool.cookie', 'amateurcool.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', 'NEXT', False)[1]
+           data = data.split('<div class="item nb"')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = phImage.replace(' ','%20')
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('page'): next = url.replace(url.split('/')[-1],next)
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'yespornplease' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://yespornplease.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yespornplease.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'yespornplease.cookie', 'yespornplease.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           if len(data)<100 and 'Maintenance' in data:
+              msg = _("Last error:\n%s" % data)
+              GetIPTVNotify().push('%s' % msg, 'error', 20)
+              return valTab
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<div class="col-sm-4', '</div>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'yespornplease-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Recent ---","Most Recent",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'yespornplease-clips',    '', None))
+           self.SEARCH_proc='yespornplease-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'yespornplease-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://yespornplease.com/search?q=%s' % url.replace(' ','+'), 'yespornplease-clips')
+           return valTab
+        if 'yespornplease-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yespornplease.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'yespornplease.cookie', 'yespornplease.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '>Next', False)[1]
+           data = data.split('class="well well-sm"')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''"duration">([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''pull-right no-rating">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\nAdded: '+Added,CDisplayListItem.TYPE_CATEGORY, [phUrl],'yespornplease-serwer', phImage, phTitle)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+ self.cm.ph.getSearchGroups(next, '''p=([^=]+?)&''', 1, True)[0], CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        if 'yespornplease-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yespornplease.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'yespornplease.cookie', 'yespornplease.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           try:
+              phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+           except: pass
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<iframe', '</iframe>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = catUrl 
+              if not phUrl.startswith('https://yespornplease.com'):
+                 phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl.split('/')[2],CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+
+        if 'anybunny' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://anybunny.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           #data = self.cm.ph.getDataBeetwenMarkers(data, 'pvicon-categorie', 'tags', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a class=linkscts', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).replace('\n','').strip()
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/top/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'anybunny-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,['http://anybunny.com/top/'],             'anybunny-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,['http://anybunny.com/new/'],             'anybunny-clips',    '', None))
+           self.SEARCH_proc='anybunny-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anybunny-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://anybunny.com/top/%s' % url.replace(' ','+'), 'anybunny-clips')
+           return valTab
+        if 'anybunny-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'topbtmse', '>Next page', False)[1]
+           data = data.split('nuyrfe')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''<span>([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'datoporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://datoporn.co' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'dato.porn', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = 'https://dato.porn' + phUrl
+              if not 'sort_by' in phUrl: phUrl= phUrl+'?sort_by=post_date'     
+              if phUrl:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'datoporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='datoporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'datoporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://dato.porn/search/%s/' % url.replace(' ','+'), 'datoporn-clips')
+           return valTab
+        if 'datoporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'datoporn.co', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data = data.split('<div class="item')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','')
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].replace('Video','').strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = 'https://dato.porn' + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': 'https://dato.porn'})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+           return valTab
+
+        if 'hqporner' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://hqporner.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<section', '</section>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'hqporner-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='hqporner-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'hqporner-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://hqporner.com/?s=%s' % url.replace(' ','+'), 'hqporner-clips')
+           return valTab
+        if 'hqporner-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'pagination', '>Next', False)[1]
+           data = data.split('<div class="6u">')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''fa-clock-o meta-data">([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle),CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              next = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next)[-1]
+              next = next.replace('&amp;','&')
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('=')[-1].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'spankbang' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://spankbang.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a', '</a>')
+           for item in data:
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/s/[^"^']+?)['"]''', 1, True)[0]
+              if not phUrl: phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](/tag/[^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'spankbang-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Trending ---","Trending",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/trending_videos/'],             'spankbang-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most_popular/?period=week'],             'spankbang-clips',    '', None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new_videos/'],             'spankbang-clips',    '', None))
+           self.SEARCH_proc='spankbang-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'spankbang-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://spankbang.com/s/%s/' % url.replace(' ','+'), 'spankbang-clips')
+           return valTab
+        if 'spankbang-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           if next == '': next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, '<a href="/tag/" class="k more">', 'footer', False)[1]
+           if len(data2): data = data2
+           data = data.split('<div class="video-item"')
+           if len(data): del data[0]
+           for item in data:
+              Added = ''
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''clock-o"></i>([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''i-len">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''&nbsp;<span>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle and Time:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('//'): next = 'http:' + next
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-2].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+
+        if 'cumlouder' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.cumlouder.com' 
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<a tag-url=', '</a>')
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(phTitle,phTitle,CDisplayListItem.TYPE_CATEGORY, [phUrl],'cumlouder-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Channels ---","channels",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/channels/'],             'cumlouder-girls',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Series ---","series",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/series/'],             'cumlouder-girls',    '', None))
+           valTab.insert(0,CDisplayListItem("--- Girls ---","girls",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/girls/'],             'cumlouder-girls',    '', None))
+           self.SEARCH_proc='cumlouder-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'cumlouder-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.cumlouder.com/search/?q=%s' % url.replace(' ','+'), 'cumlouder-clips')
+           return valTab
+        if 'cumlouder-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           if next == '': next = self.cm.ph.getSearchGroups(data, '''<li class="next"><a href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data = data.split('<a class="muestra-escena')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0].replace('\n','').strip()
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('..','')
+              Time = self.cm.ph.getSearchGroups(item, '''minutos sprite"></span>([^>]+?)<''', 1, True)[0].strip()
+              if not Time: Time = self.cm.ph.getSearchGroups(item, '''i-len">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''fecha sprite"></span>([^>]+?)<''', 1, True)[0].strip()
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              try:
+                 phImage = urlparser.decorateUrl(phImage, {'Referer': self.MAIN_URL})
+              except: pass
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+Time+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              if next.startswith('//'): next = 'http:' + next
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem('Next ', 'Page: '+next.split('/')[-2].replace('.html','').replace('page',''), CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'next'))
+           return valTab
+        if 'cumlouder-girls' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('class="muestra-escena')
+           if len(data): del data[0]
+           for item in data:
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-src=['"]([^"^']+?)['"]''', 1, True)[0]
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if phUrl and phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'cumlouder-clips', phImage, None)) 
+           #valTab.sort(key=lambda poz: poz.name)
+           return valTab
+
+        if 'porn00' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'http://www.porn00.org'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getDataBeetwenMarkers(data, '<ul class="category-menu', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(decodeHtml(item)).replace('\n','').strip()
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phUrl:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'porn00-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           self.SEARCH_proc='porn00-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'porn00-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'http://www.porn00.org/page/1/?s=%s' % url.replace(' ','+'), 'porn00-clips')
+           return valTab              
+        if 'porn00-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&').replace('..','')
+           data = data.split('<div class="post-con">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''([\d]?\d\d:\d\d)''', 1, True)[0] 
+              Added = self.cm.ph.getSearchGroups(item, '''dunk">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)],'', phImage, None)) 
+           if next:
+              valTab.append(CDisplayListItem('Next', next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'watchpornx' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://watchpornx.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="cat-item', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-clips', '', None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Pornstars ---","Pornstars",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    '',"Pornstars"))
+           valTab.insert(0,CDisplayListItem("--- Years ---","Years",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    '',"Years"))
+           valTab.insert(0,CDisplayListItem("--- Studios ---","Studios",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-years',    '',"Studios"))
+           #valTab.insert(0,CDisplayListItem("--- Clips & Scenes ---","Clips & Scenes",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/clips-scenes'],             'watchpornx-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- Featured ---","Featured",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/featured-movies'],             'watchpornx-clips',    '',self.MAIN_URL))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL],             'watchpornx-clips',    '', None))
+           self.SEARCH_proc='watchpornx-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'watchpornx-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://watchpornx.com/?s=%s' % url.replace(' ','+'), 'watchpornx-clips')
+           return valTab              
+        if 'watchpornx-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getSearchGroups(data, '''<link\s*rel=['"]next['"]\s*href=['"]([^"^']+?)['"]''', 1, True)[0] 
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<article', '</article>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''Title">([^>]+?)<''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''rel="tag">([^>]+?)<''', 1, True)[0]
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if not 'Ubiqfile' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle)+'\n'+phTime,CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-serwer', phImage, phTitle)) 
+           if next_page:
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+        if 'watchpornx-serwer' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           phImage = self.cm.ph.getSearchGroups(data, '''"og:image" content=['"]([^"^']+?)['"]''', 1, True)[0] 
+           #data = self.cm.ph.getDataBeetwenMarkers(data, '<div class="entry-content">', '</div>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li class="hosts', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if '/goto/' in phUrl: 
+                 self.defaultParams['header']['Referer'] = url
+                 sts, data = self._getPage(phUrl, self.defaultParams)
+                 if not sts: return 
+                 printDBG( 'Host listsItems data2: '+str(data) )
+                 phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                 printDBG( 'Host listsItems phUrl: '+str(phUrl) )
+                 if '/goto/' in phUrl: 
+                    sts, data = self._getPage(phUrl, self.defaultParams)
+                    if not sts: return 
+                    printDBG( 'Host listsItems data2: '+str(data) )
+                    phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0] 
+                    if '/goto/' in phUrl: 
+                       sts, data = self._getPage(phUrl, self.defaultParams)
+                       if not sts: return 
+                       printDBG( 'Host listsItems data2: '+str(data) )
+                       phUrl = self.cm.ph.getSearchGroups(data, '''url=([^"^']+?)['"]''', 1, True)[0]
+              phUrl = urlparser.decorateUrl(phUrl, {'Referer': url})
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),phUrl,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           return valTab
+        if 'watchpornx-years' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'watchpornx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'watchpornx.cookie', 'watchpornx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           #printDBG( 'Host catUrl: '+str(catUrl) )
+           if catUrl == 'Studios':
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Studios<', '</ul>', False)[1]
+           elif catUrl == 'Years':
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Years', '</ul>', False)[1]
+           elif catUrl == 'Pornstars':
+              data = self.cm.ph.getDataBeetwenMarkers(data, 'Pornstars', '</ul>', False)[1]
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self._cleanHtmlStr(item)
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl],'watchpornx-clips', '', None)) 
+           return valTab
+
+        if 'volimeee' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.volimeee.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'volimeee.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'volimeee.cookie', 'volimeee.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="pull-right">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?type=public'],'volimeee-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---","HD",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/hd?type=public'],             'volimeee-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Videos ---","Videos",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/videos?type=public'],             'volimeee-clips',    '',None))
+           self.SEARCH_proc='volimeee-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'volimeee-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.volimeee.com/search/videos?search_query=%s' % url.replace(' ','+'), 'volimeee-clips')
+           return valTab              
+        if 'volimeee-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'volimeee.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'volimeee.cookie', 'volimeee.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next_page = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination', '&raquo', False)[1]
+           n = '<div class="video-views pull-right'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added">([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next_page:
+              next_page = re.compile('href=[\"|\'](.*?)[\"|\']').findall(next_page)[-1]
+              if next_page.startswith('/'): next_page = self.MAIN_URL + next_page 
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'P720' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://p720.net'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'P720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'P720.cookie', 'p720.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'P720-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'+'?sort_by=post_date'],             'P720-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'+'?sort_by=post_date'],             'P720-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'+'?sort_by=post_date'],             'P720-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'P720-clips',    '',None))
+           self.SEARCH_proc='P720-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'P720-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://p720.net/search/%s/?sort_by=post_date' % url.replace(' ','+'), 'P720-clips')
+           return valTab              
+        if 'P720-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'P720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'P720.cookie', 'p720.net', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'pornopersik' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://pornopersik.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornopersik.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornopersik.cookie', 'pornopersik.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'pornopersik-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'+'?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'pornopersik-clips',    '',None))
+           self.SEARCH_proc='pornopersik-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'pornopersik-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://pornopersik.com/search/%s/?sort_by=post_date' % url.replace(' ','+'), 'pornopersik-clips')
+           return valTab              
+        if 'pornopersik-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornopersik.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornopersik.cookie', 'pornopersik.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''class="next".*?from:(\d)"''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''class="duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ANYPORN' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://anyporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'anyporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- HD ---","HD",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/categories/hd/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Most Viewed ---","Most Viewed",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/popular/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://anyporn.com/newest/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           #valTab.insert(0,CDisplayListItem("--- Home ---","Home",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/?sort_by=post_date'],             'anyporn-clips',    '',None))
+           self.SEARCH_proc='anyporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anyporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://anyporn.com/search/%s/' % url.replace(' ','+'), 'anyporn-clips')
+           return valTab              
+        if 'anyporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".*?from:(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = "<div class='item"
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''data-original=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''durationid.*?innerHTML\s*?=\s*?"([^"^']+?)"''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              if 'label-private">PRIVATE<' in item: phTitle = phTitle + '   {PRIVATE}'
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if '?' in url:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              else:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'?from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'ANON-V' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://anon-v.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item"')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'anon-v-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           #valTab.insert(0,CDisplayListItem("--- Most Popular ---","Most Popular",     CDisplayListItem.TYPE_CATEGORY,['https://anon-v.com/most-popular/?sort_by=post_date'],             'anon-v-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Latest ---","Latest",     CDisplayListItem.TYPE_CATEGORY,['https://anon-v.com/latest-updates/?sort_by=post_date'],             'anon-v-clips',    '',None))
+           self.SEARCH_proc='anon-v-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'anon-v-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://anon-v.com/search/%s/' % url.replace(' ','+'), 'anon-v-clips')
+           return valTab              
+        if 'anon-v-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''next".*?from:(\d)">Next''', 1, True)[0] 
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'id="list_videos_most_recent_videos', 'footer', False)[1]
+           if data2: data = data2
+           n = '<div class="item'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              phImage = strwithmeta(phImage, {'Referer':self.MAIN_URL})
+              if not 'CCBIll' in phTitle:
+                 valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              if '?' in url:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'&from='+str(next)
+              else:
+                 next_page = url.replace('&'+url.split('&')[-1],'')+'?from='+str(next)
+              if '/search/' in url: next_page = url.replace('&'+url.split('&')[-1],'')+'&from_videos='+str(next)
+              #valTab.append(CDisplayListItem('Next', next_page, CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))
+              valTab.append(CDisplayListItem('Next', next_page.split('=')[-1], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+           return valTab
+
+        if 'bravoporn' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.bravoporn.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoporn.cookie', 'bravoporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<li', '</li>')
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not '/c/' in phUrl: continue
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'http:' + phImage + '/' 
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'bravoporn-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'bravoporn-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Newest ---","Newest",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'bravoporn-clips',    '',None))
+           self.SEARCH_proc='bravoporn-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bravoporn-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bravoporn.com/s/?q=%s' % url.replace(' ','+'), 'bravoporn-clips')
+           return valTab              
+        if 'bravoporn-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoporn.cookie', 'bravoporn.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''<a href=['"]([^"^']+?)['"]\sclass="next nopop"''', 1, True)[0] 
+           n = 'class="video_block'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''added"><em>([^>]+?)<''', 1, True)[0].strip()
+              if not Added: Added = self.cm.ph.getSearchGroups(item, '''pull-left">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              #printDBG( 'Host listsItems next: '+next )
+              if next.startswith('/'): next = self.MAIN_URL + next
+              valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next], name, '', None))                
+           return valTab
+
+        if 'bravoteens' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.bravoteens.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoteens.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoteens.cookie', 'bravoteens.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="preview-item">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'bravoteens-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top/'],             'bravoteens-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/popular/'],             'bravoteens-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/new/'],             'bravoteens-clips',    '',None))
+           self.SEARCH_proc='bravoteens-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'bravoteens-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.bravoteens.com/search/?q=%s' % url.replace(' ','+'), 'bravoteens-clips')
+           return valTab              
+        if 'bravoteens-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bravoteens.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'bravoteens.cookie', 'bravoteens.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pagination', '</div>', False)[1]
+           n = 'class="preview-item"'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''time">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next_page = re.compile('</span>.+?<a href="(.+?)"', re.DOTALL).findall(next)[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next_page.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'sleazyneasy' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://www.sleazyneasy.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="thumb">')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'sleazyneasy-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'sleazyneasy-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'sleazyneasy-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'sleazyneasy-clips',    '',None))
+           self.SEARCH_proc='sleazyneasy-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'sleazyneasy-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.sleazyneasy.com/search/?q=%s' % url.replace(' ','+'), 'sleazyneasy-clips')
+           return valTab              
+        if 'sleazyneasy-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, 'class="pager', '</div>', False)[1]
+           n = '<span class="thumb-info">'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"](https://www.sleazyneasy.com/videos/[^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''data-poster=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''<i>([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''truncate">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 next_page = re.compile('href="(.+?)"', re.DOTALL).findall(next)[-1]
+                 if next_page.startswith('/'): next_page = self.MAIN_URL + next_page
+                 valTab.append(CDisplayListItem(_("Next page"), 'Page: '+next_page.split('/')[-2], CDisplayListItem.TYPE_CATEGORY, [next_page], name, '', None))                
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'vjav' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://vjav.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vjav.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'vjav.cookie', 'vjav.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'vjav-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Top Rated ---","Top Rated",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/top-rated/'],             'vjav-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Popular ---","Popular",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/most-popular/'],             'vjav-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- New ---","New",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/latest-updates/'],             'vjav-clips',    '',None))
+           self.SEARCH_proc='vjav-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'vjav-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://www.vjav.com/search/?q=%s' % url.replace(' ','+'), 'vjav-clips')
+           return valTab              
+        if 'vjav-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vjav.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'vjav.cookie', 'vjav.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getDataBeetwenMarkers(data, '<li class="next">', '</li>', False)[1]
+           n = 'data-id='
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''truncate">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 page = self.cm.ph.getSearchGroups(str(next), '''page:([^"^']+?)['"]''')[0]
+                 url = url.replace(url.split('/')[-1],'')
+                 next = url + '?mode=async&function=get_block&block_id=list_videos_common_videos_list&sort_by=post_date&from='+page
+                 valTab.append(CDisplayListItem('Next', 'Page : '+page, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab
+
+        if 'javhoho' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           self.MAIN_URL = 'https://javhoho.com'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'javhoho.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'javhoho.cookie', 'javhoho.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<a class="item')
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if not phTitle: phTitle = self.cm.ph.getSearchGroups(item, '''alt=['"]([^"^']+?)['"]''', 1, True)[0]
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              if phUrl.startswith('//'): phUrl = 'https:' + phUrl + '/' 
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl 
+              if phImage.startswith('//'): phImage = 'https:' + phImage
+              if phImage.startswith('/'): phImage = self.MAIN_URL + phImage
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),decodeHtml(phTitle),CDisplayListItem.TYPE_CATEGORY, [phUrl+'?sort_by=post_date'],'javhoho-clips', phImage, None)) 
+           valTab.sort(key=lambda poz: poz.name)
+           valTab.insert(0,CDisplayListItem("--- Free Asian Porn ---","Free Asian Porn",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-asian-porn/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free Korean Porn ---","Free Korean Porn",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-korean-porn/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free Chinese Porn ---","Free Chinese Porn",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-chinese-porn/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free JAV Censored ---","Free JAV Censored",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-jav-censored/'],             'javhoho-clips',    '',None))
+           valTab.insert(0,CDisplayListItem("--- Free JAV Uncensored ---","Free JAV Uncensored",     CDisplayListItem.TYPE_CATEGORY,[self.MAIN_URL+'/category/free-jav-uncensored/'],             'javhoho-clips',    '',None))
+           self.SEARCH_proc='javhoho-search'
+           valTab.insert(0,CDisplayListItem(_('Search history'), _('Search history'), CDisplayListItem.TYPE_CATEGORY, [''], 'HISTORY', '', None)) 
+           valTab.insert(0,CDisplayListItem(_('Search'),  _('Search'),                       CDisplayListItem.TYPE_SEARCH,   [''], '',        '', None)) 
+           return valTab
+        if 'javhoho-search' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           valTab = self.listsItems(-1, 'https://javhoho.com/search/%s/' % url.replace(' ','+'), 'javhoho-clips')
+           return valTab              
+        if 'javhoho-clips' == name:
+           printDBG( 'Host listsItems begin name='+name )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'javhoho.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'javhoho.cookie', 'javhoho.com', self.defaultParams)
+           if not sts: return valTab
+           printDBG( 'Host listsItems data: '+data )
+           catUrl = self.currList[Index].possibleTypesOfSearch
+           next = self.cm.ph.getSearchGroups(data, '''<link rel="next" href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+           n = '<div id="post-'
+           s = '<div class="video-rating pull-right'
+           if not n in data and not s in data:  return valTab
+           if n in data: data = data.split(n)
+           if s in data: data = data.split(s)
+           if len(data): del data[0]
+           for item in data:
+              phUrl = self.cm.ph.getSearchGroups(item, '''href=['"]([^"^']+?)['"]''', 1, True)[0].replace('&amp;','&')
+              phTitle = self.cm.ph.getSearchGroups(item, '''title=['"]([^"^']+?)['"]''', 1, True)[0]
+              if phTitle=='ASACP': continue
+              phImage = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+              phTime = self.cm.ph.getSearchGroups(item, '''duration">([^>]+?)<''', 1, True)[0].strip()
+              Added = self.cm.ph.getSearchGroups(item, '''date">([^>]+?)<''', 1, True)[0].strip()
+              if phImage.startswith('//'): phImage = 'http:' + phImage
+              if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+              if phUrl.startswith('/'): phUrl = self.MAIN_URL + phUrl
+              valTab.append(CDisplayListItem(decodeHtml(phTitle),'['+phTime+'] '+decodeHtml(phTitle)+'\n'+Added,CDisplayListItem.TYPE_VIDEO, [CUrlItem('', phUrl, 1)], 0, phImage, None)) 
+           if next:
+              try:
+                 valTab.append(CDisplayListItem('Next', 'Page : '+next, CDisplayListItem.TYPE_CATEGORY, [next], name, '', 'Next'))  
+              except Exception:
+                 printExc()
+           return valTab 
+   
+   
+        return valTab
+
+    def getLinksForVideo(self, url):
+        printDBG("Urllist.getLinksForVideo url[%s]" % url)
+        videoUrls = []
+        uri, params   = DMHelper.getDownloaderParamFromUrl(url)
+        printDBG(params)
+        uri = urlparser.decorateUrl(uri, params)
+       
+        urlSupport = self.up.checkHostSupport( uri )
+        if 1 == urlSupport:
+            retTab = self.up.getVideoLinkExt( uri )
+            videoUrls.extend(retTab)
+            printDBG("Video url[%s]" % videoUrls)
+            return videoUrls
+
+    def getParser(self, url):
+        printDBG( 'Host getParser begin' )
+        printDBG( 'Host getParser mainurl: '+self.MAIN_URL )
+        printDBG( 'Host getParser url    : '+url )
+        if url.startswith('http://www.4tube.com'):                    return 'http://www.4tube.com'
+        if url.startswith('https://www.4tube.com'):                   return 'http://www.4tube.com'
+        if url.startswith('https://www.fux.com'):                     return 'http://www.4tube.com'
+        if url.startswith('http://www.pornerbros.com'):               return 'http://www.4tube.com'
+        if url.startswith('https://www.pornerbros.com'):              return 'http://www.4tube.com'
+        if url.startswith('https://www.porntube.com'):                return 'http://www.4tube.com'
+        if url.startswith('https://www.ah-me.com'):                   return 'http://www.ah-me.com'
+        if url.startswith('http://www.cliphunter.com'):               return 'http://www.cliphunter.com'
+        if url.startswith('http://www.dachix.com'):                   return 'http://www.dachix.com'
+        if url.startswith('http://www.drtuber.com'):                  return 'http://www.drtuber.com'
+        if url.startswith('http://www.eporner.com'):                  return 'http://www.eporner.com'
+        if url.startswith('https://www.hclips.com'):                  return 'http://www.hclips.com'
+        if url.startswith('http://www.hdporn.net'):                   return 'http://www.hdporn.net'
+        if url.startswith('http://hdsite.net'):                       return 'https://hdsite.net'
+        if url.startswith('https://hdsite.net'):                      return 'https://hdsite.net'
+        if url.startswith('http://www.hdzog.com'):                    return 'http://www.hdzog.com'
+        if url.startswith('http://hentaigasm.com'):                   return 'http://hentaigasm.com'
+        if url.startswith('http://www.homemoviestube.com'):           return 'http://www.homemoviestube.com'
+        if url.startswith('http://hotmovs.com'):                      return 'http://www.hdzog.com'
+        if url.startswith('https://www.katestube.com'):               return 'https://www.katestube.com'
+        if url.startswith('http://www.katestube.com'):                return 'https://www.katestube.com'
+        if url.startswith('https://www.koloporno.com'):               return 'https://www.koloporno.com'
+        if url.startswith('https://mangovideo'):                      return 'https://mangovideo'
+        if url.startswith('https://www.pinflix.com'):                 return 'https://www.pinflix.com'
+        if url.startswith('https://videos.porndig.com'):              return 'https://porndig.com'
+        if url.startswith('https://www.playvids.com'):                return 'https://www.playvids.com'
+        if url.startswith('http://porndoe.com'):                      return 'http://porndoe.com'
+        if url.startswith('https://porndoe.com'):                     return 'http://porndoe.com'
+        if url.startswith('https://www.porndoe.com'):                 return 'http://porndoe.com'
+        if url.startswith('http://www.pornhd.com'):                   return 'http://www.pornhd.com'
+        if url.startswith('http://www.pornhub.com/embed/'):           return 'http://www.pornhub.com/embed/'
+        if url.startswith('https://www.pornhub.com/embed/'):          return 'http://www.pornhub.com/embed/'
+        if url.startswith('http://pl.pornhub.com/embed/'):            return 'http://www.pornhub.com/embed/'
+        if url.startswith('http://pl.pornhub.com'):                   return 'http://www.pornhub.com'
+        if url.startswith('http://www.pornhub.com'):                  return 'http://www.pornhub.com'
+        if url.startswith('https://www.pornhub.com'):                 return 'http://www.pornhub.com'
+        if url.startswith('http://m.pornhub.com'):                    return 'http://m.pornhub.com'
+        if url.startswith('http://pornicom.com'):                     return 'http://pornicom.com'
+        if url.startswith('https://pornicom.com'):                    return 'http://pornicom.com'
+        if url.startswith('http://www.pornicom.com'):                 return 'http://pornicom.com'
+        if url.startswith('https://www.pornicom.com'):                return 'http://pornicom.com'
+        if url.startswith('https://www.pornoxo.com'):                 return 'https://www.pornoxo.com'
+        if url.startswith('http://www.pornrabbit.com'):               return 'http://www.pornrabbit.com'
+        if url.startswith('https://www.pornrewind.com'):              return 'https://www.pornrewind.com'
+        if url.startswith('https://www.realgfporn.com'):              return 'https://www.realgfporn.com'
+        if url.startswith('http://embed.redtube.com'):                return 'http://embed.redtube.com'
+        if url.startswith('http://www.redtube.com'):                  return 'http://www.redtube.com'
+        if url.startswith('https://spankbang.com'):                   return 'https://spankbang.com'
+        if url.startswith('http://www.thumbzilla.com'):               return 'http://www.thumbzilla.com'
+        if url.startswith('http://www.tnaflix.com'):                  return 'https://www.tnaflix.com'
+        if url.startswith('https://alpha.tnaflix.com'):               return 'https://alpha.tnaflix.com'
+        if url.startswith('http://www.tube8.com/embed/'):             return 'http://www.tube8.com/embed/'
+        if url.startswith('http://www.tube8.com'):                    return 'http://www.tube8.com'
+        if url.startswith('http://m.tube8.com'):                      return 'http://m.tube8.com'
+        if url.startswith('https://www.tube8.com'):                   return 'http://www.tube8.com'
+        if url.startswith('https://www.vporn.com'):                   return 'https://www.vporn.com'
+        if url.startswith('http://xhamster.com'):                     return 'http://xhamster.com'
+        if url.startswith('https://xhamster.com'):                    return 'http://xhamster.com'
+        if url.startswith('http://www.xnxx.com'):                     return 'http://www.xnxx.com'
+        if url.startswith('http://www.xvideos.com'):                  return 'http://www.xvideos.com'
+        if url.startswith('https://yespornplease.com'):               return 'https://yespornplease.com'
+        if url.startswith('http://www.youjizz.com'):                  return 'http://www.youjizz.com'
+        if url.startswith('http://www.youporn.com/embed/'):           return 'http://www.youporn.com/embed/'
+        if url.startswith('http://www.youporn.com'):                  return 'http://www.youporn.com'
+        if url.startswith('https://www.youporn.com'):                 return 'http://www.youporn.com'
+        if url.startswith('https://sxyprn.com'):                      return 'https://yourporn.sexy'
+        if url.startswith('https://mini.zbiornik.com'):               return 'https://mini.zbiornik.com'
+        if url.startswith('http://sexkino.to'):                       return 'http://sexkino.to'
+        if url.startswith('http://www.plashporn.com'):                return 'http://sexkino.to'
+        if url.startswith('http://www.alphaporno.com'):               return 'http://www.tubewolf.com'
+        if url.startswith('http://crocotube.com'):                    return 'http://www.tubewolf.com'
+        if url.startswith('http://www.tubewolf.com'):                 return 'http://www.tubewolf.com'
+        if url.startswith('http://zedporn.com'):                      return 'http://www.tubewolf.com'
+        if url.startswith('https://www.alphaporno.com'):               return 'http://www.tubewolf.com'
+        if url.startswith('https://crocotube.com'):                    return 'http://www.tubewolf.com'
+        if url.startswith('https://www.tubewolf.com'):                 return 'http://www.tubewolf.com'
+        if url.startswith('https://zedporn.com'):                      return 'http://www.tubewolf.com'
+        if url.startswith('https://www.ashemaletube.com'):            return 'https://www.ashemaletube.com'
+        if url.startswith('https://upstream.to'):                     return 'https://upstream.to'
+        if url.startswith('https://prostream.to'):                    return 'https://prostream.to'
+
+# URLPARSER
+        if url.startswith('https://gounlimited.to'):                  return 'xxxlist.txt'
+        if url.startswith('http://openload.co'):                      return 'xxxlist.txt'
+        if url.startswith('https://oload.tv'):                        return 'xxxlist.txt'
+        if url.startswith('http://www.cda.pl'):                       return 'xxxlist.txt'
+        if url.startswith('http://hqq.tv'):                           return 'xxxlist.txt'
+        if url.startswith('https://hqq.tv'):                          return 'xxxlist.txt'
+        if url.startswith('https://www.rapidvideo.com'):              return 'xxxlist.txt'
+        if url.startswith('http://videomega.tv'):                     return 'xxxlist.txt'
+        if url.startswith('http://www.flashx.tv'):                    return 'xxxlist.txt'
+        if url.startswith('http://streamcloud.eu'):                   return 'xxxlist.txt'
+        if url.startswith('http://thevideo.me'):                      return 'xxxlist.txt'
+        if url.startswith('https://vidoza.net'):                      return 'xxxlist.txt'
+        if url.startswith('http://fileone.tv'):                       return 'xxxlist.txt'
+        if url.startswith('https://fileone.tv'):                      return 'xxxlist.txt'
+        if url.startswith('https://streamcherry.com'):                return 'xxxlist.txt'
+        if url.startswith('https://vk.com'):                          return 'xxxlist.txt'
+        if url.startswith('https://www.fembed.com'):                  return 'xxxlist.txt'
+        if url.startswith('https://videobin.co'):                     return 'https://videobin.co'
+        if url.startswith('http://dato.porn'):                        return 'http://dato.porn'
+        if url.startswith('https://dato.porn'):                       return 'http://dato.porn'
+        if url.startswith('http://datoporn.co'):                      return 'http://dato.porn'
+        if url.startswith('https://datoporn.co'):                     return 'http://dato.porn'
+        if url.startswith('http://datoporn.com'):                     return 'http://dato.porn'
+        if url.startswith('https://datoporn.com'):                    return 'http://dato.porn'
+        if url.startswith('https://vidlox.tv'):                       return 'https://vidlox.tv'
+        if self.MAIN_URL == 'http://www.freeomovie.com/':             return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://streamporn.pw':                  return 'xxxlist.txt' 
+        if self.MAIN_URL == 'https://onlinepornfree.xyz':             return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://www.xxxstreams.org':              return 'xxxlist.txt' 
+        if self.MAIN_URL == 'https://pandamovie.info':                return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://fullxxxmovies.net':               return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://www.pornrewind.com':             return 'xxxlist.txt'
+        if self.MAIN_URL == 'http://www.pornfromczech.com':           return 'xxxlist.txt' 
+        if self.MAIN_URL == 'http://netflixporno.net':                return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://yespornplease.com':              return 'xxxlist.txt'
+        if self.MAIN_URL == 'https://watchpornx.com':                  return 'xxxlist.txt'
+
+# A TO DO ...
+        if url.startswith('http://www.slutsxmovies.com/embed/'): return 'http://www.nuvid.com'
+        if url.startswith('http://www.cumyvideos.com/embed/'):   return 'http://www.nuvid.com'
+        #if url.startswith('http://www.x3xtube.com'):         return 'file: '
+        if url.startswith('http://www.nuvid.com'):           return 'http://www.nuvid.com'
+        if url.startswith('http://www.wankoz.com'):          return 'file: '
+        if url.startswith('http://hornygorilla.com'):        return 'file: '
+        #if url.startswith('http://www.vikiporn.com'):        return '1file: "'
+        if url.startswith('http://www.fetishshrine.com'):    return 'file: '
+        if url.startswith('http://www.sunporno.com'):        return 'http://www.sunporno.com'
+        if url.startswith('http://theclassicporn.com'):      return "video_url: '"
+        if url.startswith('http://www.faphub.xxx'):          return 'http://www.faphub.xxx'
+        if url.startswith('http://www.sleazyneasy.com'):     return 'file: '
+        if url.startswith('http://www.proporn.com'):         return 'http://www.proporn.com'
+        if url.startswith('http://www.tryboobs.com'):        return "video_url: '"
+        if url.startswith('http://www.viptube.com'):         return 'http://www.nuvid.com'
+        if url.startswith('http://pervclips.com'):           return 'http://www.wankoz.com'
+        if url.startswith('http://www.jizz.us'):             return 'http://www.x3xtube.com'
+        if url.startswith('http://www.pornstep.com'):        return 'videoFile="'
+        if url.startswith('http://www.azzzian.com'):         return "video_url: '"
+        if url.startswith('http://www.porndreamer.com'):     return 'http://www.x3xtube.com'
+        if url.startswith('http://www.tubeon.com'):          return 'http://www.tubeon.com'
+        if url.startswith('http://www.finevids.xxx'):        return "video_url: '"
+        if url.startswith('http://www.pornwhite.com'):       return 'file: '
+        if url.startswith('http://www.xfig.net'):            return 'videoFile="'
+        if url.startswith('http://www.pornoid.com'):         return "video_url: '"
+        if url.startswith('http://tubeq.xxx'):               return 'http://www.faphub.xxx'
+        if url.startswith('http://www.wetplace.com'):        return "video_url: '"
+        if url.startswith('http://sexylies.com'):            return 'http://sexylies.com'
+        if url.startswith('http://www.eskimotube.com'):      return 'http://www.eskimotube.com'
+        if url.startswith('http://www.pornalized.com'):      return "video_url: '"
+        if url.startswith('http://www.porn5.com'):           return 'http://www.porn5.com'
+        if url.startswith('http://www.pornyeah.com'):        return 'http://www.pornyeah.com'
+        if url.startswith('http://www.porn.com'):            return 'http://www.porn5.com'
+        if url.startswith('http://www.yeptube.com'):         return 'http://www.yeptube.com'
+        if url.startswith('http://www.pornpillow.com'):      return 'http://www.pornpillow.com'
+        if url.startswith('http://porneo.com'):              return 'http://www.nuvid.com'
+        if url.startswith('http://www.5fing.com'):           return 'file: '
+        if url.startswith('http://www.pornroxxx.com'):       return "0p'  : '"
+        if url.startswith('http://www.hd21.com'):            return "0p'  : '"
+        if url.startswith('http://www.pornrox.com'):         return "0p'  : '"
+        if url.startswith('http://www.flyflv.com'):          return 'http://www.flyflv.com'
+        if url.startswith('http://www.xtube.com'):           return 'https://vidlox.tv'
+        if url.startswith('http://xxxkingtube.com'):         return 'http://xxxkingtube.com'
+        if url.startswith('http://www.boyfriendtv.com'):     return 'source src="'
+        if url.startswith('http://pornxs.com'):              return 'http://pornxs.com'
+        if url.startswith('http://pornsharing.com'):         return 'http://pornsharing.com'
+        if url.startswith('http://www.vivatube.com'):        return 'http://vivatube.com'
+        if url.startswith('http://www.clipcake.com'):        return 'videoFile="'
+        if url.startswith('http://www.cliplips.com'):        return 'videoFile="'
+        if url.startswith('http://www.sheshaft.com'):        return 'file: '
+        if url.startswith('http://www.vid2c.com'):           return 'videoFile="'
+        if url.startswith('http://www.bonertube.com'):       return 'videoFile="'
+
+# Test mjpg
+        if url.endswith('.mjpg'):                            return 'mjpg_stream'
+        if url.endswith('.cgi'):                             return 'mjpg_stream'
+        if self.MAIN_URL == 'http://hotmovs.com':            return 'http://www.hdzog.com'
+        if self.MAIN_URL == 'https://www.vporn.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://sxyprn.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.moviefap.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.homemoviestube.com': return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hdzog.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.4tube.com':         return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.fux.com':           return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.pornerbros.com':    return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.porntube.com':      return 'http://www.4tube.com'
+        if self.MAIN_URL == 'https://www.playvids.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.realgfporn.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://tubepornclassic.com':    return 'http://www.hdzog.com' #self.MAIN_URL
+        if self.MAIN_URL == 'https://www.koloporno.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.pornomenge.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.yuvutu.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.camsoda.com/':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.thumbzilla.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.cliphunter.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.filmyporno.tv':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://porndoe.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.porntrex.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://porn720.net':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://rusporn.tv':             return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.extremetube.com':   return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.el-ladies.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.livejasmin.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://pl.bongacams.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.tnaflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.empflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.myfreecams.com/':   return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.drtuber.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.dachix.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.youjizz.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.cam4.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.amateurporn.net':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://chaturbate.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.ah-me.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornhd.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornrabbit.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://beeg.com':               return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.tube8.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.redtube.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.youporn.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://showup.tv':              return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.xnxx.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.xvideos.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://hentaigasm.com':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://xhamsterlive.com':       return 'http://xhamster.com/cams'
+        if self.MAIN_URL == 'http://xhamster.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.eporner.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.pornhub.com':        return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.4tube.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hdporn.net':         return self.MAIN_URL
+        if self.MAIN_URL == 'http://m.tube8.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'http://m.pornhub.com':          return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.katestube.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.hclips.com':         return 'http://www.hclips.com'
+        if self.MAIN_URL == 'https://www.pinflix.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.upornia.com':        return 'http://www.hdzog.com'
+        if self.MAIN_URL == 'https://www.txxx.com':          return 'https://www.txxx.com'
+        if self.MAIN_URL == 'https://www.sunporno.com':      return 'http://www.sunporno.com'
+        if self.MAIN_URL == 'http://sexu.com':               return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.tubewolf.com':       return self.MAIN_URL
+        if self.MAIN_URL == 'https://streamate.com':         return self.MAIN_URL 
+        if self.MAIN_URL == 'https://momxxxfun.com':         return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.mydirtyhobby.to':   return self.MAIN_URL 
+        if self.MAIN_URL == 'http://www.adulttvlive.net':    return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.balkanjizz.com':    return self.MAIN_URL 
+        if self.MAIN_URL == 'https://pornorussia.tv':        return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.letmejerk.com':     return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.gotporn.com':       return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.analdin.com':       return self.MAIN_URL 
+        if self.MAIN_URL == 'https://fapset.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://daftsex.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://lovehomeporn.com/':     return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.eroprofile.com':    return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.absoluporn.com':     return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.amateurcool.com':   return self.MAIN_URL 
+        if self.MAIN_URL == 'http://anybunny.com':           return self.MAIN_URL  
+        if self.MAIN_URL == 'https://hqporner.com':          return self.MAIN_URL 
+        if self.MAIN_URL == 'https://www.naked.com':         return self.MAIN_URL  
+        if self.MAIN_URL == 'https://www.cumlouder.com':     return self.MAIN_URL
+        if self.MAIN_URL == 'http://www.porn00.org':         return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.volimeee.com':      return self.MAIN_URL
+        if self.MAIN_URL == 'https://p720.net':              return self.MAIN_URL
+        if self.MAIN_URL == 'https://pornopersik.com':       return 'https://p720.net'
+        if self.MAIN_URL == 'https://anyporn.com':           return self.MAIN_URL
+        if self.MAIN_URL == 'https://anon-v.com':            return self.MAIN_URL
+        if self.MAIN_URL == 'https://www.bravoporn.com':     return 'https://anyporn.com'
+        if self.MAIN_URL == 'https://www.bravoteens.com':    return 'https://anyporn.com'
+        if self.MAIN_URL == 'https://www.sleazyneasy.com':   return 'https://www.sleazyneasy.com'
+        if self.MAIN_URL == 'https://vjav.com':              return 'http://www.hdzog.com'
+        if self.MAIN_URL == 'https://javhoho.com':           return self.MAIN_URL
+
+
+        return ''
+
+    def getResolvedURL(self, url):
+        printDBG( 'Host getResolvedURL begin' )
+        printDBG( 'Host getResolvedURL url: '+url )
+        videoUrl = ''
+        parser = self.getParser(url)
+        printDBG( 'Host getResolvedURL parser: '+parser )
+        #if parser == '': return url
+
+        if 'gounlimited.to' in url:
+            if 'embed' not in url:
+                url = 'https://gounlimited.to/embed-{0}.html'.format(url.split('/')[3])
+        if 'clipwatching.com' in url:
+            if 'embed' not in url:
+                video_id = self.cm.ph.getSearchGroups(url, 'clipwatching.com/([A-Za-z0-9]{12})[/.-]')[0]
+                url = 'http://clipwatching.com/embed-{0}.html'.format(video_id)
+
+        if parser == 'mjpg_stream':
+           try:
+              stream=urllib.urlopen(url)
+              bytes=''
+              while True:
+                 bytes+=stream.read(1024)
+                 a = bytes.find('\xff\xd8')
+                 b = bytes.find('\xff\xd9')
+                 if a!=-1 and b!=-1:
+                    jpg = bytes[a:b+2]
+                    bytes= bytes[b+2:]
+                    with open('/tmp/obraz.jpg', 'w') as titleFile:  
+                       titleFile.write(jpg) 
+                       return 'file:///tmp/obraz.jpg'
+           except: pass
+           return ''
+
+        if parser == 'http://www.porntrex.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porntrex.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porntrex.cookie', 'porntrex.com', self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host listsItems data: '+str(data) )
+           if 'video is a private' in data:
+              SetIPTVPlayerLastHostError(_(' This video is a private.'))
+              return []
+           if self.format4k:
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url5: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url5 4k: '+videoPage )
+                 return videoPage
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url4: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url4 High HD: '+videoPage )
+                 return videoPage
+              videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url3: ['"]([^"^']+?)['"]''')[0] 
+              if videoPage:
+                 printDBG( 'Host videoPage video_alt_url3 Full High: '+videoPage )
+                 return videoPage
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url2: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_alt_url2 HD: '+videoPage )
+              return videoPage
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_alt_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_alt_url Medium: '+videoPage )
+              return videoPage
+           videoPage = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              printDBG( 'Host videoPage video_url Low: '+videoPage )
+              return videoPage
+           return ''
+
+        if parser == 'http://www.hclips.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hclips.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hclips.cookie', 'hclips.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://hclips.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.hdzog.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdzog.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hdzog.cookie', 'hdzog.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           posturl = 'https://%s/sn4diyux.php' % url.split('/')[2]
+           pC3 = re.search('''pC3:'([^']+)''', data)
+           if not pC3: return ''
+           pC3 = pC3.group(1)
+           vidid = re.search('''video_id["|']?:\s?(\d+)''', data).group(1)
+           postdata = '%s,%s' % (vidid, pC3)
+           sts, data = self.getPage(posturl, 'hclips.cookie', 'hclips.com', self.defaultParams, post_data={'param': postdata})
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           printDBG( 'Host videoUrl:%s' % videoUrl )
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.upornia.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upornia.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           try:
+              video_url = self.cm.ph.getSearchGroups(data, '''var video_url=['"]([^"^']+?)['"]''')[0]
+              hash = self.cm.ph.getSearchGroups(data, '''/get_file/(\d+/[^"^']+?)/''')[0] 
+              #printDBG( 'Host video_url: '+video_url )
+              decoder = 'Dpww3Dw64=function(b){var c="",d=0;/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g.exec(b)'\
+              '&&console.log("error decoding url");b=b.replace(/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g,"");'\
+              'do{var f="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),e="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),g="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),h="\u0410\u0412\u0421D\u0415FGHIJKL\u041cNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~".'\
+              'indexOf(b.charAt(d++)),f=f<<2|e>>4,e=(e&15)<<4|g>>2,k=(g&3)<<6|h,c=c+String.fromCharCode(f);'\
+              '64!=g&&(c+=String.fromCharCode(e));64!=h&&(c+=String.fromCharCode(k))}while(d<b.length);return unescape(c)};'
+              js = decoder + '\n' + 'var video_url="'+video_url+'";\n'+'vidurl = (Dpww3Dw64(video_url));'  
+              #printDBG( 'Host getResolvedURL js: '+js )
+              urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+              videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''vidurl=([^"^']+?);''')[0]
+              if hash: videoUrl = videoUrl.replace(videoUrl.split('/')[-6]+'/'+videoUrl.split('/')[-5],hash)
+              if videoUrl: return videoUrl
+           except Exception:
+              printExc()
+           printDBG( 'Host start embed' )
+           videoPage = self.cm.ph.getSearchGroups(data, '''(https://upornia.com/embed/[^"^']+?)[&"]''')[0] 
+           if not videoPage: videoPage = self.cm.ph.getSearchGroups(data, '''(https://www.txxx.com/embed/[^"^']+?)[&"]''')[0] 
+           if videoPage:
+              try: data2 = self.cm.getURLRequestData({ 'url': videoPage, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+              except:
+                 printDBG( 'Host getResolvedURL query error url: '+videoPage )
+                 return ''
+              #printDBG( 'Host getResolvedURL data embed: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data2, '''video_url=['"]([^"^']+?)['"]''')[0]
+              if 'http' in videoUrl: return videoUrl
+           printDBG( 'Host direct link' )
+           videoPage = self.cm.ph.getSearchGroups(data, '''(https://upornia.com/get_file/[^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage
+           videoPage = self.cm.ph.getSearchGroups(data, '''(https://www.txxx.com/get_file/[^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage
+           return ''
+
+        if parser == 'http://beeg.com':
+           URL = url
+           sts, data = self.get_Page(URL)
+           if not sts: return
+           printDBG( 'second beeg-clips data: '+data )
+           if '"error"' in data: 
+              URL = url.replace('/'+url.split('/')[-2], '')
+              sts, data = self.get_Page(URL)
+              if not sts: return
+              printDBG( 'second beeg-clips data2: '+data )
+              #SetIPTVPlayerLastHostError(_(' Video not found.'))
+              #return []
+           phUrl=''
+           try:
+              if data.startswith('{'): data = '['+data+']'
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 if str(item["240p"]) != 'None': phUrl = str(item["240p"])
+                 if str(item["480p"]) != 'None': phUrl = str(item["480p"])
+                 if str(item["720p"]) != 'None': phUrl = str(item["720p"])
+                 if self.beegfullhd: 
+                    if str(item["1080p"]) != 'None': phUrl = str(item["1080p"])
+                 if self.format4k:
+                    if str(item["2160p"]) != 'None': phUrl = str(item["2160p"])
+           except Exception:
+              printExc()
+           if phUrl== '':
+              SetIPTVPlayerLastHostError(_(' Video not found.'))
+              return []
+           if phUrl.startswith('//'): phUrl = 'http:' + phUrl
+           phUrl = phUrl.replace('{DATA_MARKERS}','data=pc.DE')
+           if not self.beeg_salt: return phUrl
+           key = re.search(r'/key=(.*?)%2Cend=', phUrl, 0) 
+           key = key.group(1)
+           printDBG( 'key encrypt : '+key )
+           key = decrypt_key(key, self.beeg_salt)
+           printDBG( 'key decrypt: '+key )
+           videoUrl = re.sub(r'/key=(.*?)%2Cend=', '/key='+key+',end=', phUrl)
+           return videoUrl
+  
+        if parser == 'http://showup.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'showup.cookie')
+           try: data = self.cm.getURLRequestData({ 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           parse = re.search("var srvE = '(.*?)'", data, re.S)
+           if parse:
+              printDBG( 'Host Url: '+url)
+              printDBG( 'Host rtmp: '+ parse.group(1))
+              rtmp = parse.group(1)
+           startChildBug = re.search("startChildBug\(user\.uid, '', '([\s\S]+?)'", data, re.I);
+           if startChildBug:
+              s = startChildBug.group(1)
+              printDBG( 'Host startChildBug: '+ s)
+              ip = ''
+              t = re.search(r"(.*?):(.*?)", s, re.I)
+              if t.group(1) == 'j12.showup.tv': ip = '94.23.171.122'
+              if t.group(1) == 'j13.showup.tv': ip = '94.23.171.121'
+              if t.group(1) == 'j11.showup.tv': ip = '94.23.171.115'
+              if t.group(1) == 'j14.showup.tv': ip = '94.23.171.120'
+              printDBG( 'Host IP: '+ip)
+              port = s.replace(t.group(1)+':', '')
+              printDBG( 'Host Port: '+port)
+              modelName = url.replace('http://showup.tv/','')
+              printDBG( 'Host modelName: '+modelName)
+
+              libsPath = GetPluginDir('libs/')
+              import sys
+              sys.path.insert(1, libsPath)
+              import websocket 
+              wsURL1 = 'ws://'+s
+              wsURL2 = 'ws://'+ip+':'+port
+              printDBG( 'Host wsURL1: '+wsURL1)
+              printDBG( 'Host wsURL2: '+wsURL2)
+              ws = websocket.create_connection(wsURL2)
+
+              zapytanie = '{ "id": 0, "value": ["", ""]}'
+              zapytanie = zapytanie.decode("utf-8")
+              printDBG( 'Host zapytanie1: '+zapytanie)
+              ws.send(zapytanie) 
+              result = ws.recv()
+              printDBG( 'Host result1: '+result)
+
+              zapytanie = '{ "id": 2, "value": ["%s"]}' % modelName
+              zapytanie = zapytanie.decode("utf-8")
+              printDBG( 'Host zapytanie2: '+zapytanie)
+              ws.send(zapytanie) 
+              result = ws.recv()
+              printDBG( 'Host result2: '+result)
+
+              playpath = re.search('value":\["(.*?)"', result)
+
+              if playpath:
+                 Checksum =  playpath.group(1)  
+                 if len(Checksum)<30: 
+                    for x in range(1, 10): 
+                       ws.send(zapytanie)
+                       result = ws.recv()
+                       czas = re.search('(\d+)\[:\](\d+)\[', result )
+                       if czas:
+                          printDBG( 'Host czas.group(1): '+czas.group(1) )
+                          printDBG( 'Host czas.group(2): '+czas.group(2) )
+                          czas = int(czas.group(1)) - int(czas.group(2))
+                          printDBG( 'Host a: '+str(czas) )
+                          a = str(czas)
+                          if a=='0': a = 'kilka'
+                          Checksum = 'PRIVATE - Czekaj '+a+' sekund'
+                          break
+                    if Checksum=='' or Checksum=='failure': Checksum='OFFLINE'
+                    ws.close() 
+                    SetIPTVPlayerLastHostError(Checksum)
+                    return []
+                 videoUrl = 'rtmp://cdn-t0.showup.tv:1935/webrtc/'+Checksum+'_aac' # token=fake'
+                 ws.close() 
+                 try:
+                    import commands
+                    for x in range(1, 9): 
+                       cmd = '/usr/bin/rtmpdump -B 1 -r "%s"' % videoUrl.replace('cdn-t0','cdn-t0'+str(x))
+                       wow = commands.getoutput(cmd)
+                       printDBG( 'HostXXX cmd > '+ cmd )
+                       #printDBG( 'HostXXX rtmpdump > '+ wow )
+                       if not 'StreamNotFound' in wow:
+                          return videoUrl.replace('cdn-t0','cdn-t0'+str(x))+' live=1'
+                       printDBG( 'HostXXX GUZIK ' )
+                 except:
+                    printDBG( 'HostXXX error commands.getoutput ' )
+                 return videoUrl.replace('cdn-t0','cdn-t01')+' live=1'
+
+           return ''
+
+        def base_myfreecam(serwer, url):
+           data = ''
+           newurl = 'http://video%s.myfreecams.com:1935/NxServer/mfc_%s.f4v_aac/playlist.m3u8' % (serwer, url)
+           try:
+              data = urllib2.urlopen(newurl, timeout=1)
+              #printDBG( 'Host data.meta:  '+str(data.meta) )
+           except:
+              printDBG( 'Host error newurl:  '+newurl )
+           if data:
+              return newurl
+
+        if parser == 'https://www.myfreecams.com/':
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           videoUrl = myfreecam_start(url)
+           if videoUrl != '':
+              key = self.cm.ph.getSearchGroups(videoUrl, '''video([^"^']+?)\.''')[0] 
+              id = self.cm.ph.getSearchGroups(videoUrl, '''mfc_([^"^']+?)\.''')[0] 
+              printDBG( 'Host key:  '+key )
+              printDBG( 'Host id:  '+id )
+              referer = 'https://www.myfreecams.com/_html/player.html?broadcaster_id={0}&target=new_window&username={1}'.format(id, url)
+              try:
+                 server_type = None
+                 value = None
+                 if self.h5video_servers.get(str(key)):
+                    value = self.h5video_servers[str(key)]
+                    server_type = 'h5video_servers'
+                    videoUrl = videoUrl.replace('video'+key,value)
+                 elif self.wzobs_servers.get(str(key)):
+                    value = self.wzobs_servers[str(key)]
+                    server_type = 'wzobs_servers'
+                    videoUrl = videoUrl.replace('video'+key,value)
+                    videoUrl = videoUrl.replace('mfc_','mfc_a_')
+                 elif self.ngvideo_servers.get(str(key)):
+                    value = self.ngvideo_servers[str(key)]
+                    server_type = 'ngvideo_servers'
+                    SetIPTVPlayerLastHostError(_('Not supported.'))
+                    return []
+                 printDBG( 'value: %s server_type: %s' % (value, server_type) )
+              except Exception:
+                 printExc()
+              printDBG( 'Host videoUrl:  '+videoUrl )
+              videoUrl = strwithmeta(videoUrl, {'Origin': 'https://www.myfreecams.com'})
+              videoUrl = strwithmeta(videoUrl, {'Cookie':self.cookieHeader})
+              videoUrl = strwithmeta(videoUrl, {'iptv_proto':'m3u8', 'iptv_livestream':True})
+
+              #videoUrl = strwithmeta(videoUrl, {'Cookie':self.cookieHeader+'gw=1; user_id=0; _gat_gtag_UA_295864_20=1;'})
+              #videoUrl = strwithmeta(videoUrl, {'Origin': 'https://new.myfreecams.com', 'Cookie':self.cid, 'Referer':'https://new.myfreecams.com', 'User-Agent': ''})
+              #videoUrl = urlparser.decorateUrl(videoUrl, {'Origin': 'https://new.myfreecams.com', 'iptv_proto':'m3u8', 'iptv_livestream':True, 'User-Agent':host, 'Referer':'https://new.myfreecams.com'})
+
+              tmp = getDirectM3U8Playlist(videoUrl, checkExt=False, variantCheck=False, checkContent=True, sortWithMaxBitrate=99999999)
+              for item in tmp:
+                 printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url']
+           return ''
+
+
+        def _get_stream_uid(username):
+           m = hashlib.md5(username.encode('utf-8') + str(time_time()).encode('utf-8'))
+           return m.hexdigest()
+
+        if parser == 'https://pl.bongacams.com':
+           printDBG( 'Host url:  '+url )
+           username = url 
+           printDBG( 'Host username:  '+username )
+           COOKIEFILE = os_path.join(GetCookieDir(), 'bongacams.cookie')
+           host = 'Mozilla/5.0 (iPad; CPU OS 8_1_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12B466 Safari/600.1.4'
+           header = {'User-Agent': host, 'Accept':'text/html,application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3', 'Referer':'https://en.bongacams.com/'+username, 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+           sts, data = self.cm.getPage('https://en.bongacams.com/'+username, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Parser Bonga data: '+data ) 
+           amf = self.cm.ph.getSearchGroups(data, '''MobileChatService\(\'\/([^"^']+?)\'\+\$''')[0] 
+           if not amf: amf = 'tools/amf.php?x-country=pl&m=1&res='
+           url_amf = 'https://en.bongacams.com/' + amf + str(random.randint(2100000, 3200000))
+           printDBG( 'Host url_amf:  '+url_amf )
+           postdata = {'method' : 'getRoomData', 'args[]' : username} 
+           header = {'User-Agent': host, 'Accept':'text/html,application/xhtml+xml,application/xml,application/json','Accept-Language':'en,en-US;q=0.7,en;q=0.3','X-Requested-With':'XMLHttpRequest', 'Referer':'https://en.bongacams.com/'+username, 'Origin':'https://en.bongacams.com'} 
+           self.defaultParams = { 'url': url_amf, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': True, 'return_data': True }
+           sts, data = self.cm.getPage(url_amf, self.defaultParams, postdata)
+           if not sts: return ''
+           #printDBG( 'Parser Bonga link2: '+data ) 
+           serwer = self.cm.ph.getSearchGroups(data, '''"videoServerUrl":['"]([^"^']+?)['"]''', 1, True)[0] 
+           printDBG( 'Parser Bonga serwer: '+serwer ) 
+           url_m3u8 = 'https:' + serwer.replace('\/','/') + '/hls/stream_' +username + '/playlist.m3u8'
+           if serwer: 
+              videoUrl = urlparser.decorateUrl(url_m3u8, {'User-Agent': host, 'Referer':'https://bongacams.com/'+username})
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 #if not tmp: return ''
+                 try: tmp = sorted(tmp, key=lambda item: int(item.get('bitrate', '0')))
+                 except Exception: pass
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 try:
+                    if item['bitrate']=='unknown': 
+                       return ''
+                    return item['url']
+                    printDBG( 'item bitrate: '  +str(item['bitrate']))
+                 except Exception: pass
+           return ''
+
+        if parser == 'http://www.livejasmin.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'livejasmin.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'livejasmin.cookie', 'livejasmin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           performerid = self.cm.ph.getSearchGroups(data, '''performerid":['"]([^"^']+?)['"]''', 1, True)[0] 
+           sbip = self.cm.ph.getSearchGroups(data, '''sbip":['"]([^"^']+?)['"]''', 1, True)[0] 
+           sbhash = self.cm.ph.getSearchGroups(data, '''sbhash":['"]([^"^']+?)['"]''', 1, True)[0] 
+           #stream = urllib.unquote('https://dss-live-109-71-162-52.dditscdn.com/stream?url=rtmp%3A%2F%2F109.71.162.52%2FmemberChat%2FjasminSoniaCrystall3a6ac2233e19448a3ee26466ed126451%3FsessionId-7133bcde23b0f6ea7ee68440b313d4d1%7CclientInstanceId-44077313838477700147795168240074&stream=free%2Fstream_864_480_830&cid=420210&pid=83906493378')
+           stream = 'https://dss-live-'+sbip.replace('.','-')+'.dditscdn.com/stream?url=rtmp://'+sbip+'/memberChat/'+performerid+sbhash
+           #stream = 'https://dss-hls-'+sbip.replace('.','-')+'.dditscdn.com/h5live/http/playlist.m3u8'
+           #self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(stream, 'livejasmin.cookie', 'livejasmin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+
+           return data.meta['url']
+
+           return ''
+
+        if parser == 'https://www.cam4.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cam4.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           self.page = 1
+           printDBG( 'Host listsItems data: '+data )
+
+           Url = self.cm.ph.getSearchGroups(data, '''hlsUrl: ['"]([^"^']+?)['"]''')[0]+'?referer=cam4.com&timestamp='+str(int(time_time()*1000))
+           #Url = urlparser.decorateUrl(Url, {'User-Agent': host})
+           if self.cm.isValidUrl(Url): 
+              tmp = getDirectM3U8Playlist(Url, checkExt=False, variantCheck=False, checkContent=True, sortWithMaxBitrate=99999999)
+              for item in tmp:
+                 printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url'] #urlparser.decorateUrl(item['url'], {'User-Agent': host})
+           return ''
+
+        if parser == 'https://www.camsoda.com/':
+            if 'rtmp' in url:
+                rtmp = 1
+            else:
+                rtmp = 0
+            url = url.replace('rtmp','')
+            query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+            try: data = self.cm.getURLRequestData(query_data)
+            except:
+                printDBG( 'Host getResolvedURL query error url: '+url )
+                return ''
+            #printDBG( 'Host getResolvedURL data: '+data )
+            dane = '['+data+']'
+            #printDBG( 'Host listsItems json: '+dane )
+            result = simplejson.loads(dane)
+            if result:
+                try:
+                    for item in result:
+                        token = str(item["token"])
+                        app = str(item["app"])
+                        serwer = str(item["edge_servers"][0])
+                        #edge_servers2 = str(item["edge_servers"][1])
+                        stream_name = str(item["stream_name"])
+                        #printDBG( 'Host listsItems token: '+token )
+                        #printDBG( 'Host listsItems app: '+app )
+                        #printDBG( 'Host listsItems edge_servers1: '+serwer )
+                        #printDBG( 'Host listsItems edge_servers2: '+edge_servers2 )
+                        #printDBG( 'Host listsItems stream_name: '+stream_name )
+                        name = re.sub('-enc.+', '', stream_name)
+                        if rtmp == 0:
+                            #Url = 'https://%s/%s/mp4:%s_mjpeg/playlist.m3u8?token=%s' % (serwer, app, stream_name, token )
+                            Url = 'https://%s/%s/mp4:%s_aac/playlist.m3u8?token=%s' % (serwer, app, stream_name, token )
+                            USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0'
+                            Url = urlparser.decorateUrl(Url, {'User-Agent': USER_AGENT})
+                            if self.cm.isValidUrl(Url): 
+                                tmp = getDirectM3U8Playlist(Url)
+                                for item in tmp:
+                                    #printDBG( 'Host listsItems valtab: '  +str(item))
+                                    if str(item["with"])=='0':
+                                        SetIPTVPlayerLastHostError(' OFFLINE')
+                                        return []
+                                    return item['url']
+                            SetIPTVPlayerLastHostError(' OFFLINE')
+                            return []
+                        else:
+                            Url = 'rtmp://%s:1935/%s?token=%s/ playpath=?mp4:%s swfUrl=https://www.camsoda.com/lib/video-js/video-js.swf live=1 pageUrl=https://www.camsoda.com/%s' % (serwer, app, token, stream_name, name)
+                            return Url
+                except Exception: printExc()
+            return ''
+
+        if parser == 'xxxlist.txt':
+           videoUrls = self.getLinksForVideo(url)
+           if videoUrls:
+              for item in videoUrls:
+                 Url = item['url']
+                 Name = item['name']
+                 printDBG( 'Host url:  '+Url )
+                 return Url
+           return ''
+
+        if parser == 'http://xhamster.com/cams':
+           config='http://xhamsterlive.com/api/front/config'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(config)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+           parse = re.search('"sessionHash":"(.*?)"', data, re.S) 
+           if not parse: return ''
+           sessionHash = parse.group(1) 
+           printDBG( 'Host sessionHash: '+sessionHash )
+
+           models='http://xhamsterlive.com/api/front/models'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamsterlive.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(models)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           result = simplejson.loads(data)
+           try:
+              for item in result["models"]:
+                 ID = str(item["id"]) 
+                 Name = item["username"]
+                 BroadcastServer = item["broadcastServer"]
+                 swf_url = 'http://xhamsterlive.com/assets/cams/components/ui/Player/player.swf?bgColor=2829099&isModel=false&version=1.5.892&bufferTime=1&camFPS=30&camKeyframe=15&camQuality=85&camWidth=640&camHeight=480'
+                 Url = 'rtmp://b-eu10.stripcdn.com:1935/%s?sessionHash=%s&domain=xhamsterlive.com playpath=%s swfUrl=%s pageUrl=http://xhamsterlive.com/cams/%s live=1 ' % (BroadcastServer, sessionHash, ID, swf_url, Name) 
+                 Url = 'rtmp://b-eu10.stripcdn.com:1935/%s?sessionHash=%s&domain=xhamsterlive.com playpath=%s swfVfy=%s pageUrl=http://xhamsterlive.com/cams/%s live=1 ' % (BroadcastServer, sessionHash, ID, swf_url, Name) 
+                 if ID == url: 
+                    return urlparser.decorateUrl(Url, {'Referer': 'https://xhamsterlive.com/cams/'+Name, 'iptv_livestream': True}) 
+           except Exception:
+              printExc()
+           return ''
+
+        if parser == 'http://www.cliphunter.com':
+           host = 'Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3'
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'} 
+           query_data = { 'url': url, 'header': header, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+           try:
+              data = self.cm.getURLRequestData(query_data)
+           except:
+              return ''
+           #printDBG( 'Host listsItems data: '+data )
+           url = re.findall('"url":"(.*?)"}', data, re.S)
+           if url:
+              url = url[-1]
+              url = url.replace('\u0026', '.').replace(r"\/",r"/")
+              if url.startswith('http'): return url
+           url = re.findall('"url":"(.*?)"}', data, re.S)
+           if url:
+              url = url[-1]
+              url = url.replace('\u0026', '.')
+              translation_table = {
+                 'm': 'a', 'b': 'b', 'c': 'c', 'i': 'd', 'd': 'e', 'g': 'f', 'a': 'h',
+                 'z': 'i', 'y': 'l', 'n': 'm', 'l': 'n', 'f': 'o', 'v': 'p', 'x': 'r',
+                 'r': 's', 'q': 't', 'p': 'u', 'e': 'v',
+                 '$': ':', '&': '.', '(': '=', '^': '&', '=': '/',
+              }
+              url = ''.join(translation_table.get(c, c) for c in url) 
+              return url
+           else: return ''
+
+        if parser == 'http://www.redtube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'redtube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           parse = re.search('mediaDefinition: (.*?)],', data, re.S) 
+           if not parse: return ''
+           result = simplejson.loads(parse.group(1)+']')
+           if result:
+              for item in result:
+                 videoUrl = str(item["videoUrl"]) 
+                 quality = item["quality"]
+                 printDBG( 'Host quality'+quality )
+                 printDBG( 'Host videoUrl'+videoUrl )
+                 if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.tube8.com/embed/':
+           return self.getResolvedURL(url.replace(r"embed/",r""))
+        
+        if parser == 'http://www.pornhub.com/embed/':
+           return self.getResolvedURL(url.replace(r"embed/",r"view_video.php?viewkey="))
+
+        if parser == 'http://www.tube8.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tube8.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''quality_720p['"]:['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''quality_480p['"]:['"]([^"^']+?)['"]''')[0] 
+           return videoUrl.replace('\/','/') 
+
+        if parser == 'http://www.4tube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), '4tube.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           if url.startswith('https://www.4tube.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.4tube.com'
+           elif url.startswith('https://www.fux.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.fux.com'
+           elif url.startswith('https://www.pornerbros.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.pornerbros.com'
+           elif url.startswith('https://www.porntube.com'):
+              self.HTTP_HEADER['Origin'] = 'https://www.porntube.com'
+           self.HTTP_HEADER['Referer'] = url
+
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           domena = url.split('/')[2].replace ('www.','')
+           printDBG( 'Host domain: '+domena )
+
+           videoID = re.findall('data-id="(\d+)".*?data-quality="(\d+)"', data, re.S)
+           try:
+              init = self.cm.ph.getSearchGroups(data, '''window.INITIALSTATE\s*?=\s*?['"]([^"^']+?)['"]''', 1, True)[0] 
+              init = urllib.unquote(base64.b64decode(init))
+              #printDBG( 'Host listsItems init: '+init )
+              try:
+                 result = byteify(simplejson.loads(init)["page"])
+              except Exception:
+                 printExc()
+                 result = byteify(simplejson.loads(data))
+              videoID = result["video"]["mediaId"]
+              info = {}
+              res = ''
+              for item in result["video"]["encodings"]:
+                 res += str(item["height"]) + "+"
+              res.strip('+')
+              posturl = "https://token.%s/0000000%s/desktop/%s" % (domena, videoID, res)
+              printDBG( 'Host getResolvedURL posturl: '+posturl )
+              sts, data = self.get_Page(posturl)
+              if not sts: return ''
+              printDBG( 'Host getResolvedURL posturl data1: '+data )
+              videoUrl = re.findall('token":"(.*?)"', data, re.S)
+              if videoUrl: return videoUrl[-1]     
+           except Exception:
+              printExc()
+           if videoID:
+              res = ''
+              for x in videoID:
+                  res += x[1] + "+"
+              res.strip('+')
+              posturl = "https://token.%s/0000000%s/desktop/%s" % (domena, videoID[-1][0], res)
+              printDBG( 'Host getResolvedURL posturl: '+posturl )
+              sts, data = self.get_Page(posturl)
+              if not sts: return ''
+              printDBG( 'Host getResolvedURL posturl data2: '+data )
+              videoUrl = re.findall('token":"(.*?)"', data, re.S)
+              if videoUrl: return videoUrl[-1]                 
+              else: return ''
+           return ''
+
+        if parser == 'http://hotmovs.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hotmovs.cookie')
+           host = "Mozilla/5.0 (Linux; U; Android 4.1.1; en-us; androVM for VirtualBox ('Tablet' version with phone caps) Build/JRO03S) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30"
+           header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}   
+           try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           except:
+              printDBG( 'Host getResolvedURL query error url: '+url )
+              return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           videoPage = self.cm.ph.getSearchGroups(data, '''var video_url=['"]([^"^']+?)['"]''')[0] 
+           hash = self.cm.ph.getSearchGroups(data, '''/get_file/(\d+/[^"^']+?)/''')[0] 
+           printDBG( 'Host getResolvedURL videoPage: '+videoPage )
+           if videoPage:
+              decoder = "decrypt=function(_0xf4bdx6) {"\
+                 "var _0xf4bdx7 = '',"\
+                 "    _0xf4bdx8 = 0;"\
+                 "/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g ['exec'](_0xf4bdx6) && console['log']('error decoding url');"\
+                 "_0xf4bdx6 = _0xf4bdx6['replace'](/[^\u0410\u0412\u0421\u0415\u041cA-Za-z0-9\.\,\~]/g, '');"\
+                 "do {"\
+                 "var _0xf4bdx9 = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdxa = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdxb = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdxc = '\u0410\u0412\u0421D\u0415FGHIJKL\u041CNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,~' ['indexOf'](_0xf4bdx6['charAt'](_0xf4bdx8++)),"\
+                 "_0xf4bdx9 = _0xf4bdx9 << 2 | _0xf4bdxa >> 4,"\
+                 "_0xf4bdxa = (_0xf4bdxa & 15) << 4 | _0xf4bdxb >> 2,"\
+                 "_0xf4bdxd = (_0xf4bdxb & 3) << 6 | _0xf4bdxc,"\
+                 "_0xf4bdx7 = _0xf4bdx7 + String['fromCharCode'](_0xf4bdx9);"\
+                 "64 != _0xf4bdxb && (_0xf4bdx7 += String['fromCharCode'](_0xf4bdxa));"\
+                 "64 != _0xf4bdxc && (_0xf4bdx7 += String['fromCharCode'](_0xf4bdxd))"\
+                 "} while (_0xf4bdx8 < _0xf4bdx6['length']);;"\
+                 "return unescape(_0xf4bdx7)"\
+                 "};" 
+              js = decoder + "\n" + "vidurl = decrypt('"+videoPage+"');"  
+              printDBG( 'Host getResolvedURL js: '+js )
+              urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+              videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''vidurl=([^"^']+?);''')[0] 
+              printDBG( 'Host hash: '+hash )
+              printDBG( 'Host videoUrl.split4: '+videoUrl.split('/')[-6] )
+              printDBG( 'Host videoUrl.split5: '+videoUrl.split('/')[-5] )
+
+              if hash: videoUrl = videoUrl.replace(videoUrl.split('/')[-6]+'/'+videoUrl.split('/')[-5],hash)
+              if videoUrl: return videoUrl
+              if videoPage.startswith('http'): return videoPage
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'https://www.txxx.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'txxx.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'txxx.cookie', 'txxx.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = re.search('video_url":"([^"]+)', data).group(1)
+           replacemap = {'M':'\u041c', 'A':'\u0410', 'B':'\u0412', 'C':'\u0421', 'E':'\u0415', '=':'~', '+':'.', '/':','}
+           for key in replacemap:
+               videoUrl = videoUrl.replace(replacemap[key], key)
+           videoUrl = base64.b64decode(videoUrl)
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           if videoUrl.startswith('/'): videoUrl = 'https://txxx.com' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.youporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = url
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host getResolvedURL data: '+data )
+           if 'mediaDefinition' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'mediaDefinition = ', '];', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    if str(item["quality"])=='720' : return str(item["videoUrl"]).replace('\u0026', '&')
+                    if str(item["quality"])=='480' : return str(item["videoUrl"]).replace('\u0026', '&')
+                    if str(item["quality"])=='360' : return str(item["videoUrl"]).replace('\u0026', '&')
+                    if str(item["quality"])=='240' : return str(item["videoUrl"]).replace('\u0026', '&')
+              except Exception as e:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"videoUrl":['"]([^'"]+?)['"]''')[0].replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: return videoUrl.replace('\u0026', '&')
+           return ''
+
+        # make by 12asdfg12
+        def ssut51(str):
+            str = re.sub(r'\D', '', str)
+            sut = 0
+            for i in range(0, len(str)):
+                sut += int(str[i])
+            return sut
+
+        if parser == 'https://yourporn.sexy':
+           for x in range(1, 99): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'yourporn.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+              self.defaultParams['header']['Origin'] = 'https://sxyprn.com'
+              sts, data = self.getPage(url, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data: '+str(data) )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''data-vnfo=['"].*?:['"]([^"^']+?)['"]''')[0].replace(r"\/",r"/")
+              if videoUrl:
+                 printDBG( 'Host listsItems videoUrl: '+videoUrl )
+                 if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+                 if videoUrl.startswith('/'): videoUrl = 'https://sxyprn.com' + videoUrl
+                 try:
+                    match = re.search('src="(/js/main[^"]+)"', data, re.DOTALL | re.IGNORECASE)
+                    if match.group(1).startswith('/'): result = 'https://sxyprn.com' + match.group(1)
+                    sts, jsscript = self.getPage(result, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+                    replaceint = re.search(r'tmp\[1\]\+= "(\d+)";', jsscript, re.DOTALL | re.IGNORECASE).group(1)
+                    videoUrl = videoUrl.replace('/cdn/', '/cdn%s/' % replaceint)
+                 except:
+                    if '/cdn/' in videoUrl: videoUrl = videoUrl.replace('/cdn/','/cdn'+str(self.yourporn)+'/')
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'Origin': 'https://sxyprn.com'}) 
+                 tmp = videoUrl.split('/')
+                 a = str(int(tmp[-3]) - ssut51(re.sub(r'\D', '', tmp[-2])) - ssut51(re.sub(r'\D', '', tmp[-1])))
+                 if int(a)>0: 
+                    tmp[-3] = a
+                 else: 
+                    tmp[-3] = str(int(tmp[-3])-101)
+                 videoUrl = '/'.join(tmp)
+              self.defaultParams['max_data_size'] = 0
+              sts, data = self.getPage(videoUrl, 'yourporn.cookie', 'sxyprn.com', self.defaultParams)
+              if not sts: return ''
+              if not 'sxyprn' in data.meta['url']: return data.meta['url']
+           return ''
+
+        if parser == 'https://www.playvids.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'playvids.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'playvids.cookie', 'playvids.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src720=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src480=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src360=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           return ''
+
+        if parser == 'http://www.tubewolf.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tubewolf.cookie')
+           for x in range(1, 10): 
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              sts, data = self.get_Page(url)
+              if not sts: return ''
+              printDBG( 'Host listsItems data: '+data )
+              data = self.cm.ph.getDataBeetwenMarkers(data, '<video id', '</video>', False)[1]
+              videoUrl = re.findall('<source\ssrc="(.*?)"', data, re.S)
+              if videoUrl:
+                 return videoUrl[-1]
+
+        if parser == 'https://streamate.com':
+            COOKIEFILE = os_path.join(GetCookieDir(), 'streamate.cookie')
+            url = 'https://streamate.com/blacklabel/hybrid/?name={}&lang=en&manifestUrlRoot=https://sea1c-ls.naiadsystems.com/sea1c-edge-ls/80/live/s:'.format(url)
+            query_data = { 'url': url, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                printDBG( 'Host listsItems query error url:'+url )
+                return ''
+            printDBG( 'Host listsItems data: '+data )
+            url =  self.cm.ph.getSearchGroups(data, '''data-manifesturl=['"]([^"^']+?)['"]''')[0] 
+            header = {'Referer': 'https://streamate.com', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'}
+            query_data = { 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': False, 'load_cookie': True, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True }
+            try:
+                data = self.cm.getURLRequestData(query_data)
+            except Exception as e:
+                printExc()
+                printDBG( 'Host listsItems query error url:'+url )
+                return ''
+            printDBG( 'Host listsItems data2: '+data )
+            try:
+                videoinfo = simplejson.loads(data)
+                videoUrl = videoinfo['formats']['mp4-hls']['manifest']
+                videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': 'https://streamate.com', 'iptv_livestream': True}) 
+                if '.m3u8' in videoUrl:
+                    if self.cm.isValidUrl(videoUrl): 
+                        tmp = getDirectM3U8Playlist(videoUrl)
+                        for item in tmp:
+                            printDBG( 'Host listsItems valtab: '  +str(item))
+                            return item['url']
+                return videoUrl
+            except Exception as e:
+                printExc()
+            return ''
+
+        if parser == 'http://www.youjizz.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'youjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           #printDBG( 'Host listsItems data: '+data )
+
+           #host = 'iPhone'
+           #header = {'User-Agent': host, 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'X-Requested-With':'XMLHttpRequest'}   
+           #try: data = self.cm.getURLRequestData({ 'url': url, 'header': header, 'use_host': False, 'use_cookie': True, 'save_cookie': True, 'load_cookie': False, 'cookiefile': COOKIEFILE, 'use_post': False, 'return_data': True })
+           #except:
+           #   printDBG( 'Host getResolvedURL query error url: '+url )
+           #   return ''
+           #printDBG( 'Host getResolvedURL data: '+data )
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"1080","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"720","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"480","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"360","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&") 
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"288","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&") 
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"270","filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''"filename":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+           videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              if videoPage.startswith('//'): videoPage = 'http:' + videoPage
+              return videoPage.replace("&amp;","&")
+
+           error = self.cm.ph.getDataBeetwenMarkers(data, '<p class="text-gray">', '</p>', False)[1]
+           if error:
+              SetIPTVPlayerLastHostError(_(error))
+              return []
+           return ''
+
+        if parser == 'https://www.ashemaletube.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'ASHEMALETUBE.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'ASHEMALETUBE.cookie', 'ashemaletube.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'sources: ' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'sources: ', ']', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    if str(item["desc"])=='720p' and str(item["active"])=='true': return str(item["src"])
+                    if str(item["desc"])=='480p' and str(item["active"])=='true': return str(item["src"])
+                    if str(item["desc"])=='360p' and str(item["active"])=='true': return str(item["src"])
+              except Exception as e:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl 
+
+           if 'To watch this video please' in data:
+              SetIPTVPlayerLastHostError(_(' Login Protected.'))
+              return []
+           return ''
+
+        if parser == 'http://www.pornhub.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhub.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           try:
+              match = re.compile(r"""quality_([0-9]{3,4})p\s*=(?:"|')?([^'";]+)(?:"|')?;""", re.DOTALL | re.IGNORECASE).findall(data)
+              match = sorted(match, key=lambda x: int(x[0]), reverse=True)
+              videolink = match[0][1]
+              if "/*" in videolink:
+                 videolink = re.sub(r"/\*[^/]+/", "", videolink).replace("+","")
+                 linkparts = re.compile(r"(\w+)", re.DOTALL | re.IGNORECASE).findall(videolink)
+                 for part in linkparts:
+                    partval = re.compile(part+'="(.*?)";', re.DOTALL | re.IGNORECASE).findall(data)[0]
+                    partval = partval.replace('" + "','')
+                    videolink = videolink.replace(part, partval)
+              videoUrl = videolink.replace(" ","")
+              printDBG( 'Host videoUrl: '+videoUrl )
+              if videoUrl: return strwithmeta(videoUrl, {'Referer':url})
+           except Exception:
+              printExc()  
+
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"720","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"480","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           videoPage = self.cm.ph.getSearchGroups(data, '''"quality":"240","videoUrl":['"]([^"^']+?)['"]''')[0] 
+           if videoPage: return videoPage.replace('\/','/')
+           try:
+              #js = re.findall('(var flashvars_(?:\d+).*?)loadScriptUniqueId', data, re.S)
+              js = re.findall('type="text/javascript">.*?(var\sflashvars.*?)</script>', data, re.S)
+              #js = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars_', 'loadScriptUniqueId', False)[1]
+              printDBG( 'Host data js: '+js[0] )
+              if js:
+                 urls = js_execute( js[0]+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_1080p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_720p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_480p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+                 videoPage = self.cm.ph.getSearchGroups(urls['data'], '''quality_240p=([^"^']+?);''')[0] 
+                 if videoPage: return videoPage
+           except Exception:
+              printExc()
+              embed = re.search('"embedCode":"<iframe src=."(.*?)"', data, re.S)
+              if embed:
+                 url = embed.group(1).replace('\/','/').replace('\\','')
+                 printDBG( 'Host data embed: '+url )
+                 sts, data = self._getPage(url, self.defaultParams)
+                 if not sts: return ''
+                 printDBG( 'Host listsItems data: '+data )
+                 videoPage = re.findall('quality_720p":"(.*?)"', data, re.S)
+                 if videoPage: return videoPage[0].replace('\/','/')
+                 videoPage = re.findall('quality_480p":"(.*?)"', data, re.S)
+                 if videoPage: return videoPage[0].replace('\/','/')
+           return ''
+
+        if parser == 'https://chaturbate.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'chaturbate.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER}
+           for x in range(1, 10): 
+              sts, data = self.get_Page(url)
+              if not sts: return
+              printDBG( 'Host listsItems data: '+str(data) )
+              if '/auth/login/' in self.cm.meta['url']:
+                 SetIPTVPlayerLastHostError(_(' PRIVATE.'))
+              if 'Room is currently offline' in data:
+                 SetIPTVPlayerLastHostError(_(' OFFLINE.'))
+              host = 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.18) Gecko/20110621 Mandriva Linux/1.9.2.18-0.1mdv2010.2 (2010.2) Firefox/3.6.18'
+              videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+              if not videoPage: 
+                 data = data.replace(r'\u0022','"').replace(r'\u002D','-')
+                 videoPage = self.cm.ph.getSearchGroups(data, '''hls_source":\s*['"]([^"^']+?)['"]''')[0] 
+              try:
+                 item = []
+                 videoUrl = videoPage.replace('&amp;','&')
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':host}) 
+                 tmp = getDirectM3U8Playlist(videoUrl, checkExt=True, variantCheck=True, checkContent=True, sortWithMaxBitrate=99999999)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab1: '  +str(item))
+                 if self.format4k:
+                    return tmp[0]['url']
+                 else:
+                    if tmp[0]['height']<=1080 : return tmp[0]['url']
+                    if tmp[1]['height']<=1080 : return tmp[1]['url']
+                    if tmp[2]['height']<=1080 : return tmp[2]['url']
+              except Exception:
+                 printExc()
+           return ''
+  
+        if parser == 'https://www.mydirtyhobby.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mydirtyhobby.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self._getPage(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = self.cm.ph.getSearchGroups(data, '''<iframe src=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if videoPage: 
+              videoPage = urlparser.decorateUrl(videoPage, {'Referer': url})
+              return self.getResolvedURL(videoPage)
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 data = packed[-1]
+              else:
+                 return ''
+              printDBG( 'Host data4: '+str(data) )
+              try:
+                 videoUrl = unpackJSPlayerParams(data, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+                 printDBG( 'OK4: ')
+              except Exception: pass 
+              printDBG( 'Host videoUrl: '+str(videoUrl) )
+              videoPage = self.cm.ph.getSearchGroups(str(videoUrl), '''sources:\[['"]([^"^']+?)['"]''')[0] 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              if videoPage: return videoPage
+           return ''
+
+        if parser == 'https://www.tnaflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'tnaflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           vid = self.cm.ph.getSearchGroups(data, '''data-vid=['"]([^"^']+?)['"]''')[0]
+           nk =  self.cm.ph.getSearchGroups(data, '''data-nk=['"]([^"^']+?)['"]''')[0]
+           vk =  self.cm.ph.getSearchGroups(data, '''data-vk=['"]([^"^']+?)['"]''')[0]
+           xml = 'https://cdn-fck.tnaflix.com/tnaflix/%s.fid?key=%s&VID=%s&nomp4=1&catID=0&rollover=1&startThumb=31&embed=0&utm_source=0&multiview=0&premium=1&country=0user=0&vip=1&cd=0&ref=0&alpha' % (vk, nk, vid) 
+           sts, data = self.get_Page(xml, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+           if videoPage: return 'http://' + videoPage[-1]
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''download href=['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"contentUrl" content=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url})
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'https://www.empflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'empflix.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           vid = self.cm.ph.getSearchGroups(data, '''data-vid=['"]([^"^']+?)['"]''')[0]
+           nk =  self.cm.ph.getSearchGroups(data, '''data-nk=['"]([^"^']+?)['"]''')[0]
+           vk =  self.cm.ph.getSearchGroups(data, '''data-vk=['"]([^"^']+?)['"]''')[0]
+           xml = 'https://cdn-fck.empflix.com/empflix/%s-1.fid?key=%s&VID=%s&nomp4=1&catID=0&rollover=1&startThumb=31&embed=0&utm_source=0&multiview=0&premium=1&country=0user=0&vip=1&cd=0&ref=0&alpha' % (vk, nk, vid)
+           sts, data = self.get_Page(xml, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoPage = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+           if videoPage: return 'http://' + videoPage[-1]
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''download href=['"]([^"^']+?)['"]''')[0]
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"contentUrl" content=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url})
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.moviefap.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'moviefap.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.0'
+           self.HEADER = {'User-Agent': self.USER_AGENT, 'DNT':'1', 'Accept': 'text/html'}
+           self.defaultParams = {'header':dict(self.HEADER)}
+           self.defaultParams['header']['Referer'] = url
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return 
+           printDBG( 'Host listsItems data: '+str(data) )
+           xml = self.cm.ph.getSearchGroups(data, '''flashvars.config.*?//([^"^']+?)['"]''')[0]
+           if not xml: xml = self.cm.ph.getSearchGroups(data, '''name="config".*?//([^"^']+?)['"]''')[0] 
+           if xml:
+              videoUrl = "https://" + xml
+              sts, data = self.get_Page(videoUrl, self.defaultParams)
+              if not sts: return 
+              printDBG( 'Host listsItems data2: '+str(data) )
+              url = re.findall('<videoLink>.*?//(.*?)(?:]]>|</videoLink>)', data, re.S)
+              if url:
+                 return "http://" + url[-1].replace('&amp;','&')  
+           return ''
+
+        if parser == 'https://www.pinflix.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pinflix.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pinflix.cookie', 'pinflix.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"720p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"480p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"360p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.pinflix.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'pinflix.cookie', 'pinflix.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'http://www.pornhd.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornhd.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"1080p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"720p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"480p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''"360p":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.pornhd.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'pornhd.cookie', 'pornhd.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'http://www.adulttvlive.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'adulttv.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data1: '+data )
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"](https://adult-channels.com/channels/[^"^']+?)['"]''')[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"](https://www.adulttvlive.net[^"^']+?embed/)['"]''')[0] 
+
+           sts, data = self.getPage(videoUrl, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           if 'porndig' in data:
+              videoUrl = self.cm.ph.getSearchGroups(data, '''src=['"]([^"^']+?)['"]''')[0] 
+              return self.getResolvedURL(videoUrl)
+
+           if 'unescape' in data:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, 'eval(', ');', False)
+              try:
+                 ddata = ''
+                 for idx in range(len(data)):
+                    tmp = data[idx].split('+')
+                    for item in tmp:
+                       item = item.strip()
+                       if item.startswith("'") or item.startswith('"'):
+                          ddata += self.cm.ph.getSearchGroups(item, '''['"]([^'^"]+?)['"]''')[0]
+                       else:
+                          tmp2 = re.compile('''unescape\(['"]([^"^']+?)['"]''').findall(item)
+                          for item2 in tmp2:
+                             ddata += urllib.unquote(item2)
+                
+                 printDBG('Host listsItems ddata2: '+ddata)
+                
+                 funName = self.cm.ph.getSearchGroups(ddata, '''function\s*([^\(]+?)''')[0].strip()
+                 sp      = self.cm.ph.getSearchGroups(ddata, '''split\(\s*['"]([^'^"]+?)['"]''')[0]
+                 modStr  = self.cm.ph.getSearchGroups(ddata, '''\+\s*['"]([^'^"]+?)['"]''')[0] 
+                 modInt  = int( self.cm.ph.getSearchGroups(ddata, '''\+\s*(-?[0-9]+?)[^0-9]''')[0] )
+                
+                 ddata =  self.cm.ph.getSearchGroups(ddata, '''document\.write[^'^"]+?['"]([^'^"]+?)['"]''')[0]
+                 data  = ''
+                 tmp   = ddata.split(sp)
+                 ddata = urllib.unquote(tmp[0])
+                 k = urllib.unquote(tmp[1] + modStr)
+                 for idx in range(len(ddata)):
+                    data += chr((int(k[idx % len(k)]) ^ ord(ddata[idx])) + modInt)
+                      
+                 printDBG('host data2: '+data)
+                
+                 if 'rtmp://' in data:
+                    rtmpUrl = self.cm.ph.getDataBeetwenMarkers(data, '&source=', '&', False)[1]
+                    if rtmpUrl == '':
+                       rtmpUrl = self.cm.ph.getSearchGroups(data, r'''['"](rtmp[^"^']+?)['"]''')[0]
+                    return rtmpUrl
+                 elif '.m3u8' in data:
+                    file = self.cm.ph.getSearchGroups(data, r'''['"](http[^"^']+?\.m3u8[^"^']*?)['"]''')[0]
+                    if file == '': file = self.cm.ph.getDataBeetwenMarkers(data, 'src=', '&amp;', False)[1]
+                    return file
+              except Exception:
+                 printExc()
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if not videoUrl:
+              link = self.cm.ph.getSearchGroups(data, '''streamer":['"]([^"^']+?)['"]''')[0].replace(r"\/",r"/")
+              return 'http://www.filmon.com' + link
+           if not videoUrl: return ''
+           sts, data = self.getPage(videoUrl, 'adulttv.cookie', 'adulttv.net', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data3: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''sources:\[\{file:['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''source:['"]([^"^']+?)['"]''', 1, True)[0] 
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?)['"]''', 1, True)[0] 
+           return videoUrl
+
+        if parser == 'https://www.balkanjizz.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'balkanjizz.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           return self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''', 1, True)[0]
+
+        if parser == 'https://pornorussia.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornorussia.cookie')
+           for x in range(1, 10): 
+              sts, data = self.getPage(url, 'pornorussia.cookie', 'pornorussia.tv', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if videoUrl: return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent':self.USER_AGENT})
+           return ''
+
+        if parser == 'https://www.letmejerk.com':
+           for x in range(1, 10): 
+              COOKIEFILE = os_path.join(GetCookieDir(), 'letmejerk.cookie')
+              self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+              self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              self.defaultParams['header']['Referer'] = url
+              sts, data = self.getPage(url, 'letmejerk.cookie', 'letmejerk.com', self.defaultParams)
+              if not sts: return ''
+              #printDBG( 'Host listsItems data1: '+data )
+              file = str(self.cm.ph.getAllItemsBeetwenMarkers(data, '<script', '</script>'))
+              tmp = file.split('|')
+              post = ''
+              for item in tmp:
+                 item = item.strip()
+                 if item.endswith("="): post = item
+                 if item.startswith("eX"): post = item
+                 if 'IWh0dHB' in item: post = item
+              #printDBG( 'Host post:%s' % base64.b64decode(post) )
+              #printDBG( 'Host post:%s' % base64.b64decode(post)[1:] )
+              #printDBG( 'Host post:%s' % base64.b64decode(post)[:len(post)] )
+              postdata = {'id' : url.split('/')[4]} 
+              self.defaultParams['header']['X-Requested-With'] = 'XMLHttpRequest'
+              self.defaultParams['header']['Host'] = 'letmejerk.com'
+              sts, data = self.getPage('https://letmejerk.com/load/video/'+post+'/', 'letmejerk.cookie', 'letmejerk.com', self.defaultParams, postdata)
+              if not sts: return ''
+              printDBG( 'Host listsItems data2: '+data )
+              videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''', 1, True)[0]
+              poster = self.cm.ph.getSearchGroups(videoUrl, '''(@[^"^']+?#)''', 1, True)[0]
+              videoUrl = videoUrl.replace(poster,'')
+
+              if 'm3u8' in videoUrl: 
+                 videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': url, "Origin": "https://letmejerk.com"})
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    return item['url']
+
+              HTTP_HEADER = {'Accept-Encoding': 'gzip, deflate', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'} 
+              defaultParams = {'header':HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+              defaultParams['header']['Referer'] = url
+              defaultParams['max_data_size'] = 0
+              defaultParams['header']['Host'] = videoUrl.split('/')[2]
+              #defaultParams['header']['User-Agent'] = ua
+              defaultParams['header']['Accept'] = "video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5"
+              defaultParams['header']['Range'] = "bytes=0-" 
+              defaultParams['header']['Referer'] = url
+              defaultParams['ignore_http_code_ranges'] = []
+              sts, data = self.getPage(videoUrl, 'letmejerk.cookie', 'letmejerk.com', defaultParams)
+              #if not sts: return ''
+              try:
+                 if data.meta['location']: return self.FullUrl(data.meta['location'])
+              except Exception: 
+                 printExc() 
+           return videoUrl 
+
+        if parser == 'https://www.gotporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'gotporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'gotporn.cookie', 'gotporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.gotporn.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'gotporn.cookie', 'gotporn.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'https://www.analdin.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'analdin.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'analdin.cookie', 'analdin.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:\s*['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl.startswith('/'): videoUrl = 'https://www.analdin.com' + videoUrl
+           self.defaultParams['max_data_size'] = 0
+           sts, data = self.getPage(videoUrl, 'analdin.cookie', 'analdin.com', self.defaultParams)
+           if not sts: return ''
+           return data.meta['url']
+
+        if parser == 'https://www.pornomenge.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornomenge.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornomenge.cookie', 'pornomenge.com', self.defaultParams)
+           if not sts: return ''
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return videoUrl
+
+        if parser == 'https://www.koloporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'koloporno.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'koloporno.cookie', 'koloporno.com', self.defaultParams)
+           if not sts: return ''
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return videoUrl
+
+        if parser == 'http://www.sunporno.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sunporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = re.findall('video src="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return urlparser.decorateUrl(videoPage[0], {'Referer': url})
+           return ''
+
+        if parser == 'https://mini.zbiornik.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'zbiornikmini.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'http://dato.porn':
+           #if not 'embed' in url:
+           #   url = 'https://datoporn.co/embed-%s-658x400.html' % url.split('/')[-1]
+           USER_AGENT = 'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'datoporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'datoporn.cookie', 'datoporn.co', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           if 'login' in videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )		   
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': USER_AGENT}) 
+
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 packed = packed[-1]
+              else:
+                 return ''
+              printDBG( 'Host data4: '+str(packed) )
+              try:
+                 videoPage = unpackJSPlayerParams(packed, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+                 printDBG( 'OK4: ')
+              except Exception: pass 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              videoUrl = ph.search(videoPage, '''file:['"]([^'^"]+?)['"]''')[0]
+              if not videoUrl: videoUrl = ph.search(videoPage, '''src:['"]([^'^"]+?)['"]''')[0]
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              videoUrl = urlparser.decorateUrl(videoUrl, {'User-Agent': USER_AGENT, 'Referer': url})
+              if 'm3u8' in videoUrl:
+                 tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                 for item in tmp:
+                    videoUrl = item['url']
+              return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''src: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?\.mp4)['"]''')[0].replace('&amp;','&')
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:['"]([^"^']+?\.m3u8)['"]''')[0].replace('&amp;','&')
+           if videoUrl: return videoUrl
+           if 'File Not Found' in data: 
+              SetIPTVPlayerLastHostError(_(' File Not Found.'))
+              return []
+           if 'File is awaiting for moderation' in data: 
+              SetIPTVPlayerLastHostError(_(' File is awaiting for moderation.'))
+              return []
+           return ''
+
+        if parser == 'http://porn720.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn720.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'porn720.cookie', 'porn720.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return self.getResolvedURL(self.FullUrl(videoUrl))
+           videoUrl = re.compile('<source src="(.+?)"', re.DOTALL).findall(data)
+           if videoUrl:
+              videoUrl = urlparser.decorateUrl(videoUrl[-1], {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+              self.defaultParams['max_data_size'] = 0
+              sts, data = self.getPage(videoUrl, 'porn720.cookie', 'porn720.org', self.defaultParams)
+              if not sts: return ''
+              return data.meta['url']
+
+           videoUrl = self.cm.ph.getSearchGroups(data, '''720p['"]:['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''480p['"]:['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'User-Agent': self.USER_AGENT, 'Referer': url}) 
+           return ''
+
+        if parser == 'https://fapset.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'fapset.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return self.getResolvedURL(videoUrl)
+
+        if parser == 'http://www.filmyporno.tv':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'filmyporno.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           match = re.findall('source src="(.*?)"', data, re.S)
+           if match: return match[0]
+           else: return ''
+
+        if parser == 'https://daftsex.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'daftsex.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = parser
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           #printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"](https://da[^"^']+?)['"]''')[0] 
+           sts, data2 = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data2 )
+           server = self.cm.ph.getSearchGroups(data2, '''server:\s*?['"]([^"^']+?)['"]''')[0] 
+           printDBG( 'Host  server1:%s' % server )
+           s = list(server)
+           printDBG( 'Host  server list:%s' % s )
+           s.reverse()
+           printDBG( 'Host  server list2:%s' % s )
+           server = base64.b64decode(str(''.join(s)))
+           printDBG( 'Host  server2:%s' % server)
+           try:
+              try:
+                 match = re.compile('id: "([^"]+)_([^"]+)".+:"(\d+)\.([^"]+)"}', re.DOTALL | re.IGNORECASE).findall(data2)[0]
+                 (id1, id2, res, extra) =  match
+                 video =  id1 + '/' + id2 + '/' + res + '.mp4?extra=' + extra
+                 printDBG( 'Host  video: '+video )
+                 return 'https://' + server + '/videos/' + video
+              except Exception: 
+                 printExc()
+              try:
+                 match = re.compile('id: "([^"]+)_([^"]+)".+"(\d+)"\:"([^"]+)"}', re.DOTALL | re.IGNORECASE).findall(data2)[0] 
+                 (id1, id2, res, extra) =  match
+                 video =  id1 + '/' + id2 + '/' + res + '.mp4?extra=' + extra
+                 printDBG( 'Host  video: '+video )
+                 return 'https://' + server + '/videos/' + video
+              except Exception: 
+                 printExc()
+           except Exception: 
+              printExc()
+           return ''
+
+        if parser == 'https://videobin.co':
+            baseUrl = strwithmeta(url)
+            referer = baseUrl.meta.get('Referer', '')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            if referer != '': self.HTTP_HEADER['Referer'] = referer
+            COOKIEFILE = os_path.join(GetCookieDir(), 'videobin.cookie')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return ''
+            printDBG( 'Host  data: %s' % data )
+            data = self.cm.ph.getDataBeetwenMarkers(data, 'sources:', ']', False)[1]
+            data = re.compile('"(http[^"]+?)"').findall(data)
+            for videoUrl in data:
+                if videoUrl.split('?')[0].endswith('m3u8'):
+                    printDBG( 'Host  videoUrl: %s' % videoUrl )
+                    #if self.cm.isValidUrl(videoUrl): 
+                    #    videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': referer}) 
+                    #    tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+                    #    for item in tmp:
+                    #        printDBG( 'Host listsItems valtab: '  +str(item))
+                    #        return item['url']
+                elif videoUrl.split('?')[0].endswith('mp4'):
+                    printDBG( 'Host  videoUrl: %s' % videoUrl )
+                    videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': referer, 'User-Agent': self.USER_AGENT}) 
+                    return videoUrl
+            return ''
+
+        if parser == 'https://lovehomeporn.com/':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'lovehomeporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = parser
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           id = self.cm.ph.getSearchGroups(data, '''video_id\s*=\s*['"]([^"^']+?)['"]''')[0] 
+           videoUrl = "https://lovehomeporn.com/media/nuevo/config.php?key=%s" % id
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           videoUrl = ph.search(data, '''<file>([^>]+?)<''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'http://www.pornrabbit.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrabbit.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'pornrabbit.cookie', 'pornrabbit.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host  data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0]
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://www.eroprofile.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'eroprofile.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'http://www.absoluporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'absoluporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://www.amateurcool.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurcool.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'amateurcool.cookie', 'amateurcool.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+
+        if parser == 'https://mangovideo':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'mangovideo.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )		   
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']}) 
+
+        if parser == 'https://yespornplease.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'yespornplease.cookie')
+           referer = url.meta.get('Referer', url)
+
+           self.defaultParams = {'header':self.HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           self.defaultParams['header']['Referer'] = referer
+           sts, data = self.getPage(url, 'yespornplease.cookie', 'yespornplease.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           return ''
+
+        if parser == 'http://anybunny.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anybunny.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           self.domains = ['vartuc.com', "azblowjobtube.com"]
+           js_link = re.compile("src='(/kt_player/.*?)'", re.DOTALL | re.IGNORECASE).search(data).group(1)
+           js_path = 'https://' + self.domains[0] + js_link + '&ver=x'
+           sts, data = self.getPage(js_path, 'anybunny.cookie', 'anybunny.com', self.defaultParams)
+           js = data.split(";")
+           js = [line for line in js if (line.startswith("gh") or line.startswith("irue842")) and '=' in line and '(' not in line and ')' not in line]
+           js = "\n".join(js)
+           printDBG( 'Host  js: %s' % js )
+           urls = js_execute( js+ '\nfor (n in this){print(n+"="+this[n]+";");}')
+           videoUrl = self.cm.ph.getSearchGroups(urls['data'], '''src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'https://hqporner.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hqporner.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'hqporner.cookie', 'hqporner.com', self.defaultParams)
+           if not sts: return ''
+           if 'page not found' in data:
+              SetIPTVPlayerLastHostError(_(' Oops, page not found!'))
+              return []
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           sts, data = self.get_Page(videoUrl)
+           if not sts: return ''
+           printDBG( 'Host  data2: '+data )
+           p1080 = ''
+           p720 = ''
+           p360 = ''
+           p240 = ''
+           subData = data.split('<source')
+           if len(subData): del subData[0]
+           if subData:
+              for item in subData:
+                 src = self.cm.ph.getSearchGroups(item, '''['"](//[^"^']+?)['"]''')[0].replace('\\','')
+                 if '1080' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p1080 = src
+                 if '720' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p720 = src
+                 if '360' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p360 = src
+                 if '240' in item: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p240 = src
+              if p1080: return p1080
+              if p720: return p720
+              if p360: return p360
+              if p240: return p240
+           subData = self.cm.ph.getDataBeetwenMarkers(data, 'var srca', ']', False)[1].split('}')
+           if subData:
+              for item in subData:
+                 label   = self.cm.ph.getSearchGroups(item, 'label:\s*?"([^"]+?)"')[0]
+                 src     = self.cm.ph.getSearchGroups(item, 'file:\s*?"([^"]+?)"')[0]
+                 if '1080' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p1080 = src
+                 if '720' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p720 = src
+                 if '360' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p360 = src
+                 if '240' in label: 
+                    if src.startswith('//'): src = 'https:' + src
+                    p240 = src
+              if p1080: return p1080
+              if p720: return p720
+              if p360: return p360
+              if p240: return p240
+           videoUrl = re.compile("<source src='([^']+)'", re.DOTALL | re.IGNORECASE).findall(data)
+           if videoUrl:
+              videoUrl = videoUrl[0]
+              if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+              return videoUrl
+           videoUrl = re.compile("<script type='text/javascript' src='([^']+)'></script>", re.DOTALL | re.IGNORECASE).findall(data)
+           if videoUrl:
+              videoUrl = videoUrl[-1]
+              sts, data = self.get_Page(videoUrl)
+              if not sts: return ''
+              printDBG( 'Host  data2: '+data )
+              videoUrl = re.compile('file": "([^"]+)"', re.DOTALL | re.IGNORECASE).findall(data)
+              videoUrl = videoUrl[-1]
+              if videoUrl.startswith('//'):
+                 videoUrl = 'https:' + videoUrl
+              return videoUrl
+           videoUrl = re.compile('file": "([^"]+)"', re.DOTALL | re.IGNORECASE).findall(data)
+           if videoUrl:
+              videoUrl = videoUrl[-1]
+              if videoUrl.startswith('//'): videoUrl = 'https:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'https://www.naked.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'naked.cookie')
+           UA = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/37.0.2062.120 Chrome/37.0.2062.120 Safari/537.36"
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': False, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'naked.cookie', 'naked.com', self.defaultParams)
+           if not sts: return ''
+           modelname = self.cm.meta['url'].split('=')[-1]
+           id = ''
+           host = ''
+           printDBG( 'Host listsItems data: '+data )
+           data = data.split('<div class="live clearfix')
+           if len(data): del data[0]
+           for item in data:
+              id = self.cm.ph.getSearchGroups(item, '''data-model-id=['"]([^"^']+?)['"]''')[0] 
+              host = self.cm.ph.getSearchGroups(item, '''data-video-host=['"]([^"^']+?)['"]''')[0] 
+              if modelname == self.cm.ph.getSearchGroups(item, '''data-model-seo-name=['"]([^"^']+?)['"]''', 1, True)[0]: 
+                 if 'multi-user-private' in item: 
+                    SetIPTVPlayerLastHostError(_(' Private Show.'))
+                    return []
+                 break
+           videoUrl = 'https://manifest.vscdns.com/manifest.m3u8?key=nil&provider=highwinds&host='+host+'&model_id='+id+'&secure=true&prefix=amlst&youbora-debug=1'
+           PHPSESSID = self.cm.getCookieItem(COOKIEFILE, 'PHPSESSID')
+           videoUrl = urlparser.decorateUrl(videoUrl, {'Referer': self.cm.meta['url'], 'Cookie':'PHPSESSID=%s' % PHPSESSID, 'User-Agent': UA, 'iptv_livestream':True, 'Origin':'https://www.naked.com'})
+           tmp = getDirectM3U8Playlist(videoUrl, checkContent=True, sortWithMaxBitrate=999999999)
+           for item in tmp:
+              return item['url']
+           return ''
+
+        if parser == 'https://www.pornrewind.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornrewind.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url:\s*['"]([^"^']+?)['"]''')[0] 
+           return videoUrl
+
+        if parser == 'https://spankbang.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'spankbang.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'spankbang.cookie', 'spankbang.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoid = self.cm.ph.getSearchGroups(data, '''data-videoid=['"]([^"^']+?)['"]''')[0]
+           streamkey = self.cm.ph.getSearchGroups(data, '''data-streamkey=['"]([^"^']+?)['"]''')[0]
+           sb_csrf_session = self.cm.getCookieItem(COOKIEFILE,'sb_csrf_session')
+           api = 'https://spankbang.com/api/videos/stream'
+           postdata = {'id' : streamkey, 'data': 0, 'sb_csrf_session': sb_csrf_session} 
+           self.defaultParams['header']['X-Requested-With'] = 'XMLHttpRequest'
+           self.defaultParams['header']['X-CSRFToken'] = sb_csrf_session
+           sts, data = self.getPage(api, 'spankbang.cookie', 'spankbang.com', self.defaultParams, postdata)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           try:
+              if data.startswith('{'): data = '['+data+']'
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 try:
+                    if str(item["stream_url_1080p"]) : return self.cm.getFullUrl(str(item["stream_url_1080p"][0]))
+                    if str(item["stream_url_720p"]) : return self.cm.getFullUrl(str(item["stream_url_720p"][0]))
+                    if str(item["stream_url_480p"]) : return self.cm.getFullUrl(str(item["stream_url_480p"][0]))
+                    if str(item["stream_url_320p"]) : return self.cm.getFullUrl(str(item["stream_url_320p"][0]))
+                    if str(item["stream_url_240p"]) : return self.cm.getFullUrl(str(item["stream_url_240p"][0]))
+                 except Exception as e:
+                    printExc()
+                 try:
+                    if str(item["1080p"]) != '[]': return self.cm.getFullUrl(str(item["1080p"][0]))
+                    if str(item["720p"])  != '[]': return self.cm.getFullUrl(str(item["720p"][0]))
+                    if str(item["480p"])  != '[]': return self.cm.getFullUrl(str(item["480p"][0]))
+                    if str(item["320p"])  != '[]': return self.cm.getFullUrl(str(item["320p"][0]))
+                    if str(item["240p"])  != '[]': return self.cm.getFullUrl(str(item["240p"][0]))
+                 except Exception as e:
+                    printExc()
+           except Exception as e:
+              printExc()
+           return ''
+
+        if parser == 'https://upstream.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'upstream.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'upstream.cookie', 'upstream.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           videoUrl = ph.search(data, '''file:['"]([^'^"]+?)['"]''')[0]
+           return videoUrl
+
+        if parser == 'https://prostream.to':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'prostream.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE, 'return_data': True}
+           sts, data = self.getPage(url, 'prostream.cookie', 'prostream.to', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+str(data) )
+           if "eval(function(p,a,c,k,e,d)" in data:
+              printDBG( 'Host resolveUrl packed' )
+              packed = re.compile('>eval\(function\(p,a,c,k,e,d\)(.+?)</script>', re.DOTALL).findall(data)
+              if packed:
+                 packed = packed[-1]
+              else:
+                 return ''
+              try:
+                 videoPage = unpackJSPlayerParams(packed, TEAMCASTPL_decryptPlayerParams, 0, True, True) 
+              except Exception: pass 
+              printDBG( 'Host videoPage: '+str(videoPage) )
+              videoUrl = ph.search(videoPage, '''file:['"]([^'^"]+?)['"]''')[0]
+              if not videoUrl: videoUrl = ph.search(videoPage, '''sources:\[['"]([^'^"]+?)['"]''')[0]
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl 
+           return ''
+
+        if parser == 'https://www.cumlouder.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'cumlouder.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'cumlouder.cookie', 'cumlouder.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://www.vporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'vporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'vporn.cookie', 'vporn.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'This video has been deleted' in data:
+              SetIPTVPlayerLastHostError(_(' This video has been deleted.'))
+              return []
+           for video in re.findall(r'flashvars\.videoUrl([^=]+?)\s*=\s*"(https?://[^"]+)"', data):
+              videoUrl = urllib2.unquote(video[1].replace('https://','http://'))
+              printDBG( 'Host videoUrl '+videoUrl )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+  
+        if parser == 'http://sexu.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sexu.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''downloadUrl":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'http://sexu.com/'})
+           videoUrl = re.findall('"file":"(.*?\.mp4)"', data, re.S)
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl[-1], {'Referer': 'http://sexu.com/'}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"src":['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'http://sexu.com/'}) 
+ 
+        if parser == 'http://www.amateurporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'amateurporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if license_code and videoUrl:
+              if 'function/0/' in videoUrl:
+                 videoUrl = decryptHash(videoUrl, license_code, '16')
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0] 
+           if videoUrl:
+              return self.getResolvedURL(self.FullUrl(videoUrl))
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?mp4)['"]''')[0] 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s*?['"]([^"^']+?mp4)['"]''')[0] 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           return ''
+
+        if parser == 'http://www.hdporn.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdporn.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return
+           printDBG( 'Host listsItems data: '+data )
+           match = re.findall('source src="(.*?)"', data, re.S)
+           if match: return match[0]
+           else: return ''
+
+        if parser == 'http://pornicom.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'pornicom.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           #printDBG( 'Host data:%s' % data )
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars', '}', False)[1]
+           if data2: 
+              printDBG( 'Host data2:%s' % data2 )
+              return self.cm.ph.getSearchGroups(data2, '''video_url:\s*?['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           videoPage = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0] 
+           if videoPage: 
+              printDBG( 'Host data file:%s' % videoPage )
+              return videoPage
+           return ''
+
+        if parser == 'http://www.porn00.org':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porn00.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'porn00.cookie', 'porn00.org', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0])
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0])
+           if videoUrl:
+              sts, data = self.getPage(videoUrl, 'porn00.cookie', 'porn00.org', self.defaultParams)
+              if not sts: return ''
+              printDBG( 'Host listsItems data: '+data )
+              videoUrl = re.compile(r"""<source[^>]+?src=(?:"|')?([^'";]+)(?:"|')""", re.DOTALL | re.IGNORECASE).findall(data)
+              return urlparser.decorateUrl(videoUrl[-1], {'Referer': url}) 
+           return ''
+
+        if parser == 'https://www.volimeee.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'volimeee.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'volimeee.cookie', 'volimeee.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0])
+           if videoUrl:
+              return urlparser.decorateUrl(videoUrl, {'Referer': url}) 
+           return ''
+
+        if parser == 'http://porndoe.com':
+           host = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'
+           COOKIEFILE = os_path.join(GetCookieDir(), 'porndoe.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoPage = self.FullUrl(self.cm.ph.getSearchGroups(data, '''embedURL"\s*href=['"]([^"^']+?)['"]''')[0])
+           id = self.cm.ph.getSearchGroups(data, '''"id":\s*['"]([^"^']+?)['"]''')[0]
+           videoUrl= 'https://porndoe.com/service/index?device=desktop&page=video&id='+id
+           sts, data = self.get_Page(videoUrl, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data2: '+data )
+           try:
+              data = self.cm.ph.getDataBeetwenMarkers(data, '"sources":', '}},', False)[1]
+              if data.startswith('{'): data = '['+data+'}]'
+              printDBG( 'Host listsItems data3: '+data )
+              result = byteify(simplejson.loads(data))
+              for item in result:
+                 try:
+                    if str(item["720"]["url"]) : return strwithmeta(str(item["720"]["url"]), {'Referer': url}) 
+                    if str(item["480"]["url"]) : return strwithmeta(str(item["480"]["url"]), {'Referer': url})
+                    if str(item["240"]["url"]) : return strwithmeta(str(item["240"]["url"]), {'Referer': url})
+                 except Exception as e:
+                    printExc()
+           except Exception as e:
+              printExc()
+           sts, data = self.get_Page(videoPage, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data4: '+data )
+           try:
+              data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<source', '>')
+              for item in data:
+                 printDBG( 'Host item: '+str(item) )
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0]
+              if videoUrl: return strwithmeta(videoUrl, {'Referer': url})
+           except Exception as e:
+              printExc()
+           return ''
+
+        if parser == 'https://hdsite.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'hdsite.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://p720.net':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'p720.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.HTTP_HEADER['Referer'] = url
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url, self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           if 'hdsite.net/embed/' in data:
+              videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''<iframe[^>]+?src=['"]([^"^']+?)['"]''')[0])
+              return self.getResolvedURL(videoUrl)
+           if not 'mp4' in data: SetIPTVPlayerLastHostError('LOGIN REQUIRED')
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           return urlparser.decorateUrl(videoUrl, {'Referer': url, 'User-Agent': self.HTTP_HEADER['User-Agent']})
+
+        if parser == 'https://www.extremetube.com':
+            COOKIEFILE = os_path.join(GetCookieDir(), 'extremetube.cookie')
+            self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+            self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+            sts, data = self.get_Page(url)
+            if not sts: return ''
+            printDBG( 'Host listsItems data: '+data )
+            videoPage = re.findall('"quality_\d+p":"(.*?)"', data, re.S) 
+            if videoPage:
+                url = videoPage[-1].replace('\/','/') 
+                return self.FullUrl(url)
+            return '' 
+
+        if parser == 'http://xhamster.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'xhamster.cookie')
+           self.HTTP_HEADER = self.cm.getDefaultHeader(browser='chrome')
+           self.defaultParams = {'header':self.HTTP_HEADER, 'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.get_Page(url)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''1080p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''720p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''480p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''240p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           videoUrl = self.FullUrl(self.cm.ph.getSearchGroups(data, '''144p['"]:['"]([^'"]+?)['"]''')[0]).replace('&amp;','&').replace(r"\/",r"/")
+           if videoUrl: 
+              return strwithmeta(videoUrl, {'Referer': url})
+           return ''
+
+        if parser == 'https://anyporn.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anyporn.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anyporn.cookie', 'anyporn.com', self.defaultParams)
+           if not sts: return ''
+           data = self.cm.ph.getAllItemsBeetwenMarkers(data, '<source', '>')
+           for item in data:
+              videoUrl = self.cm.ph.getSearchGroups(item, '''src=['"]([^"^']+?)['"]''', 1, True)[0] 
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return strwithmeta(videoUrl, {'Referer': url})
+
+        if parser == 'https://anon-v.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'anon-v.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': True, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'anon-v.cookie', 'anon-v.com', self.defaultParams)
+           if not sts: return ''
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'https://www.sleazyneasy.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'sleazyneasy.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'sleazyneasy.cookie', 'sleazyneasy.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           license_code = self.cm.ph.getSearchGroups(data, '''license_code\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url\s*?:\s*?['"]([^"^']+?)['"]''')[0]
+           printDBG( 'Host license_code: %s' % license_code )
+           printDBG( 'Host video_url: %s' % videoUrl )
+           if 'function/0/' in videoUrl:
+              videoUrl = decryptHash(videoUrl, license_code, '16')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urlparser.decorateUrl(videoUrl, {'Referer': self.cm.meta['url']})
+
+        if parser == 'https://javhoho.com':
+           COOKIEFILE = os_path.join(GetCookieDir(), 'javhoho.cookie')
+           self.defaultParams = {'use_cookie': True, 'load_cookie': False, 'save_cookie': True, 'cookiefile': COOKIEFILE}
+           sts, data = self.getPage(url, 'javhoho.cookie', 'javhoho.com', self.defaultParams)
+           if not sts: return ''
+           printDBG( 'Host listsItems data: '+data )
+           videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://upstream.to[^"^']+?)['"]''')[0]
+           if not videoUrl: videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://www.fembed.com[^"^']+?)['"]''')[0]
+           return self.getResolvedURL(videoUrl)
+
+
+##########################################################################################################################
+        query_data = {'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True}
+        try:
+           data = self.cm.getURLRequestData(query_data)
+           printDBG( 'Host getResolvedURL data: '+data )
+        except:
+           printDBG( 'Host getResolvedURL query error' )
+           return videoUrl
+
+        if parser == 'file: ':
+           return self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0] 
+
+        if parser == "0p'  : '":
+           videoPage = re.findall("0p'  : '(http.*?)'", data, re.S)   
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == 'source src="':
+           videoPage = re.findall('source src="(http.*?)"', data, re.S)   
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == "video_url: '":
+           videoPage = re.findall("video_url: '(.*?).'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'videoFile="':
+           videoPage = re.findall('videoFile="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://www.ah-me.com':
+           videoUrl = ph.search(data, '''<video\ssrc=['"]([^'^"]+?)['"]''')[0]
+           return urlparser.decorateUrl(videoUrl, {'Referer': url})
+
+        if parser == 'http://www.nuvid.com':
+           videoUrl = re.search("http://www.nuvid.com/video/(.*?)/.+", url, re.S)
+           if videoUrl:
+              xml = 'http://m.nuvid.com/video/%s' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.findall('source src="(.*?)"', data, re.S)   
+              if videoPage:
+                 return videoPage[0]
+           return ''
+
+        if parser == 'http://www.wankoz.com':
+           videoPage = re.findall("'video_html5_url']='(.*?).'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+
+        if parser == 'https://alpha.tnaflix.com':
+           videoPage = re.findall('"embedUrl" content="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return 'http:'+videoPage[0]
+           return ''
+
+        if parser == 'http://www.faphub.xxx':
+           videoPage = re.findall("url: '(.*?)'", data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+   
+        if parser == 'http://www.proporn.com':
+           videoPage = re.findall('source src="(.*?)"', data, re.S)   
+           if videoPage:
+              printDBG( 'Host videoPage:'+videoPage[0])
+              return videoPage[0]
+           return ''
+   
+        if parser == 'http://www.xnxx.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoUrlHigh\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoUrlLow\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''VideoHLS\(['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = re.search('flv_url=(.*?)&', data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           return ''
+
+        if parser == 'http://www.xvideos.com':
+           videoUrl = re.search("setVideoUrlHigh\('(.*?)'", data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           videoUrl = re.search('flv_url=(.*?)&', data, re.S)
+           if videoUrl: return decodeUrl(videoUrl.group(1))
+           return ''
+
+        if parser == 'http://embed.redtube.com':
+           videoPage = re.findall('sources:.*?":"(.*?)"', data, re.S)
+           if videoPage:
+              link = videoPage[-1].replace(r"\/",r"/")
+              if link.startswith('//'): link = 'http:' + link 
+              return link
+           return ''
+
+        if parser == 'http://www.eporner.com':
+           videoID = re.search("http://www.eporner.com/hd-porn/(.*?)/.+", url)
+           if not videoID: return ''
+           parse = re.findall("hash: '(.*?)'", data, re.S)
+           hash =  urllib.unquote_plus(parse[0]).decode("utf-8")
+           x = calc_hash(hash)
+           printDBG( 'Host getResolvedURL hash: '+parse[0]+' calc_hash:'+x)
+           xml = 'http://www.eporner.com/xhr/video/%s?device=generic&domain=www.eporner.com&hash=%s&fallback=false' % (videoID.group(1), x)
+           try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+           except: 
+                   printDBG( 'Host getResolvedURL query error xml' )
+                   return ''
+           #printDBG( 'Host data json: '+data )
+           videoPage = re.findall('src": "(.*?)"', data, re.S)
+           if videoPage: return videoPage[0]
+           return ''
+
+        if parser == 'http://www.pornhub.com/embed/':
+           match = re.findall("container.*?src.*?'(.*?)'", data, re.S)
+           if match: return match[0]
+           return ''
+        
+        if parser == 'http://m.tube8.com':
+           match = re.compile('<div class="play_video.+?<a href="(.+?)"', re.DOTALL).findall(data)
+           return match[0]
+
+        if parser == 'http://m.pornhub.com':
+           match = re.compile('<div class="play_video.+?<a href="(.+?)"', re.DOTALL).findall(data)
+           return match[0]
+
+        if parser == 'http://www.dachix.com':
+           videoPage = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0] 
+           if videoPage:
+              return urllib2.unquote(videoPage) 
+           return ''
+
+        if parser == 'http://www.drtuber.com':
+           params = re.findall('params\s\+=\s\'h=(.*?)\'.*?params\s\+=\s\'%26t=(.*?)\'.*?params\s\+=\s\'%26vkey=\'\s\+\s\'(.*?)\'', data, re.S)
+           if params:
+              for (param1, param2, param3) in params:
+                 hash = hashlib.md5(param3 + base64.b64decode('UFQ2bDEzdW1xVjhLODI3')).hexdigest()
+                 url = '%s/player_config/?h=%s&t=%s&vkey=%s&pkey=%s&aid=' % ("http://www.drtuber.com", param1, param2, param3, hash)
+                 query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+                 try:
+                    data = self.cm.getURLRequestData(query_data)
+                 except:
+                    printDBG( 'Host listsItems query error' )
+                    printDBG( 'Host listsItems query error url: '+url )
+                 #printDBG( 'Host listsItems data: '+data )
+                 url = re.findall('video_file>.*?(http.*?)\]\]><\/video_file>', data, re.S)
+                 if url:
+                    url = str(url[0])
+                    url = url.replace("&amp;","&")
+                    printDBG( 'Host listsItems url: '+url )
+                    return url
+           return ''
+
+        if parser == 'http://www.el-ladies.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source[^>]+?src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&') 
+           if videoUrl:
+              return self.FullUrl(videoUrl)
+           videoPage = re.findall(',file:\'(.*?)\'', data, re.S)  
+           if videoPage:
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://sexylies.com':
+           videoPage = re.search('source\stype="video/mp4"\ssrc="(.*?)"', data, re.S) 
+           if videoPage:
+              return videoPage.group(1)
+           return ''
+
+        if parser == 'http://www.eskimotube.com':
+           videoPage = re.search('color=black.*?href=(.*?)>', data, re.S) 
+           if videoPage:
+              return videoPage.group(1)
+           return ''
+
+        if parser == 'http://www.porn5.com':
+           videoPage = re.findall('p",url:"(.*?)"', data, re.S) 
+           if videoPage:
+              return videoPage[-1]
+           return ''
+
+        if parser == 'http://www.pornyeah.com':
+           videoPage = re.findall('settings=(.*?)"', data, re.S)
+           if not videoPage: return ''
+           xml = videoPage[0]
+           printDBG( 'Host getResolvedURL xml: '+xml )
+           try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+           except: 
+                   printDBG( 'Host getResolvedURL query error xml' )
+                   return videoUrl
+           videoPage = re.findall('defaultVideo:(.*?);', data, re.S)
+           if videoPage: return videoPage[0]
+           return ''
+
+        if parser == 'http://rusporn.tv':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_alt_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoUrl: return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''video_url: ['"]([^"^']+?)['"]''')[0] 
+           if videoUrl: return videoUrl
+           return ''
+
+        if parser == 'http://www.pornpillow.com':
+           videoPage = re.findall("'file': '(.*?)'", data, re.S)   
+           if videoPage:
+              return videoPage[0]
+           return ''
+
+        if parser == 'http://www.thumbzilla.com':
+           match = re.findall('data-quality="(.*?)"', data)
+           if match:
+              fetchurl = urllib2.unquote(match[-1])
+              fetchurl = fetchurl.replace(r"\/",r"/")
+              if fetchurl.startswith('//'): fetchurl = 'http:' + fetchurl
+              return fetchurl 
+           return ''
+
+        if parser == 'https://vidlox.tv':
+           parse = re.search('sources.*?"(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://xxxkingtube.com':
+           parse = re.search("File = '(http.*?)'", data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://pornsharing.com':
+           parse = re.search('btoa\("(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://pornxs.com':
+           parse = re.search('config-final-url="(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.flyflv.com':
+           parse = re.search('fileUrl="(http.*?)"', data, re.S) 
+           if parse: return parse.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.yeptube.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://www.yeptube.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://vivatube.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://vivatube.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.tubeon.com':
+           videoUrl = re.search('video_id = "(.*?)"', data, re.S)
+           if videoUrl:
+              xml = 'http://www.tubeon.com/player_config_json/?vid=%s&aid=0&domain_id=0&embed=0&ref=&check_speed=0' % videoUrl.group(1)
+              try:    data = self.cm.getURLRequestData({'url': xml, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True})
+              except: 
+                 printDBG( 'Host getResolvedURL query error xml' )
+                 return ''
+              #printDBG( 'Host data json: '+data )
+              videoPage = re.search('"hq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+              videoPage = re.search('"lq":"(http.*?)"', data, re.S)   
+              if videoPage: return videoPage.group(1).replace('\/','/')
+           return ''
+
+        if parser == 'http://www.yuvutu.com':
+           match = re.findall('iframe src="(.*?)"', data, re.S)
+           if match: 
+              url = 'http://www.yuvutu.com'+match[0]
+              query_data = { 'url': url, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+              try:
+                 data = self.cm.getURLRequestData(query_data)
+              except:
+                 printDBG( 'Host listsItems query error url: '+url )
+              #printDBG( 'Host listsItems data: '+data )
+              url = re.findall('file: "(.*?)"', data, re.S)
+              if url: 
+                 videoUrl = url[-1]
+                 return videoUrl
+           return ''
+
+        if parser == 'https://www.realgfporn.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+
+        if parser == 'http://www.homemoviestube.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''value="settings=([^"^']+?)['"]''')[0]
+           if videoUrl:
+              query_data = { 'url': videoUrl, 'use_host': False, 'use_cookie': False, 'use_post': False, 'return_data': True }
+              try:
+                 data = self.cm.getURLRequestData(query_data)
+              except:
+                 printDBG( 'Host listsItems query error url: '+url )
+              #printDBG( 'Host listsItems data: '+data )
+              return self.cm.ph.getSearchGroups(data, '''flvMask:([^"^']+?);''')[0]
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return videoUrl
+           return ''
+
+        if parser == 'https://porndig.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           if '.m3u8' in videoUrl:
+              if self.cm.isValidUrl(videoUrl): 
+                 tmp = getDirectM3U8Playlist(videoUrl)
+                 for item in tmp:
+                    printDBG( 'Host listsItems valtab: '  +str(item))
+                 return item['url']
+           if 'sources": ' in data:
+              try:
+                 sources = self.cm.ph.getDataBeetwenMarkers(data, 'sources": ', ']', False)[1]
+                 result = byteify(simplejson.loads(sources+']'))
+                 for item in result:
+                    try:
+                       if str(item["label"])=='720p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='480p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='360p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+                    try:
+                       if str(item["label"])=='240p': return str(item["src"]).replace('\/','/')
+                    except Exception as e:
+                       printExc()
+              except Exception as e:
+                 printExc()
+           return videoUrl
+
+        if parser == 'http://hentaigasm.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+           return urllib2.unquote(videoUrl)
+
+        if parser == 'https://www.katestube.com':
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'var flashvars', '}', False)[1]
+           if data2: return self.cm.ph.getSearchGroups(data2, '''['"](https://www.katestube.com/get_file[^"^']+?)['"]''')[0].replace('&amp;','&')
+           data2 = self.cm.ph.getDataBeetwenMarkers(data, 'sources:', ']', False)[1]
+           if data2: return self.cm.ph.getSearchGroups(data, '''src:\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file: ['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''['"](https://www.katestube.com/get_file[^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              return urllib2.unquote(videoUrl)
+           return ''
+
+        if parser == 'https://www.pornoxo.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''"file":['"]([^"^']+?)['"]''')[0].replace('\/','/')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''filefallback\':\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source\ssrc=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+           videoUrl = self.cm.ph.getSearchGroups(data, '''file:\s['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urllib2.unquote(videoUrl)
+
+        if parser == 'http://sexkino.to':
+           videoUrl = re.findall('<iframe.*?src="(.*?)"', data, re.S)
+           if videoUrl:
+              return self.getResolvedURL(videoUrl[-1])
+
+        if parser == 'https://momxxxfun.com':
+           videoUrl = self.cm.ph.getSearchGroups(data, '''<source src=['"]([^"^']+?)['"]''')[0].replace('&amp;','&')
+           if videoUrl:
+              if videoUrl.startswith('//'): videoUrl = 'http:' + videoUrl
+              return urlparser.decorateUrl(videoUrl, {'Referer': 'https://momxxxfun.com'}) 
+
+        videoUrls = []
+        urlSupport = self.up.checkHostSupport( url )
+        if 1 == urlSupport:
+            retTab = self.up.getVideoLinkExt( url )
+            videoUrls.extend(retTab)
+            printDBG("Video url[%s]" % videoUrls)
+            if videoUrls:
+                for item in videoUrls:
+                    if item['url']: return item['url']
+
+        printDBG( 'Host getResolvedURL end' )
+        return videoUrl
+
+
+
+
+
+############################################
+# functions for host
+############################################
+def decodeUrl(text):
+	text = text.replace('%20',' ')
+	text = text.replace('%21','!')
+	text = text.replace('%22','"')
+	text = text.replace('%23','&')
+	text = text.replace('%24','$')
+	text = text.replace('%25','%')
+	text = text.replace('%26','&')
+	text = text.replace('%2B','+')
+	text = text.replace('%2F','/')
+	text = text.replace('%3A',':')
+	text = text.replace('%3B',';')
+	text = text.replace('%3D','=')
+	text = text.replace('&#x3D;','=')
+	text = text.replace('%3F','?')
+	text = text.replace('%40','@')
+	return text
+
+def decodeHtml(text):
+	text = text.replace('&auml;','ä')
+	text = text.replace('\u00e4','ä')
+	text = text.replace('&#228;','ä')
+	text = text.replace('&oacute;','ó')
+	text = text.replace('&eacute;','e')
+	text = text.replace('&aacute;','a')
+	text = text.replace('&ntilde;','n')
+
+	text = text.replace('&Auml;','Ä')
+	text = text.replace('\u00c4','Ä')
+	text = text.replace('&#196;','Ä')
+	
+	text = text.replace('&ouml;','ö')
+	text = text.replace('\u00f6','ö')
+	text = text.replace('&#246;','ö')
+	
+	text = text.replace('&ouml;','Ö')
+	text = text.replace('\u00d6','Ö')
+	text = text.replace('&#214;','Ö')
+	
+	text = text.replace('&uuml;','ü')
+	text = text.replace('\u00fc','ü')
+	text = text.replace('&#252;','ü')
+	
+	text = text.replace('&Uuml;','Ü')
+	text = text.replace('\u00dc','Ü')
+	text = text.replace('&#220;','Ü')
+	
+	text = text.replace('&szlig;','ß')
+	text = text.replace('\u00df','ß')
+	text = text.replace('&#223;','ß')
+	
+	text = text.replace('&amp;','&')
+	text = text.replace('&quot;','\"')
+	text = text.replace('&quot_','\"')
+
+	text = text.replace('&gt;','>')
+	text = text.replace('&apos;',"'")
+	text = text.replace('&acute;','\'')
+	text = text.replace('&ndash;','-')
+	text = text.replace('&bdquo;','"')
+	text = text.replace('&rdquo;','"')
+	text = text.replace('&ldquo;','"')
+	text = text.replace('&lsquo;','\'')
+	text = text.replace('&rsquo;','\'')
+	text = text.replace('&#034;','\'')
+	text = text.replace('&#038;','&')
+	text = text.replace('&#039;','\'')
+	text = text.replace('&#39;','\'')
+	text = text.replace('&#160;',' ')
+	text = text.replace('\u00a0',' ')
+	text = text.replace('&#174;','')
+	text = text.replace('&#225;','a')
+	text = text.replace('&#233;','e')
+	text = text.replace('&#243;','o')
+	text = text.replace('&#8211;',"-")
+	text = text.replace('\u2013',"-")
+	text = text.replace('&#8216;',"'")
+	text = text.replace('&#8217;',"'")
+	text = text.replace('#8217;',"'")
+	text = text.replace('&#8220;',"'")
+	text = text.replace('&#8221;','"')
+	text = text.replace('&#8222;',',')
+	text = text.replace('&#x27;',"'")
+	text = text.replace('&#8230;','...')
+	text = text.replace('\u2026','...')
+	text = text.replace('&#41;',')')
+	text = text.replace('&lowbar;','_')
+	text = text.replace('&rsquo;','\'')
+	text = text.replace('&lpar;','(')
+	text = text.replace('&rpar;',')')
+	text = text.replace('&comma;',',')
+	text = text.replace('&period;','.')
+	text = text.replace('&plus;','+')
+	text = text.replace('&num;','#')
+	text = text.replace('&excl;','!')
+	text = text.replace('&#039','\'')
+	text = text.replace('&semi;','')
+	text = text.replace('&lbrack;','[')
+	text = text.replace('&rsqb;',']')
+	text = text.replace('&nbsp;','')
+	text = text.replace('&#133;','')
+	text = text.replace('&#4','')
+	text = text.replace('&#40;','')
+
+	text = text.replace('&atilde;',"'")
+	text = text.replace('&colon;',':')
+	text = text.replace('&sol;','/')
+	text = text.replace('&percnt;','%')
+	text = text.replace('&commmat;',' ')
+
+	return text	
+
+############################################
+# functions for pornhub
+############################################
+def decrypt(ciphertext, password, nBits):
+    printDBG( 'decrypt begin ' )
+    blockSize = 16
+    if not nBits in (128, 192, 256): return ""
+    ciphertext = base64.b64decode(ciphertext)
+#    password = password.encode("utf-8")
+
+    nBytes = nBits//8
+    pwBytes = [0] * nBytes
+    for i in range(nBytes): pwBytes[i] = 0 if i>=len(password) else ord(password[i])
+    key = Cipher(pwBytes, KeyExpansion(pwBytes))
+    key += key[:nBytes-16]
+
+    counterBlock = [0] * blockSize
+    ctrTxt = ciphertext[:8]
+    for i in range(8): counterBlock[i] = ord(ctrTxt[i])
+
+    keySchedule = KeyExpansion(key)
+
+    nBlocks = int( math.ceil( float(len(ciphertext)-8) / float(blockSize) ) )
+    ct = [0] * nBlocks
+    for b in range(nBlocks):
+        ct[b] = ciphertext[8+b*blockSize : 8+b*blockSize+blockSize]
+    ciphertext = ct
+
+    plaintxt = [0] * len(ciphertext)
+
+    for b in range(nBlocks):
+        for c in range(4): counterBlock[15-c] = urs(b, c*8) & 0xff
+        for c in range(4): counterBlock[15-c-4] = urs( int( float(b+1)/0x100000000-1 ), c*8) & 0xff
+
+        cipherCntr = Cipher(counterBlock, keySchedule)
+
+        plaintxtByte = [0] * len(ciphertext[b])
+        for i in range(len(ciphertext[b])):
+            plaintxtByte[i] = cipherCntr[i] ^ ord(ciphertext[b][i])
+            plaintxtByte[i] = chr(plaintxtByte[i])
+        plaintxt[b] = "".join(plaintxtByte)
+
+    plaintext = "".join(plaintxt)
+ #   plaintext = plaintext.decode("utf-8")
+    return plaintext
+
+Sbox = [
+    0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
+    0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
+    0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
+    0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
+    0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
+    0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
+    0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
+    0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
+    0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
+    0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
+    0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
+    0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
+    0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
+    0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
+    0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
+    0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
+]
+
+Rcon = [
+    [0x00, 0x00, 0x00, 0x00],
+    [0x01, 0x00, 0x00, 0x00],
+    [0x02, 0x00, 0x00, 0x00],
+    [0x04, 0x00, 0x00, 0x00],
+    [0x08, 0x00, 0x00, 0x00],
+    [0x10, 0x00, 0x00, 0x00],
+    [0x20, 0x00, 0x00, 0x00],
+    [0x40, 0x00, 0x00, 0x00],
+    [0x80, 0x00, 0x00, 0x00],
+    [0x1b, 0x00, 0x00, 0x00],
+    [0x36, 0x00, 0x00, 0x00]
+]
+
+def Cipher(input, w):
+    printDBG( 'cipher begin ' )
+    Nb = 4
+    Nr = len(w)/Nb - 1
+
+    state = [ [0] * Nb, [0] * Nb, [0] * Nb, [0] * Nb ]
+    for i in range(0, 4*Nb): state[i%4][i//4] = input[i]
+
+    state = AddRoundKey(state, w, 0, Nb)
+
+    for round in range(1, Nr):
+        state = SubBytes(state, Nb)
+        state = ShiftRows(state, Nb)
+        state = MixColumns(state, Nb)
+        state = AddRoundKey(state, w, round, Nb)
+
+    state = SubBytes(state, Nb)
+    state = ShiftRows(state, Nb)
+    state = AddRoundKey(state, w, Nr, Nb)
+
+    output = [0] * 4*Nb
+    for i in range(4*Nb): output[i] = state[i%4][i//4]
+    return output
+
+def SubBytes(s, Nb):
+    printDBG( 'subbytes begin ' )
+    for r in range(4):
+        for c in range(Nb):
+            s[r][c] = Sbox[s[r][c]]
+    return s
+
+def ShiftRows(s, Nb):
+    printDBG( 'shiftrows begin ' )
+    t = [0] * 4
+    for r in range (1,4):
+        for c in range(4): t[c] = s[r][(c+r)%Nb]
+        for c in range(4): s[r][c] = t[c]
+    return s
+
+def MixColumns(s, Nb):
+    printDBG( 'mixcolumns begin ' )
+    for c in range(4):
+        a = [0] * 4
+        b = [0] * 4
+        for i in range(4):
+            a[i] = s[i][c]
+            b[i] = s[i][c]<<1 ^ 0x011b if s[i][c]&0x80 else s[i][c]<<1
+        s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]
+        s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]
+        s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]
+        s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]
+    return s
+
+def AddRoundKey(state, w, rnd, Nb):
+    printDBG( 'addroundkey begin ' )
+    for r in range(4):
+        for c in range(Nb):
+            state[r][c] ^= w[rnd*4+c][r]
+    return state
+
+def KeyExpansion(key):
+    printDBG( 'keyexpansion begin ' )
+    Nb = 4
+    Nk = len(key)/4
+    Nr = Nk + 6
+
+    w = [0] * Nb*(Nr+1)
+    temp = [0] * 4
+
+    for i in range(Nk):
+        r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]]
+        w[i] = r
+
+    for i in range(Nk, Nb*(Nr+1)):
+        w[i] = [0] * 4
+        for t in range(4): temp[t] = w[i-1][t]
+        if i%Nk == 0:
+            temp = SubWord(RotWord(temp))
+            for t in range(4): temp[t] ^= Rcon[i/Nk][t]
+        elif Nk>6 and i%Nk == 4:
+            temp = SubWord(temp)
+        for t in range(4): w[i][t] = w[i-Nk][t] ^ temp[t]
+    return w
+
+def SubWord(w):
+    printDBG( 'subword begin ' )
+    for i in range(4): w[i] = Sbox[w[i]]
+    return w
+
+def RotWord(w):
+    printDBG( 'rotword begin ' )
+    tmp = w[0]
+    for i in range(3): w[i] = w[i+1]
+    w[3] = tmp
+    return w
+
+def encrypt(plaintext, password, nBits):
+    printDBG( 'encrypt begin ' )
+    blockSize = 16
+    if not nBits in (128, 192, 256): return ""
+#    plaintext = plaintext.encode("utf-8")
+#    password  = password.encode("utf-8")
+    nBytes = nBits//8
+    pwBytes = [0] * nBytes
+    for i in range(nBytes): pwBytes[i] = 0 if i>=len(password) else ord(password[i])
+    key = Cipher(pwBytes, KeyExpansion(pwBytes))
+    key += key[:nBytes-16]
+
+    counterBlock = [0] * blockSize
+    now = datetime.datetime.now()
+    nonce = time.mktime( now.timetuple() )*1000 + now.microsecond//1000
+    nonceSec = int(nonce // 1000)
+    nonceMs  = int(nonce % 1000)
+
+    for i in range(4): counterBlock[i] = urs(nonceSec, i*8) & 0xff
+    for i in range(4): counterBlock[i+4] = nonceMs & 0xff
+
+    ctrTxt = ""
+    for i in range(8): ctrTxt += chr(counterBlock[i])
+
+    keySchedule = KeyExpansion(key)
+
+    blockCount = int(math.ceil(float(len(plaintext))/float(blockSize)))
+    ciphertxt = [0] * blockCount
+
+    for b in range(blockCount):
+        for c in range(4): counterBlock[15-c] = urs(b, c*8) & 0xff
+        for c in range(4): counterBlock[15-c-4] = urs(b/0x100000000, c*8)
+
+        cipherCntr = Cipher(counterBlock, keySchedule)
+
+        blockLength = blockSize if b<blockCount-1 else (len(plaintext)-1)%blockSize+1
+        cipherChar = [0] * blockLength
+
+        for i in range(blockLength):
+            cipherChar[i] = cipherCntr[i] ^ ord(plaintext[b*blockSize+i])
+            cipherChar[i] = chr( cipherChar[i] )
+        ciphertxt[b] = ''.join(cipherChar)
+
+    ciphertext = ctrTxt + ''.join(ciphertxt)
+    ciphertext = base64.b64encode(ciphertext)
+
+    return ciphertext
+
+def urs(a, b):
+    printDBG( 'urs begin ' )
+    a &= 0xffffffff
+    b &= 0x1f
+    if a&0x80000000 and b>0:
+        a = (a>>1) & 0x7fffffff
+        a = a >> (b-1)
+    else:
+        a = (a >> b)
+    return a
+
+############################################
+# functions for beeg.com
+############################################
+def decrypt_key(key, a):
+    printDBG( 'beeg_salt= '+a)
+    e = urllib.unquote_plus(key).decode("utf-8")
+    o = ''.join([
+        chr(ord(e[n]) - ord(a[n % len(a)]) % 21)
+        for n in range(len(e))])
+    return ''.join(split(o, 3)[::-1])
+	
+def split(o, e):
+    def cut(s, x):
+        n.append(s[:x])
+        return s[x:]
+    n = []
+    r = len(o) % e
+    if r > 0:
+        o = cut(o, r)
+    while len(o) > e:
+        o = cut(o, e)
+    n.append(o)
+    return n
+############################################
+# functions for eporner
+############################################
+def calc_hash(s):
+    return ''.join((encode_base_n(int(s[lb:lb + 8], 16), 36) for lb in range(0, 32, 8)))
+
+def encode_base_n(num, n, table=None):
+    FULL_TABLE = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
+    if not table:
+        table = FULL_TABLE[:n]
+
+    if n > len(table):
+        raise ValueError('base %d exceeds table length %d' % (n, len(table)))
+
+    if num == 0:
+        return table[0]
+
+    ret = ''
+    while num:
+        ret = table[num % n] + ret
+        num = num // n
+    return ret
+############################################
+# functions for myfreecam
+############################################
+vs_str={}
+vs_str[0]="PUBLIC"
+vs_str[2]="AWAY"
+vs_str[12]="PVT"
+vs_str[13]="GROUP"
+vs_str[90]="CAM OFF"
+vs_str[127]="OFFLINE"
+vs_str[128]="TRUEPVT"
+
+def fc_decode_json(m):
+	try:
+		m = m.replace('\r', '\\r').replace('\n', '\\n')
+		return simplejson.loads(m[m.find("{"):].decode("utf-8","ignore"))
+	except:
+		return simplejson.loads("{\"lv\":0}")
+
+def read_model_data(m):
+	global CAMGIRLSERVER
+	global CAMGIRLCHANID
+	global CAMGIRLUID
+	printDBG("INFO  - "+str(m))
+	usr = ''
+	msg = fc_decode_json(m)
+	try:
+		sid=msg['sid']
+		level  = msg['lv']
+	except:
+		printDBG ("errr reply ... We're fucked ..")
+		return
+
+	vs     = msg['vs']
+	usr    = msg['nm']
+
+	if vs == 2:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 12:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 13:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 90:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 127:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+	if vs == 128:
+		printDBG ("%s is %s" % (usr, vs_str[vs]))
+		SetIPTVPlayerLastHostError(_(vs_str[vs]))
+		return []
+
+	CAMGIRLUID    = msg['uid']
+	CAMGIRLCHANID = msg['uid'] + 100000000
+	camgirlinfo=msg['m']
+	flags  = camgirlinfo['flags']
+	u_info=msg['u']
+
+	try:
+		CAMGIRLSERVER = u_info['camserv']
+		printDBG ("Video Server : %d Channel Id : %d  Model id : %d " %(CAMGIRLSERVER, CAMGIRLCHANID, CAMGIRLUID))
+		SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#		with open('/tmp/title', 'w') as titleFile:  
+#			titleFile.write(str(CAMGIRLSERVER))
+#		if CAMGIRLSERVER >= 3000:
+#			SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#			CAMGIRLSERVER = 0
+#			return []
+#			CAMGIRLSERVER = CAMGIRLSERVER - 1000
+#		elif CAMGIRLSERVER >= 1500:
+#			SetIPTVPlayerLastHostError(str(CAMGIRLSERVER))
+#			CAMGIRLSERVER = 0
+#			return []
+#			CAMGIRLSERVER = CAMGIRLSERVER - 800
+#		elif CAMGIRLSERVER >= 800:
+#			CAMGIRLSERVER = CAMGIRLSERVER - 500
+		if vs != 0:
+			CAMGIRLSERVER = 0
+	except KeyError:
+		CAMGIRLSERVER=0
+
+	truepvt = ((flags & 8) == 8)
+
+	buf=usr+" =>"
+	try:
+		if truepvt == 1:
+			buf+=" (TRUEPVT)"
+		else:
+			buf+=" ("+vs_str[vs]+")"
+	except KeyError:
+		pass
+	printDBG ("%s  Video Server : %d Channel Id : %d  Model id : %d " %(buf, CAMGIRLSERVER, CAMGIRLCHANID, CAMGIRLUID))
+
+def myfreecam_start(url):
+	global CAMGIRL
+	global CAMGIRLSERVER
+	global CAMGIRLUID
+	global CAMGIRLCHANID
+	CAMGIRL= url
+	CAMGIRLSERVER = 0
+	libsPath = GetPluginDir('libs/')
+	import sys
+	sys.path.insert(1, libsPath)
+	import websocket
+	printDBG("Connecting to Chat Server...")
+	try:
+		xchat = [ 62, 63, 64, 65, 66, 67, 68, 69,
+				70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
+				80, 81, 83 ,84, 85, 86, 87, 88, 89,
+				91, 94, 95, 96, 97, 98, 99,
+				100, 101, 102, 103, 104, 105, 106, 108, 109,
+				111, 112, 113, 114, 115, 116, 118, 119,
+				120, 121, 122, 123, 124, 125, 126, 127
+				]
+		host = "ws://xchat"+str(random.choice(xchat))+".myfreecams.com:8080/fcsl"
+		printDBG("Chat Server..."+host)
+		ws = websocket.create_connection(host)
+		ws.send("hello fcserver\n\0")
+		ws.send("1 0 0 20071025 0 guest:guest\n\0")
+	except:
+		printDBG ("We're fucked ...")
+		return ''
+	rembuf=""
+	quitting = 0
+	try:
+		while quitting == 0:
+			sock_buf =  ws.recv()
+			sock_buf=rembuf+sock_buf
+			rembuf=""
+			while True:
+				hdr=re.search (r"(\w+) (\w+) (\w+) (\w+) (\w+)", sock_buf)
+				if bool(hdr) == 0:
+					break
+				fc = hdr.group(1)
+				mlen   = int(fc[0:4])
+				fc_type = int(fc[4:])
+				msg=sock_buf[4:4+mlen]
+				if len(msg) < mlen:
+					rembuf=''.join(sock_buf)
+					break
+				msg=urllib.unquote(msg)
+				if fc_type == 1:
+					ws.send("10 0 0 20 0 %s\n\0" % CAMGIRL)
+				elif fc_type == 10:
+					read_model_data(msg)
+					quitting=1
+				sock_buf=sock_buf[4+mlen:]
+				if len(sock_buf) == 0:
+					break
+	except:
+		printDBG ("WebSocket Error")
+		return ''
+	ws.close()
+	if CAMGIRLSERVER != 0:
+		#Url="http://video"+str(CAMGIRLSERVER)+".myfreecams.com:1935/NxServer/ngrp:mfc_"+str(CAMGIRLCHANID)+".f4v_mobile/playlist.m3u8" #+'?nc='+str(int(time_time()*1000))  #+str(datetime.now()) #str(time_time()).encode('utf-8')
+		#Url="http://video"+str(CAMGIRLSERVER)+".myfreecams.com:1935/NxServer/mfc_"+str(CAMGIRLCHANID)+".f4v_aac/playlist.m3u8" #320x240
+		Url="https://video"+str(CAMGIRLSERVER)+".myfreecams.com/NxServer/ngrp:mfc_"+str(CAMGIRLCHANID)+".f4v_mobile/playlist.m3u8?nc=0.5863279394620062" #+str(random.random())
+		printDBG("Camgirl - "+CAMGIRL)
+		printDBG("Url  - "+Url)
+		return Url
+	else:
+		printDBG ("No video server ... _|_ ")
+		return ''
+
+# decrypt function/0/
+def decryptHash(videoUrl, licenseCode, hashRange):
+    result = ''
+    videoUrlPart = videoUrl.split('/')
+    hash = videoUrlPart[7][:2*int(hashRange)]
+    nonConvertHash = videoUrlPart[7][2*int(hashRange):]
+    seed = calcSeed(licenseCode, hashRange)
+    if (seed != '' and hash !=''):
+        for k in range(len(hash)-1, -1, -1):
+            l = k
+            for m in range(k,len(hash)):
+                l += int(seed[m])
+            l = l % len(hash)
+            n = ''
+            for o in range(0, len(hash)):
+                n = n + hash[l] if o == k else n + hash[k] if o == l else n + hash[o]
+            hash = n
+        videoUrlPart[7] = hash + nonConvertHash
+        videoUrlPart.pop(0)
+        videoUrlPart.pop(0)        
+        result = '/'.join(videoUrlPart)   
+    return result        
+
+
+def calcSeed(licenseCode, hashRange):
+    f = licenseCode.replace('$', '').replace('0', '1')
+    j = int(len(f) / 2)
+    k = int(f[:len(f)-j])
+    l = int(f[j:])
+    g = abs(l - k)
+    fi = 4*g
+    i = int(int(hashRange) / 2 + 2)
+    m = ''
+    for g2 in range (0,j+1):
+        for h in range (1,5):
+            n =  int(licenseCode[g2 + h]) + int(str(fi)[g2])
+            if n>=i:
+                n -= i	
+            m = m + str(n)
+    return m 
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/hosts/hostyoutube.py pc/IPTVPlayer/hosts/hostyoutube.py
--- o/IPTVPlayer/hosts/hostyoutube.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/hosts/hostyoutube.py	2020-05-12 00:07:45.105290928 +0300
@@ -23,7 +23,7 @@
 ###################################################
 # Config options for HOST
 ###################################################
-config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default = "/hdd/")
+config.plugins.iptvplayer.Sciezkaurllist = ConfigDirectory(default = "/media/hdd/")
 
 def GetConfigList():
     optionList = []
diff -ruN o/IPTVPlayer/hosts/list.txt pc/IPTVPlayer/hosts/list.txt
--- o/IPTVPlayer/hosts/list.txt	2020-04-08 14:57:49.893599918 +0300
+++ pc/IPTVPlayer/hosts/list.txt	2020-05-12 00:07:45.106290928 +0300
@@ -4,10 +4,13 @@
 host3sktv
 host7tvde
 host9anime
+hostXXX
 hostakoam
 hostallboxtv
 hostalltubetv
 hostaltadefinizione
+hostaltadefinizionecool
+hostaltadefinizione1
 hostaltadefinizione01
 hostandrijaiandjelka
 hostanimeodcinki
@@ -20,6 +23,8 @@
 hostbbcsport
 hostbsto
 hostcartoonhd
+hostcb01
+hostcb01uno
 hostcdafilmy
 hostcdapl
 hostchomikuj
@@ -41,6 +46,7 @@
 hostdokumentalnenet
 hostdpstreamingcx
 hostdrdk
+hostdsda
 hostefilmytv
 hostegybest
 hostekinomaniak
@@ -52,6 +58,7 @@
 hostfavourites
 hostfenixsite
 hostfightvideo
+hostfilisertv
 hostfilma24hdcom
 hostfilma24io
 hostfilmaoncom
@@ -61,11 +68,15 @@
 hostfilmezz
 hostfilmixco
 hostfilmovizijastudio
+hostfilmowood
 hostfilmpalast
 hostfilmpertutti
 hostfilmstreamhdit
 hostfilmstreamvkcom
+hostfilmydokumentalneeu
+hostfokustv
 hostforjatn
+hostfrancetv
 hostfreediscpl
 hostfullmatchtvcom
 hostgamatocom
@@ -92,6 +103,7 @@
 hostkabarety
 hostkijknl
 hostkinogo
+hostkinomanco
 hostkinotan
 hostkinox
 hostkissanimeto
@@ -99,10 +111,12 @@
 hostkkiste
 hostkreskoweczki
 hostkreskowkazone
+hostla7it
 hostlaola1tv
 hostlibrestream
 hostliveleak
 hostlocalmedia
+hostlookmovieag
 hostlosmovies
 hostluxveritatis
 hostmaxtvgo
@@ -120,6 +134,7 @@
 hostmusicmp3ru
 hostmyfreemp3
 hostmythewatchseries
+hostnaszekinotv
 hostngolos
 hostninateka
 hostnuteczki
@@ -131,6 +146,7 @@
 hostotakufr
 hostourmatchnet
 hostpinkbike
+hostpmgsport
 hostplanetstreamingcom
 hostplaypuls
 hostplayrtsiw
@@ -155,6 +171,7 @@
 hostsovdub
 hostspiegeltv
 hostsportdeutschland
+hostsportitalia
 hostspryciarze
 hoststreamcomplet
 hoststreaminghdfun
@@ -167,6 +184,7 @@
 hosttfarjocom
 hostthewatchseriesto
 hosttreetv
+hostturcjatv
 hosttvgrypl
 hosttvjworg
 hosttvn24
diff -ruN o/IPTVPlayer/iptvdm/iptvdh.py pc/IPTVPlayer/iptvdm/iptvdh.py
--- o/IPTVPlayer/iptvdm/iptvdh.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/iptvdm/iptvdh.py	2020-05-12 00:07:45.106290928 +0300
@@ -101,7 +101,7 @@
         
     @staticmethod
     def GET_FFMPEG_PATH():
-        altFFMPEGPath = '/iptvplayer_rootfs/usr/bin/ffmpeg'
+        altFFMPEGPath = '/bin/ffmpeg'
         if IsExecutable(altFFMPEGPath):
             return altFFMPEGPath
         return "ffmpeg"
diff -ruN o/IPTVPlayer/iptvupdate/custom/xxx.sh pc/IPTVPlayer/iptvupdate/custom/xxx.sh
--- o/IPTVPlayer/iptvupdate/custom/xxx.sh	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/iptvupdate/custom/xxx.sh	2020-02-18 23:35:14.816359101 +0300
@@ -0,0 +1,40 @@
+#!/bin/sh
+cp $1/iptvupdate/custom/xxx.sh $2/iptvupdate/custom/xxx.sh
+status=$?
+if [ $status -ne 0 ]; then
+	echo "Błąd krytyczny. Plik $0 nie może zostać skopiowany, error[$status]."
+	exit 1
+fi
+cp $1/hosts/hostXXX.py $2/hosts/
+cp $1/icons/logos/XXXlogo.png $2/icons/logos/
+cp $1/icons/PlayerSelector/XXX*.png $2/icons/PlayerSelector/ 
+status=$?
+if [ $status -ne 0 ]; then
+	echo "Uwaga, Nie udało się skopiować XXX, error[$status]."
+else
+	echo "Kopiowanie XXX OK"
+fi
+if [ -x /usr/bin/fullwget ] ; then
+	/usr/bin/fullwget --no-check-certificate https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/master/archive.tar.gz -q -O /tmp/iptv-host-xxx.tar.gz
+else
+	wget --no-check-certificate https://gitlab.com/iptv-host-xxx/iptv-host-xxx/repository/master/archive.tar.gz -q -O /tmp/iptv-host-xxx.tar.gz
+fi
+	if [ -s /tmp/iptv-host-xxx.tar.gz ] ; then
+		tar -xzf /tmp/iptv-host-xxx.tar.gz -C /tmp 
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/icons/PlayerSelector/* $2/icons/PlayerSelector/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/icons/logos/* $2/icons/logos/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/iptvupdate/custom/* $2/iptvupdate/custom/
+		cp -r -f /tmp/iptv-host-xxx-master*/IPTVPlayer/hosts/* $2/hosts/
+		rm -r -f /tmp/iptv-host-xxx*
+		if [ -e $2/icons/PlayerSelector/XXX100 ] ; then
+			mv $2/icons/PlayerSelector/XXX100 $2/icons/PlayerSelector/XXX100.png
+			mv $2/icons/PlayerSelector/XXX120 $2/icons/PlayerSelector/XXX120.png
+			mv $2/icons/PlayerSelector/XXX135 $2/icons/PlayerSelector/XXX135.png
+			echo "Rename file png OK"
+		fi
+		echo "Download XXX tar.gz OK"
+	else
+		echo "Uwaga, Nie udał się Download XXX tar.gz"
+	fi
+echo "Wykonywanie $0 zakończone sukcesem."
+exit 0
diff -ruN o/IPTVPlayer/iptvupdate/serwerslist.json pc/IPTVPlayer/iptvupdate/serwerslist.json
--- o/IPTVPlayer/iptvupdate/serwerslist.json	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/iptvupdate/serwerslist.json	2020-05-12 00:07:45.106290928 +0300
@@ -0,0 +1,6 @@
+{
+    "icons_hash": "1541442800", 
+    "graphics_hash": "1541442802", 
+    "servers": [
+    ]
+}
\ В конце файла нет новой строки
diff -ruN o/IPTVPlayer/iptvupdate/updatemainwindow.py pc/IPTVPlayer/iptvupdate/updatemainwindow.py
--- o/IPTVPlayer/iptvupdate/updatemainwindow.py	2020-04-04 11:58:01.575054674 +0300
+++ pc/IPTVPlayer/iptvupdate/updatemainwindow.py	2020-05-12 00:07:45.106290928 +0300
@@ -295,7 +295,7 @@
         if os_path.isfile(newVerFile):
             verPattern = self.VERSION_PATTERN
         else:
-            newVerFile = os_path.join(newVerPath, 'version.pyo')
+            newVerFile = os_path.join(newVerPath, 'version.pyc')
             verPattern = '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)'
 
         try:
diff -ruN o/IPTVPlayer/libs/wiziwig1.py pc/IPTVPlayer/libs/wiziwig1.py
--- o/IPTVPlayer/libs/wiziwig1.py	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/libs/wiziwig1.py	2020-05-12 00:07:45.106290928 +0300
@@ -0,0 +1,110 @@
+﻿# -*- coding: utf-8 -*-
+
+###################################################
+# LOCAL import
+###################################################
+from Plugins.Extensions.IPTVPlayer.tools.iptvtools import printDBG, printExc, MergeDicts
+from Plugins.Extensions.IPTVPlayer.tools.iptvtypes import strwithmeta
+from Plugins.Extensions.IPTVPlayer.components.ihost import CBaseHostClass
+from Plugins.Extensions.IPTVPlayer.libs import ph
+###################################################
+
+import re, datetime, time
+
+class Wiziwig1Api(CBaseHostClass):
+
+    def __init__(self):
+        CBaseHostClass.__init__(self)
+        self.MAIN_URL = 'http://wiziwig1.com/'
+        self.DEFAULT_ICON_URL = 'http://i.imgur.com/yBX7fZA.jpg'
+        self.HTTP_HEADER = MergeDicts(self.cm.getDefaultHeader(browser='chrome'), {'Referer':self.getMainUrl()})
+        self.http_params = {'header':self.HTTP_HEADER}
+        self.getLinkJS = ''
+
+    def getPage(self, baseUrl, addParams = {}, post_data = None):
+        if addParams == {}: addParams = dict(self.http_params)
+        origBaseUrl = baseUrl
+        baseUrl = self.cm.iriToUri(baseUrl)
+        return self.cm.getPage(baseUrl, addParams, post_data)
+
+    def getList(self, cItem):
+        printDBG("Wiziwig1Api.getChannelsList")
+
+        channelsTab = []
+        sts, data = self.getPage(self.getFullUrl('/livesports'), self.http_params)
+        if not sts: 
+            return []
+        #self.setMainUrl(self.cm.meta['url'])
+        #self.http_params['header']['Referer'] = self.cm.meta['url']
+
+        items = re.findall("(<tr>\n<td class='icon'.*?</tr>)", data, re.S)
+
+        for item in items:
+            urls=[]
+            n_link = 0
+            anchors = re.findall("href=['\"](.*?)['\"]", item, re.S)
+            if anchors:
+                for a in anchors:
+                    if a.startswith("http"):
+                        n_link = n_link + 1
+                        name = "Link %s " % n_link
+                        urls.append({"name" : name, "url" : a})
+
+            if urls: 
+                title = re.findall("<h4>(.*?)</h4>", item)
+                if title:
+                    title = ph.clean_html(title[0])
+
+                    cat= re.findall("<td class='category'>(.*?)</td>", item)
+                    if cat:
+                        cat = ph.clean_html(cat[0])
+                        title = cat + ' - ' + title
+                    
+                    time = re.findall("<td class='time'>(.*?)</td>", item)
+                    if time:
+                        time = time[0]
+                        title = time + " - " + title
+                    
+                    icon = re.findall("src='(.*?)'",item)
+                    if icon:
+                        icon = self.getFullUrl(icon[0])
+                    else:
+                        icon = ''
+                        
+                    params = MergeDicts(cItem, {'type':'video', 'title':title, 'url_list': urls, 'icon': icon})
+                    printDBG(str(params))
+                    channelsTab.append(params)
+
+        return channelsTab
+
+    def getVideoLink(self, cItem):
+        printDBG("Wiziwig1Api.getVideoLink")
+        urlsTab = []
+
+        for u in cItem.get("url_list",[]):
+
+            sts, data = self.getPage(u['url'], self.http_params)
+            if not sts: 
+                continue
+            
+            iframes = re.findall("<iframe width='650' height='500' src='(.*?)'", data, re.S)
+            
+            if iframes:
+                url = self.getFullUrl(iframes[0])
+                name = u["name"] + " - " + self.up.getDomain(url, onlyDomain=True)
+                if self.up.checkHostSupport(url): 
+                    if len(name) > 18:
+                        name = name[:18]+ "..."
+                    uuu = self.up.getVideoLinkExt(url)
+                    printDBG("getVideoLinkExt %s " % str(uuu))
+                    urlsTab2 = [] 
+                    for u2 in uuu:
+                        printDBG(str(u2))
+                        u2['name']= name + ' '+ u2.get('name','')
+                        urlsTab2.append(u2)
+                        
+                    urlsTab.extend(urlsTab2)
+                else:
+                    urlsTab.append({"name": name + " (not in urlparser)", "url" : url})
+        return urlsTab
+    
diff -ruN o/IPTVPlayer/locale/IPTVPlayer.pot pc/IPTVPlayer/locale/IPTVPlayer.pot
--- o/IPTVPlayer/locale/IPTVPlayer.pot	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/locale/IPTVPlayer.pot	2020-05-12 00:07:45.108290928 +0300
@@ -0,0 +1,6853 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+#, fuzzy
+msgid ""
+msgstr ""
+"Project-Id-Version: PACKAGE VERSION\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2019-08-27 14:37+0200\n"
+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
+"Language-Team: LANGUAGE <LL@li.org>\n"
+"Language: \n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+
+#: ../components/iptvdirbrowser.py:74 ../components/iptvdirbrowser.py:299
+#: ../components/configbase.py:84 ../components/e2isimpledownloader.py:62
+#: ../components/iptvmultipleinputbox.py:102
+#: ../components/iptvsubdownloader.py:103
+#: ../components/iptvsubsimpledownloader.py:70
+#: ../components/recaptcha_v2myjd_widget.py:63
+#: ../components/VirtualKeyBoard.py:101 ../Web/webParts.py:82
+msgid "Cancel"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:76
+msgid "New dir"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:77 ../components/e2isimpledownloader.py:63
+#: ../components/iptvsubsimpledownloader.py:72
+msgid "Apply"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:78 ../components/iptvdirbrowser.py:300
+#: ../components/configbase.py:83 ../components/iptvfavouriteswidgets.py:45
+#: ../iptvdm/iptvdmui.py:420 ../iptvupdate/updatemainwindow.py:66
+#: ../iptvupdate/updatemainwindow.py:202 ../iptvupdate/updatemainwindow.py:204
+#: ../setup/iptvsetupwidget.py:46 ../setup/iptvsetupwidget.py:47
+msgid " "
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:263
+msgid "Enter name"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:270
+msgid "Exception occurs"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:272
+msgid "Invalid name."
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "black"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "silver"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "gray"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "white"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "maroon"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "red"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "purple"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "fuchsia"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "green"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "lime"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "olive"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "yellow"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "navy"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "blue"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "teal"
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "aqua"
+msgstr ""
+
+#: ../components/configbase.py:80 ../components/configbase.py:129
+#: ../components/iptvconfigmenu.py:302
+msgid "E2iPlayer - settings"
+msgstr ""
+
+#: ../components/configbase.py:82 ../components/iptvmultipleinputbox.py:35
+#: ../components/iptvmultipleinputbox.py:100 ../Web/webTools.py:54
+msgid "Save"
+msgstr ""
+
+#: ../components/configbase.py:196 ../components/iptvfavouriteswidgets.py:273
+msgid "Save changes?"
+msgstr ""
+
+#: ../components/configbase.py:267
+msgid "Select the file"
+msgstr ""
+
+#: ../components/configbase.py:273
+msgid "Select the directory"
+msgstr ""
+
+#: ../components/configbase.py:283
+msgid "Enter a value"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:26 ../components/iptvconfigmenu.py:84
+#: ../components/iptvconfigmenu.py:87 ../hosts/hostmovie4kto.py:34
+#: ../hosts/hostthewatchseriesto.py:39 ../libs/youtubeparser.py:30
+msgid "Auto"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:26 ../hosts/hostkinomanco.py:157
+#: ../libs/youtubeparser.py:30 ../subproviders/subprov_subscenecom.py:255
+#: ../Web/webParts.py:171 ../Web/webParts.py:174 ../Web/webThreads.py:160
+#: ../Web/webThreads.py:163
+msgid "Yes"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:26 ../hosts/hostkinomanco.py:157
+#: ../libs/youtubeparser.py:30 ../subproviders/subprov_subscenecom.py:256
+#: ../Web/webParts.py:172 ../Web/webParts.py:175 ../Web/webThreads.py:161
+#: ../Web/webThreads.py:164
+msgid "No"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:44
+#: ../components/configextmovieplayer.py:45
+#: ../components/configextmovieplayer.py:51
+#: ../components/configextmovieplayer.py:52
+#: ../components/configextmovieplayer.py:53
+msgid "from E2 settings"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:48
+msgid "second"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:48
+#: ../components/configextmovieplayer.py:49
+#: ../components/configextmovieplayer.py:50
+msgid "seconds"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Transparent"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Black"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Darkgray"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Lightgray"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:74
+msgid "bottom"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:74
+msgid "center"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:74
+msgid "top"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:77 ../components/iptvconfigmenu.py:87
+#: ../components/iptvextmovieplayer.py:781 ../hosts/host123movieshd.py:24
+#: ../hosts/hostakoam.py:25 ../hosts/hostbsto.py:32
+#: ../hosts/hostcimaclubcom.py:23 ../hosts/hostfilmeonlineto.py:26
+#: ../hosts/hostfilmstreamvkcom.py:25 ../hosts/hostddl.py:25
+#: ../hosts/hostlocalmedia.py:38 ../hosts/hosthdsto.py:32
+#: ../hosts/hosthdstreams.py:31 ../hosts/hosticefilmsinfo.py:26
+#: ../hosts/hostkinox.py:26 ../hosts/hostkissanimeto.py:31
+#: ../hosts/hostkkiste.py:25 ../hosts/hostlosmovies.py:27
+#: ../hosts/hostmrpiracy.py:42 ../hosts/hostplanetstreamingcom.py:21
+#: ../hosts/hostputlockertvto.py:29 ../hosts/hostseriesonline.py:25
+#: ../hosts/hostskstream.py:25 ../hosts/hostsolarmovie.py:27
+#: ../hosts/hostyesmoviesto.py:27 ../hosts/hostyifytv.py:30
+#: ../hosts/hostzalukajcom.py:35
+msgid "None"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:77
+msgid "24 hour format "
+msgstr ""
+
+#: ../components/configextmovieplayer.py:77
+msgid "12 hour format "
+msgstr ""
+
+#: ../components/configextmovieplayer.py:84
+#: ../components/configextmovieplayer.py:96
+#: ../components/configextmovieplayer.py:108
+#: ../components/configextmovieplayer.py:120
+#: ../components/configextmovieplayer.py:132
+msgid "From E2 settings"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:238
+#: ../components/configextmovieplayer.py:274
+msgid "Configuring an external movie player"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:268
+msgid "Some changes will be applied only after movie player restart."
+msgstr ""
+
+#: ../components/configextmovieplayer.py:296
+msgid "Remember last watched position"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:298
+msgid "Info bar clock format"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:299
+msgid "Create LCD/VFD summary screen"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:301
+msgid "----------------- External exteplayer3 options -----------------"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:302
+msgid "RAM buffer size [MB] for network protocols"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:303
+msgid "RAM buffer size [MB] for local files"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:304
+#: ../components/configextmovieplayer.py:305
+#: ../components/configextmovieplayer.py:306
+#: ../components/configextmovieplayer.py:308
+#: ../components/configextmovieplayer.py:309
+#: ../components/configextmovieplayer.py:310
+#, python-format
+msgid "Use software decoder for the %s"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:312
+msgid "Software decoding as"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:313
+msgid "Stereo downmix mode for software decoder"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:315
+msgid "AC3 downmix mode"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:317
+msgid "AAC downmix mode"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:319
+msgid "Info bar timeout"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:322
+msgid "Default video aspect ratio"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:324
+msgid "Default video policy for 16:9"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:326
+msgid "Default video policy for 4:3"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:328
+msgid "Automatically turn on external subtitles"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:329
+msgid "Subtitle line wrapping"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:330
+msgid "Subtitle font"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:331
+msgid "Subtitle font size"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:333
+#: ../components/configextmovieplayer.py:336
+msgid "Subtitle line height"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:334
+msgid "Line Spacing"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:338
+msgid "Subtitle font color"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:339
+msgid "Subtitle background"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:341
+msgid "Subtitle box position"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:344
+msgid "Subtitle box height"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:345
+msgid "Subtitle vertical alignment"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:348
+msgid "Subtitle border enabled"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:350
+msgid "Subtitle border color"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:351
+msgid "Subtitle border width"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:353
+msgid "Subtitle shadow enabled"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:355
+msgid "Subtitle shadow color"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:356
+msgid "Subtitle shadow X offset"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:357
+msgid "Subtitle shadow Y offset"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:359
+msgid "Inject black iframe at video playback finish"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:360
+msgid "Show iframe during audio playback"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:362
+msgid "Radio iframe file"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:364
+msgid "Black iframe file"
+msgstr ""
+
+#: ../components/configgroups.py:36
+msgid "E2iPlayer enable/disabled groups"
+msgstr ""
+
+#: ../components/confighost.py:32
+#, python-format
+msgid "Configuration [%s] service"
+msgstr ""
+
+#: ../components/confighost.py:44
+#, python-format
+msgid "[%s] - configuration"
+msgstr ""
+
+#: ../components/confighost.py:67 ../components/iptvconfigmenu.py:350
+msgid "Services configuration"
+msgstr ""
+
+#: ../components/confighost.py:82
+#, python-format
+msgid "%s services configuration"
+msgstr ""
+
+#: ../components/confighost.py:109 ../components/iptvmultipleinputbox.py:101
+#: ../components/VirtualKeyBoard.py:100
+msgid "OK"
+msgstr ""
+
+#: ../components/confighost.py:144
+#, python-format
+msgid "Service [%s] has no additional settings."
+msgstr ""
+
+#: ../components/confighost.py:151 ../components/playerselector.py:472
+msgid "Enable reordering mode"
+msgstr ""
+
+#: ../components/confighost.py:153 ../components/playerselector.py:474
+msgid "Disable reordering mode"
+msgstr ""
+
+#: ../components/confighost.py:154 ../components/iptvchoicebox.py:51
+#: ../components/iptvchoicebox.py:68 ../components/iptvplayerwidget.py:612
+#: ../components/playerselector.py:490
+msgid "Select option"
+msgstr ""
+
+#: ../components/confighost.py:214
+msgid ""
+"Using this host in your country can be illegal.\n"
+"Do you want to continue at your own risk?"
+msgstr ""
+
+#: ../components/e2isimpledownloader.py:42
+msgid "Single file downloader"
+msgstr ""
+
+#: ../components/e2isimpledownloader.py:93
+#, python-format
+msgid ""
+"Downloading file:\n"
+"%r."
+msgstr ""
+
+#: ../components/e2isimpledownloader.py:99
+#, python-format
+msgid ""
+"Download can not be started.\n"
+"Incorrect address \"%r\"."
+msgstr ""
+
+#: ../components/e2isimpledownloader.py:108
+#, python-format
+msgid ""
+"Download can not be started.\n"
+"Downloader %s not working correctly.\n"
+"Last error \"%s (%s)\"."
+msgstr ""
+
+#: ../components/e2isimpledownloader.py:113
+#, python-format
+msgid ""
+"Download failed.\n"
+"Last error \"%s (%s)\"."
+msgstr ""
+
+#: ../components/e2ivk.py:310
+msgid "Enter the text"
+msgstr ""
+
+#: ../components/e2ivk.py:352 ../components/VirtualKeyBoard.py:147
+msgid "Virtual Keyboard"
+msgstr ""
+
+#: ../components/e2ivk.py:423
+msgid "Clear"
+msgstr ""
+
+#: ../components/e2ivk.py:617
+#, python-format
+msgid "Locale ID mismatched! %s <> %s"
+msgstr ""
+
+#: ../components/e2ivk.py:622 ../components/e2ivk.py:625
+#, python-format
+msgid "Load of the Virtual Keyboard layout \"%s\" failed due to the following error: \"%s\""
+msgstr ""
+
+#: ../components/e2ivk.py:628
+#, python-format
+msgid "\"%s\" Virtual Keyboard layout not available."
+msgstr ""
+
+#: ../components/e2ivk.py:634
+#, python-format
+msgid "Do you want to download \"%s\" Virtual Keyboard layout now?"
+msgstr ""
+
+#: ../components/e2ivk.py:636
+#, python-format
+msgid "Do you want to try to re-download \"%s\" Virtual Keyboard layout?"
+msgstr ""
+
+#: ../components/e2ivk.py:716 ../hosts/host123movieshd.py:126
+#: ../hosts/host3player.py:60 ../hosts/host3sktv.py:78 ../hosts/host7tvde.py:56
+#: ../hosts/host9anime.py:51 ../hosts/hostakoam.py:112
+#: ../hosts/hostallboxtv.py:74 ../hosts/hostalltubetv.py:33
+#: ../hosts/hostaltadefinizione.py:68 ../hosts/hostaltadefinizione01.py:99
+#: ../hosts/hostaltadefinizione1.py:101 ../hosts/hostaltadefinizionecool.py:61
+#: ../hosts/hostandrijaiandjelka.py:82 ../hosts/hostanimeodcinki.py:46
+#: ../hosts/hostappletrailers.py:45 ../hosts/hostarconaitvme.py:55
+#: ../hosts/hostardmediathek.py:65 ../hosts/hostartetv.py:62
+#: ../hosts/hostbbciplayer.py:59 ../hosts/hostbsto.py:83
+#: ../hosts/hostcartoonhd.py:82 ../hosts/hostcdapl.py:67
+#: ../hosts/hostchristusvincit.py:303 ../hosts/hostcimaclubcom.py:51
+#: ../hosts/hostcineblog.py:84 ../hosts/hostcinemaxx.py:141
+#: ../hosts/hostcinemay.py:49 ../hosts/hostcineto.py:43
+#: ../hosts/hostclassiccinemaonline.py:42 ../hosts/hostcrtankocom.py:33
+#: ../hosts/hostdailymotion.py:48 ../hosts/hostdancetrippin.py:41
+#: ../hosts/hostdardarkomcom.py:36 ../hosts/hostdarshowcom.py:36
+#: ../hosts/hostdixmax.py:125 ../hosts/hostdokumentalnenet.py:48
+#: ../hosts/hostdpstreamingcx.py:38 ../hosts/hostefilmytv.py:86
+#: ../hosts/hostegybest.py:67 ../hosts/hostekinotv.py:69
+#: ../hosts/hosteurosportplayer.py:97 ../hosts/hostfaselhdcom.py:41
+#: ../hosts/hostfenixsite.py:62 ../hosts/hostfilma24hdcom.py:34
+#: ../hosts/hostfilma24io.py:79 ../hosts/hostfilmaoncom.py:82
+#: ../hosts/hostfilmativa.py:34 ../hosts/hostfilmehdnet.py:51
+#: ../hosts/hostfilmeonlineto.py:113 ../hosts/hostfilmezz.py:73
+#: ../hosts/hostfilmixco.py:130 ../hosts/hostfilmovizijastudio.py:52
+#: ../hosts/hostfilmpalast.py:47 ../hosts/hostfilmpertutti.py:43
+#: ../hosts/hostfilmstreamhdit.py:37 ../hosts/hostfilmstreamvkcom.py:102
+#: ../hosts/hostfilmydokumentalneeu.py:34 ../hosts/hostforjatn.py:44
+#: ../hosts/hostbajeczkiorg.py:46 ../hosts/hostddl.py:141
+#: ../hosts/hostfilisertv.py:54 ../hosts/hostfreediscpl.py:58
+#: ../hosts/hostnaszekinotv.py:104 ../hosts/hostgamatocom.py:39
+#: ../hosts/hostgamatotvme.py:42 ../hosts/hostgledalica.py:70
+#: ../hosts/hostgreekdocumentaries3.py:38 ../hosts/hostguardaserie.py:78
+#: ../hosts/hosthd1080online.py:62 ../hosts/hosthdfilmetv.py:40
+#: ../hosts/hosthdfull.py:156 ../hosts/hosthdkinomir.py:42
+#: ../hosts/hosthdpopcornscom.py:40 ../hosts/hosthdsto.py:148
+#: ../hosts/hosthdstreams.py:74 ../hosts/hosthitboxtv.py:45
+#: ../hosts/hosthoofootcom.py:33 ../hosts/hosticefilmsinfo.py:76
+#: ../hosts/hostinteriatv.py:55 ../hosts/hostkabarety.py:43
+#: ../hosts/hostkijknl.py:56 ../hosts/hostkinogo.py:91
+#: ../hosts/hostkinomanco.py:77 ../hosts/hostkinotan.py:44
+#: ../hosts/hostkinox.py:95 ../hosts/hostkissanimeto.py:62
+#: ../hosts/hostkisscartoonme.py:47 ../hosts/hostkkiste.py:148
+#: ../hosts/hostkreskoweczki.py:44 ../hosts/hostkreskowkazone.py:63
+#: ../hosts/hostlaola1tv.py:55 ../hosts/hostlibrestream.py:35
+#: ../hosts/hostliveleak.py:48 ../hosts/hostlookmovieag.py:57
+#: ../hosts/hostlosmovies.py:61 ../hosts/hostluxveritatis.py:55
+#: ../hosts/hostmaxtvgo.py:61 ../hosts/hostmooviecc.py:51
+#: ../hosts/hostmovie4kto.py:70 ../hosts/hostmovienightws.py:33
+#: ../hosts/hostmovierulzsx.py:40 ../hosts/hostmovizlandcom.py:34
+#: ../hosts/hostmovs4ucom.py:45 ../hosts/hostmozicsillag.py:47
+#: ../hosts/hostmrpiracy.py:118 ../hosts/hostmusicmp3ru.py:81
+#: ../hosts/hostmyfreemp3.py:39 ../hosts/hostmythewatchseries.py:71
+#: ../hosts/hostninateka.py:55 ../hosts/hostnuteczki.py:95
+#: ../hosts/hostofficialfilmillimite.py:77 ../hosts/hostoipeirates.py:80
+#: ../hosts/hostokgoals.py:40 ../hosts/hostororotv.py:43
+#: ../hosts/hostorthobulletscom.py:71 ../hosts/hostotakufr.py:62
+#: ../hosts/hostourmatchnet.py:41 ../hosts/hostpinkbike.py:44
+#: ../hosts/hostplanetstreamingcom.py:108 ../hosts/hostplaypuls.py:68
+#: ../hosts/hostplayrtsiw.py:92 ../hosts/hostplusdede.py:72
+#: ../hosts/hostputlockertvto.py:137 ../hosts/hostredbull.py:56
+#: ../hosts/hostrtbfbe.py:97 ../hosts/hostrteieplayer.py:50
+#: ../hosts/hostrtlmost.py:168 ../hosts/hostserialeco.py:41
+#: ../hosts/hostserialnet.py:40 ../hosts/hostserienstreamto.py:77
+#: ../hosts/hostseriesonline.py:138 ../hosts/hostserijeonline.py:58
+#: ../hosts/hostshahiidanimenet.py:46 ../hosts/hostshoutcast.py:46
+#: ../hosts/hostskstream.py:117 ../hosts/hostsolarmovie.py:121
+#: ../hosts/hostsovdub.py:34 ../hosts/hostspiegeltv.py:75
+#: ../hosts/hostsportdeutschland.py:57 ../hosts/hoststreamcomplet.py:32
+#: ../hosts/hoststreaminghdfun.py:60 ../hosts/hoststreamliveto.py:51
+#: ../hosts/hostsvtplayse.py:85 ../hosts/hostszenestreamz.py:43
+#: ../hosts/hosttainieskaiseirestv.py:52 ../hosts/hosttantifilmorg.py:40
+#: ../hosts/hostted.py:78 ../hosts/hosttfarjocom.py:72
+#: ../hosts/hostthewatchseriesto.py:69 ../hosts/hosttreetv.py:73
+#: ../hosts/hostturcjatv.py:79 ../hosts/hosttvgrypl.py:57
+#: ../hosts/hosttvproart.py:34 ../hosts/hosttvpvod.py:94
+#: ../hosts/hosttwitchtv.py:137 ../hosts/hostuktvplay.py:69
+#: ../hosts/hostustreamtv.py:32 ../hosts/hostvevo.py:97
+#: ../hosts/hostvidcorncom.py:86 ../hosts/hostvideopenny.py:97
+#: ../hosts/hostvimeo.py:67 ../hosts/hostvodpl.py:64
+#: ../hosts/hostvumedicom.py:80 ../hosts/hostwatchcartoononline.py:107
+#: ../hosts/hostwatchwrestlinguno.py:45 ../hosts/hostwgrane.py:67
+#: ../hosts/hostwolnelekturypl.py:73 ../hosts/hostworldfree4u.py:45
+#: ../hosts/hostwpolscepl.py:40 ../hosts/hostwptv.py:55
+#: ../hosts/hostxrysoise.py:53 ../hosts/hostyesmoviesto.py:106
+#: ../hosts/hostyifytv.py:69 ../hosts/hostyoutube.py:55
+#: ../hosts/hostzalukajcom.py:67 ../hosts/hostzdfmediathek.py:87
+msgid "Search history"
+msgstr ""
+
+#: ../components/e2ivk.py:746
+msgid "Select language"
+msgstr ""
+
+#: ../components/e2ivksuggestion.py:95
+msgid "Error occurs"
+msgstr ""
+
+#: ../components/ihost.py:649
+#, python-format
+msgid ""
+"%s uses \"geo-blocking\" measures to prevent you from accessing the services from abroad.\n"
+" Host country: %s, your country: %s"
+msgstr ""
+
+#: ../components/ihost.py:764 ../hosts/host123movieshd.py:381
+#: ../hosts/host3player.py:408 ../hosts/host3sktv.py:303
+#: ../hosts/host7tvde.py:449 ../hosts/host9anime.py:564
+#: ../hosts/hostakoam.py:439 ../hosts/hostallboxtv.py:569
+#: ../hosts/hostalltubetv.py:475 ../hosts/hostaltadefinizione.py:472
+#: ../hosts/hostaltadefinizione01.py:345 ../hosts/hostaltadefinizione1.py:305
+#: ../hosts/hostaltadefinizionecool.py:437 ../hosts/hostandrijaiandjelka.py:187
+#: ../hosts/hostanimeodcinki.py:388 ../hosts/hostappletrailers.py:202
+#: ../hosts/hostarconaitvme.py:213 ../hosts/hostardmediathek.py:443
+#: ../hosts/hostartetv.py:459 ../hosts/hostbbciplayer.py:614
+#: ../hosts/hostbsto.py:399 ../hosts/hostcartoonhd.py:615
+#: ../hosts/hostcdapl.py:543 ../hosts/hostchomikuj.py:394
+#: ../hosts/hostchristusvincit.py:506 ../hosts/hostcimaclubcom.py:475
+#: ../hosts/hostcineblog.py:274 ../hosts/hostcinemaxx.py:356
+#: ../hosts/hostcinemay.py:387 ../hosts/hostcineto.py:470
+#: ../hosts/hostclassiccinemaonline.py:289 ../hosts/hostcrtankocom.py:293
+#: ../hosts/hostdailymotion.py:329 ../hosts/hostdancetrippin.py:339
+#: ../hosts/hostdardarkomcom.py:412 ../hosts/hostdarshowcom.py:346
+#: ../hosts/hostdixmax.py:519 ../hosts/hostdokumentalnenet.py:195
+#: ../hosts/hostdpstreamingcx.py:290 ../hosts/hostdrdk.py:170
+#: ../hosts/hostefilmytv.py:754 ../hosts/hostegybest.py:463
+#: ../hosts/hostekinotv.py:538 ../hosts/hosteskago.py:411
+#: ../hosts/hosteurosportplayer.py:734 ../hosts/hostfaselhdcom.py:374
+#: ../hosts/hostfenixsite.py:365 ../hosts/hostfilma24hdcom.py:265
+#: ../hosts/hostfilma24io.py:271 ../hosts/hostfilmaoncom.py:415
+#: ../hosts/hostfilmativa.py:254 ../hosts/hostfilmehdnet.py:357
+#: ../hosts/hostfilmeonlineto.py:495 ../hosts/hostfilmezz.py:516
+#: ../hosts/hostfilmixco.py:517 ../hosts/hostfilmovizijastudio.py:516
+#: ../hosts/hostfilmpalast.py:412 ../hosts/hostfilmpertutti.py:294
+#: ../hosts/hostfilmstreamhdit.py:214 ../hosts/hostfilmstreamvkcom.py:314
+#: ../hosts/hostfilmydokumentalneeu.py:197 ../hosts/hostfokustv.py:342
+#: ../hosts/hostforjatn.py:375 ../hosts/hostbajeczkiorg.py:212
+#: ../hosts/hostddl.py:622 ../hosts/hostfilisertv.py:519
+#: ../hosts/hostfreediscpl.py:492 ../hosts/hostnaszekinotv.py:717
+#: ../hosts/hosttvplayercom.py:393 ../hosts/hostgamatocom.py:369
+#: ../hosts/hostgamatotvme.py:461 ../hosts/hostgledalica.py:464
+#: ../hosts/hostgreekdocumentaries3.py:244 ../hosts/hostguardaserie.py:286
+#: ../hosts/hosthd1080online.py:296 ../hosts/hosthdfilmetv.py:434
+#: ../hosts/hosthdfull.py:670 ../hosts/hosthdkinomir.py:295
+#: ../hosts/hosthdpopcornscom.py:371 ../hosts/hosthdsto.py:555
+#: ../hosts/hosthdstreams.py:537 ../hosts/hosthitboxtv.py:236
+#: ../hosts/hosthoofootcom.py:300 ../hosts/hosticefilmsinfo.py:444
+#: ../hosts/hostiitvpl.py:286 ../hosts/hostinteriatv.py:269
+#: ../hosts/hostkabarety.py:317 ../hosts/hostkijknl.py:347
+#: ../hosts/hostkinogo.py:293 ../hosts/hostkinomanco.py:835
+#: ../hosts/hostkinotan.py:427 ../hosts/hostkinox.py:620
+#: ../hosts/hostkissanimeto.py:535 ../hosts/hostkisscartoonme.py:447
+#: ../hosts/hostkkiste.py:433 ../hosts/hostkreskoweczki.py:273
+#: ../hosts/hostkreskowkazone.py:339 ../hosts/hostlaola1tv.py:429
+#: ../hosts/hostlibrestream.py:303 ../hosts/hostliveleak.py:191
+#: ../hosts/hostlookmovieag.py:276 ../hosts/hostlosmovies.py:473
+#: ../hosts/hostluxveritatis.py:367 ../hosts/hostmaxtvgo.py:315
+#: ../hosts/hostmooviecc.py:610 ../hosts/hostmovie4kto.py:542
+#: ../hosts/hostmovienightws.py:312 ../hosts/hostmovierulzsx.py:318
+#: ../hosts/hostmovizlandcom.py:285 ../hosts/hostmovs4ucom.py:494
+#: ../hosts/hostmozicsillag.py:480 ../hosts/hostmrpiracy.py:674
+#: ../hosts/hostmusicmp3ru.py:312 ../hosts/hostmyfreemp3.py:192
+#: ../hosts/hostmythewatchseries.py:421 ../hosts/hostngolos.py:382
+#: ../hosts/hostninateka.py:240 ../hosts/hostnuteczki.py:461
+#: ../hosts/hostofficialfilmillimite.py:295 ../hosts/hostoipeirates.py:416
+#: ../hosts/hostokgoals.py:237 ../hosts/hostororotv.py:220
+#: ../hosts/hostorthobulletscom.py:301 ../hosts/hostotakufr.py:299
+#: ../hosts/hostourmatchnet.py:374 ../hosts/hostpinkbike.py:188
+#: ../hosts/hostplanetstreamingcom.py:356 ../hosts/hostplaypuls.py:276
+#: ../hosts/hostplayrtsiw.py:624 ../hosts/hostplusdede.py:644
+#: ../hosts/hostputlockertvto.py:544 ../hosts/hostredbull.py:359
+#: ../hosts/hostrtbfbe.py:672 ../hosts/hostrteieplayer.py:348
+#: ../hosts/hostrtlmost.py:467 ../hosts/hostserialeco.py:320
+#: ../hosts/hostserialnet.py:354 ../hosts/hostserienstreamto.py:598
+#: ../hosts/hostseriesonline.py:484 ../hosts/hostserijeonline.py:350
+#: ../hosts/hostshahiidanimenet.py:354 ../hosts/hostshoutcast.py:191
+#: ../hosts/hostskstream.py:449 ../hosts/hostsolarmovie.py:536
+#: ../hosts/hostsovdub.py:225 ../hosts/hostspiegeltv.py:499
+#: ../hosts/hostsportdeutschland.py:233 ../hosts/hoststreamcomplet.py:259
+#: ../hosts/hoststreaminghdfun.py:428 ../hosts/hoststreamliveto.py:430
+#: ../hosts/hostsvtplayse.py:576 ../hosts/hostszenestreamz.py:333
+#: ../hosts/hosttainieskaiseirestv.py:385 ../hosts/hosttantifilmorg.py:470
+#: ../hosts/hostted.py:596 ../hosts/hosttfarjocom.py:401
+#: ../hosts/hostthewatchseriesto.py:357 ../hosts/hosttreetv.py:493
+#: ../hosts/hostturcjatv.py:226 ../hosts/hosttvgrypl.py:267
+#: ../hosts/hosttvnowde.py:516 ../hosts/hosttvnvod.py:470
+#: ../hosts/hosttvproart.py:157 ../hosts/hosttvpvod.py:995
+#: ../hosts/hosttwitchtv.py:616 ../hosts/hostuktvplay.py:275
+#: ../hosts/hostustreamtv.py:211 ../hosts/hostvevo.py:440
+#: ../hosts/hostvidcorncom.py:631 ../hosts/hostvideopenny.py:334
+#: ../hosts/hostvimeo.py:375 ../hosts/hostvodpl.py:428
+#: ../hosts/hostvumedicom.py:415 ../hosts/hostwatchcartoononline.py:335
+#: ../hosts/hostwatchwrestling.py:320 ../hosts/hostwatchwrestlinguno.py:279
+#: ../hosts/hostwgrane.py:221 ../hosts/hostwolnelekturypl.py:256
+#: ../hosts/hostworldfree4u.py:269 ../hosts/hostwpolscepl.py:291
+#: ../hosts/hostwptv.py:313 ../hosts/hostxrysoise.py:361
+#: ../hosts/hostyesmoviesto.py:499 ../hosts/hostyifytv.py:592
+#: ../hosts/hostyoutube.py:236 ../hosts/hostzalukajcom.py:488
+#: ../hosts/hostzdfmediathek.py:516
+msgid "Type: "
+msgstr ""
+
+#: ../components/iptvarticlerichvisualizer.py:199
+#: ../components/iptvpictureplayer.py:259
+#, python-format
+msgid ""
+"Downloading cannot be started.\n"
+" Invalid URI[%s]."
+msgstr ""
+
+#: ../components/iptvarticlerichvisualizer.py:207
+#: ../components/iptvpictureplayer.py:277
+#, python-format
+msgid ""
+"Downloading cannot be started.\n"
+" Downloader [%s] not working properly.\n"
+" Status[%s]"
+msgstr ""
+
+#: ../components/iptvarticlerichvisualizer.py:219
+#: ../components/iptvarticlerichvisualizer.py:224
+#: ../components/iptvpictureplayer.py:326
+#, python-format
+msgid "Downloading file [%s] problem."
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "mipsel"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "sh4"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "i686"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "armv7"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "armv5t"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54 ../components/iptvconfigmenu.py:92
+#: ../hosts/hosturllist.py:62
+msgid "unknown"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:55
+msgid "Hardware floating point"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:55
+msgid "Software floating point"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after closing"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after day"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after three days"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after a week"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:59
+msgid "jpeg,png,gif"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:59
+msgid "jpeg,png"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:59
+msgid "jpeg"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:59 ../hosts/hostvevo.py:107
+msgid "all"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:83 ../components/iptvconfigmenu.py:88
+#: ../hosts/hostfenixsite.py:260 ../hosts/hostfilmehdnet.py:78
+#: ../hosts/hosthdstreams.py:148 ../hosts/hostkinomanco.py:213
+#: ../hosts/hostmyfreemp3.py:81 ../hosts/hosttvjworg.py:28
+#: ../libs/sportstream365.py:21
+msgid "Default"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:83
+msgid "Gitlab"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:83
+msgid "private"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:84
+msgid "System"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:84
+msgid "Own model"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:91 ../hosts/hostdailymotion.py:24
+msgid "auto"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:91
+msgid "internal"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:91
+msgid "standard"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:91 ../components/iptvextmovieplayer.py:282
+msgid "external eplayer3"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:91 ../components/iptvextmovieplayer.py:273
+msgid "external gstplayer"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:165
+msgid "no"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:165
+msgid "yes, to console"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:165
+msgid "yes, to file /hdd/iptv.dbg"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:204
+msgid "with source code"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:204
+msgid "precompiled"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:204
+msgid "all types"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+#: ../components/iptvsubsimpledownloader.py:272 ../hosts/hostddl.py:29
+#: ../libs/urlparser.py:7424
+msgid "default"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "4:3 Letterbox"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "4:3 PanScan"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:9"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:9 always"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:10 Letterbox"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:10 PanScan"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:9 Letterbox"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:307
+msgid "Last checked version"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:308
+msgid "Show all version in the update menu"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:309
+msgid "VFD set current title:"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:310
+msgid "Write current title to file:"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:311
+msgid "The default aspect ratio for the external player"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:327
+msgid "Auto check for plugin update"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:328
+msgid "The preferred update server"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:331
+msgid "Select GitLab repository owner"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:332 ../components/iptvconfigmenu.py:337
+#: ../components/iptvplayerwidget.py:1147
+#: ../components/iptvplayerwidget.py:1285
+msgid "Update"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:335
+#, python-format
+msgid "%s login"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:336 ../components/iptvconfigmenu.py:401
+#, python-format
+msgid "%s password"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:339
+msgid "Allow downgrade"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:340
+msgid "Update packet type"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:341
+msgid "Show update icon in service selection menu"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:343
+msgid "Virtual Keyboard type"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:345
+msgid "    Background color"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:346
+msgid "    Show suggestions"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:347
+msgid "    Default suggestions provider"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:349 ../hosts/hostlibrestream.py:33
+msgid "Platform"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:351
+msgid "Remove disabled services"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:352
+msgid "Initialize web interface (experimental)"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:354
+msgid "Disable live at plugin start"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:355
+msgid "Pin protection for plugin"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:356
+msgid "Pin protection for configuration"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:358
+msgid "Set pin code"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:360
+msgid "Skin"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:361
+msgid "Display thumbnails"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:363
+msgid "    Allowed formats of thumbnails"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:364
+msgid "    Remove thumbnails"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:366
+msgid "Graphic services selector"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:368
+msgid "    Enable hosts groups"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:369
+msgid "    Service icon size"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:370
+msgid "    Number of rows"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:371
+msgid "    Number of columns"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:373
+msgid "Use the PyCurl for HTTP(S) requests"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:374
+msgid "https - validate SSL certificates"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:375 ../hosts/host123movieshd.py:25
+#: ../hosts/hostakoam.py:26 ../hosts/hostcimaclubcom.py:24
+#: ../hosts/hostfilmeonlineto.py:27 ../hosts/hostfilmstreamvkcom.py:26
+#: ../hosts/hostddl.py:27 ../hosts/hosthdsto.py:34
+#: ../hosts/hosticefilmsinfo.py:27 ../hosts/hostkinox.py:27
+#: ../hosts/hostkissanimeto.py:32 ../hosts/hostkkiste.py:26
+#: ../hosts/hostlosmovies.py:28 ../hosts/hostplanetstreamingcom.py:22
+#: ../hosts/hostputlockertvto.py:30 ../hosts/hostseriesonline.py:26
+#: ../hosts/hostskstream.py:26 ../hosts/hostsolarmovie.py:28
+#: ../hosts/hostyesmoviesto.py:28 ../hosts/hostyifytv.py:31
+#: ../hosts/hostzalukajcom.py:36
+msgid "Alternative proxy server (1)"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:376 ../hosts/host123movieshd.py:26
+#: ../hosts/hostakoam.py:27 ../hosts/hostcimaclubcom.py:25
+#: ../hosts/hostfilmeonlineto.py:28 ../hosts/hostfilmstreamvkcom.py:27
+#: ../hosts/hostddl.py:28 ../hosts/hosthdsto.py:35
+#: ../hosts/hosticefilmsinfo.py:28 ../hosts/hostkinox.py:28
+#: ../hosts/hostkissanimeto.py:33 ../hosts/hostkkiste.py:27
+#: ../hosts/hostlosmovies.py:29 ../hosts/hostplanetstreamingcom.py:23
+#: ../hosts/hostputlockertvto.py:31 ../hosts/hostseriesonline.py:27
+#: ../hosts/hostskstream.py:27 ../hosts/hostsolarmovie.py:29
+#: ../hosts/hostyesmoviesto.py:29 ../hosts/hostyifytv.py:32
+#: ../hosts/hostzalukajcom.py:37
+msgid "Alternative proxy server (2)"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:377
+msgid "Polish proxy server url"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:378
+msgid "German proxy server url"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:379
+msgid "Russian proxy server url"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:380
+msgid "Ukrainian proxy server url"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:382
+msgid "Folder for cache data"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:383
+msgid "Folder for temporary data"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:386
+msgid "[HTTP] buffering"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:387
+msgid "[HLS/M3U8] buffering"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:388
+msgid "[RTMP] buffering (rtmpdump required)"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:391
+msgid "    Video buffer size [MB]"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:392
+msgid "    Audio buffer size [KB]"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:393
+msgid "Buffering location"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:395
+msgid "Downloads location"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:396
+msgid "Start download manager per default"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:397
+msgid "Show download manager after adding new item"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:398
+msgid "Number of downloaded files simultaneously"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:400
+#, python-format
+msgid "%s e-mail"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:402
+#, python-format
+msgid "%s device name"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:404 ../components/iptvconfigmenu.py:405
+#: ../hosts/hostbsto.py:41 ../hosts/hostbsto.py:43 ../hosts/hostmrpiracy.py:54
+#: ../hosts/hostmrpiracy.py:56
+#, python-format
+msgid "%s API KEY"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:407
+msgid "Use subtitles parser extension if available"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:408 ../components/iptvconfigmenu.py:410
+#: ../components/iptvconfigmenu.py:413 ../hosts/hostcartoonhd.py:38
+#: ../hosts/hostdixmax.py:38 ../hosts/hostdokumentalnenet.py:29
+#: ../hosts/hostefilmytv.py:40 ../hosts/hostegybest.py:38
+#: ../hosts/hostfilmezz.py:39 ../hosts/hostfilmixco.py:37
+#: ../hosts/hostnaszekinotv.py:40 ../hosts/hosthdfull.py:41
+#: ../hosts/hostmaxtvgo.py:37 ../hosts/hostnuteczki.py:32
+#: ../hosts/hostorthobulletscom.py:39 ../hosts/hostplusdede.py:40
+#: ../hosts/hostserijeonline.py:36 ../hosts/hostturcjatv.py:38
+#: ../hosts/hostvumedicom.py:36 ../hosts/hostzalukajcom.py:43
+#: ../libs/filmonapi.py:32 ../libs/wagasworld.py:35 ../libs/wizjatv.py:37
+msgid "login"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:409 ../components/iptvconfigmenu.py:411
+#: ../components/iptvconfigmenu.py:414 ../components/iptvconfigmenu.py:417
+#: ../hosts/hostallboxtv.py:39 ../hosts/hostbbcsport.py:35
+#: ../hosts/hostcartoonhd.py:39 ../hosts/hostdixmax.py:39
+#: ../hosts/hostdokumentalnenet.py:30 ../hosts/hostefilmytv.py:41
+#: ../hosts/hostegybest.py:39 ../hosts/hosteurosportplayer.py:32
+#: ../hosts/hostfilmezz.py:40 ../hosts/hostfilmixco.py:38
+#: ../hosts/hostfreediscpl.py:38 ../hosts/hostnaszekinotv.py:41
+#: ../hosts/hosttvplayercom.py:50 ../hosts/hosthdfull.py:42
+#: ../hosts/hosthdsto.py:43 ../hosts/hostkinomanco.py:42
+#: ../hosts/hostmaxtvgo.py:38 ../hosts/hostnuteczki.py:33
+#: ../hosts/hostorthobulletscom.py:40 ../hosts/hostplusdede.py:41
+#: ../hosts/hostrtbfbe.py:40 ../hosts/hostrtlmost.py:46
+#: ../hosts/hostserienstreamto.py:49 ../hosts/hostserijeonline.py:37
+#: ../hosts/hosttreetv.py:44 ../hosts/hostturcjatv.py:39
+#: ../hosts/hostvidcorncom.py:37 ../hosts/hostvumedicom.py:37
+#: ../libs/filmonapi.py:33 ../libs/firstonetvnet.py:43 ../libs/goldvodtv.py:40
+#: ../libs/internetowa.py:34 ../libs/wagasworld.py:36 ../libs/wizjatv.py:38
+msgid "password"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:416 ../hosts/hostallboxtv.py:38
+#: ../hosts/hostbbcsport.py:34 ../hosts/hosteurosportplayer.py:31
+#: ../hosts/hostfreediscpl.py:37 ../hosts/hostkinomanco.py:41
+#: ../hosts/hostmrpiracy.py:48 ../hosts/hostrtbfbe.py:39
+#: ../hosts/hostserienstreamto.py:48 ../hosts/hosttreetv.py:43
+#: ../hosts/hostvidcorncom.py:36
+msgid "e-mail"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:422 ../components/iptvconfigmenu.py:433
+#: ../components/iptvconfigmenu.py:444 ../components/iptvconfigmenu.py:455
+#: ../components/iptvconfigmenu.py:465
+msgid "First movie player without buffering mode"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:424 ../components/iptvconfigmenu.py:435
+#: ../components/iptvconfigmenu.py:446 ../components/iptvconfigmenu.py:457
+#: ../components/iptvconfigmenu.py:467
+msgid "Second movie player without buffering mode"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:427 ../components/iptvconfigmenu.py:438
+#: ../components/iptvconfigmenu.py:449 ../components/iptvconfigmenu.py:460
+#: ../components/iptvconfigmenu.py:470
+msgid "First movie player in buffering mode"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:429 ../components/iptvconfigmenu.py:440
+#: ../components/iptvconfigmenu.py:451 ../components/iptvconfigmenu.py:462
+#: ../components/iptvconfigmenu.py:472
+msgid "Second movie player in buffering mode"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:476
+msgid "Movie player"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:480
+msgid "External movie player config"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:482
+msgid "Autoplay start delay"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:483
+msgid "The number of items in the search history"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:484
+msgid "Block wmv files"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:485
+msgid "Show IPTVPlayer in extension list"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:486
+msgid "Show IPTVPlayer in main menu"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:487
+msgid "Debug logs"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:563 ../components/iptvplayerwidget.py:1397
+msgid ""
+"Some changes will be applied only after plugin update.\n"
+"Do you want to perform update now?"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:586
+msgid "Select directory"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:647
+msgid "Enter old pin"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:653
+msgid "Enter new pin"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:655 ../components/iptvplayerwidget.py:999
+#: ../components/iptvplayerwidget.py:1436 ../plugin.py:136
+msgid "Pin incorrect!"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:659
+msgid "Confirm new pin"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:665
+msgid "Pin has been changed."
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:667
+msgid "Confirmation error."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:393
+msgid "Opening. Please wait..."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:513
+#: ../components/iptvplayerwidget.py:1144
+#: ../components/iptvplayerwidget.py:1277
+msgid "Configuration"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:514
+msgid "Subtitles"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:515
+msgid "Audio tracks"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:516
+msgid "Video options"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:519
+msgid "Stop playback with buffer save"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:521
+msgid "Menu"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:655
+msgid "Video policy"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:655
+msgid "Video policy for 4:3"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:655
+msgid "Aspect"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:655
+msgid "Video mode"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:664
+msgid "Select video option"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:684
+#: ../components/iptvextmovieplayer.py:700
+#, python-format
+msgid "Select %s"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:709
+msgid "Is this message displayed correctly?"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:757
+msgid "Select audio track"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:759
+msgid "Information about audio tracks not available."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:809
+msgid "Synchronize"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:812
+msgid "Download suggested"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:814
+msgid "Load"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:815
+#: ../components/iptvplayerwidget.py:171
+msgid "Download"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:816
+msgid "Select subtitles track"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:865
+msgid "Select subtitles file"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:960
+#, python-format
+msgid "An error occurred while loading a subtitle from [%s]."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:1296
+msgid "Closing. Please wait..."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:1433
+#, python-format
+msgid ""
+"It seems that the video player \"%s\" does not work properly.\n"
+"\n"
+"STS: %s\n"
+"ERROR CODE: %r"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:1438
+msgid ""
+"ERROR: pipeline could not be constructed: no element \"playbin2\" \n"
+"Please check if gstreamer plugins are available in your system."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:1857
+msgid "Link is not supported by the gstplayer. Please use the extelayer3 if available."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:1907
+#, python-format
+msgid "An error occurred while writing into: %s"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:2160
+msgid "Fatal error: consoleWrite failed!"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:41
+#: ../components/iptvfavouriteswidgets.py:105
+msgid "Add new group of favourites"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:45
+msgid "Name:"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:45
+#, python-format
+msgid "Group %d"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:45
+msgid "Description:"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:54
+msgid "Name cannot be empty."
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:55
+msgid ""
+"Name is not valid.\n"
+"Please remove special characters."
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:59 ../tools/iptvfavourites.py:87
+#, python-format
+msgid "Group \"%s\" already exists."
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:106
+msgid "Select favourite group"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:107
+msgid "There are no other favourite groups"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:153
+msgid "Favourites manager"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:173
+msgid "Enable reordering"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:174
+msgid "Disable reordering"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:177
+#: ../components/iptvfavouriteswidgets.py:263
+msgid "Favourites groups"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:178
+#: ../components/iptvfavouriteswidgets.py:264
+msgid "Remove group"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:180
+#: ../components/iptvfavouriteswidgets.py:265
+msgid "Add new group"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:296
+#, python-format
+msgid "Items in group \"%s\""
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:298 ../iptvdm/iptvdmui.py:263
+msgid "Remove item"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:299
+msgid "Add item to group"
+msgstr ""
+
+#: ../components/iptvimageselector.py:76
+msgid "Select pictures"
+msgstr ""
+
+#: ../components/iptvinputbox.py:23 ../components/iptvmultipleinputbox.py:35
+#: ../components/iptvmultipleinputbox.py:98
+msgid "Input"
+msgstr ""
+
+#: ../components/iptvmultipleinputbox.py:106
+#: ../components/recaptcha_v2widget.py:91
+msgid "Verify"
+msgstr ""
+
+#: ../components/iptvpictureplayer.py:247
+msgid "--"
+msgstr ""
+
+#: ../components/iptvpictureplayer.py:252
+#: ../components/iptvpictureplayer.py:322
+msgid "++"
+msgstr ""
+
+#: ../components/iptvpictureplayer.py:332
+#, python-format
+msgid "Decode file [%s] problem."
+msgstr ""
+
+#: ../components/iptvplayer.py:34 ../components/iptvplayer.py:35
+msgid "leave movie player..."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:169
+msgid "Exit"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:173
+msgid "Refresh"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:174 ../hosts/hostdancetrippin.py:146
+#: ../hosts/hostlocalmedia.py:390 ../hosts/hostrtbfbe.py:337
+#: ../hosts/hosttvpvod.py:404 ../libs/wagasworld.py:174
+msgid "More"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:335
+msgid "Critical Error – cookie can't be saved!"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:336 ../libs/pCommon.py:1376
+#, python-format
+msgid ""
+"Last error:\n"
+"%s"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:337
+msgid "Please make sure that the folder for cache data (set in the configuration) is writable."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:458
+#, python-format
+msgid "wait %s seconds"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:459
+#, python-format
+msgid "wait %s second"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:476
+#, python-format
+msgid "It seems that the host \"%s\" has crashed."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:477
+msgid ""
+"\n"
+"This host is not integral part of the E2iPlayer plugin.\n"
+"It is not supported by E2iPlayer team."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:480
+#, python-format
+msgid "It seems that the host \"%s\" has crashed. Do you want to report this problem?"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:482 ../components/iptvsubdownloader.py:371
+msgid ""
+"\n"
+"Make sure you are using the latest version of the plugin."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:483
+msgid ""
+"\n"
+"You can also report problem here: \n"
+" https://gitlab.com/maxbambi/e2iplayer/issues"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:593
+msgid "Add item to favourites"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:594 ../components/iptvplayerwidget.py:595
+msgid "Edit favourites"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:597
+msgid "Change active movie player"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:598
+msgid "Set active movie player"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:602
+msgid "Randomize a playlist"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:603
+msgid "Reverse a playlist"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:608
+msgid "Configure host"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:610
+msgid "Info"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:611 ../components/playerselector.py:462
+#: ../components/playerselector.py:475 ../Web/webParts.py:63
+#: ../Web/webParts.py:80
+msgid "Download manager"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:689
+msgid "Lead programmer: "
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:690
+msgid "E-mail: "
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:691
+msgid "www: "
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:692
+msgid "Developers: "
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:716
+msgid "Auto selection based on the settings"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:719 ../components/iptvplayerwidget.py:721
+#, python-format
+msgid "[%s] with buffering"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:723 ../components/iptvplayerwidget.py:725
+#, python-format
+msgid "[%s] without buffering"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:744
+msgid "Select movie player"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:856 ../components/iptvsubdownloader.py:247
+msgid "Operation aborted!"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:973 ../components/iptvplayerwidget.py:1387
+#: ../components/iptvplayerwidget.py:1421
+#: ../components/iptvplayerwidget.py:1464 ../plugin.py:89 ../plugin.py:98
+msgid "Enter pin"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1105
+#, python-format
+msgid ""
+"There is a new version available do you want to update? \n"
+"Your version [%s], latest version on server [%s]"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1143 ../hosts/host3player.py:156
+#: ../hosts/host9anime.py:104 ../hosts/hostakoam.py:134
+#: ../hosts/hostalltubetv.py:37 ../hosts/hostalltubetv.py:149
+#: ../hosts/hostanimeodcinki.py:83 ../hosts/hostbbciplayer.py:230
+#: ../hosts/hostcimaclubcom.py:168 ../hosts/hostcrtankocom.py:35
+#: ../hosts/hostdailymotion.py:103 ../hosts/hostdancetrippin.py:225
+#: ../hosts/hostegybest.py:103 ../hosts/hostfightvideo.py:72
+#: ../hosts/hostfilmeonlineto.py:140 ../hosts/hostfilmezz.py:114
+#: ../hosts/hosttvplayercom.py:126 ../hosts/hosthdfull.py:136
+#: ../hosts/hosthdstreams.py:130 ../hosts/hostkabarety.py:40
+#: ../hosts/hostkabarety.py:86 ../hosts/hostkinomanco.py:160
+#: ../hosts/hostkinomanco.py:185 ../hosts/hostkinomanco.py:194
+#: ../hosts/hostkinomanco.py:204 ../hosts/hostkinox.py:151
+#: ../hosts/hostkinox.py:277 ../hosts/hostkkiste.py:138
+#: ../hosts/hostlookmovieag.py:61 ../hosts/hostmrpiracy.py:156
+#: ../hosts/hostmythewatchseries.py:95 ../hosts/hostorthobulletscom.py:75
+#: ../hosts/hostplayrtsiw.py:352 ../hosts/hostputlockertvto.py:175
+#: ../hosts/hostshahiidanimenet.py:85 ../hosts/hostshoutcast.py:64
+#: ../hosts/hostsolarmovie.py:149 ../hosts/hosttwitchtv.py:100
+#: ../hosts/hosttwitchtv.py:103 ../hosts/hostyifytv.py:71
+#: ../libs/skylinewebcamscom.py:94 ../subproviders/subprov_titlovicom.py:134
+msgid "All"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1214
+#: ../components/iptvplayerwidget.py:1282
+msgid "Following host are broken or additional python modules are needed."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1229
+msgid "There is no hosts in this group."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1297
+msgid "Select service"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1376
+#, python-format
+msgid "There is no free space on the drive [%s]."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1376
+msgid "New icons will not be available."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1452
+#, python-format
+msgid "Loading %s failed due to following error:"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1456
+#, python-format
+msgid "Failed: %s"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1526
+#: ../components/iptvplayerwidget.py:1758
+#: ../components/iptvplayerwidget.py:2128
+msgid "No valid links available."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1528
+#: ../components/iptvplayerwidget.py:2034
+#: ../components/iptvsubdownloader.py:513
+#: ../components/iptvsubdownloader.py:553
+#, python-format
+msgid "Last error: \"%s\""
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1541
+msgid "Select link"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1594
+msgid "Format 'wmv' blocked in configuration."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1596
+#, python-format
+msgid "Unknown protocol [%s]"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1677
+#, python-format
+msgid "Directory \"%s\" does not exists."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1678
+#, python-format
+msgid "Please set valid %s in the %s configuration."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1678
+msgid "downloads location"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1678
+msgid "buffering location"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1683
+#, python-format
+msgid "There is no enough free space in the folder \"%s\"."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1684
+#, python-format
+msgid "\tDisk space required: %s"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1685
+#, python-format
+msgid "\tDisk space available: %s"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1689
+msgid "Tip! You can connect USB flash drive to fix this problem."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1702
+#, python-format
+msgid "File can not be downloaded. Protocol [%s] is unsupported"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1708
+#, python-format
+msgid "File [%s] was added to downloading queue."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1806
+msgid "Search results"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1819
+#: ../components/iptvsubdownloader.py:465
+msgid "Downloading"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1820
+#: ../components/iptvsubdownloader.py:466
+msgid "Loading"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1821
+#: ../components/iptvsubdownloader.py:467
+msgid "Refreshing"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1868
+msgid "Search type"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1933
+#: ../components/iptvplayerwidget.py:1937
+msgid "Your search entry"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:2029
+#: ../components/iptvsubdownloader.py:548
+msgid ""
+"No item to display. \n"
+"Press OK to refresh.\n"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:2153 ../iptvdm/iptvdmui.py:291
+msgid "Select action"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:213
+msgid "Confirm the title of the movie"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:369
+#, python-format
+msgid "It seems that the subtitle's provider \"%s\" has crashed. Do you want to report this problem?"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:372
+msgid ""
+"\n"
+"You can also report problem here: \n"
+"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
+"or here: samsamsam@o2.pl"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:418
+msgid "Select subtitles provider:"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:508
+msgid "Download subtiles failed."
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:519
+#, python-format
+msgid "Subtitles \"%s\" downloaded correctly."
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:520
+msgid "Do you want to finish?"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:554
+msgid "Simplify the title and try again."
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:660
+#, python-format
+msgid "Searching subtitles for \"%s\""
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:50
+msgid "Simple subtitles downloader"
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:71
+msgid "Move group"
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:124
+#, python-format
+msgid ""
+"Downloading subtitles.\n"
+" ('%r')."
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:130
+#, python-format
+msgid ""
+"Download can not be started.\n"
+" Incorrect address ('%r')."
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:138
+#, python-format
+msgid ""
+"Download can not be started.\n"
+"Downloader %s not working correctly.\n"
+"Status[%s]"
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:142
+#, python-format
+msgid ""
+"Download failed.\n"
+"Status[%s]"
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:144
+#, python-format
+msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:176
+msgid "Subtitles conversion to UTF-8 failed."
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:200
+#, python-format
+msgid "Subtitles for: %s"
+msgstr ""
+
+#: ../components/iptvsubsimpledownloader.py:225
+msgid "Select subtitles to download"
+msgstr ""
+
+#: ../components/isubprovider.py:430
+#, python-format
+msgid "Unknown file extension \"%s\"."
+msgstr ""
+
+#: ../components/isubprovider.py:487 ../subproviders/subprov_napisy24pl.py:310
+#: ../subproviders/subprov_opensubtitlesorg.py:384
+#: ../subproviders/subprov_popcornsubtitles.py:113
+#: ../subproviders/subprov_youtubecom.py:105
+#, python-format
+msgid "Failed to write file \"%s\"."
+msgstr ""
+
+#: ../components/isubprovider.py:510 ../subproviders/subprov_napisy24pl.py:328
+#, python-format
+msgid "Unzip error code[%s]."
+msgstr ""
+
+#: ../components/isubprovider.py:512 ../subproviders/subprov_napisy24pl.py:330
+msgid "It seems that unzip utility is not installed."
+msgstr ""
+
+#: ../components/isubprovider.py:514 ../subproviders/subprov_napisy24pl.py:332
+msgid "Wrong format of zip archive."
+msgstr ""
+
+#: ../components/isubprovider.py:524
+#, python-format
+msgid "Failed to create directory \"%s\"."
+msgstr ""
+
+#: ../components/isubprovider.py:533
+#, python-format
+msgid "Unrar error code[%s]."
+msgstr ""
+
+#: ../components/isubprovider.py:535
+msgid "It seems that unrar utility is not installed."
+msgstr ""
+
+#: ../components/isubprovider.py:537
+msgid "Wrong format of rar archive."
+msgstr ""
+
+#: ../components/isubprovider.py:597 ../subproviders/subprov_napisy24pl.py:366
+#: ../subproviders/subprov_popcornsubtitles.py:150
+#, python-format
+msgid "Failed to convert the file \"%s\" to UTF-8."
+msgstr ""
+
+#: ../components/isubprovider.py:600 ../subproviders/subprov_napisy24pl.py:369
+#: ../subproviders/subprov_popcornsubtitles.py:153
+#, python-format
+msgid "Failed to open the file \"%s\"."
+msgstr ""
+
+#: ../components/playerselector.py:469
+#, python-format
+msgid "Add host %s to group"
+msgstr ""
+
+#: ../components/playerselector.py:477
+msgid "Disable/Enable services"
+msgstr ""
+
+#: ../components/playerselector.py:479
+msgid "Disable/Enable groups"
+msgstr ""
+
+#: ../components/playerselector.py:485
+#, python-format
+msgid "Hide \"%s\" group"
+msgstr ""
+
+#: ../components/playerselector.py:487
+#, python-format
+msgid "Remove \"%s\" item"
+msgstr ""
+
+#: ../components/playerselector.py:501
+msgid "Disable not used services"
+msgstr ""
+
+#: ../components/playerselector.py:520
+msgid "Select group"
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:19
+msgid "Link protected with Google ReCaptcha v2"
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:51
+#, python-format
+msgid "Please visit %s to learn how to redirect this task to the external device."
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:55
+msgid " or "
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:56
+#, python-format
+msgid "You can use \"%s\" or \"%s\" services for automatic solution."
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:56
+msgid "Go to the host configuration available under blue button."
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:98
+msgid "JDownloader script finished."
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:101
+#, python-format
+msgid ""
+"JDownloader script execution failed.\n"
+"Error code: %s\n"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:121
+msgid ""
+"Captcha solved.\n"
+"Waiting for notification."
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:126
+msgid "Invalid email."
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:128
+msgid "Access denied. Please check password."
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:130
+#, python-format
+msgid ""
+"Error code: %s\n"
+"Error message: %s"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:158
+msgid "JDownloader script execution"
+msgstr ""
+
+#: ../components/VirtualKeyBoard.py:99
+msgid "Accept"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:31 ../hosts/hostakoam.py:30
+#: ../hosts/hostcimaclubcom.py:28 ../hosts/hostfilmeonlineto.py:33
+#: ../hosts/hostfilmstreamvkcom.py:32 ../hosts/hosthdsto.py:41
+#: ../hosts/hosticefilmsinfo.py:32 ../hosts/hostkinox.py:33
+#: ../hosts/hostkissanimeto.py:38 ../hosts/hostkkiste.py:32
+#: ../hosts/hostlosmovies.py:33 ../hosts/hostplanetstreamingcom.py:28
+#: ../hosts/hostputlockertvto.py:36 ../hosts/hostseriesonline.py:32
+#: ../hosts/hostskstream.py:32 ../hosts/hostsolarmovie.py:34
+#: ../hosts/hostyesmoviesto.py:34 ../hosts/hostyifytv.py:36
+#: ../hosts/hostzalukajcom.py:45
+msgid "Use proxy server:"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:33 ../hosts/hostfilmeonlineto.py:35
+#: ../hosts/hostfilmixco.py:36 ../hosts/hostfilmstreamvkcom.py:34
+#: ../hosts/hosticefilmsinfo.py:34 ../hosts/hostkinox.py:35
+#: ../hosts/hostkkiste.py:34 ../hosts/hostmovie4kto.py:40
+#: ../hosts/hostplanetstreamingcom.py:30 ../hosts/hostputlockertvto.py:38
+#: ../hosts/hostseriesonline.py:34 ../hosts/hostskstream.py:34
+#: ../hosts/hostsolarmovie.py:35 ../hosts/hostyesmoviesto.py:36
+msgid "Alternative domain:"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:125 ../hosts/host3player.py:59
+#: ../hosts/host3sktv.py:77 ../hosts/host7tvde.py:55 ../hosts/host9anime.py:50
+#: ../hosts/hostakoam.py:111 ../hosts/hostallboxtv.py:73
+#: ../hosts/hostalltubetv.py:32 ../hosts/hostaltadefinizione.py:67
+#: ../hosts/hostaltadefinizione01.py:98 ../hosts/hostaltadefinizione1.py:100
+#: ../hosts/hostaltadefinizionecool.py:60 ../hosts/hostandrijaiandjelka.py:81
+#: ../hosts/hostanimeodcinki.py:45 ../hosts/hostappletrailers.py:44
+#: ../hosts/hostarconaitvme.py:54 ../hosts/hostardmediathek.py:64
+#: ../hosts/hostartetv.py:61 ../hosts/hostbbciplayer.py:58
+#: ../hosts/hostbsto.py:82 ../hosts/hostcartoonhd.py:81
+#: ../hosts/hostcdapl.py:66 ../hosts/hostchristusvincit.py:302
+#: ../hosts/hostcimaclubcom.py:50 ../hosts/hostcineblog.py:83
+#: ../hosts/hostcinemaxx.py:140 ../hosts/hostcinemay.py:48
+#: ../hosts/hostcineto.py:42 ../hosts/hostclassiccinemaonline.py:41
+#: ../hosts/hostcrtankocom.py:32 ../hosts/hostdailymotion.py:47
+#: ../hosts/hostdancetrippin.py:40 ../hosts/hostdardarkomcom.py:35
+#: ../hosts/hostdarshowcom.py:35 ../hosts/hostdixmax.py:124
+#: ../hosts/hostdokumentalnenet.py:47 ../hosts/hostdpstreamingcx.py:37
+#: ../hosts/hostefilmytv.py:85 ../hosts/hostegybest.py:66
+#: ../hosts/hostekinotv.py:68 ../hosts/hosteurosportplayer.py:96
+#: ../hosts/hostfaselhdcom.py:40 ../hosts/hostfenixsite.py:61
+#: ../hosts/hostfilma24hdcom.py:33 ../hosts/hostfilma24io.py:78
+#: ../hosts/hostfilmaoncom.py:81 ../hosts/hostfilmativa.py:33
+#: ../hosts/hostfilmehdnet.py:50 ../hosts/hostfilmeonlineto.py:112
+#: ../hosts/hostfilmezz.py:72 ../hosts/hostfilmixco.py:129
+#: ../hosts/hostfilmovizijastudio.py:51 ../hosts/hostfilmpalast.py:46
+#: ../hosts/hostfilmpertutti.py:42 ../hosts/hostfilmstreamhdit.py:36
+#: ../hosts/hostfilmstreamvkcom.py:101 ../hosts/hostfilmydokumentalneeu.py:33
+#: ../hosts/hostforjatn.py:43 ../hosts/hostbajeczkiorg.py:45
+#: ../hosts/hostddl.py:140 ../hosts/hostfilisertv.py:53
+#: ../hosts/hostfreediscpl.py:57 ../hosts/hostnaszekinotv.py:103
+#: ../hosts/hostgamatocom.py:38 ../hosts/hostgamatotvme.py:41
+#: ../hosts/hostgledalica.py:69 ../hosts/hostgreekdocumentaries3.py:37
+#: ../hosts/hostguardaserie.py:77 ../hosts/hosthd1080online.py:61
+#: ../hosts/hosthdfilmetv.py:39 ../hosts/hosthdfull.py:155
+#: ../hosts/hosthdkinomir.py:41 ../hosts/hosthdpopcornscom.py:39
+#: ../hosts/hosthdsto.py:147 ../hosts/hosthdstreams.py:73
+#: ../hosts/hosthitboxtv.py:44 ../hosts/hosthoofootcom.py:32
+#: ../hosts/hosticefilmsinfo.py:75 ../hosts/hostinteriatv.py:54
+#: ../hosts/hostkabarety.py:42 ../hosts/hostkijknl.py:55
+#: ../hosts/hostkinogo.py:90 ../hosts/hostkinomanco.py:76
+#: ../hosts/hostkinotan.py:43 ../hosts/hostkinox.py:94
+#: ../hosts/hostkissanimeto.py:61 ../hosts/hostkisscartoonme.py:46
+#: ../hosts/hostkkiste.py:147 ../hosts/hostkreskoweczki.py:43
+#: ../hosts/hostkreskowkazone.py:62 ../hosts/hostlaola1tv.py:54
+#: ../hosts/hostlibrestream.py:34 ../hosts/hostliveleak.py:47
+#: ../hosts/hostlookmovieag.py:56 ../hosts/hostlosmovies.py:60
+#: ../hosts/hostluxveritatis.py:54 ../hosts/hostmaxtvgo.py:60
+#: ../hosts/hostmooviecc.py:50 ../hosts/hostmovie4kto.py:69
+#: ../hosts/hostmovienightws.py:32 ../hosts/hostmovierulzsx.py:39
+#: ../hosts/hostmovizlandcom.py:33 ../hosts/hostmovs4ucom.py:44
+#: ../hosts/hostmozicsillag.py:46 ../hosts/hostmrpiracy.py:117
+#: ../hosts/hostmusicmp3ru.py:80 ../hosts/hostmyfreemp3.py:38
+#: ../hosts/hostmythewatchseries.py:70 ../hosts/hostninateka.py:54
+#: ../hosts/hostnuteczki.py:94 ../hosts/hostofficialfilmillimite.py:76
+#: ../hosts/hostoipeirates.py:79 ../hosts/hostokgoals.py:39
+#: ../hosts/hostororotv.py:42 ../hosts/hostorthobulletscom.py:70
+#: ../hosts/hostotakufr.py:61 ../hosts/hostourmatchnet.py:40
+#: ../hosts/hostpinkbike.py:43 ../hosts/hostplanetstreamingcom.py:107
+#: ../hosts/hostplaypuls.py:67 ../hosts/hostplayrtsiw.py:91
+#: ../hosts/hostplusdede.py:71 ../hosts/hostputlockertvto.py:136
+#: ../hosts/hostredbull.py:55 ../hosts/hostrtbfbe.py:96
+#: ../hosts/hostrteieplayer.py:49 ../hosts/hostrtlmost.py:167
+#: ../hosts/hostserialeco.py:40 ../hosts/hostserialnet.py:39
+#: ../hosts/hostserienstreamto.py:76 ../hosts/hostseriesonline.py:137
+#: ../hosts/hostserijeonline.py:57 ../hosts/hostshahiidanimenet.py:45
+#: ../hosts/hostshoutcast.py:45 ../hosts/hostskstream.py:116
+#: ../hosts/hostsolarmovie.py:120 ../hosts/hostsovdub.py:33
+#: ../hosts/hostspiegeltv.py:74 ../hosts/hostsportdeutschland.py:56
+#: ../hosts/hoststreamcomplet.py:31 ../hosts/hoststreaminghdfun.py:59
+#: ../hosts/hoststreamliveto.py:50 ../hosts/hostsvtplayse.py:84
+#: ../hosts/hostszenestreamz.py:42 ../hosts/hosttainieskaiseirestv.py:51
+#: ../hosts/hosttantifilmorg.py:39 ../hosts/hostted.py:77
+#: ../hosts/hosttfarjocom.py:71 ../hosts/hostthewatchseriesto.py:68
+#: ../hosts/hosttreetv.py:72 ../hosts/hostturcjatv.py:78
+#: ../hosts/hosttvgrypl.py:56 ../hosts/hosttvproart.py:33
+#: ../hosts/hosttvpvod.py:93 ../hosts/hosttwitchtv.py:136
+#: ../hosts/hostuktvplay.py:68 ../hosts/hostustreamtv.py:31
+#: ../hosts/hostvevo.py:96 ../hosts/hostvidcorncom.py:85
+#: ../hosts/hostvideopenny.py:96 ../hosts/hostvimeo.py:66
+#: ../hosts/hostvodpl.py:63 ../hosts/hostvumedicom.py:79
+#: ../hosts/hostwatchcartoononline.py:106 ../hosts/hostwatchwrestlinguno.py:44
+#: ../hosts/hostwgrane.py:66 ../hosts/hostwolnelekturypl.py:72
+#: ../hosts/hostworldfree4u.py:44 ../hosts/hostwpolscepl.py:39
+#: ../hosts/hostwptv.py:54 ../hosts/hostxrysoise.py:52
+#: ../hosts/hostyesmoviesto.py:105 ../hosts/hostyifytv.py:68
+#: ../hosts/hostyoutube.py:54 ../hosts/hostzdfmediathek.py:86
+#: ../Web/webParts.py:80
+msgid "Search"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:185
+msgid "Functionality protected by Google reCAPTCHA!"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:208 ../hosts/host3player.py:180
+#: ../hosts/host3sktv.py:116 ../hosts/host3sktv.py:268
+#: ../hosts/host7tvde.py:267 ../hosts/host9anime.py:182
+#: ../hosts/hostakoam.py:173 ../hosts/hostallboxtv.py:229
+#: ../hosts/hostalltubetv.py:136 ../hosts/hostaltadefinizione.py:164
+#: ../hosts/hostaltadefinizione.py:272 ../hosts/hostaltadefinizione01.py:151
+#: ../hosts/hostaltadefinizione01.py:212 ../hosts/hostaltadefinizione1.py:167
+#: ../hosts/hostaltadefinizionecool.py:152
+#: ../hosts/hostaltadefinizionecool.py:237 ../hosts/hostandrijaiandjelka.py:108
+#: ../hosts/hostanimeodcinki.py:217 ../hosts/hostardmediathek.py:276
+#: ../hosts/hostartetv.py:208 ../hosts/hostartetv.py:234
+#: ../hosts/hostartetv.py:241 ../hosts/hostartetv.py:299
+#: ../hosts/hostbbciplayer.py:465 ../hosts/hostcartoonhd.py:170
+#: ../hosts/hostcdapl.py:219 ../hosts/hostchristusvincit.py:442
+#: ../hosts/hostcimaclubcom.py:252 ../hosts/hostcineblog.py:116
+#: ../hosts/hostcinemaxx.py:179 ../hosts/hostcinemay.py:106
+#: ../hosts/hostcineto.py:215 ../hosts/hostclassiccinemaonline.py:128
+#: ../hosts/hostclassiccinemaonline.py:161 ../hosts/hostcrtankocom.py:161
+#: ../hosts/hostcrtankocom.py:209 ../hosts/hostdailymotion.py:92
+#: ../hosts/hostdardarkomcom.py:141 ../hosts/hostdardarkomcom.py:177
+#: ../hosts/hostdarshowcom.py:173 ../hosts/hostdel.py:108
+#: ../hosts/hostdixmax.py:249 ../hosts/hostdokumentalnenet.py:134
+#: ../hosts/hostdpstreamingcx.py:104 ../hosts/hostefilmytv.py:206
+#: ../hosts/hostefilmytv.py:375 ../hosts/hostefilmytv.py:402
+#: ../hosts/hostegybest.py:192 ../hosts/hostekinotv.py:195
+#: ../hosts/hostekinotv.py:228 ../hosts/hostekstraklasatv.py:115
+#: ../hosts/hostekstraklasatv.py:119 ../hosts/hosteskago.py:211
+#: ../hosts/hosteurosportplayer.py:384 ../hosts/hosteurosportplayer.py:554
+#: ../hosts/hostfaselhdcom.py:155 ../hosts/hostfenixsite.py:163
+#: ../hosts/hostfightvideo.py:163 ../hosts/hostfightvideo.py:238
+#: ../hosts/hostfilma24hdcom.py:157 ../hosts/hostfilma24io.py:128
+#: ../hosts/hostfilmaoncom.py:127 ../hosts/hostfilmativa.py:117
+#: ../hosts/hostfilmehdnet.py:128 ../hosts/hostfilmeonlineto.py:242
+#: ../hosts/hostfilmezz.py:198 ../hosts/hostfilmixco.py:301
+#: ../hosts/hostfilmovizijastudio.py:244 ../hosts/hostfilmpalast.py:177
+#: ../hosts/hostfilmpertutti.py:106 ../hosts/hostfilmstreamhdit.py:114
+#: ../hosts/hostfilmstreamvkcom.py:155 ../hosts/hostfilmydokumentalneeu.py:126
+#: ../hosts/hostfokustv.py:166 ../hosts/hostforjatn.py:158
+#: ../hosts/hostfrancetv.py:426 ../hosts/hostbajeczkiorg.py:98
+#: ../hosts/hostddl.py:300 ../hosts/hostddl.py:323 ../hosts/hostddl.py:344
+#: ../hosts/hostfilisertv.py:195 ../hosts/hostfreediscpl.py:215
+#: ../hosts/hostfreediscpl.py:252 ../hosts/hostnaszekinotv.py:150
+#: ../hosts/hostgamatocom.py:143 ../hosts/hostgamatotvme.py:163
+#: ../hosts/hostgledalica.py:221 ../hosts/hostgreekdocumentaries3.py:136
+#: ../hosts/hosthd1080online.py:105 ../hosts/hosthd1080online.py:194
+#: ../hosts/hosthdfilmetv.py:191 ../hosts/hosthdfull.py:259
+#: ../hosts/hosthdfull.py:422 ../hosts/hosthdkinomir.py:205
+#: ../hosts/hosthdpopcornscom.py:170 ../hosts/hosthdsto.py:267
+#: ../hosts/hosthdstreams.py:210 ../hosts/hosthitboxtv.py:113
+#: ../hosts/hosthitboxtv.py:151 ../hosts/hosthoofootcom.py:206
+#: ../hosts/hostinteriatv.py:135 ../hosts/hostinteriatv.py:174
+#: ../hosts/hostiptvplayerinfo.py:116 ../hosts/hostkabarety.py:190
+#: ../hosts/hostkijknl.py:96 ../hosts/hostkijknl.py:224
+#: ../hosts/hostkinogo.py:147 ../hosts/hostkinogo.py:151
+#: ../hosts/hostkinomanco.py:447 ../hosts/hostkinotan.py:167
+#: ../hosts/hostkinox.py:391 ../hosts/hostkissanimeto.py:349
+#: ../hosts/hostkisscartoonme.py:272 ../hosts/hostkkiste.py:198
+#: ../hosts/hostkkiste.py:206 ../hosts/hostkreskoweczki.py:160
+#: ../hosts/hostla7it.py:310 ../hosts/hostlaola1tv.py:238
+#: ../hosts/hostlaola1tv.py:284 ../hosts/hostlibrestream.py:201
+#: ../hosts/hostliveleak.py:110 ../hosts/hostlosmovies.py:183
+#: ../hosts/hostluxveritatis.py:137 ../hosts/hostluxveritatis.py:256
+#: ../hosts/hostmeczykipl.py:104 ../hosts/hostmooviecc.py:204
+#: ../hosts/hostmovie4kto.py:222 ../hosts/hostmovie4kto.py:294
+#: ../hosts/hostmovie4kto.py:393 ../hosts/hostmovienightws.py:142
+#: ../hosts/hostmovierulzsx.py:154 ../hosts/hostmovizlandcom.py:155
+#: ../hosts/hostmovs4ucom.py:176 ../hosts/hostmozicsillag.py:210
+#: ../hosts/hostmrpiracy.py:274 ../hosts/hostmusicmp3ru.py:140
+#: ../hosts/hostmyfreemp3.py:134 ../hosts/hostmythewatchseries.py:161
+#: ../hosts/hostmythewatchseries.py:210 ../hosts/hostngolos.py:201
+#: ../hosts/hostnuteczki.py:304 ../hosts/hostofficialfilmillimite.py:146
+#: ../hosts/hostoipeirates.py:198 ../hosts/hostokgoals.py:104
+#: ../hosts/hostorthobulletscom.py:173 ../hosts/hostotakufr.py:132
+#: ../hosts/hostourmatchnet.py:227 ../hosts/hostpinkbike.py:134
+#: ../hosts/hostplanetstreamingcom.py:228 ../hosts/hostplayrtsiw.py:392
+#: ../hosts/hostplayrtsiw.py:478 ../hosts/hostplusdede.py:224
+#: ../hosts/hostplusdede.py:274 ../hosts/hostpmgsport.py:158
+#: ../hosts/hostputlockertvto.py:251 ../hosts/hostrtbfbe.py:203
+#: ../hosts/hostrtbfbe.py:354 ../hosts/hostrtlmost.py:318
+#: ../hosts/hostserialeco.py:98 ../hosts/hostserienstreamto.py:220
+#: ../hosts/hostseriesonline.py:219 ../hosts/hostserijeonline.py:187
+#: ../hosts/hostshahiidanimenet.py:167 ../hosts/hostshahiidanimenet.py:215
+#: ../hosts/hostskstream.py:192 ../hosts/hostsolarmovie.py:230
+#: ../hosts/hostsovdub.py:111 ../hosts/hostspiegeltv.py:291
+#: ../hosts/hostsportdeutschland.py:162 ../hosts/hostsportitalia.py:221
+#: ../hosts/hoststreamcomplet.py:94 ../hosts/hoststreaminghdfun.py:136
+#: ../hosts/hoststreamliveto.py:207 ../hosts/hostsvtplayse.py:273
+#: ../hosts/hostsvtplayse.py:407 ../hosts/hostszenestreamz.py:133
+#: ../hosts/hosttainieskaiseirestv.py:138 ../hosts/hosttantifilmorg.py:217
+#: ../hosts/hostted.py:317 ../hosts/hostted.py:367 ../hosts/hostted.py:426
+#: ../hosts/hosttfarjocom.py:163 ../hosts/hostthewatchseriesto.py:232
+#: ../hosts/hosttreetv.py:216 ../hosts/hostturcjatv.py:143
+#: ../hosts/hostturcjatv.py:184 ../hosts/hosttvgrypl.py:127
+#: ../hosts/hosttvnvod.py:335 ../hosts/hosttvproart.py:40
+#: ../hosts/hosttvpvod.py:401 ../hosts/hosttvpvod.py:598
+#: ../hosts/hosttvpvod.py:924 ../hosts/hosttwitchtv.py:177
+#: ../hosts/hosttwitchtv.py:219 ../hosts/hosttwitchtv.py:311
+#: ../hosts/hosttwitchtv.py:372 ../hosts/hosttwitchtv.py:426
+#: ../hosts/hosttwitchtv.py:446 ../hosts/hosttwitchtv.py:463
+#: ../hosts/hosttwitchtv.py:485 ../hosts/hostustreamtv.py:154
+#: ../hosts/hostvevo.py:156 ../hosts/hostvevo.py:307 ../hosts/hostvevo.py:334
+#: ../hosts/hostvidcorncom.py:172 ../hosts/hostvidcorncom.py:212
+#: ../hosts/hostvidcorncom.py:231 ../hosts/hostvidcorncom.py:251
+#: ../hosts/hostvideopenny.py:152 ../hosts/hostvimeo.py:258
+#: ../hosts/hostvimeo.py:322 ../hosts/hostvodpl.py:213
+#: ../hosts/hostvumedicom.py:208 ../hosts/hostvumedicom.py:263
+#: ../hosts/hostwatchwrestling.py:141 ../hosts/hostwatchwrestlinguno.py:126
+#: ../hosts/hostwgrane.py:160 ../hosts/hostworldfree4u.py:123
+#: ../hosts/hostwpolscepl.py:213 ../hosts/hostwptv.py:132
+#: ../hosts/hostwptv.py:213 ../hosts/hostwrealu24tv.py:86
+#: ../hosts/hostxrysoise.py:150 ../hosts/hostyesmoviesto.py:189
+#: ../hosts/hostyifytv.py:278 ../hosts/hostzalukajcom.py:202
+#: ../hosts/hostzdfmediathek.py:370 ../libs/wagasworld.py:96
+#: ../libs/webcamera.py:140 ../libs/youtubeparser.py:361
+#: ../libs/youtubeparser.py:397 ../subproviders/subprov_napiprojektpl.py:212
+#: ../subproviders/subprov_napisy24pl.py:173
+#: ../subproviders/subprov_opensubtitlesorg2.py:265
+#: ../subproviders/subprov_opensubtitlesorg2.py:301
+#: ../subproviders/subprov_subtitlesgr.py:100
+#: ../subproviders/subprov_titlovicom.py:228
+msgid "Next page"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:222 ../hosts/hostakoam.py:228
+#: ../hosts/hostallboxtv.py:278 ../hosts/hostaltadefinizione.py:193
+#: ../hosts/hostaltadefinizionecool.py:177 ../hosts/hostcartoonhd.py:206
+#: ../hosts/hostcartoonhd.py:234 ../hosts/hostfilma24io.py:155
+#: ../hosts/hostfilmaoncom.py:220 ../hosts/hostddl.py:364
+#: ../hosts/hostnaszekinotv.py:321 ../hosts/hostgamatocom.py:178
+#: ../hosts/hosthdfull.py:353 ../hosts/hostkinogo.py:181
+#: ../hosts/hostmozicsillag.py:270 ../hosts/hoststreaminghdfun.py:230
+#: ../hosts/hosttfarjocom.py:249
+msgid "trailer"
+msgstr ""
+
+#: ../hosts/host3player.py:30 ../hosts/hostplayrtsiw.py:30
+msgid "Use web-proxy for VODs (it may be illegal):"
+msgstr ""
+
+#: ../hosts/host3player.py:55
+msgid "LIVE"
+msgstr ""
+
+#: ../hosts/host3player.py:56
+msgid "BY DAY"
+msgstr ""
+
+#: ../hosts/host3player.py:57 ../hosts/hostbbciplayer.py:56
+#: ../hosts/hostbbciplayer.py:189 ../hosts/hostnaszekinotv.py:175
+#: ../hosts/hostgledalica.py:240 ../hosts/hostserienstreamto.py:72
+#: ../hosts/hosttvnowde.py:60
+msgid "A-Z"
+msgstr ""
+
+#: ../hosts/host3player.py:356 ../hosts/host7tvde.py:286
+msgid "Link protected with DRM."
+msgstr ""
+
+#: ../hosts/host9anime.py:44 ../hosts/hostfilmezz.py:65
+#: ../hosts/hostkissanimeto.py:59 ../hosts/hostkisscartoonme.py:44
+#: ../hosts/hostourmatchnet.py:34
+msgid "Home"
+msgstr ""
+
+#: ../hosts/host9anime.py:45
+msgid "Newest"
+msgstr ""
+
+#: ../hosts/host9anime.py:46
+msgid "Last update"
+msgstr ""
+
+#: ../hosts/host9anime.py:47
+msgid "Most watched"
+msgstr ""
+
+#: ../hosts/host9anime.py:48 ../hosts/hostaltadefinizione.py:70
+#: ../hosts/hostaltadefinizionecool.py:63
+msgid "A-Z List"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:67 ../hosts/hostallboxtv.py:345
+#: ../hosts/hostalltubetv.py:29 ../hosts/hostarconaitvme.py:52
+#: ../hosts/hostefilmytv.py:83 ../hosts/hostefilmytv.py:767
+#: ../hosts/hostegybest.py:62 ../hosts/hostfilma24hdcom.py:31
+#: ../hosts/hostfilmativa.py:31 ../hosts/hostfilmativa.py:292
+#: ../hosts/hostfilmeonlineto.py:110 ../hosts/hostfilmezz.py:66
+#: ../hosts/hostfilmovizijastudio.py:45 ../hosts/hostfilmpalast.py:43
+#: ../hosts/hostforjatn.py:40 ../hosts/hostforjatn.py:391
+#: ../hosts/hostfilisertv.py:51 ../hosts/hostfreediscpl.py:60
+#: ../hosts/hostfreediscpl.py:505 ../hosts/hostnaszekinotv.py:730
+#: ../hosts/hostgamatocom.py:36 ../hosts/hosthdfilmetv.py:36
+#: ../hosts/hosthdstreams.py:550 ../hosts/hosticefilmsinfo.py:73
+#: ../hosts/hostkinomanco.py:848 ../hosts/hostkinox.py:90
+#: ../hosts/hostlookmovieag.py:54 ../hosts/hostlookmovieag.py:289
+#: ../hosts/hostmooviecc.py:46 ../hosts/hostmovie4kto.py:67
+#: ../hosts/hostmovs4ucom.py:39 ../hosts/hostmozicsillag.py:43
+#: ../hosts/hostmrpiracy.py:687 ../hosts/hostplanetstreamingcom.py:369
+#: ../hosts/hoststreaminghdfun.py:445 ../hosts/hostszenestreamz.py:38
+#: ../hosts/hostszenestreamz.py:39 ../hosts/hosttreetv.py:65
+#: ../hosts/hostvodpl.py:57 ../subproviders/subprov_prijevodi.py:48
+msgid "Movies"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:68
+msgid "Premieres"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:69 ../hosts/hostallboxtv.py:345
+#: ../hosts/hostegybest.py:65 ../hosts/hostfilmativa.py:32
+#: ../hosts/hostgreekdocumentaries3.py:36
+msgid "TV series"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:70 ../hosts/hostkinotan.py:41
+#: ../hosts/hosttreetv.py:67
+msgid "Cartoons"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:71 ../hosts/hostdailymotion.py:53
+msgid "Ranking"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:294 ../hosts/hosthd1080online.py:143
+#: ../hosts/hostplusdede.py:306 ../hosts/hostserialeco.py:159
+#: ../hosts/hostserialeco.py:191 ../hosts/hostszenestreamz.py:231
+#: ../hosts/hostszenestreamz.py:250 ../hosts/hostuktvplay.py:162
+#: ../subproviders/subprov_napisy24pl.py:227
+#: ../subproviders/subprov_opensubtitlesorg.py:302
+#: ../subproviders/subprov_opensubtitlesorg3.py:85
+#: ../subproviders/subprov_titlovicom.py:101
+#, python-format
+msgid "Season %s"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:471 ../hosts/hostdixmax.py:450
+#: ../hosts/hostkinomanco.py:660 ../hosts/hostmaxtvgo.py:120
+#: ../hosts/hostorthobulletscom.py:209 ../hosts/hostplusdede.py:518
+#: ../hosts/hostrtlmost.py:381 ../hosts/hostvumedicom.py:338
+#, python-format
+msgid ""
+"The host %s requires registration. \n"
+"Please fill your login and password in the host configuration. Available under blue button."
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:518 ../hosts/hostnaszekinotv.py:661
+msgid "Connection error."
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:519 ../hosts/hostbbcsport.py:474
+#: ../hosts/hostcartoonhd.py:570 ../hosts/hostcdapl.py:454
+#: ../hosts/hostdixmax.py:454 ../hosts/hostefilmytv.py:693
+#: ../hosts/hostegybest.py:427 ../hosts/hostekinotv.py:495
+#: ../hosts/hostfilmezz.py:479 ../hosts/hostfilmixco.py:445
+#: ../hosts/hostfreediscpl.py:447 ../hosts/hostnaszekinotv.py:662
+#: ../hosts/hosttvplayercom.py:356 ../hosts/hosthdfull.py:614
+#: ../hosts/hosthdsto.py:514 ../hosts/hostkinomanco.py:795
+#: ../hosts/hostmaxtvgo.py:223 ../hosts/hostnuteczki.py:414
+#: ../hosts/hostorthobulletscom.py:257 ../hosts/hostplusdede.py:605
+#: ../hosts/hostrtbfbe.py:622 ../hosts/hostrtlmost.py:434
+#: ../hosts/hostserienstreamto.py:443 ../hosts/hostserienstreamto.py:552
+#: ../hosts/hostserijeonline.py:310 ../hosts/hoststreamliveto.py:413
+#: ../hosts/hostvidcorncom.py:572 ../hosts/hostvumedicom.py:371
+#: ../libs/edemtv.py:90 ../libs/firstonetvnet.py:107 ../libs/internetowa.py:85
+msgid "Login failed."
+msgstr ""
+
+#: ../hosts/hostalltubetv.py:30 ../hosts/hostefilmytv.py:84
+#: ../hosts/hostefilmytv.py:768 ../hosts/hostfilmativa.py:293
+#: ../hosts/hostfilmezz.py:67 ../hosts/hostfilmovizijastudio.py:48
+#: ../hosts/hostfilmpalast.py:44 ../hosts/hostfilmstreamvkcom.py:99
+#: ../hosts/hostforjatn.py:41 ../hosts/hostfilisertv.py:52
+#: ../hosts/hostnaszekinotv.py:731 ../hosts/hostgamatocom.py:37
+#: ../hosts/hosthdfilmetv.py:37 ../hosts/hosthdstreams.py:551
+#: ../hosts/hostkijknl.py:62 ../hosts/hostkinomanco.py:849
+#: ../hosts/hostkinox.py:92 ../hosts/hostmooviecc.py:47
+#: ../hosts/hostmovs4ucom.py:40 ../hosts/hostmozicsillag.py:44
+#: ../hosts/hostplanetstreamingcom.py:370 ../hosts/hoststreaminghdfun.py:446
+#: ../hosts/hostszenestreamz.py:40 ../hosts/hostszenestreamz.py:41
+#: ../hosts/hosttreetv.py:66 ../hosts/hostvodpl.py:58 ../hosts/hostwptv.py:51
+#: ../subproviders/subprov_prijevodi.py:48
+msgid "Series"
+msgstr ""
+
+#: ../hosts/hostalltubetv.py:31
+msgid "Junior"
+msgstr ""
+
+#: ../hosts/hostalltubetv.py:35
+msgid "List"
+msgstr ""
+
+#: ../hosts/hostalltubetv.py:36
+msgid "ABC"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione.py:264 ../hosts/hostaltadefinizionecool.py:229
+#: ../hosts/hostcartoonhd.py:497 ../hosts/hostfilmovizijastudio.py:50
+#: ../hosts/hostlibrestream.py:30 ../hosts/hostvidcorncom.py:492
+msgid "Year"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione01.py:298 ../hosts/hostaltadefinizione1.py:262
+#: ../hosts/hostcineblog.py:231 ../hosts/hostfilmpertutti.py:248
+#: ../hosts/hosthd1080online.py:255 ../hosts/hostkinox.py:217
+#: ../hosts/hostvidcorncom.py:500 ../libs/youtubeparser.py:31
+msgid "Rating"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione01.py:301 ../hosts/hostaltadefinizione1.py:139
+#: ../hosts/hostaltadefinizione1.py:265 ../hosts/hostcineblog.py:234
+msgid "Views"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione01.py:303 ../hosts/hostaltadefinizione1.py:267
+#: ../hosts/hostcineblog.py:236
+msgid "Relese"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione1.py:97 ../hosts/hostbbciplayer.py:55
+#: ../hosts/hostdailymotion.py:46 ../hosts/hostdarshowcom.py:96
+#: ../hosts/hostfilma24io.py:75 ../hosts/hostfilmpalast.py:52
+#: ../hosts/hostfilmstreamvkcom.py:98 ../hosts/hostfrancetv.py:447
+#: ../hosts/hostgreekdocumentaries3.py:33 ../hosts/hosthdpopcornscom.py:38
+#: ../hosts/hostitvcom.py:57 ../hosts/hostmooviecc.py:54
+#: ../hosts/hostmooviecc.py:59 ../hosts/hostmovizlandcom.py:32
+#: ../hosts/hostmovs4ucom.py:49 ../hosts/hostokgoals.py:38
+#: ../hosts/hostorthobulletscom.py:68 ../hosts/hostpinkbike.py:42
+#: ../hosts/hostplayrtsiw.py:169 ../hosts/hostserijeonline.py:56
+#: ../hosts/hostsportdeutschland.py:55 ../hosts/hoststreamcomplet.py:30
+#: ../hosts/hostsvtplayse.py:82 ../hosts/hosttantifilmorg.py:38
+#: ../hosts/hosttvnowde.py:63 ../hosts/hostustreamtv.py:30
+#: ../hosts/hostvimeo.py:65 ../hosts/hostwatchwrestlinguno.py:29
+#: ../hosts/hostzdfmediathek.py:83
+msgid "Categories"
+msgstr ""
+
+#: ../hosts/hostandrijaiandjelka.py:74 ../hosts/hostappletrailers.py:56
+#: ../hosts/hostdixmax.py:144 ../hosts/hostdixmax.py:148
+#: ../hosts/hostefilmytv.py:110 ../hosts/hostefilmytv.py:119
+#: ../hosts/hostefilmytv.py:295 ../hosts/hosteskago.py:155
+#: ../hosts/hostfenixsite.py:95 ../hosts/hostfilma24hdcom.py:253
+#: ../hosts/hostfilmpalast.py:100 ../hosts/hostfilmpertutti.py:53
+#: ../hosts/hostfilmstreamhdit.py:62 ../hosts/hostddl.py:181
+#: ../hosts/hostnaszekinotv.py:244 ../hosts/hostgledalica.py:125
+#: ../hosts/hosthdfilmetv.py:111 ../hosts/hosthdsto.py:168
+#: ../hosts/hostitvcom.py:113 ../hosts/hostlibrestream.py:102
+#: ../hosts/hostmeczykipl.py:47 ../hosts/hostmusicmp3ru.py:106
+#: ../hosts/hostngolos.py:115 ../hosts/hostngolos.py:164
+#: ../hosts/hostnuteczki.py:116 ../hosts/hostofficialfilmillimite.py:88
+#: ../hosts/hostoipeirates.py:100 ../hosts/hostplayrtsiw.py:228
+#: ../hosts/hostplayrtsiw.py:242 ../hosts/hostserijeonline.py:116
+#: ../hosts/hostskstream.py:129 ../hosts/hostsportdeutschland.py:99
+#: ../hosts/hostsvtplayse.py:134 ../hosts/hosttainieskaiseirestv.py:93
+#: ../hosts/hosttfarjocom.py:82 ../hosts/hosttfarjocom.py:110
+#: ../hosts/hosttvnowde.py:127 ../hosts/hosttvnowde.py:226
+#: ../hosts/hostvumedicom.py:113 ../hosts/hostvumedicom.py:150
+#: ../hosts/hostwatchwrestlinguno.py:64 ../hosts/hostyoutube.py:99
+#: ../libs/livetvhdnet.py:73 ../libs/webcamera.py:183
+msgid "--All--"
+msgstr ""
+
+#: ../hosts/hostanimeodcinki.py:40 ../hosts/hostfilmativa.py:37
+#: ../hosts/hostfilmativa.py:41 ../hosts/hostfilmpalast.py:50
+#: ../hosts/hostserienstreamto.py:74
+msgid "New"
+msgstr ""
+
+#: ../hosts/hostanimeodcinki.py:42 ../hosts/hostkissanimeto.py:60
+#: ../hosts/hostshahiidanimenet.py:44
+msgid "Anime list"
+msgstr ""
+
+#: ../hosts/hostanimeodcinki.py:43
+msgid "Movies list"
+msgstr ""
+
+#: ../hosts/hostanimeodcinki.py:44 ../hosts/hostbsto.py:80
+#: ../hosts/hostdarshowcom.py:96 ../hosts/hostlookmovieag.py:64
+#: ../hosts/hostmovie4kto.py:75 ../hosts/hostmovie4kto.py:80
+#: ../hosts/hostmovs4ucom.py:50 ../hosts/hostserienstreamto.py:73
+#: ../hosts/hostshoutcast.py:44 ../hosts/hostsovdub.py:31
+#: ../hosts/hostthewatchseriesto.py:67 ../hosts/hostvidcorncom.py:507
+#: ../hosts/hostyifytv.py:65
+msgid "Genres"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96
+msgid "Studio:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:546
+msgid "Director:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:547
+msgid "Directors:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostfilma24io.py:237
+#: ../hosts/hostddl.py:544 ../hosts/hostofficialfilmillimite.py:259
+msgid "Genres:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:543
+msgid "Genre:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:553
+msgid "Actors:"
+msgstr ""
+
+#: ../hosts/hostarconaitvme.py:49 ../hosts/hostartetv.py:82
+#: ../hosts/hostfilmpalast.py:42 ../hosts/hostfilmstreamvkcom.py:97
+#: ../hosts/hosthoofootcom.py:29 ../hosts/hostkabarety.py:38
+#: ../hosts/hostokgoals.py:37 ../hosts/hostrtbfbe.py:91
+#: ../hosts/hostspiegeltv.py:78 ../hosts/hostwptv.py:50
+#: ../hosts/hostwrealu24tv.py:44
+msgid "Main"
+msgstr ""
+
+#: ../hosts/hostarconaitvme.py:50 ../hosts/hostitvcom.py:56
+msgid "Shows"
+msgstr ""
+
+#: ../hosts/hostarconaitvme.py:51
+msgid "Cable"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
+#: ../hosts/hostzdfmediathek.py:30 ../libs/videostar.py:32
+msgid "high"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
+#: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
+#: ../hosts/hostzdfmediathek.py:27 ../hosts/hostzdfmediathek.py:30
+msgid "medium"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
+#: ../hosts/hostzdfmediathek.py:30 ../libs/videostar.py:32
+msgid "low"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:28 ../hosts/hostzdfmediathek.py:30
+msgid "very high"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:28 ../hosts/hostzdfmediathek.py:30
+msgid "hd"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:29 ../hosts/hostzdfmediathek.py:31
+msgid "quality"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:29 ../hosts/hostzdfmediathek.py:31
+msgid "format"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:35
+msgid "Icons quality"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:36 ../hosts/hostzdfmediathek.py:38
+msgid "Prefered format"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:37 ../hosts/hostzdfmediathek.py:39
+msgid "Prefered quality"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:38 ../hosts/hostzdfmediathek.py:40
+msgid "More important"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:39 ../hosts/hostzdfmediathek.py:41
+msgid "One link mode"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:59 ../iptvdm/iptvdmui.py:75
+#: ../Web/webParts.py:248 ../Web/webParts.py:252
+msgid "Start"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:60 ../hosts/hostzdfmediathek.py:81
+#: ../hosts/hostzdfmediathek.py:98
+msgid "Missed the show?"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:61 ../hosts/hostzdfmediathek.py:82
+#: ../hosts/hostzdfmediathek.py:97
+msgid "Program A-Z"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:62
+msgid "Live TV"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:63
+msgid "Live Radio"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:402 ../hosts/hostmovie4kto.py:34
+msgid "German"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:402
+msgid "de"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:29 ../hosts/hostbbcsport.py:37
+#: ../hosts/hostkissanimeto.py:37 ../hosts/hostkisscartoonme.py:28
+#: ../hosts/hostsvtplayse.py:44 ../hosts/hostvevo.py:29
+#: ../hosts/hostyoutube.py:33
+msgid "Default video quality:"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:30 ../hosts/hostbbcsport.py:38
+#: ../hosts/hostsvtplayse.py:45 ../hosts/hostvevo.py:30
+#: ../hosts/hostyoutube.py:34
+msgid "Use default video quality:"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:31 ../hosts/hostbbcsport.py:39
+#: ../hosts/hostsvtplayse.py:46 ../hosts/hosttvnowde.py:37
+msgid "Preferred format:"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:32 ../hosts/hostbbcsport.py:31
+msgid "Use web-proxy (it may be illegal):"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:54 ../hosts/hostfrancetv.py:446
+#: ../hosts/hosttvplayercom.py:76 ../hosts/hostitvcom.py:55
+#: ../hosts/hostliveleak.py:46 ../hosts/hostororotv.py:41
+#: ../hosts/hostredbull.py:53 ../hosts/hostsvtplayse.py:80
+#: ../hosts/hosttvnowde.py:62 ../hosts/hosttwitchtv.py:118
+#: ../hosts/hosttwitchtv.py:153 ../hosts/hostvimeo.py:395
+#: ../libs/showsporttvcom.py:134
+msgid "Channels"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:57
+msgid "Most Popular"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:144 ../hosts/hostbbcsport.py:172
+#: ../hosts/hostfrancetv.py:448 ../hosts/hosthitboxtv.py:42
+#: ../hosts/hostplayrtsiw.py:142 ../hosts/hostrteieplayer.py:46
+#: ../hosts/hostyoutube.py:60 ../hosts/hostzdfmediathek.py:309
+msgid "Live"
+msgstr ""
+
+#: ../hosts/hostbbciplayer.py:193 ../hosts/hosttwitchtv.py:106
+msgid "Highlights"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:172 ../hosts/hosthoofootcom.py:31
+msgid "Promoted"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:172
+msgid "Coming up"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:172
+msgid "Catch up"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:404 ../hosts/hosteurosportplayer.py:561
+msgid "Error communicating with the server."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:405
+msgid "Data mismatch."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:431 ../hosts/hosteurosportplayer.py:583
+msgid ""
+"\n"
+"Error[1]."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:442 ../hosts/hosteurosportplayer.py:617
+msgid ""
+"\n"
+"Error[2]."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:450
+msgid ""
+"\n"
+"Error[3]."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:478
+msgid "A TV License is required to watch BBC iPlayer streams, see the BBC website for more information: https://www.bbc.co.uk/iplayer/help/tvlicence"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:482
+msgid ""
+"\n"
+"Error[4]."
+msgstr ""
+
+#: ../hosts/hostbsto.py:38 ../hosts/hostmrpiracy.py:51
+msgid "Use links cache"
+msgstr ""
+
+#: ../hosts/hostbsto.py:39 ../hosts/hostmrpiracy.py:52
+msgid "Captcha solving service"
+msgstr ""
+
+#: ../hosts/hostbsto.py:81
+msgid "Alphabet"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
+msgid "Lastest"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostdailymotion.py:50
+#: ../hosts/hostxrysoise.py:30
+msgid "Most viewed"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
+msgid "Longest"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
+msgid "Top rated"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostdailymotion.py:55
+#: ../hosts/hostxrysoise.py:30
+msgid "Random"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:222 ../hosts/hostdixmax.py:308
+#: ../hosts/hostdplayit.py:264 ../hosts/hostddl.py:435
+#: ../hosts/hostkinomanco.py:506 ../libs/moonwalkcc.py:258
+#: ../subproviders/subprov_napiprojektpl.py:206
+msgid "Season"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:493
+msgid "Episode title"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:497
+msgid "PEGI"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:497 ../hosts/hostted.py:355
+msgid "Duration"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:497
+msgid "Network"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:512
+msgid "Raiting"
+msgstr ""
+
+#: ../hosts/hostchristusvincit.py:24
+msgid "the lowest"
+msgstr ""
+
+#: ../hosts/hostchristusvincit.py:34
+msgid "the highest"
+msgstr ""
+
+#: ../hosts/hostcimaclubcom.py:113 ../hosts/hostnuteczki.py:86
+msgid "Main menu"
+msgstr ""
+
+#: ../hosts/hostcimaclubcom.py:127
+msgid "By year"
+msgstr ""
+
+#: ../hosts/hostcimaclubcom.py:131 ../hosts/hostfilmixco.py:128
+#: ../hosts/hostnaszekinotv.py:169 ../hosts/hostmovs4ucom.py:42
+#: ../hosts/hostnuteczki.py:93
+msgid "Filters"
+msgstr ""
+
+#: ../hosts/hostcimaclubcom.py:239 ../hosts/hostmediasetplay.py:263
+#: ../hosts/hostmediasetplay.py:405 ../hosts/hosttwitchtv.py:420
+#: ../hosts/hosttwitchtv.py:440
+#, python-format
+msgid "%s views"
+msgstr ""
+
+#: ../hosts/hostcimaclubcom.py:243
+#, python-format
+msgid "%s/10"
+msgstr ""
+
+#: ../hosts/hostcineto.py:111
+#, python-format
+msgid "Rating %s"
+msgstr ""
+
+#: ../hosts/hostcineto.py:113 ../hosts/hostcineto.py:123
+#: ../hosts/hostfilisertv.py:109 ../hosts/hosthdstreams.py:117
+#: ../hosts/hostkinomanco.py:222 ../hosts/hostmozicsillag.py:105
+#: ../hosts/hostmozicsillag.py:110 ../hosts/hostmozicsillag.py:115
+#: ../hosts/hostmozicsillag.py:120 ../hosts/hostmozicsillag.py:124
+#: ../hosts/hostmozicsillag.py:128 ../hosts/hoststreamliveto.py:136
+#: ../hosts/hosttreetv.py:113 ../hosts/hosttreetv.py:135
+#: ../hosts/hostvimeo.py:156 ../hosts/hostyifytv.py:151
+#: ../hosts/hostyifytv.py:168 ../subproviders/subprov_podnapisinet.py:109
+msgid "Any"
+msgstr ""
+
+#: ../hosts/hostcineto.py:121
+#, python-format
+msgid "Year %s"
+msgstr ""
+
+#: ../hosts/hostcineto.py:371
+msgid "Server return 404 - Not Found."
+msgstr ""
+
+#: ../hosts/hostcineto.py:372
+msgid "It looks like some kind of protection. Try again later."
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:28
+msgid "Localization"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:51 ../hosts/hostplayrtsiw.py:231
+#: ../hosts/hostplayrtsiw.py:236 ../hosts/hostplayrtsiw.py:245
+#: ../hosts/hostplayrtsiw.py:250
+msgid "Most recent"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:52
+msgid "Most rated"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:54 ../hosts/hostegybest.py:61
+#: ../hosts/hostourmatchnet.py:35 ../hosts/hosttwitchtv.py:112
+msgid "Trending"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:165
+msgid "views"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:341 ../hosts/hosthitboxtv.py:43
+#: ../hosts/hosthitboxtv.py:48 ../hosts/hostlaola1tv.py:468
+#: ../hosts/hosttwitchtv.py:119 ../hosts/hosturllist.py:50
+#: ../hosts/hostvevo.py:380 ../hosts/hostvimeo.py:393
+#: ../hosts/hostwrealu24tv.py:45
+msgid "Videos"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:345 ../hosts/hostted.py:75
+#: ../hosts/hostted.py:610 ../hosts/hostvevo.py:380
+msgid "Playlists"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:35
+msgid "LATEST CONTENT"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:36
+msgid "CHANNELS "
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:37 ../hosts/hostmusicmp3ru.py:327
+msgid "ARTISTS"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:38
+msgid "PARTIES"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:39
+msgid "VENUES"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:43
+msgid "Most featured"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:44
+msgid "Alphabetical "
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:225 ../hosts/hostrtbfbe.py:685
+#: ../hosts/hostrtlmost.py:73 ../hosts/hostyoutube.py:56
+msgid "Video"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:225 ../hosts/hostrtbfbe.py:686
+msgid "Audio"
+msgstr ""
+
+#: ../hosts/hostdardarkomcom.py:196
+#, python-format
+msgid "Trailer - %s"
+msgstr ""
+
+#: ../hosts/hostdarshowcom.py:33
+msgid "New series"
+msgstr ""
+
+#: ../hosts/hostdarshowcom.py:34 ../hosts/hostefilmytv.py:111
+#: ../hosts/hostefilmytv.py:121 ../hosts/hostfilmpalast.py:51
+msgid "Top"
+msgstr ""
+
+#: ../hosts/hostdarshowcom.py:182 ../hosts/hostegybest.py:207
+#: ../hosts/hostfenixsite.py:265 ../hosts/hostgamatocom.py:248
+#: ../hosts/hosthdfilmetv.py:209 ../hosts/hostkinomanco.py:495
+#: ../hosts/hostmrpiracy.py:401 ../hosts/hostserienstreamto.py:236
+#: ../hosts/hostshahiidanimenet.py:193
+msgid "Trailer"
+msgstr ""
+
+#: ../hosts/hostdarshowcom.py:200 ../hosts/hostgledalica.py:241
+#: ../hosts/hostkijknl.py:59 ../hosts/hostkinomanco.py:850
+msgid "Episodes"
+msgstr ""
+
+#: ../hosts/hostdarshowcom.py:247
+msgid "[Trailer]"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:55
+msgid "DixMax Suggestions"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:116 ../hosts/hostfilmativa.py:38
+#: ../hosts/hostfilmativa.py:43 ../hosts/hosthoofootcom.py:30
+#: ../hosts/hostkabarety.py:39 ../hosts/hostourmatchnet.py:36
+#: ../hosts/hostserienstreamto.py:75 ../hosts/hostsvtplayse.py:75
+#: ../hosts/hosttwitchtv.py:109 ../hosts/hostustreamtv.py:29
+#: ../hosts/hostyifytv.py:63
+msgid "Popular"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:117 ../hosts/hosttwitchtv.py:135
+msgid "Browse"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:206
+#, python-format
+msgid "%s minutes"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:294 ../hosts/hostdplayit.py:264
+#: ../libs/moonwalkcc.py:292 ../libs/moonwalkcc.py:302
+#: ../subproviders/subprov_napiprojektpl.py:232
+msgid "Episode"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:309
+#, python-format
+msgid "Season %s (%s)"
+msgstr ""
+
+#: ../hosts/hostdplayit.py:249
+msgid "Packages"
+msgstr ""
+
+#: ../hosts/hostdrdk.py:27
+msgid "Geolocation IP:"
+msgstr ""
+
+#: ../hosts/hostdrdk.py:38
+msgid "TV channels"
+msgstr ""
+
+#: ../hosts/hostdrdk.py:39
+msgid "Radio stations"
+msgstr ""
+
+#: ../hosts/hostefilmytv.py:554 ../hosts/hostfilmezz.py:336
+#: ../hosts/hostfilisertv.py:377 ../hosts/hostfreediscpl.py:130
+#: ../hosts/hostnaszekinotv.py:436 ../hosts/hostkinomanco.py:632
+#: ../hosts/hostmooviecc.py:440 ../hosts/hostplusdede.py:549
+#: ../hosts/hostserienstreamto.py:520 ../hosts/hoststreamliveto.py:262
+#: ../hosts/hoststreamliveto.py:275 ../hosts/hoststreamliveto.py:288
+#: ../hosts/hoststreamliveto.py:302 ../hosts/hoststreamliveto.py:332
+#: ../hosts/hostzalukajcom.py:355 ../libs/recaptcha_v1.py:36
+#: ../libs/recaptcha_v1.py:63 ../libs/recaptcha_v2.py:37
+#: ../libs/recaptcha_v2.py:71 ../libs/urlparser.py:3905
+#, python-format
+msgid "Fail to get \"%s\"."
+msgstr ""
+
+#: ../hosts/hostefilmytv.py:557 ../hosts/hostfilmezz.py:340
+#: ../hosts/hostfreediscpl.py:107 ../hosts/hostnaszekinotv.py:414
+#: ../hosts/hostkinomanco.py:636 ../hosts/hostmooviecc.py:444
+#: ../hosts/hostserienstreamto.py:510 ../hosts/hoststreamliveto.py:307
+#: ../hosts/hoststreamliveto.py:352 ../hosts/hostzalukajcom.py:346
+#: ../libs/recaptcha_v1.py:67 ../libs/urlparser.py:3910
+msgid "Send"
+msgstr ""
+
+#: ../hosts/hostefilmytv.py:558 ../hosts/hostfreediscpl.py:104
+#: ../hosts/hostnaszekinotv.py:412 ../hosts/hostkinomanco.py:637
+#: ../hosts/hostplusdede.py:555 ../hosts/hostserienstreamto.py:508
+#: ../hosts/hostzalukajcom.py:344
+msgid "Captcha"
+msgstr ""
+
+#: ../hosts/hostefilmytv.py:566 ../hosts/hostfilmezz.py:349
+#: ../hosts/hostfreediscpl.py:145 ../hosts/hostnaszekinotv.py:449
+#: ../hosts/hostkinomanco.py:645 ../hosts/hostmooviecc.py:453
+#: ../hosts/hostplusdede.py:563 ../hosts/hostserienstreamto.py:533
+#: ../hosts/hoststreamliveto.py:308 ../hosts/hostzalukajcom.py:368
+#: ../libs/firstonetvnet.py:339 ../libs/urlparser.py:3911
+msgid "Answer"
+msgstr ""
+
+#: ../hosts/hostegybest.py:63
+msgid "Arabic movies"
+msgstr ""
+
+#: ../hosts/hostegybest.py:64
+msgid "With subtitles"
+msgstr ""
+
+#: ../hosts/hostegybest.py:117 ../hosts/hostfilmixco.py:180
+#: ../hosts/hostfilmixco.py:198 ../hosts/hostplusdede.py:157
+#: ../hosts/hostplusdede.py:167 ../hosts/hostted.py:104 ../hosts/hostted.py:110
+#: ../hosts/hostted.py:116 ../hosts/hostted.py:121 ../hosts/hostted.py:138
+#: ../hosts/hostted.py:144 ../hosts/hostted.py:149
+msgid "--Any--"
+msgstr ""
+
+#: ../hosts/hostekinotv.py:395 ../hosts/hostekinotv.py:413
+#: ../hosts/hostfilmezz.py:301 ../hosts/hostfreediscpl.py:83
+#: ../hosts/hosthdstreams.py:395 ../hosts/hosthdstreams.py:411
+#: ../hosts/hostmooviecc.py:407 ../hosts/hostserienstreamto.py:396
+msgid "Link protected with google recaptcha v2."
+msgstr ""
+
+#: ../hosts/hostekstraklasatv.py:144
+msgid "Author"
+msgstr ""
+
+#: ../hosts/hostekstraklasatv.py:145
+msgid "Published"
+msgstr ""
+
+#: ../hosts/hosteskago.py:249 ../hosts/hostmythewatchseries.py:253
+#, python-format
+msgid "%s - trailer"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:91 ../libs/showsporttvcom.py:67
+msgid "On Air"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:92 ../libs/showsporttvcom.py:134
+msgid "Schedule"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:93
+msgid "VOD"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:94
+msgid "Events"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:95
+msgid "Olympics"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:578
+#, python-format
+msgid ""
+"The host %s requires subscription.\n"
+"Please fill your login and password in the host configuration - available under blue button."
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:607
+msgid "Login failed. Invalid email or password."
+msgstr ""
+
+#: ../hosts/hostfaselhdcom.py:126 ../hosts/hostddl.py:539
+#: ../hosts/hostmovizlandcom.py:233
+msgid "Rating:"
+msgstr ""
+
+#: ../hosts/hostfaselhdcom.py:127 ../hosts/hosthdstreams.py:202
+msgid "Views:"
+msgstr ""
+
+#: ../hosts/hostfavourites.py:31
+msgid "Allow watched flag to be set"
+msgstr ""
+
+#: ../hosts/hostfavourites.py:33
+msgid "The color of the viewed item"
+msgstr ""
+
+#: ../hosts/hostfavourites.py:38
+msgid "Favourites"
+msgstr ""
+
+#: ../hosts/hostfavourites.py:250
+msgid "Unset watched"
+msgstr ""
+
+#: ../hosts/hostfavourites.py:252
+msgid "Set watched"
+msgstr ""
+
+#: ../hosts/hostfilma24hdcom.py:32 ../hosts/hostlookmovieag.py:55
+#: ../hosts/hostlookmovieag.py:290 ../hosts/hostmovienightws.py:31
+msgid "TV Series"
+msgstr ""
+
+#: ../hosts/hostfilma24io.py:229 ../hosts/hostofficialfilmillimite.py:251
+msgid "Duration:"
+msgstr ""
+
+#: ../hosts/hostfilmativa.py:42
+msgid "New episodes"
+msgstr ""
+
+#: ../hosts/hostfilmeonlineto.py:111
+msgid "TV-Series"
+msgstr ""
+
+#: ../hosts/hostfilmeonlineto.py:260 ../hosts/hosttainieskaiseirestv.py:183
+msgid "[trailer]"
+msgstr ""
+
+#: ../hosts/hostfilmezz.py:68
+msgid "Top movies"
+msgstr ""
+
+#: ../hosts/hostfilmezz.py:69
+msgid "Top series"
+msgstr ""
+
+#: ../hosts/hostfilmezz.py:70
+msgid "Latest added"
+msgstr ""
+
+#: ../hosts/hostfilmezz.py:303 ../hosts/hostserienstreamto.py:398
+msgid "Please fill your login and password in the host configuration (available under blue button) and try again."
+msgstr ""
+
+#: ../hosts/hostfilmovizijastudio.py:46
+msgid "New Movies"
+msgstr ""
+
+#: ../hosts/hostfilmovizijastudio.py:47
+msgid "Top Movies"
+msgstr ""
+
+#: ../hosts/hostfilmovizijastudio.py:49
+msgid "New Episodes"
+msgstr ""
+
+#: ../hosts/hostfilmpalast.py:53 ../hosts/hostfilmpalast.py:57
+#: ../hosts/hostlocalmedia.py:38 ../hosts/hostkissanimeto.py:285
+#: ../hosts/hostkisscartoonme.py:203 ../hosts/hostmovs4ucom.py:48
+msgid "Alphabetically"
+msgstr ""
+
+#: ../hosts/hostfilmpalast.py:56
+msgid "--All Episodes--"
+msgstr ""
+
+#: ../hosts/hostfilmpertutti.py:190
+msgid " - others links"
+msgstr ""
+
+#: ../hosts/hostfilmstreamhdit.py:34
+msgid "HOME"
+msgstr ""
+
+#: ../hosts/hostfilmstreamhdit.py:35
+msgid "FILM ARCHIVE"
+msgstr ""
+
+#: ../hosts/hostfilmstreamhdit.py:167
+msgid "Release:"
+msgstr ""
+
+#: ../hosts/hostfilmstreamhdit.py:170
+msgid "Categories:"
+msgstr ""
+
+#: ../hosts/hostfilmstreamvkcom.py:100
+msgid "Manga"
+msgstr ""
+
+#: ../hosts/hostforjatn.py:193 ../hosts/hostgamatotvme.py:200
+msgid "TRAILER"
+msgstr ""
+
+#: ../hosts/hostforjatn.py:392
+msgid "Seriale"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:38
+msgid "Skip geo-blocked links:"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:288 ../hosts/hostfrancetv.py:314
+#: ../hosts/hostfrancetv.py:334
+msgid "All videos"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:289
+msgid "All programs"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:313
+msgid "All shows"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:412 ../hosts/hostsportitalia.py:207
+#, python-brace-format
+msgid "Duration: {0}"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:412 ../hosts/hostsportitalia.py:207
+#, python-brace-format
+msgid "Added: {0}"
+msgstr ""
+
+#: ../hosts/hostfrancetv.py:499
+msgid "There are some geoblocked links. If you want to use them, change option in the host configuration, available under blue button."
+msgstr ""
+
+#: ../hosts/hostddl.py:26 ../hosts/hosthdsto.py:33
+msgid "Web proxy"
+msgstr ""
+
+#: ../hosts/hostddl.py:35 ../hosts/hosthdfull.py:40 ../hosts/hostkinox.py:217
+#: ../hosts/hostkinox.py:383 ../hosts/hosttvjworg.py:40
+msgid "Language"
+msgstr ""
+
+#: ../hosts/hostddl.py:36
+msgid "Use proxy"
+msgstr ""
+
+#: ../hosts/hostddl.py:534
+msgid "Year:"
+msgstr ""
+
+#: ../hosts/hostddl.py:549
+msgid "Mood:"
+msgstr ""
+
+#: ../hosts/hostddl.py:550
+msgid "Moods:"
+msgstr ""
+
+#: ../hosts/hostddl.py:552
+msgid "Actor:"
+msgstr ""
+
+#: ../hosts/hostddl.py:555
+msgid "Praise:"
+msgstr ""
+
+#: ../hosts/hostddl.py:556
+msgid "Praises:"
+msgstr ""
+
+#: ../hosts/hostddl.py:558
+msgid "Others tags:"
+msgstr ""
+
+#: ../hosts/hostfilisertv.py:109 ../hosts/hostfilisertv.py:112
+#: ../hosts/hostgamatocom.py:82 ../hosts/hostgamatocom.py:85
+#: ../hosts/hosttreetv.py:132 ../hosts/hosttreetv.py:135
+msgid "Year: "
+msgstr ""
+
+#: ../hosts/hostfilisertv.py:118
+msgid "Sort by: "
+msgstr ""
+
+#: ../hosts/hostfreediscpl.py:61 ../hosts/hostfreediscpl.py:506
+msgid "Music"
+msgstr ""
+
+#: ../hosts/hostfreediscpl.py:84
+#, python-format
+msgid "Please visit \"%s\" and confirm that you are human."
+msgstr ""
+
+#: ../hosts/hostfreediscpl.py:85
+msgid "Please register and set login and password in the host configuration, to solve this problems permanently."
+msgstr ""
+
+#: ../hosts/hostfreediscpl.py:246
+#, python-format
+msgid "Added by: %s, directory: %s"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:46
+msgid "Sort alphabetically"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:47
+msgid "Show file size"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:48
+msgid "Show hiddens files"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:49
+msgid "Show hiddens catalogs"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:50
+msgid "Max items per page"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:56
+msgid "LocalMedia"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:120 ../iptvdm/iptvdmui.py:77
+#: ../Web/webParts.py:255
+msgid "Downloads"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:120
+msgid "rootfs"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:239
+#, python-format
+msgid ""
+"Can not get mount points - cmd mount failed.\n"
+"Return code[%s].\n"
+"Return data[%s]."
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:294
+#, python-format
+msgid "Make directory [%s]"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:302
+#, python-format
+msgid ""
+"Mount ISO file [%s] on [%s] failed.\n"
+"Return code[%s].\n"
+"Return data[%s]."
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:412 ../hosts/hostlocalmedia.py:430
+msgid "Total size: "
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:558
+#, python-format
+msgid "Paste \"%s\""
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:586
+msgid "Umount iso file"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:590
+msgid "Rename"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:592
+msgid "Remove"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:595
+msgid "Copy"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:598
+msgid "Cut"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:611
+#, python-format
+msgid "Are you sure you want to remove file \"%s\"?"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:622
+msgid "Set file name"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:632
+#, python-format
+msgid "File \"%s\" already exists!"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:649
+#, python-format
+msgid "File \"%s\" already exists"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:666
+#, python-format
+msgid "Moving file from \"%s\" to \"%s\" failed.\n"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:666
+#, python-format
+msgid "Error code: %s\n"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:666
+#, python-format
+msgid "Error message: %s\n"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:36
+msgid "highest"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:42
+msgid "lowest"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:47
+msgid "Preferred bitrate"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:48
+msgid "Use preferred bitrate"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:49 ../hosts/hosthdsto.py:42
+#: ../libs/firstonetvnet.py:42 ../libs/goldvodtv.py:39
+#: ../libs/internetowa.py:33
+msgid "email"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:51
+msgid "Try to bypass DRM (it may be illegal)"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:126 ../hosts/hoststreamliveto.py:136
+msgid "Free"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:126
+msgid "Paid"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:227
+msgid "DRM protected streams are not supported."
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:235
+msgid "No playable sources found."
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:257
+msgid "Sorry. TVPlayer is currently only available in the United Kingdom"
+msgstr ""
+
+#: ../hosts/hostgamatocom.py:65 ../hosts/hostgamatocom.py:85
+msgid "any"
+msgstr ""
+
+#: ../hosts/hostgamatocom.py:70
+msgid "Genre: "
+msgstr ""
+
+#: ../hosts/hostgamatocom.py:75
+msgid "Order by: "
+msgstr ""
+
+#: ../hosts/hostgamatocom.py:90
+msgid "Score at least: "
+msgstr ""
+
+#: ../hosts/hostgamatocom.py:187
+#, python-brace-format
+msgid "Season {0}"
+msgstr ""
+
+#: ../hosts/hostgledalica.py:67
+msgid "By years"
+msgstr ""
+
+#: ../hosts/hostgledalica.py:68
+msgid "By category"
+msgstr ""
+
+#: ../hosts/hostgreekdocumentaries3.py:32 ../hosts/hosttwitchtv.py:110
+msgid "Recent"
+msgstr ""
+
+#: ../hosts/hostgreekdocumentaries3.py:34 ../hosts/hostwptv.py:52
+msgid "Programs"
+msgstr ""
+
+#: ../hosts/hostgreekdocumentaries3.py:35
+msgid "Labels"
+msgstr ""
+
+#: ../hosts/hostgreekdocumentaries3.py:153
+msgid "Watch Trailer"
+msgstr ""
+
+#: ../hosts/hostguardaserie.py:230
+msgid "RATING"
+msgstr ""
+
+#: ../hosts/hosthdfilmetv.py:38
+msgid "Trailers"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:34 ../hosts/hostmovie4kto.py:34
+#: ../hosts/hostngolos.py:25
+msgid "Spanish"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:34 ../hosts/hostlaola1tv.py:30
+#: ../hosts/hostmovie4kto.py:34 ../hosts/hostngolos.py:25
+#: ../hosts/hosttvjworg.py:28
+msgid "English"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:59
+msgid "HDFull Suggestions"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:539
+msgid "Published:"
+msgstr ""
+
+#: ../hosts/hosthdkinomir.py:40
+msgid "Movie categories"
+msgstr ""
+
+#: ../hosts/hosthdsto.py:65
+msgid "Page accessible to logged in members only."
+msgstr ""
+
+#: ../hosts/hosthdsto.py:65
+msgid "You can try to use proxy as workaround, check options under blue button."
+msgstr ""
+
+#: ../hosts/hosthdstreams.py:70 ../hosts/hostmythewatchseries.py:63
+msgid "MOVIES"
+msgstr ""
+
+#: ../hosts/hosthdstreams.py:71
+msgid "TV SERIES"
+msgstr ""
+
+#: ../hosts/hosthdstreams.py:200
+msgid "Quality:"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
+#: ../hosts/hostzdfmediathek.py:27
+msgid "large"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
+#: ../hosts/hostzdfmediathek.py:27
+msgid "small"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:41
+msgid "Games played Now"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:47
+msgid "Live Channels"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:72
+msgid "viewers: "
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:72
+msgid "media count: "
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:72
+msgid "updated: "
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:88
+msgid "views: "
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:88
+msgid "countries: "
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:88
+msgid "live since: "
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:267
+msgid "Live now"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:268
+msgid "Recordings"
+msgstr ""
+
+#: ../hosts/hosthoofootcom.py:229
+msgid "Alternative"
+msgstr ""
+
+#: ../hosts/hosticefilmsinfo.py:72 ../hosts/hosttreetv.py:69
+msgid "TV Shows"
+msgstr ""
+
+#: ../hosts/hosticefilmsinfo.py:74
+msgid "Stand-Up"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:27
+msgid "The color of the current version"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:46
+msgid "Commits"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:47
+msgid "Tutorials"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:50
+msgid "Services management"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:51
+#, python-format
+msgid "%s - service overview"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:52 ../hosts/hostiptvplayerinfo.py:53
+#, python-format
+msgid "%s subtitles download - how to"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:52
+msgid "[en]"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:53
+msgid "[pl]"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:54
+#, python-format
+msgid "%s - subtitles provider"
+msgstr ""
+
+#: ../hosts/hostitvcom.py:31
+msgid "Bypass geo-blocking for VODs (it may be illegal):"
+msgstr ""
+
+#: ../hosts/hostkijknl.py:60 ../hosts/hosttwitchtv.py:120
+#: ../hosts/hosttwitchtv.py:283
+msgid "Clips"
+msgstr ""
+
+#: ../hosts/hostkijknl.py:61
+msgid "Missed"
+msgstr ""
+
+#: ../hosts/hostkijknl.py:248
+msgid "DRM protection detected."
+msgstr ""
+
+#: ../hosts/hostkijknl.py:258
+msgid "No valid entitlement found for asset."
+msgstr ""
+
+#: ../hosts/hostkijknl.py:260
+msgid "Entitlement parsing error."
+msgstr ""
+
+#: ../hosts/hostkijknl.py:293
+msgid "Player data parsing error."
+msgstr ""
+
+#: ../hosts/hostkinogo.py:180
+msgid "watch"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:157
+msgid "Only VIP"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:303 ../hosts/hostkinomanco.py:311
+#: ../hosts/hostkinomanco.py:350 ../hosts/hostkinomanco.py:358
+#: ../hosts/hostplayrtsiw.py:279
+msgid "Older"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:304 ../hosts/hostkinomanco.py:314
+#: ../hosts/hostkinomanco.py:351 ../hosts/hostkinomanco.py:361
+msgid "Newer"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:467
+msgid "min"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:615 ../hosts/hostkinomanco.py:665
+#: ../hosts/hostkinomanco.py:793
+msgid "Network connection failed."
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:618
+msgid "Fill captcha"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:663
+#, python-format
+msgid "Unknown server response: \"%s\""
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:668 ../hosts/hostkinomanco.py:790
+#: ../hosts/hostrtbfbe.py:547
+msgid "Unknown server response."
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:780
+msgid "Points"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:781
+msgid "Vip valid"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:782
+msgid "Vip level"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:795
+#, python-format
+msgid "Error message \"%s\"."
+msgstr ""
+
+#: ../hosts/hostkinotan.py:39
+msgid "Serials"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:40 ../hosts/hostmovie4kto.py:68
+msgid "TV shows"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:47 ../hosts/hostszenestreamz.py:39
+#: ../hosts/hostszenestreamz.py:41
+msgid "Genre selection"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:48
+msgid "By country"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:49
+msgid "Translations"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:50 ../hosts/hostmovs4ucom.py:41
+#: ../hosts/hosttreetv.py:70
+msgid "Collections"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:51
+msgid "By Year"
+msgstr ""
+
+#: ../hosts/hostkinox.py:88
+msgid "News"
+msgstr ""
+
+#: ../hosts/hostkinox.py:89 ../hosts/hostmovie4kto.py:72
+msgid "Cinema movies"
+msgstr ""
+
+#: ../hosts/hostkinox.py:91
+msgid "Documentaries"
+msgstr ""
+
+#: ../hosts/hostkinox.py:217 ../hosts/hostkinox.py:383
+#: ../hosts/hostserienstreamto.py:345
+msgid "Unknown"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:30 ../hosts/hostkisscartoonme.py:24
+#: ../hosts/hostsvtplayse.py:30 ../hosts/hosttvjworg.py:30
+#: ../libs/moonwalkcc.py:31 ../libs/videostar.py:32 ../libs/youtubeparser.py:28
+#: ../libs/youtube_dl/extractor/bbc.py:16
+#: ../libs/youtube_dl/extractor/vevo.py:17
+msgid "the worst"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:64 ../hosts/hostkisscartoonme.py:48
+msgid "Sort by alphabet"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:65 ../hosts/hostkisscartoonme.py:49
+msgid "Sort by popularity"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:66 ../hosts/hostkisscartoonme.py:50
+msgid "Latest update"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:67 ../hosts/hostkisscartoonme.py:51
+msgid "New cartoon"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:107
+#, python-format
+msgid "Unknown captcha form! Data: \"%s\""
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:138
+#, python-format
+msgid "Download \"%s\" in to \"%s\" failed!"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:140
+msgid "Unknow data in the captcha item!"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:156
+msgid "-- OK --"
+msgstr ""
+
+#: ../hosts/hostkisscartoonme.py:45
+msgid "Catrtoon list"
+msgstr ""
+
+#: ../hosts/hostkreskowkazone.py:265 ../hosts/hostmrpiracy.py:583
+#: ../hosts/hosttreetv.py:413
+msgid "Connection to server failed!"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+msgid "The worst"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27 ../libs/weebtv.py:31
+msgid "Low"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+msgid "Mid"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+msgid "High"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+msgid "The best"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:30
+msgid "Deutsch"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:36
+msgid "Video default quality:"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:37
+msgid "Use default quality:"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:38
+msgid "Portal:"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:39 ../hosts/hostmovie4kto.py:39
+#: ../hosts/hostngolos.py:29 ../libs/skylinewebcamscom.py:35
+msgid "Language:"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:40
+msgid "Alternative geolocation IP 1:"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:41
+msgid "Alternative geolocation IP 2:"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:467
+msgid "Live-streams"
+msgstr ""
+
+#: ../hosts/hostlibrestream.py:29 ../hosts/hostyoutube.py:59
+msgid "Movie"
+msgstr ""
+
+#: ../hosts/hostlibrestream.py:31
+msgid "Series TV"
+msgstr ""
+
+#: ../hosts/hostlibrestream.py:32
+msgid "Quality"
+msgstr ""
+
+#: ../hosts/hostliveleak.py:45 ../hosts/hostliveleak.py:202
+msgid "Items"
+msgstr ""
+
+#: ../hosts/hostliveleak.py:203 ../hosts/hostyoutube.py:57
+#: ../libs/wagasworld.py:56
+msgid "Channel"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:62
+msgid "Latest Added Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:63
+msgid "Filter By Year"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:68
+msgid "Action Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:69
+msgid "Adventure Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:70
+msgid "Animation Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:71
+msgid "Comedy Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:72
+msgid "Crime Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:73
+msgid "Drama Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:74
+msgid "Documentary Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:75
+msgid "Sci-Fi Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:76
+msgid "Family Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:77
+msgid "History Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:78
+msgid "Fantasy Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:79
+msgid "Horror Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:80
+msgid "Music Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:81
+msgid "Mystery Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:82
+msgid "Romance Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:83
+msgid "Thriller Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:84
+msgid "War Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:85
+msgid "Western Movies"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:198
+msgid "Next Page"
+msgstr ""
+
+#: ../hosts/hostmediasetplay.py:183
+msgid "API initialization failed!"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "French"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Italian"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Japanese"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Turkish"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Russian"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:73 ../hosts/hostmovie4kto.py:78
+msgid "Latest updates"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:74
+msgid "All movies"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:77
+msgid "Featured"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:79
+msgid "All TV shows"
+msgstr ""
+
+#: ../hosts/hostmovienightws.py:28
+msgid "Latest movies"
+msgstr ""
+
+#: ../hosts/hostmovienightws.py:29
+msgid "Movies genres"
+msgstr ""
+
+#: ../hosts/hostmovienightws.py:30
+msgid "Movies by year"
+msgstr ""
+
+#: ../hosts/hostmovs4ucom.py:51
+msgid "Qualities"
+msgstr ""
+
+#: ../hosts/hostmovs4ucom.py:52 ../hosts/hostyifytv.py:62
+msgid "Releases"
+msgstr ""
+
+#: ../hosts/hostmozicsillag.py:42
+msgid "Catalog"
+msgstr ""
+
+#: ../hosts/hostmrpiracy.py:49 ../hosts/hoststreamliveto.py:37
+#: ../libs/edemtv.py:40 ../libs/ustvnow.py:41 ../libs/videostar.py:45
+msgid "Password"
+msgstr ""
+
+#: ../hosts/hostmrpiracy.py:688
+msgid "TV Show"
+msgstr ""
+
+#: ../hosts/hostmrpiracy.py:689 ../hosts/hosttreetv.py:68
+msgid "Anime"
+msgstr ""
+
+#: ../hosts/hostmusicmp3ru.py:325
+msgid "SONGS"
+msgstr ""
+
+#: ../hosts/hostmusicmp3ru.py:326
+msgid "ALBUMS"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:62
+msgid "LIST"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:64
+msgid "CINEMA MOVIES"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:65
+msgid "THIS WEEK'S SERIES POPULAR"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:66
+msgid "NEW RELEASE LIST"
+msgstr ""
+
+#: ../hosts/hostngolos.py:25
+msgid "Portuguese"
+msgstr ""
+
+#: ../hosts/hostnuteczki.py:92
+msgid "TOP 10"
+msgstr ""
+
+#: ../hosts/hostnuteczki.py:175 ../hosts/hostnuteczki.py:292
+msgid "[Logged-in-only] "
+msgstr ""
+
+#: ../hosts/hostnuteczki.py:347
+#, python-format
+msgid "Player %s: %s"
+msgstr ""
+
+#: ../hosts/hostnuteczki.py:354
+#, python-format
+msgid "Player %s"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:69
+msgid "Subspecialities"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:76
+msgid "Board Review"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:77
+msgid "CME SAE"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:78
+msgid "Educational Animation"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:79
+msgid "Ethical & Legal"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:80
+msgid "Exam Review"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:81
+msgid "Humanitarian"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:82
+msgid "Industry"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:83
+msgid "Interactive Learning Center(ILC)"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:84
+msgid "Jobs & Positions"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:85
+msgid "Journal Club"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:86
+msgid "Medtryx Marketing"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:87
+msgid "Meetings"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:88
+msgid "Pathology Rounds"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:89
+msgid "Physical Exam"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:90
+msgid "Powerpoint Presentation"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:91
+msgid "Practice Management"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:92
+msgid "Professional Networks"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:93
+msgid "Radiology Rounds"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:94
+msgid "Study Plan"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:95
+msgid "Surgical Approaches"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:96
+msgid "Surgical Cases"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:97
+msgid "Surgical Complications"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:98
+msgid "Surgical Techniques"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:99
+msgid "Techniques"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:100
+msgid "Treatment Consult"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:101
+msgid "Written Boards Review"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:105
+msgid "Trauma"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:106
+msgid "Spine"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:107
+msgid "Shoulder & Elbow"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:108
+msgid "Knee & Sports"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:109
+msgid "Pediatrics"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:110
+msgid "Recon"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:111
+msgid "Hand"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:112
+msgid "Foot & Ankle"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:113
+msgid "Pathology"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:114
+msgid "Basic Science"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:115
+msgid "Anatomy"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:116
+msgid "Approaches"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:117
+msgid "General"
+msgstr ""
+
+#: ../hosts/hostourmatchnet.py:37
+msgid "All Leagues"
+msgstr ""
+
+#: ../hosts/hostourmatchnet.py:38
+msgid "Previous Seasons"
+msgstr ""
+
+#: ../hosts/hostourmatchnet.py:39
+msgid "Goal Of The Month"
+msgstr ""
+
+#: ../hosts/hostpinkbike.py:41
+msgid "Best Pinkbike Videos"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:100 ../hosts/hostredbull.py:52
+#: ../libs/canlitvliveio.py:109
+msgid "TV"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:100
+msgid "Radio"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:148
+msgid "Latest"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:154
+msgid "Most popular"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:159
+msgid "List by day"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:186
+msgid "AZ"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:291
+msgid "geoblocked"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:314
+#, python-format
+msgid "%s episodes"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:438
+msgid "SHOWS"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:438 ../hosts/hostplayrtsiw.py:454
+#, python-format
+msgid "Search for \"%s\", %s, %s %s"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:438
+msgid "shows"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:440
+#, python-format
+msgid "%s shows"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:456
+#, python-format
+msgid "%s "
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:506 ../hosts/hostplayrtsiw.py:507
+#, python-format
+msgid "Download %s"
+msgstr ""
+
+#: ../hosts/hostplusdede.py:319
+#, python-format
+msgid "Date: %s"
+msgstr ""
+
+#: ../hosts/hostplusdede.py:321
+#, python-format
+msgid "Views: %s"
+msgstr ""
+
+#: ../hosts/hostplusdede.py:323
+#, python-format
+msgid "Downloads: %s"
+msgstr ""
+
+#: ../hosts/hostplusdede.py:325
+#, python-format
+msgid "Comments: %s"
+msgstr ""
+
+#: ../hosts/hostraiplay.py:277
+msgid "not available"
+msgstr ""
+
+#: ../hosts/hostredbull.py:51
+msgid "Discover"
+msgstr ""
+
+#: ../hosts/hostredbull.py:54
+msgid "Calendar"
+msgstr ""
+
+#: ../hosts/hostredbull.py:159 ../hosts/hostredbull.py:161
+msgid "Live at: "
+msgstr ""
+
+#: ../hosts/hostredbull.py:198
+msgid "Showcase"
+msgstr ""
+
+#: ../hosts/hostrteieplayer.py:47
+msgid "Programmes"
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:45 ../libs/edemtv.py:39 ../libs/ustvnow.py:40
+msgid "Email"
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:72
+msgid "Program"
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:74
+msgid "Preview"
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:75 ../hosts/hostyoutube.py:58
+msgid "Playlist"
+msgstr ""
+
+#: ../hosts/hostserialeco.py:183 ../hosts/hostserialeco.py:217
+#, python-format
+msgid "%s s%se%s"
+msgstr ""
+
+#: ../hosts/hostserienstreamto.py:46
+msgid "Your language preference:"
+msgstr ""
+
+#: ../hosts/hostserienstreamto.py:401
+msgid "Please retry later."
+msgstr ""
+
+#: ../hosts/hostseriesonline.py:87
+msgid "This site is protected with Google reCaptcha v2."
+msgstr ""
+
+#: ../hosts/hostserijeonline.py:54
+msgid "Top Videos"
+msgstr ""
+
+#: ../hosts/hostserijeonline.py:55
+msgid "Newest Videos"
+msgstr ""
+
+#: ../hosts/hostshoutcast.py:124
+#, python-format
+msgid "Genre: %s"
+msgstr ""
+
+#: ../hosts/hostshoutcast.py:125
+#, python-format
+msgid "Listeners: %s"
+msgstr ""
+
+#: ../hosts/hostshoutcast.py:126
+#, python-format
+msgid "Bitrate: %s"
+msgstr ""
+
+#: ../hosts/hostshoutcast.py:129
+#, python-format
+msgid "Type: %s"
+msgstr ""
+
+#: ../hosts/hostsovdub.py:32 ../hosts/hostyifytv.py:67
+msgid "Countries"
+msgstr ""
+
+#: ../hosts/hostsportdeutschland.py:31 ../libs/filmonapi.py:29
+#: ../libs/videostar.py:41
+msgid "Preferred streaming protocol"
+msgstr ""
+
+#: ../hosts/hostsportdeutschland.py:139
+#, python-format
+msgid " (planned %s)"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "January"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "February"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "Mars"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "April"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "May"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "June"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "July"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "August"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "September"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "October"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "November"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "December"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Monday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Tuesday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Wednesday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Thursday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Friday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Saturday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Sunday"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:102
+msgid "LIVE STREAMING"
+msgstr ""
+
+#: ../hosts/hoststreaminghdfun.py:266
+msgid " main link"
+msgstr ""
+
+#: ../hosts/hoststreamliveto.py:36 ../libs/videostar.py:44
+msgid "Login"
+msgstr ""
+
+#: ../hosts/hoststreamliveto.py:136
+msgid "Premium"
+msgstr ""
+
+#: ../hosts/hoststreamliveto.py:267
+msgid "Fail to get captcha data."
+msgstr ""
+
+#: ../hosts/hoststreamliveto.py:334 ../libs/urlparser.py:3929
+msgid "Wrong answer."
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:34 ../libs/moonwalkcc.py:31
+#: ../libs/videostar.py:32 ../libs/youtubeparser.py:28
+#: ../libs/youtube_dl/extractor/bbc.py:20
+#: ../libs/youtube_dl/extractor/vevo.py:29
+msgid "the best"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:38 ../hosts/hosttvnowde.py:29
+#: ../libs/youtube_dl/extractor/bbc.py:24
+msgid "HLS/m3u8"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:39 ../hosts/hosttvnowde.py:30
+#: ../libs/youtube_dl/extractor/bbc.py:25
+msgid "DASH/mpd"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:76
+msgid "Latest programs"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:77
+msgid "Latest news broadcast"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:78
+msgid "Last chance"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:79
+msgid "Live broadcasts"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:81
+msgid "Programs A-Ö"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:151 ../hosts/hostsvtplayse.py:348
+msgid "Only available in Sweden."
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:153
+msgid "With closed captioned."
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:253
+msgid "Only available in Sweden.\n"
+msgstr ""
+
+#: ../hosts/hostted.py:74 ../hosts/hostted.py:352 ../hosts/hostted.py:609
+msgid "Talks"
+msgstr ""
+
+#: ../hosts/hostted.py:105 ../hosts/hostted.py:139
+msgid "See all topics"
+msgstr ""
+
+#: ../hosts/hostted.py:111
+msgid "See all languages"
+msgstr ""
+
+#: ../hosts/hostted.py:122
+msgid "See all events"
+msgstr ""
+
+#: ../hosts/hostted.py:356
+msgid "Curator"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:39
+msgid "Always"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:39
+msgid "Never"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:40
+msgid "hideproxy.me (NL)"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:40
+msgid "hideproxy.me (US)"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:40
+msgid "hideproxy.me (DE)"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:44
+msgid "Use web proxy gateway"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:45
+msgid "Web proxy provider"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:63
+msgid "Series list"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:64
+msgid "Popular Episodes"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:65
+msgid "Newest Episodes"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:66
+msgid "All A-Z"
+msgstr ""
+
+#: ../hosts/hosttreetv.py:455
+#, python-format
+msgid "User login \"%s\" failed."
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:28
+msgid "Polish"
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:29
+msgid "vertical"
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:29
+msgid "horizontal"
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:41
+msgid "Default video quality"
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:42
+msgid "Use default video quality"
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:43
+msgid "Icon type"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:35
+msgid "Show paid items (it may be illegal)"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:36
+msgid "Show items with DRM"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:61
+msgid "Missed the program?"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:146
+msgid "Today"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:147
+msgid "Yesterday"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:354
+msgid "Items with DRM protection."
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:371
+#, python-format
+msgid "episode: %s"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:371
+#, python-format
+msgid "duration: %s"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:416
+msgid "Video with DRM protection."
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:51
+msgid "All Platforms"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:51
+msgid "Xbox One"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:51
+msgid "PlayStation 4"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:104
+msgid "Past premieres"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:105 ../iptvdm/iptvdmui.py:76 ../Web/webParts.py:254
+msgid "Archive"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:107
+msgid "Uploads"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:113
+msgid "Last day"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:114
+msgid "Last week"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:115
+msgid "Last month"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:116
+msgid "All time"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:150 ../hosts/hosttwitchtv.py:629
+msgid "Games"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:168 ../hosts/hosttwitchtv.py:214
+#: ../hosts/hosttwitchtv.py:259 ../hosts/hosttwitchtv.py:295
+#: ../hosts/hosttwitchtv.py:355 ../hosts/hosttwitchtv.py:477
+#, python-format
+msgid "%s viewers"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:278
+#, python-format
+msgid "Videos %s"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:419 ../hosts/hosttwitchtv.py:439
+#: ../hosts/hosttwitchtv.py:476
+#, python-format
+msgid "Language: %s"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:421 ../hosts/hosttwitchtv.py:441
+#, python-format
+msgid "%s followers"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:459
+#, python-format
+msgid "Popularity: %s"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:478
+#, python-format
+msgid "Broadcaster: %s"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:479
+#, python-format
+msgid "Game: %s"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:630 ../hosts/hosturllist.py:51
+msgid "Live streams"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:631
+msgid "Channles"
+msgstr ""
+
+#: ../hosts/hostuktvplay.py:136 ../hosts/hostuktvplay.py:200
+#, python-format
+msgid "Channel: %s"
+msgstr ""
+
+#: ../hosts/hostuktvplay.py:137
+#, python-format
+msgid "Videos count: %s"
+msgstr ""
+
+#: ../hosts/hostuktvplay.py:199
+#, python-format
+msgid "Duration: %s"
+msgstr ""
+
+#: ../hosts/hosturllist.py:31
+msgid "Text files ytlist and urllist are in:"
+msgstr ""
+
+#: ../hosts/hosturllist.py:32
+msgid "Sort the list:"
+msgstr ""
+
+#: ../hosts/hosturllist.py:33
+msgid "Group links into categories: "
+msgstr ""
+
+#: ../hosts/hosturllist.py:38
+msgid "Urllists player"
+msgstr ""
+
+#: ../hosts/hosturllist.py:49
+msgid "All in one"
+msgstr ""
+
+#: ../hosts/hosturllist.py:49
+msgid "Links from all files without categories"
+msgstr ""
+
+#: ../hosts/hosturllist.py:50 ../hosts/hosturllist.py:51
+#: ../hosts/hosturllist.py:52
+#, python-format
+msgid "Links from the file %s"
+msgstr ""
+
+#: ../hosts/hosturllist.py:52
+msgid "User files"
+msgstr ""
+
+#: ../hosts/hosturllist.py:60
+msgid "direct link"
+msgstr ""
+
+#: ../hosts/hosturllist.py:86
+msgid "Other"
+msgstr ""
+
+#: ../hosts/hosturllist.py:93 ../hosts/hosturllist.py:105
+#, python-format
+msgid "Hosting: %s, %s"
+msgstr ""
+
+#: ../hosts/hostvevo.py:31
+msgid "Allow hls format"
+msgstr ""
+
+#: ../hosts/hostvevo.py:375
+#, python-format
+msgid "Count: %s"
+msgstr ""
+
+#: ../hosts/hostvevo.py:380
+msgid "Artists"
+msgstr ""
+
+#: ../hosts/hostvidcorncom.py:489
+msgid "TV status"
+msgstr ""
+
+#: ../hosts/hostvidcorncom.py:495
+msgid "IMDb rating"
+msgstr ""
+
+#: ../hosts/hostvimeo.py:30
+msgid "Vimeo Suggestions"
+msgstr ""
+
+#: ../hosts/hostvimeo.py:394
+msgid "People"
+msgstr ""
+
+#: ../hosts/hostvimeo.py:396
+msgid "Groups"
+msgstr ""
+
+#: ../hosts/hostvumedicom.py:77
+msgid "Specialities"
+msgstr ""
+
+#: ../hosts/hostvumedicom.py:78
+msgid "Browse videos"
+msgstr ""
+
+#: ../hosts/hostvumedicom.py:91
+msgid "News Feed"
+msgstr ""
+
+#: ../hosts/hostwatchcartoononline.py:348
+msgid "Anime Search"
+msgstr ""
+
+#: ../hosts/hostwatchcartoononline.py:349
+msgid "Episode Search"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:44 ../hosts/hostwatchwrestlinguno.py:48
+msgid "Order by date"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:45 ../hosts/hostwatchwrestlinguno.py:49
+msgid "Order by views"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:46 ../hosts/hostwatchwrestlinguno.py:50
+msgid "Order by likes"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:47 ../hosts/hostwatchwrestlinguno.py:51
+msgid "Order by comments"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:332 ../hosts/hostwatchwrestlinguno.py:292
+msgid "DATE"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:333 ../hosts/hostwatchwrestlinguno.py:293
+msgid "VIEWS"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:334 ../hosts/hostwatchwrestlinguno.py:294
+msgid "LIKES"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:335 ../hosts/hostwatchwrestlinguno.py:295
+msgid "COMMENTS"
+msgstr ""
+
+#: ../hosts/hostwatchwrestlinguno.py:32
+msgid "Replay Shows"
+msgstr ""
+
+#: ../hosts/hostwatchwrestlinguno.py:42 ../hosts/hostwptv.py:53
+msgid "Others"
+msgstr ""
+
+#: ../hosts/hostwebstream.py:104
+msgid "----------Other----------"
+msgstr ""
+
+#: ../hosts/hostwebstream.py:105
+msgid "Turn off buffering for http://prognoza.pogody.tv/"
+msgstr ""
+
+#: ../hosts/hostwebstream.py:106
+msgid "Use Polish proxy for http://prognoza.pogody.tv/"
+msgstr ""
+
+#: ../hosts/hostwebstream.py:141
+msgid "\"Web\" streams player"
+msgstr ""
+
+#: ../hosts/hostwebstream.py:434
+msgid "Protocol: "
+msgstr ""
+
+#: ../hosts/hostworldfree4u.py:42
+msgid "LATEST"
+msgstr ""
+
+#: ../hosts/hostworldfree4u.py:43
+msgid "RECENT"
+msgstr ""
+
+#: ../hosts/hostyifytv.py:64
+msgid "Top +250"
+msgstr ""
+
+#: ../hosts/hostyifytv.py:66
+msgid "Languages"
+msgstr ""
+
+#: ../hosts/hostyifytv.py:72
+msgid "Comedies"
+msgstr ""
+
+#: ../hosts/hostyifytv.py:73
+msgid "Animations"
+msgstr ""
+
+#: ../hosts/hostyifytv.py:74
+msgid "Dramas"
+msgstr ""
+
+#: ../hosts/hostyifytv.py:350 ../hosts/hostyifytv.py:354
+msgid "Mirror"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:30
+msgid "Sort by:"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:31
+msgid "Path to ytlist.txt, urllist.txt"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:32
+msgid "Video format:"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:38
+msgid "Allow dash format:"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:53
+msgid "User links"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:53
+msgid "User links stored in the ytlist.txt file."
+msgstr ""
+
+#: ../hosts/hostyoutube.py:54
+msgid "Search youtube materials "
+msgstr ""
+
+#: ../hosts/hostyoutube.py:55
+msgid "History of searched phrases."
+msgstr ""
+
+#: ../hosts/hostyoutube.py:102
+msgid "--Other--"
+msgstr ""
+
+#: ../hosts/hostzalukajcom.py:44
+msgid "hasło"
+msgstr ""
+
+#: ../hosts/hostzdfmediathek.py:37
+msgid "Icons size"
+msgstr ""
+
+#: ../hosts/hostzdfmediathek.py:80 ../hosts/hostzdfmediathek.py:96
+msgid "Home page"
+msgstr ""
+
+#: ../hosts/hostzdfmediathek.py:85
+msgid "Children"
+msgstr ""
+
+#: ../iptvdm/ffmpegdownloader.py:70
+#, python-format
+msgid "Utility \"%s\" can not be found."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:198
+#, python-format
+msgid ""
+"Downloading can not be started.\n"
+" The address ('%r') is incorrect."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:209
+#, python-format
+msgid ""
+"Downloading can not be started.\n"
+" Downloader %s does not work properly.\n"
+"Status[%s]"
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:256 ../iptvdm/iptvbuffui.py:562
+msgid "Error occurs during download."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:265 ../iptvdm/iptvbuffui.py:295
+msgid "Stop playing?"
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:287
+#, python-format
+msgid ""
+"The playback buffer has been moved to the download manager.\n"
+"It will be saved in the file:\n"
+"\"%s\""
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:291
+#, python-format
+msgid "Moving playback buffer to the download manager failed with the following error \"%s\""
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:488
+msgid "Please wait for initialization data."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:511
+msgid "Please wait - downloading initialization data."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:530
+msgid "Whole file must be downloaded to start playback!"
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:532
+msgid "You can use external eplayer to start playback faster."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:565
+#, python-format
+msgid "%s returned %s: %s"
+msgstr ""
+
+#: ../iptvdm/iptvdmapi.py:233
+msgid "Max number of parallel downloads has been reached."
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:59
+#, python-format
+msgid "%s download manager"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:74 ../Web/webParts.py:247 ../Web/webParts.py:251
+msgid "Stop"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:171 ../Web/webParts.py:256
+msgid "Manager status: "
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:172 ../Web/webParts.py:250
+msgid "STARTED"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:173 ../Web/webParts.py:246
+msgid "STOPPED"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:256 ../iptvdm/iptvdmui.py:257
+#, python-format
+msgid "Play with [%s] player"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:259
+msgid "Continue downloading"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:260 ../Web/webParts.py:315 ../Web/webParts.py:323
+#: ../Web/webParts.py:330
+msgid "Download again"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:261
+msgid "Stop downloading"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:262
+msgid "Remove file"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:264
+msgid "Promote item"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:107 ../Web/webParts.py:289
+msgid "PENDING"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:109 ../Web/webParts.py:294
+msgid "DOWNLOADING"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:112 ../Web/webParts.py:302 ../Web/webParts.py:310
+msgid "DOWNLOADED"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:115 ../Web/webParts.py:318
+msgid "ABORTED"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:118 ../Web/webParts.py:326
+msgid "DOWNLOAD ERROR"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:67
+msgid "> Press OK to start <"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:81
+msgid "During processing, please do not interrupt."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:82
+msgid "During processing, please wait."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:83
+#, python-format
+msgid "Step [%s] cannot be aborted. Please wait."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:115
+msgid "No steps to execute."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:168 ../iptvupdate/updatemainwindow.py:331
+msgid "Aborted"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:224
+#, python-format
+msgid "The problem with creating a directory [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:228
+#, python-format
+msgid "Problem with the directory [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:237
+#, python-format
+msgid ""
+"There is no space in the directory [%s]\n"
+" Available[%s], required [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:252 ../iptvupdate/updatemainwindow.py:340
+#: ../iptvupdate/updatemainwindow.py:343
+msgid "IPTVPlayer - update"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:281
+msgid "Completed."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:282
+#, python-format
+msgid ""
+"Problem with the removal of the previous version.\n"
+"Status[%d], outData[%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:283
+#, python-format
+msgid ""
+"Problem with installing the new version.\n"
+"Status[%d], outData[%s]"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:284
+#, python-format
+msgid ""
+"Problem with copy files.\n"
+"Status[%d], outData[%s]"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:292
+msgid "Correct version."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:307
+#, python-format
+msgid ""
+"Wrong version. \n"
+" downloaded version [%s] is different from the requested [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:311
+#, python-format
+msgid "File [%s] reading failed."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:321
+msgid "Please remember that you use this plugin at your own risk."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:322
+#, python-format
+msgid ""
+"E2 GUI restart after IPTVPlayer update to version[%s].\n"
+"\n"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:334
+msgid ""
+"Restart GUI failed. \n"
+"Please restart STB manually."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:346
+#, python-format
+msgid "Currently you have version [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:350
+msgid "Update completed successfully. For the moment, the system will reboot."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:355
+msgid ""
+"Update failed.\n"
+"Check the status by selecting interesting and pressing OK."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:369
+msgid "Pending"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:374
+msgid "Add repository last version."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:375
+msgid "Obtaining server list."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:376
+msgid "Downloading an update packet."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:377
+msgid "Extracting an update packet."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:378
+msgid "Copy post installed binaries."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:379
+msgid "Executing user scripts."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:380
+msgid "Checking version."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:381
+msgid "Removing unnecessary files."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:382
+msgid "Confirmation of installation."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:384
+msgid "Installing new version."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:472 ../iptvupdate/updatemainwindow.py:483
+#: ../iptvupdate/updatemainwindow.py:492 ../iptvupdate/updatemainwindow.py:504
+msgid "Skipped."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:611
+msgid "Nothing to do here."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:615
+msgid "Problem with copy binary.\n"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:620 ../iptvupdate/updatemainwindow.py:638
+msgid "Completed.\n"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:629
+msgid "No user scripts."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:633
+msgid "Problem with user script execution.\n"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:642
+#, python-format
+msgid ""
+"Version [%s] is ready for installation. After installation, restart of the system will be done.\n"
+"Do you want to continue?"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:645
+msgid "Installation has been confirmed."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:647
+msgid "Installation has been aborted."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:708 ../iptvupdate/updatemainwindow.py:897
+#, python-format
+msgid ""
+"Problem with downloading the packet:\n"
+"[%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:725
+#, python-format
+msgid "Wrong version: [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:728
+#, python-format
+msgid ""
+"File not found:\n"
+"[%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:730
+#, python-brace-format
+msgid "GitLab version from {0} was downloaded successfully."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:760
+#, python-format
+msgid "Problem with downloading the server list from [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:801
+msgid "Problem with parsing the server list."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:836
+msgid "Select update server"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:838
+msgid "There is no update for the current configuration."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:840
+msgid "Update not available."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:852
+msgid "Downloading graphics package."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:853
+msgid "Extracting graphics package."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:861 ../iptvupdate/updatemainwindow.py:871
+msgid "Copy graphics without icons."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:864
+msgid "Downloading icons package."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:865
+msgid "Extracting icons package."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:869
+msgid "Copy all graphics."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:873
+msgid "Copy icons."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:877
+msgid "Get decryption key."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:878
+msgid "Decrypt archive."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:880
+#, python-format
+msgid "Selected version [%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:882
+msgid "Update server not selected."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:900
+msgid "Update packet was downloaded successfully."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:914
+#, python-format
+msgid ""
+"Problem with downloading the encryption key:\n"
+"[%s]."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:916
+#, python-format
+msgid "Wrong the encryption key size: %s\n"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:931 ../iptvupdate/updatemainwindow.py:936
+msgid "Problem with decryption the key."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:939
+msgid "Encryption key was downloaded successfully."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:951
+#, python-format
+msgid ""
+"Problem with extracting the archive. Return code [%d]\n"
+"%s."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:958
+msgid "Unpacking the archive completed successfully."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:971
+#, python-format
+msgid ""
+"Problem with decryption the archive. Return code [%d]\n"
+"%s."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:978
+msgid "Decryption the archive completed successfully."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:990
+#, python-format
+msgid ""
+"Error. Return code [%d]\n"
+"%s."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:993
+msgid "Success."
+msgstr ""
+
+#: ../libs/showsporttvcom.py:65
+msgid "Off Air"
+msgstr ""
+
+#: ../libs/beinmatch.py:167
+#, python-format
+msgid ""
+"Data for link generation could not be found.\n"
+"Please report this problem to %s"
+msgstr ""
+
+#: ../libs/bilasportpw.py:34 ../libs/mlbstreamtv.py:29
+msgid "PORT"
+msgstr ""
+
+#: ../libs/canlitvliveio.py:110
+msgid "RADIO"
+msgstr ""
+
+#: ../libs/edemtv.py:93
+msgid ""
+"This host requires registration. \n"
+"Please fill your login and password in the host configuration. Available under blue button."
+msgstr ""
+
+#: ../libs/filmonapi.py:30 ../libs/weebtv.py:35
+msgid "Premium user"
+msgstr ""
+
+#: ../libs/filmonapi.py:89
+msgid "PAY"
+msgstr ""
+
+#: ../libs/filmonapi.py:90
+msgid "FREE"
+msgstr ""
+
+#: ../libs/firstonetvnet.py:318
+msgid "Wrong captcha image data!"
+msgstr ""
+
+#: ../libs/iklubnet.py:30
+msgid "Categorization"
+msgstr ""
+
+#: ../libs/livetvhdnet.py:92
+msgid "Views: "
+msgstr ""
+
+#: ../libs/pCommon.py:340
+#, python-format
+msgid "HTTPS connection error \"%s\"\n"
+msgstr ""
+
+#: ../libs/pCommon.py:341
+#, python-format
+msgid "It looks like your current configuration do not allow to connect to the https://%s/.\n"
+msgstr ""
+
+#: ../libs/pCommon.py:344
+msgid "You can disable HTTPS certificates validation in the E2iPlayer configuration to suppress this problem."
+msgstr ""
+
+#: ../libs/pCommon.py:356
+msgid "You can enable PyCurl in the E2iPlayer configuration to fix this problem."
+msgstr ""
+
+#: ../libs/pCommon.py:358
+#, python-format
+msgid "Please report this problem to the developer %s."
+msgstr ""
+
+#: ../libs/pCommon.py:360
+#, python-format
+msgid "You can install PyCurl package from %s to fix this problem."
+msgstr ""
+
+#: ../libs/pCommon.py:475 ../libs/pCommon.py:1204
+msgid "It is not allowed to call getURLRequestData from main thread."
+msgstr ""
+
+#: ../libs/pCommon.py:476 ../libs/pCommon.py:1205
+msgid "You should never perform block I/O operations in the __init__."
+msgstr ""
+
+#: ../libs/pCommon.py:1375
+msgid "Critical Error – Content-Encoding gzip cannot be handled!"
+msgstr ""
+
+#: ../libs/recaptcha_v2_2captcha.py:65 ../libs/recaptcha_v2_2captcha.py:79
+#: ../libs/recaptcha_v2_9kw.py:65 ../libs/recaptcha_v2_9kw.py:79
+#, python-format
+msgid "Network failed %s."
+msgstr ""
+
+#: ../libs/recaptcha_v2_2captcha.py:74 ../libs/recaptcha_v2_9kw.py:74
+#, python-format
+msgid "%s timeout."
+msgstr ""
+
+#: ../libs/recaptcha_v2_2captcha.py:88 ../libs/recaptcha_v2_9kw.py:88
+#, python-format
+msgid ""
+"Resolving reCaptcha with %s failed!\n"
+"\n"
+msgstr ""
+
+#: ../libs/recaptcha_v2_myjd.py:16
+msgid "My JDownloader reCAPTCHA v2 solution"
+msgstr ""
+
+#: ../libs/skylinewebcamscom.py:69
+msgid "NEW"
+msgstr ""
+
+#: ../libs/skylinewebcamscom.py:70
+msgid "NEARBY CAMS"
+msgstr ""
+
+#: ../libs/skylinewebcamscom.py:71
+msgid "TOP live cams"
+msgstr ""
+
+#: ../libs/sport365live.py:128
+msgid ""
+"Please remember to visit http://www.sport365.live/ and watch a few advertisements.\n"
+"This will fix problem, if your playback is constantly interrupted."
+msgstr ""
+
+#: ../libs/sportstream365.py:26
+msgid "Preferred language"
+msgstr ""
+
+#: ../libs/sportstream365.py:27
+msgid "Cyrillic Latin Converter"
+msgstr ""
+
+#: ../libs/urlparser.py:610
+#, python-format
+msgid "Hosting \"%s\" not supported."
+msgstr ""
+
+#: ../libs/urlparser.py:612
+#, python-format
+msgid "Hosting \"%s\" unknown."
+msgstr ""
+
+#: ../libs/urlparser.py:1948
+msgid ""
+"To watch videos from http://vk.com/ you need to login.\n"
+"Please fill your login and password in the IPTVPlayer configuration."
+msgstr ""
+
+#: ../libs/urlparser.py:1952
+#, python-format
+msgid ""
+"Login user \"%s\" to http://vk.com/ failed!\n"
+"Please check your login data in the IPTVPlayer configuration."
+msgstr ""
+
+#: ../libs/urlparser.py:2497
+msgid ""
+"Videomega has blocked your IP for some time.\n"
+"Please retry this link after some time."
+msgstr ""
+
+#: ../libs/urlparser.py:2521
+msgid "File Not Found."
+msgstr ""
+
+#: ../libs/urlparser.py:5097
+#, python-format
+msgid "Source %s"
+msgstr ""
+
+#: ../libs/urlparser.py:5226
+#, python-brace-format
+msgid "Login on {0} failed."
+msgstr ""
+
+#: ../libs/urlparser.py:8070
+msgid ""
+"Only logged in user have access.\n"
+"Please set login data in the host configuration under blue button."
+msgstr ""
+
+#: ../libs/urlparser.py:8208
+msgid "We can't find the file you are looking for. It maybe got deleted by the owner or was removed due a copyright violation."
+msgstr ""
+
+#: ../libs/urlparser.py:8285
+#, python-format
+msgid "%s link extractor error."
+msgstr ""
+
+#: ../libs/urlparser.py:10898
+#, python-format
+msgid "Internal Server Error. Server response code: %s"
+msgstr ""
+
+#: ../libs/ustvnow.py:42
+msgid "List only channels with subscription"
+msgstr ""
+
+#: ../libs/ustvnow.py:43
+msgid "Get EPG"
+msgstr ""
+
+#: ../libs/ustvnow.py:118
+#, python-format
+msgid ""
+"An error occurred when try to sign in the user \"%s.\n"
+"Please check your login credentials and try again later...\""
+msgstr ""
+
+#: ../libs/ustvnow.py:121
+msgid "You need to enter email and password in configuration."
+msgstr ""
+
+#: ../libs/videostar.py:32
+msgid "average"
+msgstr ""
+
+#: ../libs/videostar.py:40 ../libs/weebtv.py:57
+msgid "Show all channels"
+msgstr ""
+
+#: ../libs/videostar.py:42
+msgid "Preferred quality"
+msgstr ""
+
+#: ../libs/videostar.py:43
+msgid "Use preferred quality"
+msgstr ""
+
+#: ../libs/videostar.py:92
+#, python-format
+msgid "Get page \"%s\" error."
+msgstr ""
+
+#: ../libs/videostar.py:134
+msgid "Unknown error."
+msgstr ""
+
+#: ../libs/videostar.py:182
+#, python-format
+msgid "Guest timeout: %s"
+msgstr ""
+
+#: ../libs/wagasworld.py:57
+msgid "LiveTv"
+msgstr ""
+
+#: ../libs/wagasworld.py:111
+#, python-format
+msgid "\"%s\" login failed! Please check your login and password."
+msgstr ""
+
+#: ../libs/webcamera.py:66
+msgid "main"
+msgstr ""
+
+#: ../libs/weebtv.py:31
+msgid "Standard"
+msgstr ""
+
+#: ../libs/weebtv.py:31
+msgid "High (or HD)"
+msgstr ""
+
+#: ../libs/weebtv.py:37
+msgid "Username:"
+msgstr ""
+
+#: ../libs/weebtv.py:38
+msgid "Password:"
+msgstr ""
+
+#: ../libs/weebtv.py:39
+msgid "Preferred video quality:"
+msgstr ""
+
+#: ../libs/weebtv.py:53
+msgid "Sorted channels A-Z [live]"
+msgstr ""
+
+#: ../libs/weebtv.py:54
+msgid "Sorted most viewed channels now [live]"
+msgstr ""
+
+#: ../libs/weebtv.py:55
+msgid "Sorted most viewed channels general [live]"
+msgstr ""
+
+#: ../libs/weebtv.py:56
+msgid "Offline channels"
+msgstr ""
+
+#: ../libs/weebtv.py:181
+msgid "You do not have a premium account. Starting a sponsored broadcast."
+msgstr ""
+
+#: ../libs/youtubeparser.py:31
+msgid "Relevance"
+msgstr ""
+
+#: ../libs/youtubeparser.py:31
+msgid "Upload date"
+msgstr ""
+
+#: ../libs/youtubeparser.py:31
+msgid "View count"
+msgstr ""
+
+#: ../libs/youtube_dl/extractor/vevo.py:89
+#, python-format
+msgid "%s said: This page is currently unavailable in your region"
+msgstr ""
+
+#: ../libs/youtube_dl/extractor/youtube.py:121
+#, python-format
+msgid ""
+"Encryption function name extraction failed!\n"
+"Please report the problem to %s"
+msgstr ""
+
+#: ../libs/youtube_dl/extractor/youtube.py:127
+#, python-format
+msgid ""
+"Encryption function body extraction failed!\n"
+"Please report the problem to %s"
+msgstr ""
+
+#: ../plugin.py:32
+msgid "Watch Videos Online"
+msgstr ""
+
+#: ../plugin.py:81
+#, python-format
+msgid "Configure %s"
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:123
+#, python-format
+msgid "Detection of the \"%s\" utility."
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:123
+#, python-format
+msgid "The \"%s\" utility is used by IPTVPlayer."
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:124
+#, python-format
+msgid "Downloading \"%s\"."
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:125
+#, python-format
+msgid ""
+"Downloading \"%s\" failed. \n"
+"Do you want to retry?"
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:126
+#, python-format
+msgid ""
+"Utility \"%s\" has not been detected. \n"
+"What do you want to do?"
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:127
+#, python-format
+msgid ""
+"Utility \"%s\" has not been detected. \n"
+"Do you want to install it?"
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:128
+#, python-format
+msgid ""
+"Utility \"%s\" is deprecated. \n"
+"What do you want to do?"
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:129
+#, python-format
+msgid ""
+"Utility \"%s\" is deprecated. \n"
+"Do you want to install new one?"
+msgstr ""
+
+#: ../setup/iptvsetuphelper.py:130
+#, python-format
+msgid "Installing \"%s\"."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:50 ../setup/iptvsetupimpl.py:51
+#: ../setup/iptvsetupimpl.py:52 ../setup/iptvsetupimpl.py:61
+#: ../setup/iptvsetupimpl.py:62 ../setup/iptvsetupimpl.py:64
+#: ../setup/iptvsetupimpl.py:65 ../setup/iptvsetupimpl.py:71
+#: ../setup/iptvsetupimpl.py:72 ../setup/iptvsetupimpl.py:74
+#: ../setup/iptvsetupimpl.py:75 ../setup/iptvsetupimpl.py:80
+#: ../setup/iptvsetupimpl.py:81 ../setup/iptvsetupimpl.py:86
+#: ../setup/iptvsetupimpl.py:87
+#, python-format
+msgid "Install into the \"%s\"."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:50 ../setup/iptvsetupimpl.py:61
+#: ../setup/iptvsetupimpl.py:64 ../setup/iptvsetupimpl.py:71
+#: ../setup/iptvsetupimpl.py:74 ../setup/iptvsetupimpl.py:80
+#: ../setup/iptvsetupimpl.py:86
+msgid "recommended"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:53 ../setup/iptvsetupimpl.py:63
+#: ../setup/iptvsetupimpl.py:66 ../setup/iptvsetupimpl.py:73
+#: ../setup/iptvsetupimpl.py:76 ../setup/iptvsetupimpl.py:82
+#: ../setup/iptvsetupimpl.py:88
+msgid "Do not install (not recommended)"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:168
+msgid "Detection of glibc version."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:168
+msgid "Detection version of installed standard C library."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:193
+msgid "Detection of the platform."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:193
+msgid "Plugin can be run on one of the following platforms: sh4, mipsel, i686, armv7, armv5t."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:221
+msgid ""
+"Fatal Error!\n"
+"Plugin is not supported with your platform."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:244
+msgid "Detection of MIPSEL FPU ABI."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:244
+msgid "This step is required to proper select binaries for installation."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:283 ../setup/iptvsetupimpl.py:313
+msgid "Detection of the OpenSSL version."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:283 ../setup/iptvsetupimpl.py:313
+msgid "OpenSSL lib is needed by wget and rtmpdump utilities."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:348
+msgid ""
+"Fatal Error!\n"
+"Openssl could not be found. Please install it and retry."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:355
+msgid "Detection of the OpenSSL 1.0.0 version."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:400
+#, python-format
+msgid ""
+"OpenSSL in your image has different library names then these used by %s.\n"
+"There is need to create following symlinks:\n"
+"%s\n"
+"to be able to install binary components from %s server.\n"
+"Do you want to proceed?"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:420
+#, python-format
+msgid ""
+"Create OpenSSL symlinks failed with following error \"%s\".\n"
+"Some functions may not work correctly."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:430
+msgid "Detection of the gstreamer version."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:466
+msgid "Detection of the ffmpeg version."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:523 ../setup/iptvsetupimpl.py:585
+#: ../setup/iptvsetupimpl.py:1048
+#, python-format
+msgid "The \"%s\" utility is used by the %s to buffering and downloading [%s] links."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:641
+#, python-format
+msgid "The \"%s\" utility is used by the %s to determine the encoding of the text."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:738
+msgid "C subtitle parser"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:739 ../setup/iptvsetupimpl.py:1238
+msgid ""
+"\n"
+"For more info please ask the author samsamsam@o2.pl"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:740
+msgid "It improves subtitles parsing.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:743 ../setup/iptvsetupimpl.py:806
+#: ../setup/iptvsetupimpl.py:871 ../setup/iptvsetupimpl.py:931
+#: ../setup/iptvsetupimpl.py:995 ../setup/iptvsetupimpl.py:1197
+#: ../setup/iptvsetupimpl.py:1242
+msgid ""
+" has not been detected. \n"
+"Do you want to install it? "
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:744 ../setup/iptvsetupimpl.py:807
+#: ../setup/iptvsetupimpl.py:872 ../setup/iptvsetupimpl.py:932
+#: ../setup/iptvsetupimpl.py:996 ../setup/iptvsetupimpl.py:1198
+#: ../setup/iptvsetupimpl.py:1243
+msgid ""
+" is deprecated. \n"
+"Do you want to install new one? "
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:801
+msgid "python-cjson"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:802
+#, python-format
+msgid ""
+"\n"
+"For more info please ask %s "
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:803
+msgid "It improves json data parsing.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:866
+msgid "hlsdl downloader"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:867 ../setup/iptvsetupimpl.py:927
+msgid ""
+"\n"
+"For more info please ask samsamsam@o2.pl"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:868
+msgid "It improves HLS/M3U8 stream download.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:926
+msgid "cmdwrap tool"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:928
+msgid "It improves commands execution with very long arguments.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:990
+msgid "duktape"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:991
+msgid ""
+"\n"
+"Please visit http://duktape.org/"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:992
+msgid "Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1104
+#, python-format
+msgid "The \"%s\" utility is used by the %s as external movie player based on the ffmpeg and libeplayer."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1151
+#, python-format
+msgid "The \"%s\" utility is used by the %s as external movie player."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1192
+msgid "Fluendo mpegdemux for GSTREAMER 0.10"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1193
+msgid ""
+"\n"
+"For more info please visit http://fluendo.com/"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1194
+msgid "It improves playing of streams hls/m3u8.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1237
+msgid "GST-IFDSRC for GSTREAMER 1.X"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1239
+msgid "It improves buffering mode with the gstplayer.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1279
+#, python-format
+msgid "[%s] will be used by %s."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1355
+msgid "Installation binary failed. Retry?"
+msgstr ""
+
+#: ../setup/iptvsetupwidget.py:86 ../Web/webParts.py:80
+msgid "Information"
+msgstr ""
+
+#: ../setup/iptvsetupwidget.py:87
+msgid ""
+"IPTVPlayer need some additional setup.\n"
+"Such as downloading and installation additional binaries.\n"
+"Press OK to start."
+msgstr ""
+
+#: ../setup/iptvsetupwidget.py:94
+msgid ""
+"Skipping IPTVPlayer setup may cause problems.\n"
+"Are you sure to skip IPTVPlayer setup?"
+msgstr ""
+
+#: ../subproviders/subprov_napiprojektpl.py:301
+#, python-format
+msgid "Unknown subtitle parser for format \"%s\"."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:80
+#: ../subproviders/subprov_opensubtitlesorg2.py:132
+#, python-format
+msgid "Failed to connect to server \"%s\"."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:94
+#: ../subproviders/subprov_opensubtitlesorg2.py:158
+#, python-format
+msgid "Failed to log in user \"%s\". Please check your login and password."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:99
+#, python-format
+msgid ""
+"Service %s requires registration. \n"
+"Please fill your login and password in the %s configuration."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:302
+#: ../subproviders/subprov_opensubtitlesorg.py:358
+#: ../subproviders/subprov_opensubtitlesorg3.py:267
+#: ../subproviders/subprov_popcornsubtitles.py:105
+#: ../subproviders/subprov_youtubecom.py:97
+msgid "Failed to download subtitle."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:363
+#: ../subproviders/subprov_popcornsubtitles.py:147
+#, python-format
+msgid "Failed to write the file \"%s\"."
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:169
+msgid "_checkStatus except error"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:198
+#: ../subproviders/subprov_opensubtitlesorg.py:205
+msgid "Login failed!"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:203
+msgid "Get token failed!"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:203
+#: ../subproviders/subprov_opensubtitlesorg.py:205
+#, python-format
+msgid ""
+"Error message: \"%s\".\n"
+"Error code: \"%s\"."
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:230
+msgid "Get languages failed!"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:365
+#: ../subproviders/subprov_opensubtitlesorg3.py:276
+msgid "Failed to gzip."
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:372
+msgid "Failed to decode to UTF-8."
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:52
+msgid "Search Movies and TV Series"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:52
+msgid "Search only in Movies"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:52
+msgid "Search only in TV Series"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:73
+#, python-format
+msgid "%s has been protected with google recaptcha v2. You can try to use API version."
+msgstr ""
+
+#: ../subproviders/subprov_popcornsubtitles.py:53
+msgid "Wrong uri."
+msgstr ""
+
+#: ../subproviders/subprov_popcornsubtitles.py:98
+msgid "Failed to page with subtitle link."
+msgstr ""
+
+#: ../subproviders/subprov_subscenecom.py:114
+msgid "By media title"
+msgstr ""
+
+#: ../subproviders/subprov_subscenecom.py:115
+msgid "By release name"
+msgstr ""
+
+#: ../subproviders/subprov_youtubecom.py:53
+msgid "The YouTube video ID is invalid."
+msgstr ""
+
+#: ../subproviders/subprov_youtubecom.py:62
+msgid "Auto-translate"
+msgstr ""
+
+#: ../suggestions/filmstarts.py:17
+msgid "Filmstarts Suggestions"
+msgstr ""
+
+#: ../suggestions/filmweb.py:17
+msgid "Filmweb Suggestions"
+msgstr ""
+
+#: ../suggestions/google.py:18
+msgid "Youtube Suggestions"
+msgstr ""
+
+#: ../suggestions/google.py:18
+msgid "Google Suggestions"
+msgstr ""
+
+#: ../suggestions/imdb.py:17
+msgid "IMDb Suggestions"
+msgstr ""
+
+#: ../tools/e2ijs.py:33
+#, python-format
+msgid "The %s utility is necessary here but it was not detected."
+msgstr ""
+
+#: ../tools/e2ijs.py:34
+#, python-format
+msgid "Please consider restart your Engima2 and agree to install the %s utlity when the %s will propose this."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:112 ../tools/iptvfavourites.py:168
+msgid "Wrong indexes."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:147
+msgid "The same item already exists in this group."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:156
+#, python-format
+msgid "Item idx[%d] not found in group[%s]."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:176
+#, python-format
+msgid "Group with id[%s] not found."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:193 ../tools/iptvfavourites.py:209
+#, python-format
+msgid "Error reading file \"%s\".\n"
+msgstr ""
+
+#: ../tools/iptvfavourites.py:222
+#, python-format
+msgid "Error deleting file \"%s\".\n"
+msgstr ""
+
+#: ../tools/iptvfavourites.py:239 ../tools/iptvfavourites.py:253
+#: ../tools/iptvhostgroups.py:211 ../tools/iptvhostgroups.py:294
+#, python-format
+msgid "Error writing file \"%s\".\n"
+msgstr ""
+
+#: ../tools/iptvhostgroups.py:130
+msgid "This host has been added already to this group."
+msgstr ""
+
+#: ../Web/webParts.py:63
+msgid "Active host"
+msgstr ""
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "Logs"
+msgstr ""
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "Reset State"
+msgstr ""
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "version"
+msgstr ""
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "Web interface version"
+msgstr ""
+
+#: ../Web/webParts.py:80
+msgid "Selected hosts"
+msgstr ""
+
+#: ../Web/webParts.py:80
+msgid "Settings"
+msgstr ""
+
+#: ../Web/webParts.py:97
+msgid "<font color=\"#FE642E\">REMEMBER:</font></b> E2iPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
+msgstr ""
+
+#: ../Web/webParts.py:107
+msgid "Debug file has been deleted"
+msgstr ""
+
+#: ../Web/webParts.py:109
+msgid "Error during deletion of the debug file."
+msgstr ""
+
+#: ../Web/webParts.py:111
+msgid "Debug file does not exist - nothing to delete"
+msgstr ""
+
+#: ../Web/webParts.py:113
+msgid "Debug option is disabled - nothing to display"
+msgstr ""
+
+#: ../Web/webParts.py:115
+msgid "Debug option set to console - nothing to display"
+msgstr ""
+
+#: ../Web/webParts.py:117
+msgid "Debug option set to debugfile, but file does not exist - nothing to display"
+msgstr ""
+
+#: ../Web/webParts.py:119 ../Web/webParts.py:134
+msgid "Download log file"
+msgstr ""
+
+#: ../Web/webParts.py:122
+#, python-format
+msgid "%s file is %d MB in size. Last %d lines are:"
+msgstr ""
+
+#: ../Web/webParts.py:123
+msgid "Delete log file"
+msgstr ""
+
+#: ../Web/webParts.py:125
+#, python-format
+msgid "%s file is %d KB in size. Last %d lines are:"
+msgstr ""
+
+#: ../Web/webParts.py:127
+#, python-format
+msgid "Last %d lines of the %s file are:"
+msgstr ""
+
+#: ../Web/webParts.py:192
+msgid "Hosts settings"
+msgstr ""
+
+#: ../Web/webParts.py:199
+msgid "Plugin global settings"
+msgstr ""
+
+#: ../Web/webParts.py:240
+msgid "Download manager is not initialized"
+msgstr ""
+
+#: ../Web/webParts.py:241
+msgid "Initialize Download Manager"
+msgstr ""
+
+#: ../Web/webParts.py:298 ../Web/webParts.py:306 ../Web/webParts.py:314
+#: ../Web/webParts.py:322 ../Web/webParts.py:422
+msgid "Watch"
+msgstr ""
+
+#: ../Web/webParts.py:299
+msgid "Stop download"
+msgstr ""
+
+#: ../Web/webParts.py:307 ../Web/webParts.py:316 ../Web/webParts.py:324
+#: ../Web/webParts.py:331
+msgid "Delete"
+msgstr ""
+
+#: ../Web/webParts.py:355
+msgid "REMEMBER: "
+msgstr ""
+
+#: ../Web/webParts.py:355
+msgid "first check if host works properly in GUI and web <b>BEFORE</b> reporting error in it !!!"
+msgstr ""
+
+#: ../Web/webParts.py:360 ../Web/webParts.py:363 ../Web/webParts.py:365
+msgid "Previous list"
+msgstr ""
+
+#: ../Web/webParts.py:366
+msgid "Reload list"
+msgstr ""
+
+#: ../Web/webParts.py:367
+msgid "Initial list"
+msgstr ""
+
+#: ../Web/webParts.py:368
+msgid "Return to hosts list"
+msgstr ""
+
+#: ../Web/webParts.py:418
+msgid "Select"
+msgstr ""
+
+#: ../Web/webParts.py:421
+msgid "Add to downloader"
+msgstr ""
+
+#: ../Web/webParts.py:433
+msgid "host:"
+msgstr ""
+
+#: ../Web/webParts.py:434
+msgid "Title:"
+msgstr ""
+
+#: ../Web/webParts.py:437
+msgid "Level:"
+msgstr ""
+
+#: ../Web/webParts.py:438
+msgid "Path:"
+msgstr ""
+
+#: ../Web/webParts.py:445
+msgid "Links for"
+msgstr ""
+
+#: ../Web/webParts.py:461 ../Web/webParts.py:502
+msgid "ERROR:"
+msgstr ""
+
+#: ../Web/webParts.py:478
+msgid "Search in all active hosts"
+msgstr ""
+
+#: ../Web/webParts.py:482
+msgid "All materials"
+msgstr ""
+
+#: ../Web/webParts.py:483
+msgid "Only videos"
+msgstr ""
+
+#: ../Web/webParts.py:484
+msgid "Only music"
+msgstr ""
+
+#: ../Web/webSite.py:67
+msgid "Redirect"
+msgstr ""
+
+#: ../Web/webSite.py:68
+msgid "You are using old version of OpenWebif.<br> To go to E2iPlayer web Select the following link<br>"
+msgstr ""
+
+#: ../Web/webSite.py:69
+msgid "Click"
+msgstr ""
+
+#: ../Web/webSite.py:106
+msgid "Web component has been reset and all threads are stopped. :)"
+msgstr ""
+
+#: ../Web/webSite.py:108
+msgid "Web component has been reset, the following threads are still working:"
+msgstr ""
+
+#: ../Web/webSite.py:156
+#, python-format
+msgid "Waiting search thread to stop, please wait (%d)"
+msgstr ""
+
+#: ../Web/webSite.py:172 ../Web/webSite.py:217 ../Web/webSite.py:344
+#: ../Web/webSite.py:521
+msgid "Initiating data, please wait"
+msgstr ""
+
+#: ../Web/webSite.py:179
+#, python-format
+msgid "Searching, please wait (%d)"
+msgstr ""
+
+#: ../Web/webSite.py:181
+#, python-format
+msgid "Searching in %s, please wait (%d)"
+msgstr ""
+
+#: ../Web/webSite.py:222 ../Web/webSite.py:525
+#, python-format
+msgid "Loading data, please wait (%d)"
+msgstr ""
+
+#: ../Web/webSite.py:266
+msgid "Debug file does not exist - nothing to download"
+msgstr ""
+
+#: ../Web/webSite.py:289 ../Web/webSite.py:347
+msgid "Loading data, please wait"
+msgstr ""
+
+#: ../Web/webSite.py:446
+msgid "Nothing has been downloaded yet."
+msgstr ""
+
+#: ../Web/webSite.py:451
+msgid "No materials waiting in the downloader queue"
+msgstr ""
+
+#: ../Web/webThreads.py:78
+msgid "visit site"
+msgstr ""
+
+#: ../Web/webThreads.py:198
+msgid "Disable"
+msgstr ""
+
+#: ../Web/webThreads.py:200
+msgid "Enable"
+msgstr ""
+
+#: ../Web/webTools.py:39
+msgid "Search in "
+msgstr ""
diff -ruN o/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po pc/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po
--- o/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/locale/ru/LC_MESSAGES/IPTVPlayer.po	2020-05-12 00:07:45.110290928 +0300
@@ -1,54 +1,103 @@
 msgid ""
 msgstr ""
 "Project-Id-Version: IPTVPlayer\n"
-"POT-Creation-Date: 2013-12-15 12:19+0100\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2019-08-13 12:09+0300\n"
 "PO-Revision-Date: \n"
-"Last-Translator: krutoj2010 <krutoj2010@gmail.com>\n"
+"Last-Translator: Александр Кольцов <a.g.prosat@gmail.com>\n"
 "Language-Team: IPTVPlayer\n"
 "Language: ru\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=UTF-8\n"
 "Content-Transfer-Encoding: 8bit\n"
-"X-Generator: Poedit 1.6.10\n"
+"X-Generator: Poedit 2.0.6\n"
 "X-Poedit-Basepath: .\n"
-"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 "
-"|| n%100>=20) ? 1 : 2);\n"
+"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
 "X-Poedit-SearchPath-0: ../plugin\n"
 
+#, python-format
+msgid "\tDisk space available: %s"
+msgstr "\tДоступное  дисковое пространство: %s"
+
+#, python-format
+msgid "\tDisk space required: %s"
+msgstr "\tНеобходимое дисковое пространство: %s"
+
+msgid ""
+"\n"
+"Error[1]."
+msgstr ""
+"\n"
+"Ошибка[1]."
+
+msgid ""
+"\n"
+"Error[2]."
+msgstr ""
+"\n"
+"Ошибка[2]."
+
+msgid ""
+"\n"
+"Error[3]."
+msgstr ""
+"\n"
+"Ошибка[3]."
+
+msgid ""
+"\n"
+"Error[4]."
+msgstr ""
+"\n"
+"Ошибка[4]."
+
+#, python-format
+msgid ""
+"\n"
+"For more info please ask %s "
+msgstr ""
+"\n"
+"Дополнительную информацию спросите у %s "
+
+msgid ""
+"\n"
+"For more info please ask samsamsam@o2.pl"
+msgstr ""
+"\n"
+"Дополнительную информацию спросите у samsamsam@o2.pl"
+
 msgid ""
 "\n"
 "For more info please ask the author samsamsam@o2.pl"
 msgstr ""
 "\n"
-"Для получения более подробной информации, пожалуйста, спросите автора "
-"samsamsam@o2.pl"
+"Дополнительную информацию спросите у автора samsamsam@o2.pl"
 
 msgid ""
 "\n"
 "For more info please visit http://fluendo.com/"
 msgstr ""
 "\n"
-"Для получения более подробной информации, пожалуйста, посетите http://"
-"fluendo.com/"
+"Для получения подробной информации, пожалуйста, посетите http://fluendo.com/"
 
 msgid ""
 "\n"
 "Make sure you are using the latest version of the plugin."
 msgstr ""
 "\n"
-"Убедитесь, что вы используете последнюю версию плагина."
+"Убедитесь, что Вы используете последнюю версию плагина."
 
 msgid ""
 "\n"
-"Please use \"Web\" streams player -> WeebTV instead."
+"Please visit http://duktape.org/"
 msgstr ""
 "\n"
-"Пожалуйста, используйте \"Web\" потоки плеера -> вместо WeebTV."
+"Пожалуйста, посетите http://duktape.org/"
 
 msgid ""
 "\n"
-"This host is not integral part of the IPTVPlayer plugin.\n"
-"It is not supported by IPTVPlayer team."
+"This host is not integral part of the E2iPlayer plugin.\n"
+"It is not supported by E2iPlayer team."
 msgstr ""
 "\n"
 "Этот хост не является неотъемлемой частью плагина IPTVПлеер.\n"
@@ -57,6 +106,15 @@
 msgid ""
 "\n"
 "You can also report problem here: \n"
+" https://gitlab.com/maxbambi/e2iplayer/issues"
+msgstr ""
+"\n"
+"Сообшить о проблеме вы можете здесь: \n"
+" https://gitlab.com/maxbambi/e2iplayer/issues"
+
+msgid ""
+"\n"
+"You can also report problem here: \n"
 "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
 "or here: samsamsam@o2.pl"
 msgstr ""
@@ -65,112 +123,329 @@
 "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
 "или здесь: samsamsam@o2.pl"
 
+msgid " "
+msgstr " "
+
 msgid "    Allowed formats of thumbnails"
-msgstr "Разрешенный формат эскизов"
+msgstr "    Разрешённый формат эскизов"
 
 msgid "    Audio buffer size [KB]"
-msgstr "Размер буфера Аудио [KB]"
+msgstr "    Размер аудиобуфера [КБ]"
+
+msgid "    Background color"
+msgstr "    Фон заднего плана"
+
+msgid "    Default suggestions provider"
+msgstr "    Поставщик предложений по умолчанию"
 
-msgid "    Buffer size [MB]"
-msgstr "    Размер буфера [MB]"
+msgid "    Enable hosts groups"
+msgstr "    Включить группы хостов"
 
 msgid "    Number of columns"
-msgstr "Количество колонок"
+msgstr "    Количество колонок"
 
 msgid "    Number of rows"
-msgstr "Количество строк"
+msgstr "    Количество строк"
 
 msgid "    Remove thumbnails"
-msgstr "Удалить эскизы"
+msgstr "    Удалить эскизы"
 
 msgid "    Service icon size"
-msgstr "Размер иконки сервиса"
+msgstr "    Размер иконки сервиса"
+
+msgid "    Show suggestions"
+msgstr "    Показать предложения"
 
 msgid "    Video buffer size [MB]"
-msgstr "Размер буфера Видео [MB]"
+msgstr "    Размер видеобуфера [МБ]"
+
+#, python-format
+msgid " (planned %s)"
+msgstr " (планировалось %s)"
+
+msgid " - others links"
+msgstr " - другие ссылки"
 
-msgid " Last.fm login:"
-msgstr " Last.fm Войти:"
+msgid " File Not Found."
+msgstr " Файл не найден."
 
-msgid " Password"
-msgstr " Пароль"
+msgid " Login Protected."
+msgstr " Логин защищен."
 
-msgid " Username or Email"
-msgstr " Имя пользователя или адрес электронной почты"
+msgid " This video is a private."
+msgstr " Это видео является частным."
 
 msgid ""
 " has not been detected. \n"
 "Do you want to install it? "
 msgstr ""
 " Это не было обнаружено. \n"
-"Вы хотите, установить его? "
+"Вы хотите установить его? "
 
 msgid ""
 " is deprecated. \n"
 "Do you want to install new one? "
 msgstr ""
 " не рекомендуется. \n"
-"Вы хотите, установить новый? "
+"Вы хотите установить новый? "
+
+msgid " main link"
+msgstr " главная ссылка"
+
+msgid " or "
+msgstr " или "
+
+#, python-format
+msgid "\"%s\" Virtual Keyboard layout not available."
+msgstr "\"%s\" Виртуальная раскладка клавиатуры недоступна."
+
+#, python-format
+msgid "\"%s\" login failed! Please check your login and password."
+msgstr "Вход в \"%s\" не удался! Пожалуйста, проверьте Ваш логин и пароль."
 
 msgid "\"Web\" streams player"
-msgstr "\"Сеть\" Потоковый плеер"
+msgstr "Потоковый \"Web\" плеер"
+
+#, python-format
+msgid "%s "
+msgstr "%s "
+
+#, python-format
+msgid "%s - service overview"
+msgstr "%s - обзор сервисов"
+
+#, python-format
+msgid "%s - subtitles provider"
+msgstr "\"%s - провайдер субтитров"
+
+#, python-format
+msgid "%s - trailer"
+msgstr "%s - трейлер"
+
+#, python-format
+msgid "%s API KEY"
+msgstr "%s API КЛЮЧ"
+
+#, python-format
+msgid "%s device name"
+msgstr "%s имя устройства"
+
+#, python-format
+msgid "%s download manager"
+msgstr "Менеджер загрузок %s "
+
+#, python-format
+msgid "%s e-mail"
+msgstr "%s e-mail"
+
+#, python-format
+msgid "%s episodes"
+msgstr "%s новые серии"
+
+#, python-format
+msgid "%s file is %d KB in size. Last %d lines are:"
+msgstr "Файл %s имеет размер %d КБ. Последние %d строк:"
+
+#, python-format
+msgid "%s file is %d MB in size. Last %d lines are:"
+msgstr "Файл %s имеет размер %d МБ. Последние %d строк:"
+
+#, python-format
+msgid "%s followers"
+msgstr "%s подписчиков"
+
+#, python-format
+msgid "%s has been protected with google recaptcha v2. You can try to use API version."
+msgstr "%s был защищен с помощью Google recaptcha v2. Вы можете попробовать использовать версию API."
+
+#, python-format
+msgid "%s link extractor error."
+msgstr "Ошибка экстрактора ссылки %s."
+
+#, python-format
+msgid "%s login"
+msgstr "%s вход"
+
+#, python-format
+msgid "%s minutes"
+msgstr "%s минут"
+
+#, python-format
+msgid "%s password"
+msgstr "%s пароль"
+
+#, python-format
+msgid "%s returned %s: %s"
+msgstr "%s вернул %s: %s"
+
+#, python-format
+msgid "%s s%se%s"
+msgstr "%s s%se%s"
 
-msgid "%s - configuration"
-msgstr "%s - Конфигурация"
+#, python-format
+msgid "%s said: This page is currently unavailable in your region"
+msgstr "%s сказал: эта страница в настоящее время недоступна в Вашем регионе."
 
-msgid "%s [download]"
-msgstr "%s Загрузить"
+#, python-format
+msgid "%s services configuration"
+msgstr "Конфигурация служб %s (Нажмите OK)."
 
-msgid "%s [watch]"
-msgstr "%s Смотреть"
+#, python-format
+msgid "%s shows"
+msgstr "%s тв шоу"
 
-msgid "%s items in category"
-msgstr "Пункты по категориям %s сек"
+#, python-format
+msgid "%s subtitles download - how to"
+msgstr "Загрузка %s субтитров - помощь"
 
-msgid "%s viewers, %s channels"
-msgstr "%s зрителей, %s каналы"
+#, python-format
+msgid "%s timeout."
+msgstr "Тайм-аут %s"
 
-msgid "%s will be used by IPTVPlayer."
-msgstr "%s будет использоваться в IPTVПлеере."
+#, python-format
+msgid ""
+"%s uses \"geo-blocking\" measures to prevent you from accessing the services from abroad.\n"
+" Host country: %s, your country: %s"
+msgstr ""
+"% s использует \"геоблокирующие\" меры, чтобы запретить вам доступ к сервисам из-за границы.\n"
+"Передающая страна: %s. Ваша страна: %s."
+
+#, python-format
+msgid "%s uses \"geo-blocking\" measures to prevent you from accessing the services from outside the %s Territory."
+msgstr "%s использует \"геоблокирующие\" меры, чтобы предотвратить доступ к сервисам за пределами территории %s."
+
+#, python-format
+msgid "%s viewers"
+msgstr "%s зрителей"
+
+#, python-format
+msgid "%s views"
+msgstr "%s просмотров"
+
+#, python-format
+msgid "%s/10"
+msgstr "%s/10"
+
+msgid "++"
+msgstr "++"
+
+msgid "--"
+msgstr "--"
+
+msgid "-- OK --"
+msgstr "-- OK --"
+
+msgid "----------------- External exteplayer3 options -----------------"
+msgstr "----------------- Внешние опции exteplayer3 -----------------"
 
 msgid "----------Other----------"
 msgstr "----------Другое----------"
 
+msgid "--All Episodes--"
+msgstr "--Все серии--"
+
 msgid "--All--"
 msgstr "--Все--"
 
+msgid "--Any--"
+msgstr "--Любые--"
+
 msgid "--Other--"
-msgstr "--Другой-"
+msgstr "--Другое-"
+
+msgid "12 hour format "
+msgstr "12-ти часовой формат "
+
+msgid "16:10 Letterbox"
+msgstr "16:10 Letterbox"
+
+msgid "16:10 PanScan"
+msgstr "16:10 PanScan"
+
+msgid "16:9"
+msgstr "16:9"
 
-msgid "..............."
-msgstr "..............."
+msgid "16:9 Letterbox"
+msgstr "16:9 Letterbox"
+
+msgid "16:9 always"
+msgstr "16:9 всегда"
+
+msgid "24 hour format "
+msgstr "24-х часовой формат "
+
+msgid "4:3 Letterbox"
+msgstr "4:3 Letterbox"
+
+msgid "4:3 PanScan"
+msgstr "4:3 PanScan"
+
+msgid "<font color=\"#FE642E\">REMEMBER:</font></b> E2iPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
+msgstr "<font color=\"#FE642E\">ПОМНИТЕ:</font></b> E2iPlayer <b>ТОЛЬКО</b> специализированный веб-браузер. Он <b>НЕ</b> размещает какие-либо материалы!</font>"
 
 msgid "> Press OK to start <"
 msgstr "> Нажмите кнопку OK, чтобы начать <"
 
+msgid "A TV License is required to watch BBC iPlayer streams, see the BBC website for more information: https://www.bbc.co.uk/iplayer/help/tvlicence"
+msgstr "Для просмотра потоков BBC iPlayer требуется телевизионная лицензия. Для доп. информации: https://www.bbc.co.uk/iplayer/help/tvlicence."
+
+msgid "A-Z"
+msgstr "A-Z"
+
+msgid "A-Z List"
+msgstr "Список A-Z"
+
+msgid "AAC downmix mode"
+msgstr "    Выбор режима микширования AAC"
+
+msgid "ABC"
+msgstr "ABC"
+
 msgid "ABORTED"
 msgstr "ПРЕРВАНО"
 
-msgid "AC3 mix mode"
-msgstr "    Выбор режима AC3"
+msgid "AC3 downmix mode"
+msgstr "    Выбор режима микширования AC3"
+
+msgid "ALBUMS"
+msgstr "АЛЬБОМЫ"
 
-msgid "ARTICLE"
-msgstr "АРТИСТ"
+msgid "API initialization failed!"
+msgstr "Не удалось инициализировать API!"
 
-msgid "AUDIO"
-msgstr "АУДИО"
+msgid "ARTISTS"
+msgstr "АРТИСТЫ"
+
+msgid "AZ"
+msgstr "AZ"
 
 msgid "Aborted"
 msgstr "Прервано"
 
-msgid "Access status: "
-msgstr "Статус доступа: "
+msgid "Accept"
+msgstr "Одобрено"
+
+msgid "Access denied. Please check password."
+msgstr "Доступ закрыт. Пожалуйста, проверьте пароль."
+
+msgid "Action Movies"
+msgstr "Экшн фильмы"
+
+msgid "Active host"
+msgstr "Активный хост"
+
+msgid "Actor:"
+msgstr "Актер:"
+
+msgid "Actors:"
+msgstr "Актеры:"
 
-msgid "Access status: [%r]"
-msgstr "Статус доступа: [%r]"
+#, python-format
+msgid "Add host %s to group"
+msgstr "Добавить хост %s  в группу"
 
 msgid "Add item to favourites"
-msgstr "Добавить к избранному"
+msgstr "Добавить пункт в избранные"
 
 msgid "Add item to group"
 msgstr "Добавить в группу"
@@ -181,113 +456,337 @@
 msgid "Add new group of favourites"
 msgstr "Добавить новую группу избранное"
 
-msgid "Albums"
-msgstr "Альбомы"
+msgid "Add repository last version."
+msgstr "Добавить репозиторий последней версии."
+
+msgid "Add tags to XHAMSTER :"
+msgstr "Добавить теги в XHAMSTER:"
+
+msgid "Add to downloader"
+msgstr "Добавить в загрузчик"
+
+#, python-format
+msgid "Added by: %s, directory: %s"
+msgstr "Добавлено: %s, каталог: %s"
+
+#, python-brace-format
+msgid "Added: {0}"
+msgstr "Добавлено: {0}"
+
+msgid "Adventure Movies"
+msgstr "Фильмы приключения"
 
 msgid "All"
 msgstr "Все"
 
+msgid "All A-Z"
+msgstr "Все A-Z"
+
+msgid "All Leagues"
+msgstr "Все Лиги"
+
+msgid "All Platforms"
+msgstr "Все платформы"
+
 msgid "All TV shows"
 msgstr "Все ТВ-шоу"
 
 msgid "All in one"
-msgstr "Все файлы, без разделения на категории"
+msgstr "Всё в одном"
+
+msgid "All materials"
+msgstr "Все материалы"
 
 msgid "All movies"
 msgstr "Все фильмы"
 
-msgid "All programs in the Live Stream"
-msgstr "Все программы в Live Stream"
+msgid "All programs"
+msgstr "Все программы"
+
+msgid "All shows"
+msgstr "Все шоу"
+
+msgid "All time"
+msgstr "За всё время"
+
+msgid "All videos"
+msgstr "Все видео"
 
 msgid "Allow dash format:"
-msgstr "Разрешить формат разных типов:"
+msgstr "Разрешить dash-формат:"
 
 msgid "Allow downgrade"
-msgstr "Разрешить использование более ранних версий"
+msgstr "Разрешить более ранние версии"
 
 msgid "Allow hls format"
 msgstr "Разрешить формат hls"
 
+msgid "Allow watched flag to be set"
+msgstr "Разрешить просмотр установленного флага"
+
+msgid "Alphabet"
+msgstr "По алфавиту"
+
+msgid "Alphabetical "
+msgstr "Алфавитный порядок "
+
+msgid "Alphabetically"
+msgstr "В алфавитном порядке"
+
+msgid "Alternative"
+msgstr "Альтернатива"
+
+msgid "Alternative domain:"
+msgstr "Альтернативный домен:"
+
 msgid "Alternative geolocation IP 1:"
 msgstr "Альтернативная геолокация IP 1:"
 
 msgid "Alternative geolocation IP 2:"
 msgstr "Альтернативная геолокация IP 2:"
 
+msgid "Alternative proxy server (1)"
+msgstr "Альтернативный прокси-сервер (1)"
+
+msgid "Alternative proxy server (2)"
+msgstr "Альтернативный прокси-сервер (2)"
+
+msgid "Always"
+msgstr "Всегда"
+
+#, python-format
 msgid ""
 "An error occurred when try to sign in the user \"%s.\n"
 "Please check your login credentials and try again later...\""
 msgstr ""
 "Произошла ошибка при попытке войти к пользователю \"%s.\n"
-"Пожалуйста, проверьте ваши учетные данные и попробуйте еще раз позже...\""
+"Пожалуйста, проверьте Ваши учетные данные и попробуйте еще раз позже...\""
 
+#, python-format
 msgid "An error occurred while loading a subtitle from [%s]."
 msgstr "Произошла ошибка при загрузке субтитров из [%s]."
 
-msgid "An unknown error has occurred."
-msgstr "Произошла неизвестная ошибка."
+#, python-format
+msgid "An error occurred while writing into: %s"
+msgstr "Произошла ошибка при записи в: %s"
+
+msgid "Anatomy"
+msgstr "Анатомия"
+
+msgid "Animation Movies"
+msgstr "Анимационные фильмы"
 
-msgid "Anuluj"
-msgstr "Отменить"
+msgid "Animations"
+msgstr "Анимация"
+
+msgid "Anime"
+msgstr "Аниме"
+
+msgid "Anime Search"
+msgstr "Поиск аниме"
+
+msgid "Anime list"
+msgstr "Список аниме"
+
+msgid "Answer"
+msgstr "Ответ"
+
+msgid "Any"
+msgstr "Любые"
 
 msgid "Apply"
 msgstr "Применить"
 
+msgid "Approaches"
+msgstr "Подходы"
+
+msgid "April"
+msgstr "Апрель"
+
+msgid "Arabic"
+msgstr "Арабские"
+
+msgid "Arabic movies"
+msgstr "Арабские фильмы"
+
 msgid "Archive"
 msgstr "Архив"
 
+#, python-format
 msgid "Are you sure you want to remove file \"%s\"?"
 msgstr "Вы уверены, что хотите удалить файл \"%s\"?"
 
+msgid "Artists"
+msgstr "Артисты"
+
 msgid "Aspect"
-msgstr "Аспект"
+msgstr "Разрешение"
+
+msgid "Audio"
+msgstr "Аудио"
+
+msgid "Audio tracks"
+msgstr "Аудиодорожки"
+
+msgid "August"
+msgstr "Август"
+
+msgid "Author"
+msgstr "Автор"
 
 msgid "Auto"
 msgstr "Автоматически"
 
 msgid "Auto check for plugin update"
-msgstr "Автоматическая проверка обновлений плагина"
+msgstr "Автопроверка обновлений плагина"
 
 msgid "Auto selection based on the settings"
 msgstr "Автовыбор на основе настроек"
 
-msgid "Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg"
-msgstr ""
-"Авторы: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg "
+msgid "Auto-translate"
+msgstr "Автоперевод"
 
-msgid ""
-"Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, "
-"tomashj291"
-msgstr ""
-"Авторы: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, "
-"tomashj291"
+msgid "Automatically turn on external subtitles"
+msgstr "Автоматически включать внешние субтитры"
+
+msgid "Autoplay start delay"
+msgstr "Задержка автозапуска"
+
+msgid "BY DAY"
+msgstr "ДНЁМ"
+
+msgid "Balkans"
+msgstr "Балканские"
+
+msgid "Basic Science"
+msgstr "Фундаментальная наука"
+
+msgid "Best Pinkbike Videos"
+msgstr "Лучшие видео Pinkbike"
+
+#, python-format
+msgid "Bitrate: %s"
+msgstr "Битрейт: %s"
 
 msgid "Black"
-msgstr "Черный"
+msgstr "Чёрный"
+
+msgid "Black iframe file"
+msgstr "Чёрный файл iframe"
 
 msgid "Block wmv files"
 msgstr "Блокировать WMV файлы"
 
-msgid "Broadcasts"
-msgstr "Трансляции"
+msgid "Board Review"
+msgstr "Совет по просмотру"
+
+#, python-format
+msgid "Broadcaster: %s"
+msgstr "Вещатель: %s"
 
 msgid "Browse"
-msgstr "Смотреть"
+msgstr "Обзор"
+
+msgid "Browse videos"
+msgstr "Обзор видео"
 
-msgid "Buffer path"
+msgid "Buffering location"
 msgstr "Каталог буфера обмена"
 
-msgid "CATEGORY"
-msgstr "КАТЕГОРИИ"
+msgid "By Year"
+msgstr "По годам"
+
+msgid "By category"
+msgstr "По категории"
+
+msgid "By country"
+msgstr "По странам"
+
+msgid "By media title"
+msgstr "По названию медиа"
+
+msgid "By release name"
+msgstr "По названию выпуска"
+
+msgid "By year"
+msgstr "По годам"
+
+msgid "By years"
+msgstr "По годам"
+
+msgid "Bypass geo-blocking for VODs (it may be illegal):"
+msgstr "Обход геоблокировки VOD (может быть незаконно):"
+
+msgid "C subtitle parser"
+msgstr "C парсер субтитров"
+
+msgid "CHANNELS "
+msgstr "КАНАЛЫ "
+
+msgid "CINEMA MOVIES"
+msgstr "КИНОФИЛЬМЫ"
+
+msgid "CME SAE"
+msgstr "CME SAE"
+
+msgid "COMMENTS"
+msgstr "КОММЕНТАРИИ"
+
+msgid "Cable"
+msgstr "Кабельные"
+
+msgid "Calendar"
+msgstr "Календарь"
+
+#, python-format
+msgid ""
+"Can not get mount points - cmd mount failed.\n"
+"Return code[%s].\n"
+"Return data[%s]."
+msgstr ""
+"Невозможно получить точки монтирования - cmd монтирования неудачная.\n"
+"Код возврата[%s].\n"
+"Возврат данных[%s]."
 
 msgid "Cancel"
-msgstr "Отменить"
+msgstr "Отмена"
+
+msgid "Captcha"
+msgstr "Защитный код"
+
+msgid ""
+"Captcha solved.\n"
+"Waiting for notification."
+msgstr ""
+"Капча решена.\n"
+"Ждём уведомление."
+
+msgid "Captcha solving service"
+msgstr "Служба решения капчи"
+
+msgid "Cartoons"
+msgstr "Мультсериалы"
+
+msgid "Cartoons and anime"
+msgstr "Мультфильмы и аниме"
+
+msgid "Catalog"
+msgstr "Каталог"
+
+msgid "Catch up"
+msgstr "Догоняющие"
 
 msgid "Categories"
 msgstr "Категории"
 
-msgid "Ceska"
-msgstr "Чешский"
+msgid "Categories:"
+msgstr "Категории:"
+
+msgid "Categorization"
+msgstr "Категоризация"
+
+msgid "Catrtoon list"
+msgstr "Список мультфильмов"
 
 msgid "Change active movie player"
 msgstr "Выбор активного видеоплеера"
@@ -295,17 +794,55 @@
 msgid "Channel"
 msgstr "Канал"
 
+#, python-format
+msgid "Channel: %s"
+msgstr "Канал: %s"
+
 msgid "Channels"
 msgstr "Каналы"
 
+msgid "Channles"
+msgstr "Каналы"
+
 msgid "Checking version."
 msgstr "Проверка версии."
 
+msgid "Children"
+msgstr "Детские"
+
 msgid "Cinema movies"
 msgstr "Кинофильмы"
 
-msgid "Collection"
-msgstr "Коллекция"
+msgid "Clear"
+msgstr "Очистить"
+
+msgid "Click"
+msgstr "Нажмите"
+
+msgid "Clips"
+msgstr "Клипы"
+
+msgid "Closing. Please wait..."
+msgstr "Закрытие. Пожалуйста, подождите..."
+
+msgid "Collections"
+msgstr "Подборки"
+
+msgid "Comedies"
+msgstr "Комедии"
+
+msgid "Comedy Movies"
+msgstr "Комедийные фильмы"
+
+msgid "Coming up"
+msgstr "На подходе"
+
+#, python-format
+msgid "Comments: %s"
+msgstr "Комментарии: %s"
+
+msgid "Commits"
+msgstr "Коммиты"
 
 msgid "Completed."
 msgstr "Завершено."
@@ -316,11 +853,13 @@
 msgid "Configuration"
 msgstr "Конфигурация"
 
-msgid "Configuration for service[%s]"
-msgstr "Конфигурация службы[%s]"
-
-msgid "Configure IPTV Player"
-msgstr "Настройки IPTV-Плеера"
+#, python-format
+msgid "Configuration [%s] service"
+msgstr "Конфигурация сервиса [%s]"
+
+#, python-format
+msgid "Configure %s"
+msgstr "Настройка %s"
 
 msgid "Configure host"
 msgstr "Настройка хоста"
@@ -331,7 +870,7 @@
 msgid "Confirm new pin"
 msgstr "Подтвердите новый PIN-код"
 
-msgid "Confirm title of the movie"
+msgid "Confirm the title of the movie"
 msgstr "Подтвердите название фильма"
 
 msgid "Confirmation error."
@@ -340,37 +879,78 @@
 msgid "Confirmation of installation."
 msgstr "Подтверждение установки."
 
+msgid "Connection error."
+msgstr "Ошибка соединения."
+
+msgid "Connection to server failed!"
+msgstr "Подключение к серверу не удалось!"
+
 msgid "Continue downloading"
 msgstr "Продолжить загрузку"
 
 msgid "Copy"
 msgstr "Копировать"
 
-msgid ""
-"Could not read from resource.\n"
-"code: %r"
-msgstr ""
-"Не удалось прочитать из ресурса.\n"
-"код: %r"
+msgid "Copy all graphics."
+msgstr "Копировать всю графику."
 
-msgid ""
-"Could not read from resource.\n"
-"code: %s"
-msgstr ""
-"Не удалось прочитать из ресурса.\n"
-"код: %s"
+msgid "Copy graphics without icons."
+msgstr "Копировать графику без значков."
+
+msgid "Copy icons."
+msgstr "Копировать иконки."
+
+msgid "Copy post installed binaries."
+msgstr "Копировать после установки двоичных файлов."
+
+msgid "Correct version."
+msgstr "Правильная версия."
+
+#, python-format
+msgid "Count: %s"
+msgstr "Количество: %s"
 
 msgid "Countries"
 msgstr "Страны"
 
-msgid "Country (changing may be illegal in your country)"
-msgstr "Страна (изменить,зтот параметр может быть незаконным в вашей стране)"
+msgid "Create LCD/VFD summary screen"
+msgstr "Создать сводный экран LCD/VFD"
+
+#, python-format
+msgid ""
+"Create OpenSSL symlinks failed with following error \"%s\".\n"
+"Some functions may not work correctly."
+msgstr ""
+"Создание символьных ссылок OpenSSL с ошибкой \"%s\".\n"
+"Некоторые функции могут работать неправильно."
 
+msgid "Crime Movies"
+msgstr "Криминальные фильмы"
+
+msgid "Critical Error – Content-Encoding gzip cannot be handled!"
+msgstr "Критическая ошибка: gzip с кодировкой содержимого не может быть обработан!"
+
+msgid "Critical Error – cookie can't be saved!"
+msgstr "Критическая ошибка: файл cookie не может быть сохранен!"
+
+msgid "Curator"
+msgstr "Куратор"
+
+#, python-format
 msgid "Currently you have version [%s]."
-msgstr "В настоящее время у вас версия [%s]."
+msgstr "В настоящее время у Вас версия [%s]."
 
 msgid "Cut"
-msgstr "Переместить"
+msgstr "Обрезать"
+
+msgid "Cyrillic Latin Converter"
+msgstr "Кириллице-латинский конвертер"
+
+msgid "DASH/mpd"
+msgstr "DASH/mpd"
+
+msgid "DATE"
+msgstr "ДАТА"
 
 msgid "DOWNLOAD ERROR"
 msgstr "ОШИБКА ЗАГРУЗКИ"
@@ -381,75 +961,212 @@
 msgid "DOWNLOADING"
 msgstr "ЗАГРУЗКА"
 
-msgid "Daily"
-msgstr "Ежедневно"
+msgid "DRM protected streams are not supported."
+msgstr "DRM-защищённые потоки не поддерживаются."
+
+msgid "DRM protection detected."
+msgstr "Обнаружена защита DRM."
 
 msgid "Darkgray"
-msgstr "Темно-серый"
+msgstr "Тёмно-серый"
+
+#, python-format
+msgid ""
+"Data for link generation could not be found.\n"
+"Please report this problem to %s"
+msgstr ""
+"Данные для генерации ссылки не найдены.\n"
+"Пожалуйста, сообщите об этой проблеме в %s"
+
+msgid "Data mismatch."
+msgstr "Несоответствие данных."
+
+#, python-format
+msgid "Date: %s"
+msgstr "Дата: %s"
+
+msgid "Debug file does not exist - nothing to delete"
+msgstr "Файл отладки не существует. Нечего удалять."
+
+msgid "Debug file does not exist - nothing to download"
+msgstr "Файл отладки не существует. Нечего скачать."
+
+msgid "Debug file has been deleted"
+msgstr "Файл отладки удален."
 
 msgid "Debug logs"
-msgstr "Включить журнал диагностики"
+msgstr "Отчет об ошибках"
+
+msgid "Debug option is disabled - nothing to display"
+msgstr "Опция отладки отключена. Нечего отобразить."
+
+msgid "Debug option set to console - nothing to display"
+msgstr "Параметр отладки установлен в консоли. Нечего отобразить."
+
+msgid "Debug option set to debugfile, but file does not exist - nothing to display"
+msgstr "Опция отладки установлена в отладочный файл, но файл не существует. Нечего отобразить."
+
+msgid "December"
+msgstr "Декабрь"
+
+#, python-format
+msgid "Decode file [%s] problem."
+msgstr "Проблема раскодировки файла [%s]."
+
+msgid "Decrypt Server Name:"
+msgstr "Расшифровать имя сервера:"
+
+msgid "Decrypt archive."
+msgstr "Расшифровать архив."
 
-msgid "Default second video policy"
-msgstr "    Видео соотношение сторон по умолчанию (Второе)"
+msgid "Decryption the archive completed successfully."
+msgstr "Расшифровка архива завершена успешно."
+
+msgid "Default"
+msgstr "По умолчанию"
 
 msgid "Default video aspect ratio"
-msgstr "    Видео пропорции по умолчанию"
+msgstr "    Соотношение сторон по умолчанию"
+
+msgid "Default video policy for 16:9"
+msgstr "    Политика видео по умолчанию для 16:9"
 
-msgid "Default video policy"
-msgstr "    Видео соотношение сторон по умолчанию"
+msgid "Default video policy for 4:3"
+msgstr "    Политика видео по умолчанию для 4:3"
+
+msgid "Default video quality"
+msgstr "Качество видео по умолчанию"
 
 msgid "Default video quality:"
-msgstr "Формат видео-по умолчанию:"
+msgstr "Качество видео по умолчанию:"
+
+msgid "Delete"
+msgstr "Удалить"
+
+msgid "Delete log file"
+msgstr "Удалить файл журнала"
 
 msgid "Description:"
 msgstr "Описание:"
 
+msgid "Detection of MIPSEL FPU ABI."
+msgstr "Обнаружение MIPSEL FPU ABI."
+
+msgid "Detection of glibc version."
+msgstr "Обнаружение версии glibc."
+
+#, python-format
 msgid "Detection of the \"%s\" utility."
-msgstr "Средства обнаружения \"%s\" утилита."
+msgstr "Обнаружение утилиты \"%s\"."
+
+msgid "Detection of the OpenSSL 1.0.0 version."
+msgstr "Обнаружение версии OpenSSL 1.0.0."
 
 msgid "Detection of the OpenSSL version."
 msgstr "Обнаружение версии OpenSSL."
 
 msgid "Detection of the ffmpeg version."
-msgstr "Обнаружение FFmpeg версии."
+msgstr "Обнаружение версии FFmpeg."
 
 msgid "Detection of the gstreamer version."
-msgstr "Обнаружение GStreamer версии."
+msgstr "Обнаружение версии GStreamer."
 
 msgid "Detection of the platform."
 msgstr "Обнаружение платформы."
 
+msgid "Detection version of installed standard C library."
+msgstr "Обнаружение версии установленной стандартной библиотеки C."
+
 msgid "Deutsch"
-msgstr "Немецкий"
+msgstr "Немецкие"
+
+msgid "Developer mode:"
+msgstr "Режим разработчика:"
 
 msgid "Developers: "
 msgstr "Разработчики: "
 
-msgid "Device ID"
-msgstr "ID устройства"
+msgid "Director:"
+msgstr "Режиссер:"
+
+msgid "Directors:"
+msgstr "Режиссеры:"
 
-msgid "Disable host protection (error == GS)"
-msgstr "Отключить родительскую защиту (ошибка == GS)"
+#, python-format
+msgid "Directory \"%s\" does not exists."
+msgstr "Каталог \"%s\" не существует."
+
+msgid "Disable"
+msgstr "Запретить"
 
 msgid "Disable live at plugin start"
 msgstr "Отключить просмотр каналов при старте плагина"
 
+msgid "Disable not used services"
+msgstr "Отключить неиспользуемые сервисы"
+
+msgid "Disable reordering"
+msgstr "Отключить перемещение"
+
 msgid "Disable reordering mode"
 msgstr "Отключить режим перемещения"
 
-msgid "Display order:"
-msgstr "Отобразить заказ:"
+msgid "Disable/Enable groups"
+msgstr "Отключить/включить группы"
+
+msgid "Disable/Enable services"
+msgstr "Отключить/включить сервисы"
+
+msgid "Discover"
+msgstr "Обнаружение"
+
+msgid "Display Xtream:"
+msgstr "Показать Xtream:"
 
 msgid "Display thumbnails"
 msgstr "Показать миниатюры"
 
+msgid "DixMax Suggestions"
+msgstr "DixMax рекомендации"
+
 msgid "Do not install (not recommended)"
-msgstr "Не устанавливайте (не рекомендуется)"
+msgstr "Не устанавливать (не рекомендуется)"
+
+#, python-format
+msgid "Do you want to download \"%s\" Virtual Keyboard layout now?"
+msgstr "Хотите скачать раскладку виртуальной клавиатуры \"%s\" сейчас?"
+
+msgid "Do you want to finish?"
+msgstr "Вы хотите закончить?"
+
+#, python-format
+msgid "Do you want to try to re-download \"%s\" Virtual Keyboard layout?"
+msgstr "Вы хотите попробовать повторно загрузить \"%s\" виртуальную раскладку клавиатуры?"
+
+msgid "Documentaries"
+msgstr "Документальное"
+
+msgid "Documentary"
+msgstr "Документальное кино"
+
+msgid "Documentary Movies"
+msgstr "Документальные фильмы"
+
+msgid "Download"
+msgstr "Загрузить"
+
+#, python-format
+msgid "Download \"%s\" in to \"%s\" failed!"
+msgstr "Загрузка \"%s\" в \"%s\" не удалась!"
+
+#, python-format
+msgid "Download %s"
+msgstr "Загрузить %s"
 
 msgid "Download again"
 msgstr "Загрузить снова"
 
+#, python-format
 msgid ""
 "Download can not be started.\n"
 " Incorrect address ('%r')."
@@ -457,6 +1174,17 @@
 "Загрузка не может быть начата.\n"
 " Неправильный адрес ('%r')."
 
+#, python-format
+msgid ""
+"Download can not be started.\n"
+"Downloader %s not working correctly.\n"
+"Last error \"%s (%s)\"."
+msgstr ""
+"Загрузка не может быть начата.\n"
+"Загрузчик %s работает неправильно.\n"
+"Последняя ошибка \"%s (%s)\"."
+
+#, python-format
 msgid ""
 "Download can not be started.\n"
 "Downloader %s not working correctly.\n"
@@ -466,6 +1194,23 @@
 "Загрузчик %s работает неправильно.\n"
 "Статус[%s]"
 
+#, python-format
+msgid ""
+"Download can not be started.\n"
+"Incorrect address \"%r\"."
+msgstr ""
+"Загрузка не может быть начата.\n"
+" Неправильный адрес \"%r\"."
+
+#, python-format
+msgid ""
+"Download failed.\n"
+"Last error \"%s (%s)\"."
+msgstr ""
+"Ошибка загрузки.\n"
+"Последняя ошибка \"%s (%s)\"."
+
+#, python-format
 msgid ""
 "Download failed.\n"
 "Status[%s]"
@@ -473,31 +1218,40 @@
 "Ошибка загрузки.\n"
 "Статус[%s]"
 
-msgid "Download subtitle \"%s\""
-msgstr "Загрузить субтитры \"%s\""
+msgid "Download log file"
+msgstr "Скачать файл журнала"
+
+msgid "Download manager"
+msgstr "Менеджер загрузок"
+
+msgid "Download manager is not initialized"
+msgstr "Менеджер загрузок не инициализирован."
 
-msgid "Download subtitle %s"
-msgstr "Загрузить субтитры %s"
+msgid "Download subtiles failed."
+msgstr "Загрузка субтитров не удалась."
 
 msgid "Download suggested"
-msgstr "Можно загружать"
+msgstr "Предлагается скачать"
 
 msgid "Downloading"
 msgstr "Загрузка"
 
-msgid "Downloading \"%s\" ."
-msgstr "Загрузка \"%s\" ."
-
+#, python-format
 msgid ""
 "Downloading \"%s\" failed. \n"
 "Do you want to retry?"
 msgstr ""
 "Загрузка \"%s\" не удалось. \n"
-"Вы хотите, повторить попытку?"
+"Вы хотите повторить попытку?"
+
+#, python-format
+msgid "Downloading \"%s\"."
+msgstr "Загрузка \"%s\"."
 
 msgid "Downloading an update packet."
 msgstr "Загрузка пакета обновления."
 
+#, python-format
 msgid ""
 "Downloading can not be started.\n"
 " Downloader %s does not work properly.\n"
@@ -507,38 +1261,25 @@
 " Загрузчик %s не работает должным образом.\n"
 "Статус[%s]"
 
-msgid ""
-"Downloading can not be started.\n"
-" Downloader %s not working properly.\n"
-"Status[%s]"
-msgstr ""
-"Загрузка не может быть начата.\n"
-" Загрузчик %s не работает должным образом.\n"
-"Статус[%s]"
-
-msgid ""
-"Downloading can not be started.\n"
-" The address ('%r') It is incorrect."
-msgstr ""
-"Загрузка не может быть начата.\n"
-" Адрес ('%r') это неверно."
-
+#, python-format
 msgid ""
 "Downloading can not be started.\n"
 " The address ('%r') is incorrect."
 msgstr ""
 "Загрузка не может быть начата.\n"
-" Адресс ('%r') неверен."
+"Адрес ('%r') неверный."
 
+#, python-format
 msgid ""
 "Downloading cannot be started.\n"
 " Downloader [%s] not working properly.\n"
 " Status[%s]"
 msgstr ""
 "Загрузка невозможна.\n"
-"Загрузчик [%s] не работает должным образом.\n"
+"Загрузчик [%s] работает неправильно.\n"
 "Статус[%s]"
 
+#, python-format
 msgid ""
 "Downloading cannot be started.\n"
 " Invalid URI[%s]."
@@ -546,9 +1287,25 @@
 "Загрузка невозможна.\n"
 " Неверный адрес [%s]."
 
+#, python-format
 msgid "Downloading file [%s] problem."
 msgstr "Проблема с загрузкой файла [%s]."
 
+#, python-format
+msgid ""
+"Downloading file:\n"
+"%r."
+msgstr ""
+"Загрузка файла:\n"
+"%r."
+
+msgid "Downloading graphics package."
+msgstr "Загрузка графического пакета."
+
+msgid "Downloading icons package."
+msgstr "Загрузка пакета иконок."
+
+#, python-format
 msgid ""
 "Downloading subtitles.\n"
 " ('%r')."
@@ -557,49 +1314,119 @@
 " ('%r')."
 
 msgid "Downloads"
-msgstr "Загрузить"
+msgstr "Загрузки"
 
-msgid "Drama Series"
-msgstr "Сериал"
+msgid "Downloads location"
+msgstr "Папка загрузок"
+
+#, python-format
+msgid "Downloads: %s"
+msgstr "Скачиваний: %s"
+
+msgid "Drama Movies"
+msgstr "Драматическое кино"
+
+msgid "Dramas"
+msgstr "Драмы"
+
+msgid "Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.\n"
+msgstr "Duktape это встраиваемый движок Javascript с акцентом на портативность и компактность.\n"
+
+msgid "Duration"
+msgstr "Длительность"
+
+msgid "Duration:"
+msgstr "Длительность:"
+
+#, python-format
+msgid "Duration: %s"
+msgstr "Длительность: %s"
+
+#, python-brace-format
+msgid "Duration: {0}"
+msgstr "Длительность: {0}"
 
 msgid "During processing, please do not interrupt."
 msgstr "Во время обработки, пожалуйста, не прерывайте."
 
 msgid "During processing, please wait."
-msgstr "Идет обработка, пожалуйста, подождите."
+msgstr "Идет обработка. Пожалуйста, подождите."
 
+msgid "E-mail: "
+msgstr "Эл. адрес: "
+
+#, python-format
 msgid ""
 "E2 GUI restart after IPTVPlayer update to version[%s].\n"
 "\n"
 msgstr ""
-"Перезагрузить eнигму после обновления IPTV Плеера до версии[%s].\n"
+"Перезагрузить Enigma после обновления IPTV-плеера до версии[%s].\n"
 "\n"
 
+msgid "E2iPlayer - settings"
+msgstr "E2iPlayer - настройки"
+
+msgid "E2iPlayer enable/disabled groups"
+msgstr "E2iPlayer - включить/отключить группы"
+
+msgid "ERROR:"
+msgstr "ОШИБКА:"
+
 msgid ""
 "ERROR: pipeline could not be constructed: no element \"playbin2\" \n"
 "Please check if gstreamer plugins are available in your system."
 msgstr ""
-"ОШИБКА: Не удалось создать:, отсутствие контроля: отсутствие элемента "
-"\"playbin2 \" \n"
-"Проверьте установлены GStreamer плагины в вашей системе."
+"ОШИБКА: Не удалось создать:, отсутствие контроля: отсутствие элемента \"playbin2\".\n"
+"Проверьте, установлен ли GStreamer плагин в Вашей системе."
 
 msgid "Edit favourites"
-msgstr "Редактировать избранное"
+msgstr "Редактор избранного"
+
+msgid "Educational Animation"
+msgstr "Обучающая анимация"
+
+msgid "EgyBest Pass:"
+msgstr "Пароль EgyBest:"
 
 msgid "Email"
 msgstr "Эл. адрес"
 
+msgid "Enable"
+msgstr "Включить"
+
+msgid "Enable reordering"
+msgstr "Включить перемещения"
+
 msgid "Enable reordering mode"
 msgstr "Включить режим перемещения"
 
+#, python-format
+msgid ""
+"Encryption function body extraction failed!\n"
+"Please report the problem to %s"
+msgstr ""
+"Ошибка извлечения тела функции шифрования!\n"
+"Пожалуйста, сообщите о проблеме в %s."
+
+#, python-format
+msgid ""
+"Encryption function name extraction failed!\n"
+"Please report the problem to %s"
+msgstr ""
+"Ошибка извлечения имени функции шифрования!!\n"
+"Пожалуйста, сообщите о проблеме в %s."
+
+msgid "Encryption key was downloaded successfully."
+msgstr "Ключ шифрования был успешно загружен."
+
 msgid "English"
-msgstr "Английский"
+msgstr "Английские"
 
 msgid "Enter a value"
 msgstr "Введите значение"
 
 msgid "Enter name"
-msgstr "Введите код"
+msgstr "Введите имя"
 
 msgid "Enter new pin"
 msgstr "Введите новый PIN-код"
@@ -610,34 +1437,95 @@
 msgid "Enter pin"
 msgstr "Введите PIN-код"
 
+msgid "Enter the text"
+msgstr "Введите текст"
+
+msgid "Entitlement parsing error."
+msgstr "Ошибка синтаксического анализа прав."
+
+msgid "Episode"
+msgstr "Эпизод"
+
+msgid "Episode Search"
+msgstr "Поиск серии"
+
+msgid "Episode title"
+msgstr "Название эпизода"
+
 msgid "Episodes"
 msgstr "Эпизоды"
 
-msgid "Error deleting file \"%s\" .\n"
-msgstr "Ошибка удаления файлов \"%s\" .\n"
+#, python-format
+msgid "Error code: %s\n"
+msgstr "Код ошибки: %s\n"
 
-msgid "Error occurs during download."
-msgstr "Ошибка загрузки."
+#, python-format
+msgid ""
+"Error code: %s\n"
+"Error message: %s"
+msgstr ""
+"Код ошибки: %s\n"
+"Сообщение об ошибке: %s"
+
+msgid "Error communicating with the server."
+msgstr "Ошибка соединения с сервером."
 
+#, python-format
+msgid "Error deleting file \"%s\".\n"
+msgstr "Ошибка удаления файла \"%s\".\n"
+
+msgid "Error during deletion of the debug file."
+msgstr "Ошибка во время загрузки."
+
+#, python-format
+msgid "Error message \"%s\"."
+msgstr "Сообщение об ошибке \"%s\"."
+
+#, python-format
 msgid ""
-"Error occurs during download. \n"
-"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+"Error message: \"%s\".\n"
+"Error code: \"%s\"."
 msgstr ""
-"Ошибка загрузки. \n"
-"Статус[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+"Сообщение об ошибке: \"%s\".\n"
+"Код ошибки: \"%s\"."
+
+#, python-format
+msgid "Error message: %s\n"
+msgstr "Сообщение об ошибке: %s\n"
 
+msgid "Error occurs"
+msgstr "Произошла ошибка"
+
+msgid "Error occurs during download."
+msgstr "Ошибка во время загрузки."
+
+#, python-format
+msgid "Error reading file \"%s\".\n"
+msgstr "Ошибка чтения файла \"%s\".\n"
+
+#, python-format
+msgid "Error writing file \"%s\".\n"
+msgstr "Ошибка записи файла \"%s\".\n"
+
+#, python-format
 msgid ""
-"Error occurs.\n"
-"[%s]"
+"Error. Return code [%d]\n"
+"%s."
 msgstr ""
-"Произошла ошибка.\n"
-"[%s]"
+"Ошибка. Код возврата [%d]\n"
+"%s."
+
+msgid "Ethical & Legal"
+msgstr "Этические и юридические"
 
-msgid "Error reading file \"%s\" .\n"
-msgstr "Ошибка чтения файла \"%s\" .\n"
+msgid "Events"
+msgstr "События"
 
-msgid "Error writing file \"%s\" .\n"
-msgstr "Ошибка записи файла \"%s\" .\n"
+msgid "Exam Review"
+msgstr "Обзор экзамена"
+
+msgid "Exception occurs"
+msgstr "Исключение происходит"
 
 msgid "Executing user scripts."
 msgstr "Запуск пользовательских скриптов."
@@ -646,352 +1534,734 @@
 msgstr "Выход"
 
 msgid "External movie player config"
-msgstr "Параметры внешнего плеера (Нажмите OK)"
+msgstr "Параметры внешнего плеера (нажмите OK)"
 
-msgid "External player infobar timeout"
-msgstr "    Время ожидания внешнего проигрывателя"
+msgid "Extracting an update packet."
+msgstr "Извлечение пакета обновления."
 
-msgid "External player use software decoder for the AAC"
-msgstr "Применить наружный декодер для AAC"
+msgid "Extracting graphics package."
+msgstr "Извлечение графического пакета."
 
-msgid "External player use software decoder for the DTS"
-msgstr "Применить наружный декодер для DTS"
+msgid "Extracting icons package."
+msgstr "Извлечение пакета значков."
 
-msgid "Extra"
-msgstr "Дополнительный"
+msgid "FILM ARCHIVE"
+msgstr "АРХИВНЫЙ ФИЛЬМ"
 
-msgid "Extracting an update packet."
-msgstr "Извлечение пакета обновления."
+msgid "FREE"
+msgstr "СВОБОДНЫЙ"
+
+#, python-format
+msgid "Fail to get \"%s\"."
+msgstr "Не удалось получить \"%s\"."
+
+msgid "Fail to get captcha data."
+msgstr "Не удалось получить данные."
+
+#, python-format
+msgid "Failed to connect to server \"%s\"."
+msgstr "Не удалось подключиться к серверу \"%s\"."
+
+#, python-format
+msgid "Failed to convert the file \"%s\" to UTF-8."
+msgstr "Не удалось преобразовать файл \"%s\" в UTF-8."
+
+#, python-format
+msgid "Failed to create directory \"%s\"."
+msgstr "Не удалось создать каталог \"%s\"."
+
+msgid "Failed to decode to UTF-8."
+msgstr "Не удалось декодировать в UTF-8."
+
+msgid "Failed to download subtitle."
+msgstr "Не удалось загрузить субтитры."
+
+msgid "Failed to gzip."
+msgstr "Не удалось выполнить gzip."
+
+#, python-format
+msgid "Failed to log in user \"%s\". Please check your login and password."
+msgstr "Не удалось войти в систему пользователя \"%s\". Проверьте свой логин и пароль."
+
+#, python-format
+msgid "Failed to open the file \"%s\"."
+msgstr "Не удалось открыть файл \"%s\"."
+
+msgid "Failed to page with subtitle link."
+msgstr "Не удалось создать страницу со ссылкой на субтитры."
+
+#, python-format
+msgid "Failed to write file \"%s\"."
+msgstr "Не удалось записать файл \"%s\"."
+
+#, python-format
+msgid "Failed to write the file \"%s\"."
+msgstr "Не удалось записать файл \"%s\"."
+
+#, python-format
+msgid "Failed: %s"
+msgstr "Не удалось: %s"
 
-msgid "Favorite addresses are stored under the file urllist.user"
-msgstr "Избранное. Ссылки хранятся в файле urllist.user"
+msgid "Family Movies"
+msgstr "Семейное кино"
 
-msgid "Favorites"
+msgid "Fantasy Movies"
+msgstr "Фэнтезийные фильмы"
+
+msgid ""
+"Fatal Error!\n"
+"Openssl could not be found. Please install it and retry."
+msgstr ""
+"Фатальная ошибка!\n"
+"Openssl не может быть найден. Пожалуйста, установите его и повторите."
+
+msgid ""
+"Fatal Error!\n"
+"Plugin is not supported with your platform."
+msgstr ""
+"Фатальная ошибка!\n"
+"Плагин не поддерживается на вашей платформе."
+
+msgid "Fatal error: consoleWrite failed!"
+msgstr "Фатальная ошибка: произошел сбой записи в консоль!"
+
+msgid "Favourites"
 msgstr "Избранное"
 
 msgid "Favourites groups"
-msgstr "Группа Избранное"
+msgstr "Избранные группы"
 
 msgid "Favourites manager"
-msgstr "Избранное менеджер"
+msgstr "Менеджер избранного"
 
 msgid "Featured"
 msgstr "Рекомендуемые"
 
+msgid "February"
+msgstr "Февраль"
+
+#, python-format
+msgid "File \"%s\" already exists"
+msgstr "Файл \"%s\" уже существует"
+
+#, python-format
+msgid "File \"%s\" already exists!"
+msgstr "Файл \"%s\" уже существует!"
+
+msgid "File Not Found."
+msgstr "Файл не найден."
+
+#, python-format
 msgid "File [%s] reading failed."
 msgstr "Проблема чтения файла [%s]."
 
+#, python-format
 msgid "File [%s] was added to downloading queue."
-msgstr "Файл [%s] был добавлен в загрузку."
+msgstr "Файл [%s] был добавлен в очередь загрузок."
 
+#, python-format
 msgid "File can not be downloaded. Protocol [%s] is unsupported"
 msgstr "Файл не может быть загружен. Протокол [%s] не поддерживается"
 
-msgid "Filmy"
-msgstr "Фильмы"
+#, python-format
+msgid ""
+"File not found:\n"
+"[%s]."
+msgstr ""
+"Файл не найден:\n"
+"[%s]."
+
+msgid "Fill captcha"
+msgstr "Заполнить капчу"
+
+msgid "Filmstarts Suggestions"
+msgstr "Предложения по фильмам"
+
+msgid "Filmweb Suggestions"
+msgstr "Предложения по фильму"
+
+msgid "Filter By Year"
+msgstr "Фильтр по год"
+
+msgid "Filters"
+msgstr "Фильтры"
 
 msgid "First movie player in buffering mode"
-msgstr "Выбор Первого плеера с режимом буферизации"
+msgstr "Первый плеер в режиме буферизации"
 
 msgid "First movie player without buffering mode"
-msgstr "Выбор Первого плеера"
+msgstr "Первый плеер без режима буферизации"
 
 msgid "Fluendo mpegdemux for GSTREAMER 0.10"
-msgstr "Сделать текучий mpegdemux для GSTREAMER 0.10"
+msgstr "Fluendo mpegdemux для GSTREAMER 0.10"
 
 msgid "Folder for cache data"
 msgstr "Папка данных кэша"
 
-msgid "Folder for temp data"
-msgstr "Папка временных данных"
-
 msgid "Folder for temporary data"
 msgstr "Папка для временных данных"
 
-msgid "Following"
-msgstr "После"
-
 msgid "Following host are broken or additional python modules are needed."
-msgstr "Хост не работает, или не хватает дополнительных модулей Python."
+msgstr "Следующий хост не работает или необходимы дополнительные модули Python."
 
-msgid "For children"
-msgstr "Для детей"
+msgid "Foot & Ankle"
+msgstr "Стопы и лодыжки"
 
 msgid "Format 'wmv' blocked in configuration."
 msgstr "Формат 'wmv' заблокирован в конфигурации."
 
+msgid "Free"
+msgstr "Свободный"
+
 msgid "French"
-msgstr "Франция"
+msgstr "Французские"
+
+msgid "Friday"
+msgstr "Пятница"
+
+msgid "From E2 settings"
+msgstr "Настройки E2"
+
+msgid "Functionality protected by Google reCAPTCHA!"
+msgstr "Функциональность защищена Google reCAPTCHA!"
 
 msgid "GST-IFDSRC for GSTREAMER 1.X"
 msgstr "GST-IFDSRC для GSTREAMER 1.X"
 
+#, python-format
+msgid "Game: %s"
+msgstr "Игры: %s"
+
 msgid "Games"
 msgstr "Игры"
 
+msgid "Games played Now"
+msgstr "Воспрозводимые сейчас игры"
+
+msgid "General"
+msgstr "Главное"
+
+msgid "Genre selection"
+msgstr "Выбор жанра"
+
+msgid "Genre:"
+msgstr "Жанр:"
+
+msgid "Genre: "
+msgstr "Жанр: "
+
+#, python-format
+msgid "Genre: %s"
+msgstr "Жанр: %s"
+
 msgid "Genres"
 msgstr "Жанры"
 
-msgid "German"
-msgstr "Германия"
+msgid "Genres:"
+msgstr "Жанры:"
 
-msgid "German channles"
-msgstr "Немецкие каналы"
+msgid "Geolocation IP:"
+msgstr "Географическое положение IP:"
+
+msgid "German"
+msgstr "Немецкие"
 
 msgid "German proxy server url"
-msgstr "Адрес немецкого прокси-сервер"
+msgstr "Адрес немецкого прокси-сервера"
 
 msgid "Get EPG"
 msgstr "Получить EPG"
 
-msgid "Get episodes list."
-msgstr "Получить список эпизодов."
+msgid "Get decryption key."
+msgstr "Получить ключ расшифровки."
 
-msgid "Get item type."
-msgstr "Получить тип элемента."
+msgid "Get languages failed!"
+msgstr "Получить языки не удалось!"
 
-msgid "Get supported languages list."
-msgstr "Открыть список поддерживаемых языков."
+#, python-format
+msgid "Get page \"%s\" error."
+msgstr "Ошибка получения страницы \"%s\"."
+
+msgid "Get token failed!"
+msgstr "Не удалось получить значение!"
+
+#, python-brace-format
+msgid "GitLab version from {0} was downloaded successfully."
+msgstr "Версия GitLab из {0} была успешно загружена."
 
-msgid "Global"
-msgstr "Общий"
+msgid "Gitlab"
+msgstr "Gitlab"
 
-msgid "Grade"
-msgstr "Класс"
+msgid "Global search :"
+msgstr "Глобальный поиск:"
+
+msgid "Global sort :"
+msgstr "Глобальная сортировка:"
+
+msgid "Go to the host configuration available under blue button."
+msgstr "Перейдите в конфигурацию хоста, доступную по синей кнопке."
+
+msgid "Goal Of The Month"
+msgstr "Игры месяца"
+
+msgid "Google Suggestions"
+msgstr "Предложения Google"
 
 msgid "Graphic services selector"
-msgstr "Селектор Графические услуги"
+msgstr "Графический селектор сервисов"
+
+msgid "Greek"
+msgstr "Греческие"
 
+#, python-format
 msgid "Group \"%s\" already exists."
 msgstr "Группа \"%s\" уже существует."
 
+#, python-format
 msgid "Group %d"
 msgstr "Группа %d"
 
 msgid "Group links into categories: "
-msgstr "Группа, ссылки по категориям: "
+msgstr "Групповые ссылки в категориях: "
 
+#, python-format
 msgid "Group with id[%s] not found."
 msgstr "Группа с идентификатором[%s] не найдена."
 
-msgid "HIGH"
-msgstr "ВЫСОКИЙ"
+msgid "Groups"
+msgstr "Группы"
+
+#, python-format
+msgid "Guest timeout: %s"
+msgstr "Тайм-аут гостя: %s"
+
+msgid "HDFull Suggestions"
+msgstr "Предложения HDFull"
+
+msgid "HLS/m3u8"
+msgstr "HLS/m3u8"
+
+msgid "HOME"
+msgstr "ГЛАВНАЯ"
+
+#, python-format
+msgid "HTTPS connection error \"%s\"\n"
+msgstr "Ошибка подключения HTTPS \"%s\"\n"
+
+msgid "Hand"
+msgstr "Рука"
+
+msgid "Hardware floating point"
+msgstr "Аппаратная плавающая точка"
+
+#, python-format
+msgid "Hide \"%s\" group"
+msgstr "Скрыть группу \"%s\""
+
+msgid "High"
+msgstr "Высокое"
 
 msgid "High (or HD)"
-msgstr "Высокий (или HD)"
+msgstr "Высокое или HD"
 
-msgid "History"
-msgstr "История"
+msgid "Highlights"
+msgstr "Особенности"
+
+msgid "History Movies"
+msgstr "Исторические фильмы"
 
 msgid "History of searched phrases."
-msgstr "История поиска."
+msgstr "История найденных фраз."
+
+msgid "Home"
+msgstr "Главная"
 
 msgid "Home page"
 msgstr "Главная страница"
 
-msgid "Hosting: %s, %s"
-msgstr "Хостинг: %s, %s"
-
-msgid "IPTV - Player mode"
-msgstr "IPTV - Режим Плеера"
-
-msgid "IPTV - the recorder mode"
-msgstr "IPTV - Режим записи"
-
-msgid "IPTV Player"
-msgstr "IPTV Плеер"
+msgid "Horror Movies"
+msgstr "Фильмы ужасов"
 
-msgid "IPTV Player "
-msgstr "IPTV Плеер "
+#, python-format
+msgid "Hosting \"%s\" not supported."
+msgstr "Хостинг \"%s\" не поддерживается."
+
+#, python-format
+msgid "Hosting \"%s\" unknown."
+msgstr "Хостинг \"%s\" неизвестен."
 
-msgid "IPTV Player %s"
-msgstr "IPTV Плеер %s"
+#, python-format
+msgid "Hosting: %s, %s"
+msgstr "Хостинг: %s, %s"
 
-msgid "IPTV Player - settings"
-msgstr "IPTV Плеер - Настройки"
+msgid "Hosts settings"
+msgstr "Настройки хостов"
 
-msgid "IPTV Player HD version %s"
-msgstr "IPTV Плеер HD версия %s"
+msgid "Humanitarian"
+msgstr "Гуманитарный"
 
-msgid "IPTV Player version %s"
-msgstr "IPTV Плеер версия %s"
+msgid "Hungarian"
+msgstr "Венгерские"
 
-msgid "IPTV Recordings"
-msgstr "IPTV Записи"
+msgid "IMDb Suggestions"
+msgstr "Предложения по IMDb"
 
-msgid "IPTV download manager"
-msgstr "Менеджер загрузок"
+msgid "IMDb rating"
+msgstr "Рейтинг IMDb"
 
 msgid "IPTVPlayer - update"
 msgstr "IPTVПлеер - Обновление"
 
-msgid "IPTVPlayer need some additional setup"
-msgstr "IPTV Плеер нужна дополнительная настройка"
-
 msgid ""
 "IPTVPlayer need some additional setup.\n"
 "Such as downloading and installation additional binaries.\n"
 "Press OK to start."
 msgstr ""
-"IPTVPlayer нужна дополнительная настройка. \n"
-"таких, как загрузка и установка дополнительных модулей бинарного файла,"
-"нажмите OK, чтобы начать."
-
-msgid "IPTVPlayer services configuration"
-msgstr "IPTV-Плеер конфигурация хоста"
+"IPTVPlayer нуждается в дополнительной настройке.\n"
+"Таких, как загрузка и установка дополнительных бинарных файлов. \n"
+"Нажмите OK, чтобы начать."
 
-msgid "IPTVPlayer setup version %s"
-msgstr "IPTV Плеер установка версии %s"
+msgid "Icon type"
+msgstr "Тип иконки"
 
-msgid "IPTVPlayer setup version %s "
-msgstr "IPTV Плеер Настройка версии %s "
+msgid "Icons quality"
+msgstr "Качество иконки"
 
 msgid "Icons size"
 msgstr "Размер иконок"
 
+msgid "Imsakiya:"
+msgstr "Имсакийские:"
+
+msgid "Industry"
+msgstr "Промышленность"
+
 msgid "Info"
 msgstr "Информация"
 
+msgid "Info bar clock format"
+msgstr "Формат инфобара часов"
+
+msgid "Info bar timeout"
+msgstr "Тайм-аут инфобара"
+
 msgid "Information"
 msgstr "Информация"
 
 msgid "Information about audio tracks not available."
-msgstr "Информации о аудио треках не имеется."
+msgstr "Информации об аудио треках не имеется."
+
+msgid "Initial list"
+msgstr "Начальный список"
+
+msgid "Initialize Download Manager"
+msgstr "Инициализация диспетчера загрузки"
+
+msgid "Initialize web interface (experimental)"
+msgstr "Включить веб-интерфейс (экспериментальный)"
+
+msgid "Initiating data, please wait"
+msgstr "Инициализация данных. Пожалуйста, подождите"
+
+msgid "Inject black iframe at video playback finish"
+msgstr "Внедрение черного поля при завершении воспроизведения видео"
 
 msgid "Input"
 msgstr "Вход"
 
-msgid "Install into the \"%s\" ."
-msgstr "Установите в \"%s\" ."
+#, python-format
+msgid "Install into the \"%s\"."
+msgstr "Установить в \"%s\"."
 
 msgid "Installation binary failed. Retry?"
-msgstr "Установка бинарного не удалось. Повторите?"
+msgstr "Установка бинарника не удалось. Повторить?"
 
 msgid "Installation has been aborted."
-msgstr "Установка прервана."
+msgstr "Установка былы прервана."
 
 msgid "Installation has been confirmed."
-msgstr "Установка подтверждена."
+msgstr "Установка была подтверждена."
 
-msgid "Installing \"%s\" ."
-msgstr "Установка \"%s\" ."
+#, python-format
+msgid "Installing \"%s\"."
+msgstr "Установка \"%s\"."
 
 msgid "Installing new version."
 msgstr "Установка новой версии."
 
+msgid "Interactive Learning Center(ILC)"
+msgstr "Интерактивный учебный центр (ILC)"
+
+#, python-format
+msgid "Internal Server Error. Server response code: %s"
+msgstr "Внутренняя ошибка сервера. Код ответа сервера: %s"
+
+msgid "Invalid email."
+msgstr "Неверный адрес электронной почты."
+
 msgid "Invalid name."
-msgstr "Неверный код."
+msgstr "Неверное имя."
+
+msgid "Is this message displayed correctly?"
+msgstr "Это сообщение отображается правильно?"
+
+msgid "It improves HLS/M3U8 stream download.\n"
+msgstr "Это улучшает загрузку HLS/M3U8 потока.\n"
 
 msgid "It improves buffering mode with the gstplayer.\n"
 msgstr "Это улучшает режим буферизации с gstplayer.\n"
 
+msgid "It improves commands execution with very long arguments.\n"
+msgstr "Это улучшает выполнение команд с очень длинными аргументами.\n"
+
+msgid "It improves json data parsing.\n"
+msgstr "Это улучшает разбор данных json.\n"
+
 msgid "It improves playing of streams hls/m3u8.\n"
 msgstr "Это улучшает воспроизведение потоков hls/m3u8.\n"
 
+msgid "It improves subtitles parsing.\n"
+msgstr "Это улучшает синтаксический анализ субтитров.\n"
+
+msgid "It is not allowed to call getURLRequestData from main thread."
+msgstr "Невозможно вызвать getURLRequestData из основного потока."
+
+msgid "It looks like some kind of protection. Try again later."
+msgstr "Это похоже на какую-то защиту. Попробуйте позже."
+
+#, python-format
+msgid "It looks like your current configuration do not allow to connect to the https://%s/.\n"
+msgstr "Похоже, Ваша текущая конфигурация не позволяет подключиться к https://%s/.\n"
+
+#, python-format
 msgid "It seems that the host \"%s\" has crashed."
-msgstr "Видимо, этот хост \"%s\" не работает."
+msgstr "Видимо, хост \"%s\" потерпел крах."
 
-msgid ""
-"It seems that the host \"%s\" has crashed. Do you want to report this "
-"problem?"
-msgstr "Видимо, у вас \"%s\" призошёл сбой. Вы хотите, сообщить о проблеме?"
+#, python-format
+msgid "It seems that the host \"%s\" has crashed. Do you want to report this problem?"
+msgstr "Видимо, хост \"%s\" потерпел крах. Вы хотите сообщить о проблеме?"
+
+#, python-format
+msgid "It seems that the subtitle's provider \"%s\" has crashed. Do you want to report this problem?"
+msgstr "Кажется, поставщик субтитров \"%s\" потерпел крах. Вы хотите сообщить о проблеме?"
 
+#, python-format
 msgid ""
 "It seems that the video player \"%s\" does not work properly.\n"
 "\n"
 "STS: %s\n"
 "ERROR CODE: %r"
 msgstr ""
-"Видимо, видео-плеер \"%s\" не работает должным образом.\n"
+"Видимо, видеоплеер \"%s\" не работает должным образом.\n"
 "\n"
 "STS: %s\n"
 "КОД ОШИБКИ: %r"
 
-msgid "Italian"
-msgstr "Италия"
+msgid "It seems that unrar utility is not installed."
+msgstr "Кажется, что unrar утилита не установлена."
+
+msgid "It seems that unzip utility is not installed."
+msgstr "Создается впечатление, что утилита разархивации не установлена."
 
-msgid "Italiano"
-msgstr "Итальянский"
+msgid "Italian"
+msgstr "Итальянские"
 
+#, python-format
 msgid "Item idx[%d] not found in group[%s]."
 msgstr "Пункт idx[%d] не найден в группе[%s]."
 
-msgid "Items in group"
-msgstr "Положение в группе"
+msgid "Items"
+msgstr "Пункты"
 
+#, python-format
 msgid "Items in group \"%s\""
-msgstr "Положение в группе \"%s\""
+msgstr "Пункты в группе \"%s\""
+
+msgid "Items with DRM protection."
+msgstr "Элементы с защитой DRM."
+
+msgid "JDownloader script execution"
+msgstr "Выполнение сценария JDownloader"
+
+#, python-format
+msgid ""
+"JDownloader script execution failed.\n"
+"Error code: %s\n"
+msgstr ""
+"Выполнение сценария JDownloader завершилось с ошибкой.\n"
+"Код ошибки: %s\n"
 
-msgid "JSON module not available!"
-msgstr "Модуль JSON недоступен!"
+msgid "JDownloader script finished."
+msgstr "Сценарий JDownloader завершен."
+
+msgid "January"
+msgstr "Январь"
 
 msgid "Japanese"
-msgstr "Японский"
+msgstr "Японские"
+
+msgid "Jobs & Positions"
+msgstr "Работа и должности"
+
+msgid "Journal Club"
+msgstr "Журнал клуб"
+
+msgid "July"
+msgstr "Июль"
+
+msgid "June"
+msgstr "Июнь"
 
 msgid "Junior"
-msgstr "Юношеский"
+msgstr "Юношеские"
+
+msgid "Knee & Sports"
+msgstr "Коленный спорт"
+
+msgid "LATEST"
+msgstr "ПОСЛЕДНИЕ"
+
+msgid "LATEST CONTENT"
+msgstr "НОВЕЙШЕЕ СОДЕРЖАНИЕ"
+
+msgid "LIKES"
+msgstr "НРАВИТСЯ"
+
+msgid "LIST"
+msgstr "СПИСОК"
+
+msgid "LIVE"
+msgstr "ПРЯМОЙ"
+
+msgid "LIVE STREAMING"
+msgstr "ПРЯМАЯ ТРАНСЛЯЦИЯ"
+
+msgid "Labels"
+msgstr "Этикетки"
+
+msgid "Language"
+msgstr "Язык"
 
 msgid "Language:"
 msgstr "Язык:"
 
+#, python-format
+msgid "Language: %s"
+msgstr "Язык: %s"
+
 msgid "Languages"
 msgstr "Языки"
 
+#, python-format
+msgid "Last %d lines of the %s file are:"
+msgstr "Последние %d строк файла %s:"
+
+msgid "Last chance"
+msgstr "Последний шанс"
+
 msgid "Last checked version"
 msgstr "Последняя проверка версии"
 
-msgid "Last error"
-msgstr "Последняя ошибка"
+msgid "Last day"
+msgstr "Последний день"
 
+#, python-format
+msgid ""
+"Last error:\n"
+"%s"
+msgstr ""
+"Последняя ошибка:\n"
+"%s"
+
+#, python-format
 msgid "Last error: \"%s\""
 msgstr "Последняя ошибка: \"%s\""
 
-msgid ""
-"Last error: \"People who live where you live aren't allowed to watch this "
-"video.. Not because we don't luv ya, but because the owners have some "
-"restrictions. The good news, is there are tens of thousands of other videos "
-"to choose from.\""
-msgstr ""
-"Последняя ошибка: \"Пользователь, где вы проживаете, невозможно посмотреть "
-"это видео..  Потому, что у вас имеются некоторые ограничения. Хорошая "
-"новость, есть десятки тысяч других видео на выбор.\""
+msgid "Last month"
+msgstr "Прошлый месяц"
 
-msgid "Last error: \"Silverlight stream not supported.\""
-msgstr "Последняя ошибка: \"Поток Silverlight не поддерживается.\""
+msgid "Last update"
+msgstr "Последнее обновление"
 
-msgid ""
-"Last error: \"The Mirror is broken.If available you can choose other source."
-"\""
-msgstr ""
-"Последняя ошибка: \"Отображения нет. При наличии вы можете выбрать другой "
-"источник.\""
+msgid "Last week"
+msgstr "На прошлой неделе"
+
+msgid "Lastest"
+msgstr "Новейший"
+
+msgid "Latest"
+msgstr "Последний"
 
-msgid "Last error: %s"
-msgstr "Последняя ошибка: %s"
+msgid "Latest Added Movies"
+msgstr "Последние добавленные фильмы"
 
 msgid "Latest added"
 msgstr "Последние добавленные"
 
+msgid "Latest movies"
+msgstr "Последние фильмы"
+
+msgid "Latest news broadcast"
+msgstr "Последние новости вещания"
+
+msgid "Latest programs"
+msgstr "Последние программы"
+
+msgid "Latest update"
+msgstr "Последнее обновление"
+
 msgid "Latest updates"
 msgstr "Последние обновления"
 
+msgid "Latino"
+msgstr "Латиноамериканские"
+
+msgid "Lead programmer: "
+msgstr "Ведущий программист: "
+
+msgid "Level:"
+msgstr "Уровень:"
+
 msgid "Lightgray"
 msgstr "Светло-серый"
 
 msgid "Line Spacing"
 msgstr "    Межстрочный интервал"
 
-msgid "Link"
-msgstr "Cсылка"
+msgid "Link is not supported by the gstplayer. Please use the extelayer3 if available."
+msgstr "Ссылка не поддерживается проигрывателем gstplayer. Пожалуйста, используйте extelayer3 если доступно."
+
+msgid "Link protected with DRM."
+msgstr "Ссылка защищена DRM."
+
+msgid "Link protected with Google ReCaptcha v2"
+msgstr "Ссылка защищена с помощью Google ReCaptcha v2"
 
-msgid "Links are videos and messages, without division into categories"
-msgstr "Ссылки видеоролики и сообщения, без разделения на категории"
+msgid "Link protected with google recaptcha v2."
+msgstr "Ссылка защищена с помощью google recaptcha v2."
 
-msgid "Links to the video files from the file urllist.txt"
-msgstr "Ссылки на видео из файла urllist.txt"
+msgid "Links for"
+msgstr "Cсылка для"
+
+msgid "Links from all files without categories"
+msgstr "Ссылки из всех файлов без категорий"
+
+#, python-format
+msgid "Links from the file %s"
+msgstr "Ссылки из файла %s"
+
+msgid "List"
+msgstr "Список"
+
+msgid "List by day"
+msgstr "Список по дням"
 
 msgid "List only channels with subscription"
-msgstr "Список каналов в подписке"
+msgstr "Только список каналов в подписке"
+
+#, python-format
+msgid "Listeners: %s"
+msgstr "Слушатели: %s"
 
 msgid "Live"
 msgstr "Прямой эфир"
@@ -999,71 +2269,160 @@
 msgid "Live Channels"
 msgstr "Текущие каналы"
 
-msgid "Live broadcasts from the file urllist.stream"
-msgstr "Прямые трансляции из файла urllist.stream"
+msgid "Live Radio"
+msgstr "Прямой радиоэфир"
+
+msgid "Live TV"
+msgstr "Прямой эфир"
+
+msgid "Live at: "
+msgstr "Онлайн в: "
+
+msgid "Live broadcasts"
+msgstr "Прямые трансляции"
+
+msgid "Live now"
+msgstr "Онлайн сейчас"
+
+msgid "Live streams"
+msgstr "Прямые трансляции"
+
+msgid "Live-streams"
+msgstr "Прямые потоки"
+
+msgid "LiveTv"
+msgstr "Прямой эфир ТВ"
 
 msgid "Load"
-msgstr "Выбрать"
+msgstr "Загрузка"
 
-msgid "Load automatically the subtitle from file with the same name"
-msgstr "    Авто-загрузка субтитров из файла с тем же именем"
+#, python-format
+msgid "Load of the Virtual Keyboard layout \"%s\" failed due to the following error: \"%s\""
+msgstr "Загрузка раскладки виртуальной клавиатуры \"%s\" не выполнена из-за следующей ошибки: \"%s\""
 
 msgid "Loading"
 msgstr "Загрузка"
 
-msgid "Loading..."
-msgstr "Загрузка..."
+#, python-format
+msgid "Loading %s failed due to following error:"
+msgstr "Загрузка %s не удалась из-за следующей ошибки:"
+
+msgid "Loading data, please wait"
+msgstr "Загрузка данных. Пожалуйста, подождите"
+
+#, python-format
+msgid "Loading data, please wait (%d)"
+msgstr "Загрузка данных. Пожалуйста, подождите (%d)"
 
 msgid "LocalMedia"
-msgstr "Мои Медиа файлы"
+msgstr "Локальные медиафайлы"
+
+#, python-format
+msgid "Locale ID mismatched! %s <> %s"
+msgstr "Идентификатор локали несовместим! %s <> %s"
+
+msgid "Localization"
+msgstr "Локализация"
 
 msgid "Login"
-msgstr "Авторизоваться"
+msgstr "Авторизация"
+
+msgid "Login failed!"
+msgstr "Неверный логин!"
 
-msgid "Login user \"%s\" into %s"
-msgstr "Пользователь Войти \"%s\" в %s"
+msgid "Login failed."
+msgstr "Неверный логин."
 
-msgid "Login:"
-msgstr "Авторизоваться:"
+msgid "Login failed. Invalid email or password."
+msgstr "Ошибка входа. Неправильный адрес электронной почты или пароль."
 
-msgid "MEDIUM"
-msgstr "СРЕДНИЙ"
+#, python-brace-format
+msgid "Login on {0} failed."
+msgstr "Неверный логин на {0}."
 
-msgid "MERGE protocol source"
-msgstr "Соединять источник протокола"
+#, python-format
+msgid ""
+"Login user \"%s\" to http://vk.com/ failed!\n"
+"Please check your login data in the IPTVPlayer configuration."
+msgstr ""
+"Не удалось войти в http://vk.com/ с логином пользователя \"%s\"!\n"
+"Пожалуйста , проверьте свои данные для входа в конфигурации IPTVPlayer."
+
+msgid "Logs"
+msgstr "Журнал"
 
-msgid "MORE"
-msgstr "БОЛЬШЕ"
+msgid "Longest"
+msgstr "Самый длинный"
+
+msgid "Low"
+msgstr "Низкий"
+
+msgid "MOVIES"
+msgstr "ФИЛЬМЫ"
 
 msgid "Main"
-msgstr "Главный"
+msgstr "Главное"
 
-msgid "Main Event"
-msgstr "Главное событие"
+msgid "Main menu"
+msgstr "Главное меню"
 
-msgid "Main developer, architect, coordinator: "
-msgstr "Главный разработчик, архитектор, координатор: "
+#, python-format
+msgid "Make directory [%s]"
+msgstr "Создать каталог [%s]"
 
 msgid "Manager status: "
-msgstr "Менеджер положение: "
+msgstr "Статус менеджера: "
+
+msgid "Manga"
+msgstr "Мангас"
+
+msgid "Mars"
+msgstr "Марс"
 
 msgid "Max items per page"
-msgstr "Максимальное количество на странице"
+msgstr "Макс. кол-во на странице"
+
+msgid "Max number of parallel downloads has been reached."
+msgstr "Достигнуто максимальное количество параллельных загрузок."
+
+msgid "May"
+msgstr "Май"
+
+msgid "Medtryx Marketing"
+msgstr "Медтрикс Маркетинг"
+
+msgid "Meetings"
+msgstr "Встречи"
+
+msgid "Menu"
+msgstr "Меню"
 
 msgid "Mid"
 msgstr "Средний"
 
+msgid "Mirror"
+msgstr "Зеркало"
+
+msgid "Missed"
+msgstr "Пропущенные"
+
+msgid "Missed the program?"
+msgstr "Пропустили программу?"
+
 msgid "Missed the show?"
-msgstr "Вы пропускаете?"
+msgstr "Пропустили шоу?"
+
+msgid "Monday"
+msgstr "Понедельник"
 
-msgid "Month"
-msgstr "Месяц"
+msgid "Mood:"
+msgstr "Настроение:"
 
-msgid "Monthly"
-msgstr "Ежемесячно"
+msgid "Moods:"
+msgstr "Настроения:"
 
 msgid "More"
-msgstr "Опции"
+msgstr "Больше опций"
 
 msgid "More important"
 msgstr "Более важно"
@@ -1071,35 +2430,89 @@
 msgid "Most Popular"
 msgstr "Самые популярные"
 
-msgid "Move group"
-msgstr "Перемещение группы"
+msgid "Most featured"
+msgstr "Самые популярные"
+
+msgid "Most popular"
+msgstr "Самые популярные"
+
+msgid "Most rated"
+msgstr "По рейтингу"
+
+msgid "Most recent"
+msgstr "Самые последние"
 
-msgid "Move item"
-msgstr "Переместить пункт"
+msgid "Most viewed"
+msgstr "Наиболее просматриваемые"
+
+msgid "Most watched"
+msgstr "Самые просматриваемые"
+
+#, python-format
+msgid ""
+"Mount ISO file [%s] on [%s] failed.\n"
+"Return code[%s].\n"
+"Return data[%s]."
+msgstr ""
+"Не удалось смонтировать ISO файл [%s] на [%s].\n"
+"Код возврата[%s].\n"
+"Возврат данных[%s]."
+
+msgid "Move group"
+msgstr "Переместить группу"
 
 msgid "Movie"
 msgstr "Фильм"
 
-msgid "Movie \"%s\" has not been found."
-msgstr "Фильм \"%s\" не найден."
+msgid "Movie categories"
+msgstr "Категории фильмов"
 
 msgid "Movie player"
 msgstr "Видеоплеер"
 
-msgid "Movie player without buffering mode"
-msgstr "Выбрать плеер без режима буферизации"
-
 msgid "Movies"
 msgstr "Кино"
 
+msgid "Movies and series"
+msgstr "Фильмы и сериалы"
+
+msgid "Movies by year"
+msgstr "Фильмы по годам"
+
+msgid "Movies genres"
+msgstr "Жанры фильмов"
+
+msgid "Movies list"
+msgstr "Список фильмов"
+
+#, python-format
+msgid "Moving file from \"%s\" to \"%s\" failed.\n"
+msgstr "Перемещение файла из \"%s\" в \"%s\" не выполнено.\n"
+
+#, python-format
+msgid "Moving playback buffer to the download manager failed with the following error \"%s\""
+msgstr "Не удалось переместить буфер воспроизведения в диспетчер загрузки с ошибкой \"%s\""
+
 msgid "Music"
 msgstr "Музыка"
 
-msgid "Music-Box"
-msgstr "Музыка-Box"
+msgid "Music Movies"
+msgstr "Музыкальное кино"
 
-msgid "Musik"
-msgstr "Музыка"
+msgid "My JDownloader reCAPTCHA v2 solution"
+msgstr "Мое решение для JDownloader reCAPTCHA v2"
+
+msgid "Mystery Movies"
+msgstr "Фильмы мистерия"
+
+msgid "NEARBY CAMS"
+msgstr "БЛИЖАЙШИЕ КАМЕРЫ"
+
+msgid "NEW"
+msgstr "НОВЫЙ"
+
+msgid "NEW RELEASE LIST"
+msgstr "СПИСОК НОВЫХ РЕЛИЗОВ"
 
 msgid "Name cannot be empty."
 msgstr "Название не может быть пустым."
@@ -1114,103 +2527,275 @@
 msgid "Name:"
 msgstr "Название:"
 
+msgid "Network"
+msgstr "Сеть"
+
+msgid "Network connection failed."
+msgstr "Не удалось подключиться к сети."
+
+#, python-format
+msgid "Network failed %s."
+msgstr "Сбой сети %s."
+
+msgid "Never"
+msgstr "Никогда"
+
+msgid "New"
+msgstr "Новый"
+
+msgid "New Episodes"
+msgstr "Новые серии"
+
+msgid "New Movies"
+msgstr "Новые фильмы"
+
+msgid "New cartoon"
+msgstr "Новый мультфильм"
+
 msgid "New dir"
 msgstr "Новая папка"
 
-msgid "New folder"
-msgstr "Новая папка"
+msgid "New episodes"
+msgstr "Новые серии"
 
 msgid "New icons will not be available."
 msgstr "Новые иконки не будут доступны."
 
+msgid "New series"
+msgstr "Новые серии"
+
+msgid "Newer"
+msgstr "Новее"
+
+msgid "Newest"
+msgstr "Новейший"
+
+msgid "Newest Episodes"
+msgstr "Новые эпизоды"
+
+msgid "Newest Videos"
+msgstr "Новые видео"
+
 msgid "News"
 msgstr "Новости"
 
+msgid "News Feed"
+msgstr "Новостная лента"
+
+msgid "Next Page"
+msgstr "Следующая страница"
+
 msgid "Next page"
 msgstr "Следующая страница"
 
+msgid "No"
+msgstr "Нет"
+
 msgid ""
 "No item to display. \n"
 "Press OK to refresh.\n"
 msgstr ""
-"Ничего не найдено.\n"
+"Нечего показывать. \n"
 "Нажмите ОК, чтобы обновить.\n"
 
+msgid "No materials waiting in the downloader queue"
+msgstr "Нет материалов, ожидающих очереди загрузчика"
+
+msgid "No playable sources found."
+msgstr "Не найдено ни одного воспроизводимого источника."
+
 msgid "No steps to execute."
 msgstr "Никаких действий не выполнять."
 
 msgid "No user scripts."
 msgstr "Нет пользовательских скриптов."
 
-msgid "No valid links available."
-msgstr "Работающих ссылок нет."
+msgid "No valid entitlement found for asset."
+msgstr "Не найдено никаких прав на активизацию."
 
-msgid ""
-"No valid links available. Last error: \"The Mirror is broken. If available "
-"you can choose other source.\""
-msgstr ""
-"Работающих ссылок нет. Последняя ошибка: \"Отображения нет. При наличии, вы "
-"можете выбрать другой источник.\""
+msgid "No valid links available."
+msgstr "Нет работающих ссылок."
 
 msgid "None"
-msgstr "нет"
+msgstr "Нет"
+
+msgid "Nothing has been downloaded yet."
+msgstr "Пока ничего не загружено."
 
-msgid "Now playing"
-msgstr "Сейчас в программе"
+msgid "Nothing to do here."
+msgstr "Здесь нечего делать."
+
+msgid "November"
+msgstr "Ноябрь"
 
 msgid "Number of downloaded files simultaneously"
-msgstr "Количество загружаемых файлов одновременно"
+msgstr "Количество одновременно загружаемых файлов"
 
-msgid "Number of songs fetched at once for the station"
-msgstr "Количество песен, найденных во время посещения станций"
+msgid "OK"
+msgstr "OK"
 
 msgid "Obtaining server list."
 msgstr "Получение списка серверов."
 
-msgid "Odśwież"
-msgstr "Обновление"
+msgid "October"
+msgstr "Октябрь"
+
+msgid "Off Air"
+msgstr "Не в эфире"
 
 msgid "Offline channels"
 msgstr "Оффлайн каналы"
 
+msgid "Older"
+msgstr "Старше"
+
+msgid "Olympics"
+msgstr "Олимпийские игры"
+
+msgid "On Air"
+msgstr "В эфире"
+
 msgid "One link mode"
-msgstr "Режим Одна ссылка"
+msgstr "Режим одной ссылки"
+
+msgid "Only VIP"
+msgstr "Только VIP"
+
+msgid "Only available in Sweden."
+msgstr "Доступно только в Швеции."
+
+msgid "Only available in Sweden.\n"
+msgstr "Доступно только в Швеции.\n"
+
+msgid ""
+"Only logged in user have access.\n"
+"Please set login data in the host configuration under blue button."
+msgstr ""
+"Этот узел требует регистрации.\n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
+
+msgid "Only music"
+msgstr "Только музыка"
+
+msgid "Only videos"
+msgstr "Только видео"
+
+#, python-format
+msgid ""
+"OpenSSL in your image has different library names then these used by %s.\n"
+"There is need to create following symlinks:\n"
+"%s\n"
+"to be able to install binary components from %s server.\n"
+"Do you want to proceed?"
+msgstr ""
+"OpenSSL в вашем имидже имеет разные имена библиотек, используемых %s.\n"
+"Необходимо создать следующие символические ссылки:\n"
+"%s,\n"
+"чтобы иметь возможность устанавливать двоичные компоненты с сервера %s.\n"
+"Вы хотите продолжить?"
 
 msgid "OpenSSL lib is needed by wget and rtmpdump utilities."
-msgstr "OpenSSL требуется для правильной работы Wget инструмента и rtmpdump."
+msgstr "Требуется OpenSSL для правильной работы утилит wget и rtmpdump."
+
+msgid "Opening. Please wait..."
+msgstr "Открытие. Пожалуйста, подождите..."
+
+msgid "Openload Resolver:"
+msgstr "Решение Openload:"
 
 msgid "Operation aborted!"
 msgstr "Операция прервана!"
 
-msgid "Operation aborted! "
-msgstr "Операция прервана! "
+msgid "Order by comments"
+msgstr "Сортировать по комментариям"
+
+msgid "Order by date"
+msgstr "Сортировать по дате"
+
+msgid "Order by likes"
+msgstr "Сортировать по лайкам"
+
+msgid "Order by views"
+msgstr "Сортировать по просмотрам"
+
+msgid "Order by: "
+msgstr "Сортировать по: "
+
+msgid "Other"
+msgstr "Другое"
 
 msgid "Others"
 msgstr "Другие"
 
-msgid "PC"
-msgstr "ПК"
+msgid "Others tags:"
+msgstr "Другие теги:"
+
+msgid "Own model"
+msgstr "Собственная модель"
+
+msgid "PARTIES"
+msgstr "СТОРОНЫ"
+
+msgid "PAY"
+msgstr "ПЛАТНЫЕ"
+
+msgid "PEGI"
+msgstr "PEGI"
 
 msgid "PENDING"
 msgstr "ОЖИДАНИЕ"
 
-msgid "PICTURE"
-msgstr "ФОТО"
+msgid "PORT"
+msgstr "ПОРТ"
+
+msgid "Packages"
+msgstr "Пакеты"
+
+msgid "Page accessible to logged in members only."
+msgstr "Страница доступна только для зарегистрированных пользователей."
+
+msgid "Paid"
+msgstr "Оплачено"
+
+msgid "Password"
+msgstr "пароль"
 
 msgid "Password:"
 msgstr "Пароль:"
 
+msgid "Past premieres"
+msgstr "Предыдущие премьеры"
+
+#, python-format
 msgid "Paste \"%s\""
 msgstr "Вставить \"%s\""
 
+msgid "Path to xxxlist.txt :"
+msgstr "Путь к xxxlist.txt:"
+
 msgid "Path to ytlist.txt, urllist.txt"
 msgstr "Путь к ytlist.txt, urllist.txt"
 
+msgid "Path:"
+msgstr "Маршрут:"
+
+msgid "Pathology"
+msgstr "Патология"
+
+msgid "Pathology Rounds"
+msgstr "Патология раундов"
+
+msgid "Pediatrics"
+msgstr "Педиатрия"
+
 msgid "Pending"
-msgstr "До"
+msgstr "В ожидании"
 
-msgid "Photos"
-msgstr "Фото"
+msgid "People"
+msgstr "Люди"
+
+msgid "Physical Exam"
+msgstr "Экзамен физики"
 
 msgid "Pin has been changed."
 msgstr "PIN-код был изменен."
@@ -1219,28 +2804,34 @@
 msgstr "Pin неверен!"
 
 msgid "Pin protection for configuration"
-msgstr "Защита конфигурации настроек пин-кодом"
+msgstr "Защита конфигурации PIN-кодом"
 
 msgid "Pin protection for plugin"
-msgstr "Защита плагина пин-кодом"
+msgstr "Защита плагина PIN-кодом"
 
 msgid "Platform"
 msgstr "Платформа"
 
-msgid "Play file"
-msgstr "Воспроизведение видео"
-
+#, python-format
 msgid "Play with [%s] player"
-msgstr "Воспроизведение записи в [%s]"
+msgstr "Воспроизведение в [%s] плеере"
+
+msgid "PlayStation 4"
+msgstr "PlayStation 4"
+
+msgid "Playback UHD :"
+msgstr "Воспроизведение UHD:"
 
-msgid "PlayPuls"
-msgstr "ИгратьPuls"
+#, python-format
+msgid "Player %s"
+msgstr "Плеер %s"
 
-msgid "PlayPuls use a proxy?"
-msgstr "PlayPuls использовать прокси-сервер?"
+#, python-format
+msgid "Player %s: %s"
+msgstr "Плеер %s: %s"
 
-msgid "Player > Recorder"
-msgstr "Плеер > Запись"
+msgid "Player data parsing error."
+msgstr "Ошибка анализа данных плеера."
 
 msgid "Playlist"
 msgstr "Плейлист"
@@ -1248,168 +2839,343 @@
 msgid "Playlists"
 msgstr "Плейлисты"
 
-msgid "Please remember that you use the IPTVPlayer plugin at your own risk."
+#, python-format
+msgid "Please consider restart your Engima2 and agree to install the %s utlity when the %s will propose this."
+msgstr "Пожалуйста, подумайте о перезапуске Enigma2 и согласитесь установить утилиту %s, когда %s предложит это."
+
+msgid "Please fill your login and password in the host configuration (available under blue button) and try again."
 msgstr ""
-"Пожалуйста, помните, что вы используете плагин IPTV Плеер на свой страх и "
-"риск."
+"Этот узел требует регистрации.\n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
+
+msgid "Please make sure that the folder for cache data (set in the configuration) is writable."
+msgstr "Убедитесь, что папка для данных кеша (настроенная в конфигурации) доступна для записи."
+
+msgid "Please register and set login and password in the host configuration, to solve this problems permanently."
+msgstr "Пожалуйста, зарегистрируйтесь и установите логин и пароль в конфигурации хоста, чтобы решить эту проблему навсегда."
 
 msgid "Please remember that you use this plugin at your own risk."
-msgstr ""
-"Пожалуйста, помните, что вы используете этот плагин на свой страх и риск."
+msgstr "Пожалуйста, помните, что Вы используете этот плагин на свой страх и риск."
 
 msgid ""
-"Plugin can be run on one of the following platforms: sh4, mipsel, i686, "
-"armv7."
+"Please remember to visit http://www.sport365.live/ and watch a few advertisements.\n"
+"This will fix problem, if your playback is constantly interrupted."
 msgstr ""
-"Плагин может работать на одной из следующих платформ: sh4, mipsel, i686, "
-"armv7."
+"Пожалуйста, не забудьте посетить http://www.sport365.live/ и посмотреть несколько рекламных объявлений.\n"
+"Это позволит устранить проблему, если воспроизведение постоянно прерывается."
+
+#, python-format
+msgid "Please report this problem to the developer %s."
+msgstr "Сообщите об этой проблеме разработчику %s."
+
+msgid "Please retry later."
+msgstr "Повторите попытку позже."
 
-msgid "Pol'skiy"
-msgstr "Польский"
+#, python-format
+msgid "Please set valid %s in the %s configuration."
+msgstr "Пожалуйста, установите действительный %s в %s конфигурации."
 
-msgid "Poland"
-msgstr "Польша"
+#, python-format
+msgid "Please visit \"%s\" and confirm that you are human."
+msgstr "Пожалуйста, посетите \"%s\" и подтвердите, что вы не робот."
 
-msgid "Policy"
-msgstr "Соотношение сторон"
+#, python-format
+msgid "Please visit %s to learn how to redirect this task to the external device."
+msgstr "Посетите %s, чтобы узнать, как перенаправить эту задачу на внешнее устройство."
 
-msgid "Policy2"
-msgstr "Соотношение сторон2"
+msgid "Please wait - downloading initialization data."
+msgstr "Подождите.  Загружаются данные инициализации."
 
-msgid "Polish channles"
-msgstr "Польские каналы"
+msgid "Please wait for initialization data."
+msgstr "Дождитесь, пожалуйста, данных инициализации."
+
+msgid "Plugin can be run on one of the following platforms: sh4, mipsel, i686, armv7, armv5t."
+msgstr "Плагин может работать на одной из следующих платформ: sh4, mipsel, i686, armv7, armv5t."
+
+msgid "Plugin global settings"
+msgstr "Глобальные настройки плагина"
+
+msgid "Points"
+msgstr "Точки"
+
+msgid "Polish"
+msgstr "Польские"
 
 msgid "Polish proxy server url"
 msgstr "Адрес польского прокси-сервера"
 
 msgid "Popular"
-msgstr "Популярный"
+msgstr "Популярные"
+
+msgid "Popular Episodes"
+msgstr "Популярные эпизоды"
+
+#, python-format
+msgid "Popularity: %s"
+msgstr "Популярность: %s"
+
+msgid "Portal:"
+msgstr "Портал:"
+
+msgid "Portuguese"
+msgstr "Португальские"
+
+msgid "Powerpoint Presentation"
+msgstr "Презентация Powerpoint"
+
+msgid "Practice Management"
+msgstr "Практика управления"
 
-msgid "Popular Artists"
-msgstr "Популярные исполнители"
+msgid "Praise:"
+msgstr "Похвала:"
 
-msgid "Português"
-msgstr "Португальский"
+msgid "Praises:"
+msgstr "Похвалы:"
+
+msgid "Prefered format"
+msgstr "Предпочтительный формат"
 
 msgid "Prefered quality"
 msgstr "Предпочтительное качество"
 
+msgid "Preferred bitrate"
+msgstr "Предпочтительный битрейт"
+
+msgid "Preferred format:"
+msgstr "Предпочтительный формат:"
+
+msgid "Preferred language"
+msgstr "Предпочтительный язык"
+
 msgid "Preferred quality"
 msgstr "Предпочтительное качество"
 
 msgid "Preferred streaming protocol"
-msgstr "Предпочтительный протокол потоковой передачи"
-
-msgid "Preferred streaming protocol' + ': "
-msgstr "Предпочтительный протокол потоковой передачи' + ': "
+msgstr "Предпочтительный протокол потока"
 
 msgid "Preferred video quality:"
-msgstr "Выбор качества видео:"
+msgstr "Предпочтительное качество видео:"
+
+msgid "Premieres"
+msgstr "Премьеры"
+
+msgid "Premium"
+msgstr "Премиум"
 
 msgid "Premium user"
 msgstr "Премиум пользователь"
 
-msgid "Press OK to start"
-msgstr "Нажмите OK чтобы начать"
+msgid "Preview"
+msgstr "Предпросмотр"
 
-msgid "Previous"
-msgstr "Предыдущий"
+msgid "Previous Seasons"
+msgstr "Предыдущие сезоны"
 
-msgid "Problem with downloading the server list from [%s]."
-msgstr "Проблема с загрузкой списка серверов от [%s]."
+msgid "Previous list"
+msgstr "Предыдущий список"
+
+msgid "Problem with copy binary.\n"
+msgstr "Проблема с копированием бинарника.\n"
+
+#, python-format
+msgid ""
+"Problem with copy files.\n"
+"Status[%d], outData[%s]"
+msgstr ""
+"Проблема с файлами копирования.\n"
+"Статус[%d], вых. данные[%s]"
+
+#, python-format
+msgid ""
+"Problem with decryption the archive. Return code [%d]\n"
+"%s."
+msgstr ""
+"Проблема с распаковкой архива. Код возврата [%d]\n"
+"%s."
 
-msgid "Problem with downloading the server list."
-msgstr "Проблема с загрузкой списка серверов."
+msgid "Problem with decryption the key."
+msgstr "Проблема с расшифровкой ключа."
+
+#, python-format
+msgid ""
+"Problem with downloading the encryption key:\n"
+"[%s]."
+msgstr ""
+"Проблема с загрузкой ключа шифрования::\n"
+"[%s]."
 
+#, python-format
 msgid ""
-"Problem with downloading the update packet:\n"
+"Problem with downloading the packet:\n"
 "[%s]."
-msgstr "Проблема с загрузкой пакета обновления:\n"
+msgstr ""
+"Проблема с загрузкой пакета:\n"
 "[%s]."
 
+#, python-format
+msgid "Problem with downloading the server list from [%s]."
+msgstr "Проблема с загрузкой списка серверов из [%s]."
+
+#, python-format
 msgid ""
 "Problem with extracting the archive. Return code [%d]\n"
 "%s."
 msgstr ""
-"Проблема с распаковкой архива. Код возврата [%d]\n"
+"Проблема с распаковкой архива. Возвращён код [%d]\n"
 "%s."
 
+#, python-format
 msgid ""
 "Problem with installing the new version.\n"
 "Status[%d], outData[%s]"
 msgstr ""
 "Проблема с установкой новой версии.\n"
-"Статус[%d], OutData[%s]"
+"Статус[%d], вых. данные[%s]"
 
+msgid "Problem with parsing the server list."
+msgstr "Проблема с разбором списка серверов."
+
+#, python-format
 msgid "Problem with the directory [%s]."
 msgstr "Проблема с каталогом [%s]."
 
+#, python-format
 msgid ""
 "Problem with the removal of the previous version.\n"
 "Status[%d], outData[%s]."
 msgstr ""
 "Проблема с удалением предыдущей версии.\n"
-"Статус[%d], OutData[%s]."
+"Статус[%d], вых. данные[%s]."
 
-msgid "Problem with user script execution [%s]."
-msgstr "Проблема с выполнением пользовательских скриптов [%s]."
+msgid "Problem with user script execution.\n"
+msgstr "Проблема с выполнением пользовательского скрипта.\n"
 
-msgid "Profile"
-msgstr "Профиль"
+msgid "Professional Networks"
+msgstr "Профессиональные сети"
 
-msgid "Promote item"
-msgstr "Переместить в начало списка"
+msgid "Program"
+msgstr "Программа"
 
-msgid "Promoted channels"
-msgstr "Популярные каналы"
+msgid "Program A-Z"
+msgstr "Программа A-Z"
 
-msgid "Promoted games"
-msgstr "Популярные игры"
+msgid "Programmes"
+msgstr "Программы"
+
+msgid "Programs"
+msgstr "Программы"
+
+msgid "Programs A-Ö"
+msgstr "Программы A-Ö"
+
+msgid "Promote item"
+msgstr "Продвинуть пункт"
+
+msgid "Promoted"
+msgstr "Продвигаемые"
 
 msgid "Protocol: "
 msgstr "Протокол: "
 
-msgid "Proxy server url"
-msgstr "Адрес прокси-сервера"
+msgid "Published"
+msgstr "Опубликовано"
+
+msgid "Published:"
+msgstr "Опубликовано:"
+
+msgid "Qualities"
+msgstr "Качества"
 
 msgid "Quality"
-msgstr "Качественный"
+msgstr "Качество"
+
+msgid "Quality:"
+msgstr "Качество:"
+
+msgid "RADIO"
+msgstr "РАДИО"
+
+msgid "RAM buffer size [MB] for local files"
+msgstr "Размер буфера ОЗУ [МБ] для локальных файлов"
+
+msgid "RAM buffer size [MB] for network protocols"
+msgstr "Размер буфера ОЗУ [МБ] для сетевых протоколов"
+
+msgid "RATING"
+msgstr "РЕЙТИНГ"
+
+msgid "RECENT"
+msgstr "НЕДАВНИЙ"
+
+msgid "REMEMBER: "
+msgstr "ЗАПОМНИТЕ: "
+
+msgid "Radio"
+msgstr "Радио"
+
+msgid "Radio iframe file"
+msgstr "Файл чёрного поля для радио"
+
+msgid "Radio stations"
+msgstr "Радиостанции"
+
+msgid "Radiology Rounds"
+msgstr "Радиотуры"
+
+msgid "Raiting"
+msgstr "Рейтинг"
 
 msgid "Random"
 msgstr "Случайный"
 
+msgid "Randomize a playlist"
+msgstr "Случайное воспроизведение"
+
 msgid "Ranking"
 msgstr "Расположение"
 
 msgid "Rating"
 msgstr "Рейтинг"
 
-msgid "Raw"
-msgstr "Необработанный"
+#, python-format
+msgid "Rating %s"
+msgstr "Рейтинг %s"
+
+msgid "Rating:"
+msgstr "Рейтинг:"
 
 msgid "Recent"
-msgstr "Последний"
+msgstr "Недавний"
 
-msgid "Recorder > Player"
-msgstr "Запись > Плеер"
+msgid "Recon"
+msgstr "Рекон."
 
-msgid "Records path"
-msgstr "Каталог для загрузки"
+msgid "Recordings"
+msgstr "Записи"
+
+msgid "Redirect"
+msgstr "Переадресация"
 
 msgid "Refresh"
-msgstr "Обновление"
+msgstr "Освежить"
 
 msgid "Refreshing"
 msgstr "Обновляется"
 
-msgid "Regular"
-msgstr "Регулярный"
+msgid "Release:"
+msgstr "Выпуск:"
 
 msgid "Releases"
-msgstr "Релизы"
+msgstr "Выпуски"
+
+msgid "Relese"
+msgstr "Выпуск"
 
 msgid "Relevance"
-msgstr "Актуальный"
+msgstr "Актуальность"
+
+msgid "Reload list"
+msgstr "Обновить список"
 
 msgid "Remember last watched position"
 msgstr "Запомнить последнее место воспроизведения"
@@ -1417,6 +3183,13 @@
 msgid "Remove"
 msgstr "Удалить"
 
+#, python-format
+msgid "Remove \"%s\" item"
+msgstr "Удалить пункт \"%s\""
+
+msgid "Remove disabled services"
+msgstr "Удалить неиспользуемые сервисы"
+
 msgid "Remove file"
 msgstr "Удалить файл"
 
@@ -1424,10 +3197,7 @@
 msgstr "Удалить группу"
 
 msgid "Remove item"
-msgstr "Удалить элементы"
-
-msgid "Removing the old version."
-msgstr "Удаление старой версии."
+msgstr "Удалить элемент"
 
 msgid "Removing unnecessary files."
 msgstr "Удаление ненужных файлов."
@@ -1435,11 +3205,19 @@
 msgid "Rename"
 msgstr "Переименовать"
 
-msgid "Request token from \"%s\""
-msgstr "Символ запроса от \"%s\""
+msgid "Replay Shows"
+msgstr "Повторные шоу"
 
-msgid "Request token from %s"
-msgstr "Символ запроса от %s"
+msgid "Reset State"
+msgstr "Состояние сброса"
+
+#, python-format
+msgid ""
+"Resolving reCaptcha with %s failed!\n"
+"\n"
+msgstr ""
+"Решение reCaptcha с %s не удалось!\n"
+"\n"
 
 msgid ""
 "Restart GUI failed. \n"
@@ -1448,39 +3226,79 @@
 "Перезапуск интерфейса не удался. \n"
 "Пожалуйста, перезагрузите тюнер вручную."
 
-msgid "Russia"
-msgstr "Россия"
+msgid "Return to hosts list"
+msgstr "Возврат в список хостов"
+
+msgid "Reverse a playlist"
+msgstr "Повторить плейлист"
+
+msgid "Romance Movies"
+msgstr "Романтические фильмы"
+
+msgid "Russian"
+msgstr "Русские"
 
 msgid "Russian proxy server url"
 msgstr "Адрес русского прокси-сервера"
 
-msgid "SEARCH"
-msgstr "ПОИСК"
+msgid "SHOWS"
+msgstr "ШОУ"
+
+msgid "SONGS"
+msgstr "ПЕСНИ"
 
 msgid "STARTED"
-msgstr "ОПЕРАЦИИ"
+msgstr "ЗАПУЩЕН"
 
 msgid "STOPPED"
 msgstr "ОСТАНОВЛЕН"
 
+msgid "Saturday"
+msgstr "Суббота"
+
+msgid "Save"
+msgstr "Сохранить"
+
 msgid "Save changes?"
 msgstr "Сохранить изменения?"
 
+msgid "Schedule"
+msgstr "Расписание"
+
+msgid "Sci-Fi Movies"
+msgstr "Научная фантастика"
+
+msgid "Science"
+msgstr "Наука"
+
+msgid "Score at least: "
+msgstr "Оценка по крайней мере: "
+
 msgid "Search"
 msgstr "Поиск"
 
-msgid "Search for movie \"%s\""
-msgstr "Поиск фильма \"%s\""
-
-msgid "Search for subitile for \"%s\""
-msgstr "Поиск субтитров для \"%s\""
+msgid "Search Movies and TV Series"
+msgstr "Поиск фильмов и сериалов"
 
-msgid "Search for subitile for %s"
-msgstr "Поиск субтитров для %s"
+#, python-format
+msgid "Search for \"%s\", %s, %s %s"
+msgstr "Искать \"%s\", %s, %s %s"
 
 msgid "Search history"
 msgstr "История поиска"
 
+msgid "Search in "
+msgstr "Поиск в "
+
+msgid "Search in all active hosts"
+msgstr "Поиск на всех активных хостах"
+
+msgid "Search only in Movies"
+msgstr "Искать только в фильмах"
+
+msgid "Search only in TV Series"
+msgstr "Искать только в телесериалах"
+
 msgid "Search results"
 msgstr "Результаты поиска"
 
@@ -1488,50 +3306,99 @@
 msgstr "Тип поиска"
 
 msgid "Search youtube materials "
-msgstr "Поиск материалов в YouTube"
+msgstr "Поиск YouTube материалов"
+
+#, python-format
+msgid "Searching in %s, please wait (%d)"
+msgstr "Поиск в %s. Пожалуйста, подождите (%d)"
+
+#, python-format
+msgid "Searching subtitles for \"%s\""
+msgstr "Поиск субтитров для \"%s\""
+
+#, python-format
+msgid "Searching, please wait (%d)"
+msgstr "Поиск. Пожалуйста, подождите (%d)"
+
+msgid "Season"
+msgstr "Сезон"
+
+#, python-format
+msgid "Season %s"
+msgstr "Сезон %s"
+
+#, python-format
+msgid "Season %s (%s)"
+msgstr "Сезон %s (%s)"
+
+#, python-brace-format
+msgid "Season {0}"
+msgstr "Сезон {0}"
 
 msgid "Second movie player in buffering mode"
-msgstr "Выбор Второго плеера с режимом буферизации"
+msgstr "Второй видеоплеер в режиме буферизации"
 
 msgid "Second movie player without buffering mode"
-msgstr "Выбор Второго плеера"
+msgstr "Второй видеоплеер без режима буферизации"
+
+msgid "See all events"
+msgstr "Смотреть все события"
+
+msgid "See all languages"
+msgstr "Смотреть все языки"
+
+msgid "See all topics"
+msgstr "Смотреть все темы"
 
 msgid "Select"
-msgstr "Выбрать"
+msgstr "Выбор"
 
+#, python-format
 msgid "Select %s"
-msgstr "Выберите %s"
+msgstr "Выбор %s"
+
+msgid "Select GitLab repository owner"
+msgstr "Выбор владельца репозитория GitLab"
 
 msgid "Select action"
-msgstr "Выберите действие"
+msgstr "Выбор действия"
 
 msgid "Select audio track"
-msgstr "Выбор аудио дорожки"
+msgstr "Выбор аудиодорожки"
+
+msgid "Select directory"
+msgstr "Выбор каталога"
 
 msgid "Select favourite group"
-msgstr "Выбор группы избранное"
+msgstr "Выбор группы избранного"
+
+msgid "Select group"
+msgstr "Выбор группы"
 
 msgid "Select language"
-msgstr "Выберите язык"
+msgstr "Выбор языка"
 
 msgid "Select link"
 msgstr "Выбор ссылки"
 
-msgid "Select movie"
-msgstr "Выбор фильма"
-
 msgid "Select movie player"
-msgstr "Выбор плеера"
+msgstr "Выбор видеоплеера"
 
 msgid "Select option"
-msgstr "Выберите опцию"
+msgstr "Выбор опции"
+
+msgid "Select pictures"
+msgstr "Выбор фотографий"
 
 msgid "Select service"
-msgstr "Выбор услуги"
+msgstr "Выбор сервиса"
 
 msgid "Select subtitles file"
 msgstr "Выбор файла с субтитрами"
 
+msgid "Select subtitles provider:"
+msgstr "Выбор провайдера субтитров:"
+
 msgid "Select subtitles to download"
 msgstr "Выбор субтитров для загрузки"
 
@@ -1541,47 +3408,105 @@
 msgid "Select the directory"
 msgstr "Выбор каталога"
 
+msgid "Select the file"
+msgstr "Выбор файла"
+
 msgid "Select update server"
 msgstr "Выбор сервера обновлений"
 
 msgid "Select video option"
-msgstr "Выбор видео"
+msgstr "Выбор видеоопции"
+
+msgid "Selected hosts"
+msgstr "Выбранные хосты"
 
+#, python-format
 msgid "Selected version [%s]."
-msgstr "Выбранный вариант [%s]."
+msgstr "Выбранная версия [%s]."
+
+msgid "Send"
+msgstr "Послать"
+
+msgid "September"
+msgstr "Сентябрь"
 
 msgid "Seriale"
+msgstr "Сериал"
+
+msgid "Serials"
 msgstr "Сериалы"
 
 msgid "Series"
 msgstr "Серии"
 
+msgid "Series TV"
+msgstr "ТВ-серии"
+
+msgid "Series list"
+msgstr "Список серий"
+
+msgid "Server return 404 - Not Found."
+msgstr "Возврат сервера: 404 - страница не найдена."
+
+#, python-format
+msgid ""
+"Service %s requires registration. \n"
+"Please fill your login and password in the %s configuration."
+msgstr ""
+"Сервис %s требует регистрации.\n"
+"Пожалуйста, заполните свой логин и пароль в конфигурации %s."
+
+#, python-format
 msgid "Service [%s] has no additional settings."
-msgstr "Конфигурация [%s] нет дополнительных настроек."
+msgstr "Сервис [%s] не имеет дополнительных настроек."
 
 msgid "Services configuration"
-msgstr "Выбор сервисов-хостов (Нажмите OK)"
+msgstr "Конфигурация сервисов (нажмите OK)"
+
+msgid "Services management"
+msgstr "Управление услугами"
 
 msgid "Set active movie player"
 msgstr "Выбор активного видеоплеера"
 
+msgid "Set file name"
+msgstr "Установить имя файла"
+
 msgid "Set pin code"
-msgstr "Установите пин-код"
+msgstr "Установить pin-код"
+
+msgid "Set watched"
+msgstr "Установить просмотренным"
+
+msgid "Settings"
+msgstr "Настройки"
+
+msgid "Shoulder & Elbow"
+msgstr "Плечо и локоть"
 
 msgid "Show IPTVPlayer in extension list"
-msgstr "Показать IPTV Плеер в меню плагинов"
+msgstr "Показать IPTVPlayer в меню плагинов"
 
 msgid "Show IPTVPlayer in main menu"
-msgstr "Показать IPTV Плеер в главном меню"
+msgstr "Показать IPTVPlayer в главном меню"
+
+msgid "Show Profiles in ZBIORNIK MINI :"
+msgstr "Показывать профили в минисборнике:"
 
 msgid "Show all channels"
 msgstr "Показать все каналы"
 
 msgid "Show all version in the update menu"
-msgstr "Показать все версии в меню Обновление"
+msgstr "Показать все версии в меню обновлений"
+
+msgid "Show changelog :"
+msgstr "Показать список изменений:"
 
 msgid "Show download manager after adding new item"
-msgstr "Показать менеджер загрузок после добавления нового файла"
+msgstr "Показ загруз. менеджера после ввода новой задачи"
+
+msgid "Show file size"
+msgstr "Показать размер файла"
 
 msgid "Show hiddens catalogs"
 msgstr "Показать скрытые каталоги"
@@ -1589,59 +3514,92 @@
 msgid "Show hiddens files"
 msgstr "Показать скрытые файлы"
 
+msgid "Show iframe during audio playback"
+msgstr "Показать чёрное поле во время воспроизведения звука"
+
+msgid "Show items with DRM"
+msgstr "Показывать пункты с DRM"
+
+msgid "Show paid items (it may be illegal)"
+msgstr "Показывать платные (это может быть незаконно)"
+
 msgid "Show update icon in service selection menu"
 msgstr "Показать обновления в главном меню"
 
+msgid "Showcase"
+msgstr "Витрина"
+
 msgid "Shows"
 msgstr "Шоу"
 
-msgid "Silverlight stream not supported."
-msgstr "Поток Silverlight не поддерживается."
-
 msgid "Simple subtitles downloader"
 msgstr "Загрузчик простых субтитров"
 
-msgid "Sin in to"
-msgstr "Войти в систему"
+msgid "Simplify the title and try again."
+msgstr "Упростите название и повторите попытку."
+
+msgid "Single file downloader"
+msgstr "Одиночный загрузчик файлов"
 
 msgid "Skin"
 msgstr "Выбор cкина"
 
-msgid ""
-"Skipping IPTVPlayer serup may cause problems.Are you sure to skip IPTVPlayer "
-"setup?"
-msgstr ""
-"Пропуск установки дополнительного, может привести к дефекту плагина."
-"Пропустить установку дополнительных модулей. Вы уверены?"
+msgid "Skip geo-blocked links:"
+msgstr "Пропуск геоблокированных ссылок:"
+
+msgid "Skipped."
+msgstr "Пропущено."
 
 msgid ""
 "Skipping IPTVPlayer setup may cause problems.\n"
 "Are you sure to skip IPTVPlayer setup?"
 msgstr ""
-"Пропуск установки дополнительного, может привести к дефекту плагина. \n"
-"Пропустить установку дополнительных модулей. Вы уверены?"
+"Пропуск установок IPTVPlayer может вызвать проблемы. \n"
+"Вы хотите пропустить установку?"
+
+msgid "Software decoding as"
+msgstr "Программное декодирование, как"
+
+msgid "Software floating point"
+msgstr "Программная плавающая точка"
 
-msgid "SmackDown"
-msgstr "Обрушить"
+msgid "Some changes will be applied only after movie player restart."
+msgstr "Некоторые изменения будут применены только после перезапуска видеоплеера."
 
-msgid "Some changes will be applied only after plugin update."
-msgstr "Некоторые изменения будут применены только после обновления плагина."
+msgid ""
+"Some changes will be applied only after plugin update.\n"
+"Do you want to perform update now?"
+msgstr ""
+"Некоторые изменения будут применены только после обновления плагина.\n"
+"Вы хотите выполнить обновление сейчас?"
 
-msgid "Songs"
-msgstr "Песни"
+msgid "Sorry. TVPlayer is currently only available in the United Kingdom"
+msgstr "Сожалеем. TVPlayer в настоящее время доступен только в Великобритании"
 
-msgid "Sorry"
-msgstr "Извините"
+msgid "Sort Myfreecams :"
+msgstr "Сортировать Myfreecams:"
+
+msgid "Sort alphabetically"
+msgstr "Сортировать по алфавиту"
+
+msgid "Sort by alphabet"
+msgstr "Сортировка по алфавиту"
+
+msgid "Sort by popularity"
+msgstr "Сортировать по популярности"
 
 msgid "Sort by:"
-msgstr "Сортировать по:"
+msgstr "Сортировка по:"
 
-msgid "Sort search result by"
-msgstr "Сортировать по результату поиска"
+msgid "Sort by: "
+msgstr "Сортировка по: "
 
 msgid "Sort the list:"
 msgstr "Сортировать список:"
 
+msgid "Sort xxxlist :"
+msgstr "Сортировать xxxlist:"
+
 msgid "Sorted channels A-Z [live]"
 msgstr "Сортировка каналов A-Z [прямой эфир]"
 
@@ -1649,40 +3607,72 @@
 msgstr "Сортировка всех наиболее популярных каналов [прямой эфир]"
 
 msgid "Sorted most viewed channels now [live]"
-msgstr "Сортировка каналов, самых популярных в настоящее время [прямой эфир]"
+msgstr "Сортировка самых популярных в настоящее время каналов [прямой эфир]"
+
+#, python-format
+msgid "Source %s"
+msgstr "Источник %s"
 
 msgid "Spanish"
 msgstr "Испания"
 
+msgid "Specialities"
+msgstr "Специальности"
+
+msgid "Spine"
+msgstr "Спина"
+
+msgid "Sport"
+msgstr "Спорт"
+
+msgid "Stand-Up"
+msgstr "Наговор"
+
+msgid "Standard"
+msgstr "стандарт"
+
+msgid "Star7 Live Pass:"
+msgstr "Пароль Star7 Live:"
+
+msgid "Star7 Live User:"
+msgstr "Логин Star7 Live:"
+
 msgid "Start"
 msgstr "Начать"
 
 msgid "Start download manager per default"
 msgstr "Включить менеджер загрузок по умолчанию"
 
-msgid "Stations"
-msgstr "Станции"
-
-msgid "Status object [%r]"
-msgstr "Статус объекта [%r]"
-
+#, python-format
 msgid "Step [%s] cannot be aborted. Please wait."
-msgstr "Активация [%s] не может быть прервана. Пожалуйста, подождите."
+msgstr "Этап [%s] не может быть прерван. Пожалуйста, подождите."
 
 msgid "Stereo downmix mode for software decoder"
-msgstr "Стерео микширование для програмного декодера"
+msgstr "Стереомикширование для программного декодера"
 
 msgid "Stop"
 msgstr "Стоп"
 
+msgid "Stop download"
+msgstr "Остановить загрузку"
+
 msgid "Stop downloading"
 msgstr "Остановка загрузки"
 
+msgid "Stop playback with buffer save"
+msgstr "Остановить воспроизведение с сохранением буфера"
+
 msgid "Stop playing?"
 msgstr "Остановить воспроизведение?"
 
-msgid "StreamLiveTo.tv"
-msgstr "Прямой Поток для.ТВ"
+msgid "Studio:"
+msgstr "Студия:"
+
+msgid "Study Plan"
+msgstr "Учебный план"
+
+msgid "Subspecialities"
+msgstr "Узкие специальности"
 
 msgid "Subtitle background"
 msgstr "    Фон субтитров"
@@ -1691,13 +3681,13 @@
 msgstr "    Цвет границы субтитров"
 
 msgid "Subtitle border enabled"
-msgstr "    Включить границу субтитров "
+msgstr "    Включить границу субтитров"
 
 msgid "Subtitle border width"
 msgstr "    Ширина границы субтитров"
 
 msgid "Subtitle box height"
-msgstr "Высота субтитров"
+msgstr "    Высота субтитров"
 
 msgid "Subtitle box position"
 msgstr "    Позиция субтитров"
@@ -1735,134 +3725,208 @@
 msgid "Subtitles"
 msgstr "Субтитры"
 
-msgid "Subtitles downloaded successfully. [%s]"
-msgstr "Субтитры загружены успешно. [%s]"
+#, python-format
+msgid "Subtitles \"%s\" downloaded correctly."
+msgstr "Субтитры \"%s\" загружены правильно."
 
-msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
-msgstr "Субтитры загружены успешно. [%s], преобразование в UTF-8."
+msgid "Subtitles conversion to UTF-8 failed."
+msgstr "Преобразование субтитров в UTF-8 не удалось."
 
-msgid "Subtitles downloader"
-msgstr "Загрузить субтитры"
+#, python-format
+msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
+msgstr "Субтитры загружены успешно. [%s], преобразовано в UTF-8."
 
+#, python-format
 msgid "Subtitles for: %s"
 msgstr "Субтитры для: %s"
 
-msgid "Subtitles not found."
-msgstr "Субтитры не найдены."
+msgid "Success."
+msgstr "Успешно."
 
-msgid "Subtitles provider: %s"
-msgstr "Провайдер субтитров: %s"
+msgid "Sunday"
+msgstr "Воскресенье"
 
-msgid "Such as downloading and installation additional binaries"
-msgstr "Таких, как загрузка и установка дополнительных модулей двоичного файла"
+msgid "Surgical Approaches"
+msgstr "Хирургические подходы"
+
+msgid "Surgical Cases"
+msgstr "Хирургические случаи"
+
+msgid "Surgical Complications"
+msgstr "Хирургические осложнения"
+
+msgid "Surgical Techniques"
+msgstr "Хирургические методы"
 
 msgid "Synchronize"
-msgstr "Синхронизировать"
+msgstr "Синхронизизация"
+
+msgid "System"
+msgstr "Система"
+
+msgid "THIS WEEK'S SERIES POPULAR"
+msgstr "ПОПУЛЯРНАЯ СЕРИЯ ЭТОЙ НЕДЕЛИ"
+
+msgid "TOP 10"
+msgstr "ТОП 10"
+
+msgid "TOP live cams"
+msgstr "ТОП онлайн-камер"
+
+msgid "TRAILER"
+msgstr "ТРЭЙЛЕР"
+
+msgid "TSMedia group Resolver:"
+msgstr "Решение TSMedia group:"
+
+msgid "TV"
+msgstr "ТВ"
+
+msgid "TV SERIES"
+msgstr "ТЕЛЕСЕРИАЛЫ"
+
+msgid "TV Series"
+msgstr "Телесериалы"
+
+msgid "TV Show"
+msgstr "ТВ шоу"
 
 msgid "TV Shows"
-msgstr "ТВ Шоу"
+msgstr "ТВ-шоу"
+
+msgid "TV channels"
+msgstr "Телеканалы"
 
 msgid "TV series"
-msgstr "Телесериал"
+msgstr "Телесериалы"
 
 msgid "TV shows"
 msgstr "ТВ шоу"
 
-msgid "Teletext decoder"
-msgstr "Декодер телетекста"
+msgid "TV status"
+msgstr "Статус ТВ"
 
-msgid "Testers: "
-msgstr "Тестеры: "
+msgid "TV-Series"
+msgstr "ТВ-сериалы"
+
+msgid "Talks"
+msgstr "Беседы"
+
+msgid "Techniques"
+msgstr "Методы"
 
 msgid "Text files ytlist and urllist are in:"
 msgstr "Текстовые файлы ytlist и urllist находятся:"
 
+#, python-format
 msgid "The \"%s\" utility is used by IPTVPlayer."
 msgstr "Утилита \"%s\" используется в IPTV Плеере."
 
-msgid ""
-"The \"%s\" utility is used by the IPTVPlayer as external movie player based "
-"on the ffmpeg and libeplayer."
-msgstr ""
-"Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера.на "
-"основе FFmpeg и libeplayer."
+#, python-format
+msgid "The \"%s\" utility is used by the %s as external movie player based on the ffmpeg and libeplayer."
+msgstr "Утилита \"%s\" используется %s, как внешний проигрыватель фильмов на основе ffmpeg и libeplayer."
+
+#, python-format
+msgid "The \"%s\" utility is used by the %s as external movie player."
+msgstr "Утилита \"%s\" используется %s, как внешний проигрыватель фильмов."
+
+#, python-format
+msgid "The \"%s\" utility is used by the %s to buffering and downloading [%s] links."
+msgstr "Утилита \"%s\" используется %s для буферизации и загрузки ссылок [%s]."
+
+#, python-format
+msgid "The \"%s\" utility is used by the %s to determine the encoding of the text."
+msgstr "Утилита \"%s\" используется %s для определения кодировки текста."
+
+#, python-format
+msgid "The %s utility is necessary here but it was not detected."
+msgstr "Здесь нужна утилита %s, но она не была обнаружена."
 
-msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player."
-msgstr ""
-"Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера."
+msgid "The YouTube video ID is invalid."
+msgstr "Идентификатор видео YouTube недействителен."
+
+msgid "The best"
+msgstr "Лучшие"
+
+msgid "The color of the current version"
+msgstr "Цвет текущей версии"
+
+msgid "The color of the viewed item"
+msgstr "Цвет просматриваемого объекта"
+
+msgid "The default aspect ratio for the external player"
+msgstr "Соотношение сторон по умолчанию для внешнего плеера"
 
+#, python-format
 msgid ""
-"The \"%s\" utility is used by the IPTVPlayer to buffering and downloading "
-"[%s] links."
+"The host %s requires registration. \n"
+"Please fill your login and password in the host configuration. Available under blue button."
 msgstr ""
-"Утилита \"%s\" используется IPTV Плеером для кэширования и загрузки "
-"материала из ссылок [%s]."
+"Узел %s требует регистрации. \n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
 
+#, python-format
 msgid ""
-"The \"%s\" utility is used by the IPTVPlayer to determine the encoding of "
-"the text."
+"The host %s requires subscription.\n"
+"Please fill your login and password in the host configuration - available under blue button."
 msgstr ""
-"В \"%s\" утилита используется IPTV Плеером для определения кодировки текста."
-
-msgid "The current host crashed"
-msgstr "Данный хост не работает"
-
-msgid "The default video quality:"
-msgstr "Качество видео по умолчанию:"
+"Хост %s требует подписки.\n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступно по синей кнопке."
 
 msgid "The number of items in the search history"
 msgstr "Количество элементов в истории поиска"
 
+#, python-format
+msgid ""
+"The playback buffer has been moved to the download manager.\n"
+"It will be saved in the file:\n"
+"\"%s\""
+msgstr ""
+"Буфер воспроизведения был перемещен в диспетчер загрузки.\n"
+"\"%s\""
+
 msgid "The preferred protocol:"
 msgstr "Предпочтительный протокол:"
 
+msgid "The preferred update server"
+msgstr "Предпочтительный сервер обновлений"
+
+#, python-format
 msgid "The problem with creating a directory [%s]."
 msgstr "Проблема с созданием каталога [%s]."
 
-msgid "The problem with obtaining the gateway proxy!"
-msgstr "Проблема с получением шлюза прокси!"
-
-msgid ""
-"The problem with the logged-in user \"%s. Check your login details in the "
-"host configuration.\""
-msgstr ""
-"Проблема с авторизирацией пользователя \"%s. Проверьте свои регистрационные "
-"данные в конфигурации хоста.\""
-
-msgid ""
-"The problem with the user's logon \"%s\". Check your login details in the "
-"host configuration."
-msgstr ""
-"Проблема с входом пользователя \"%s\". Проверьте свои регистрационные данные "
-"в конфигурации хоста."
-
 msgid "The same item already exists in this group."
-msgstr "То же самое, элемент уже существует в этой группе."
+msgstr "Такой же элемент уже существует в этой группе."
 
-msgid "The user Last.fm"
-msgstr "Пользователь Last.fm"
+msgid "The worst"
+msgstr "Худший"
 
-msgid ""
-"There are no active premium account.\n"
-"Using a limited version that may not work properly with congested links."
-msgstr ""
-"Там нет активных премиум аккаунтов.\n"
-"Использовать ограниченную версию, которая не может работать должным образом "
-"с перегруженными ссылками."
+msgid "There are no other favourite groups"
+msgstr "Нет других групп избранного"
+
+msgid "There are some geoblocked links. If you want to use them, change option in the host configuration, available under blue button."
+msgstr "Есть несколько геоблокированных ссылок. Если вы хотите их использовать, измените опцию в конфигурации хоста. Доступно по синей кнопке."
 
+#, python-format
 msgid ""
 "There is a new version available do you want to update? \n"
-"Your version [%s], latest version on server [%s]."
+"Your version [%s], latest version on server [%s]"
 msgstr ""
-"Вышла новая версия плагина. Вы хотите, обновить? \n"
+"Вышла новая версия плагина. Вы хотите обновить? \n"
 "Ваша версия [%s], новая версия на сервере [%s]."
 
-msgid "There are no other favourite groups"
-msgstr "Там нет группы избранное."
+#, python-format
+msgid "There is no enough free space in the folder \"%s\"."
+msgstr "В папке \"%s\"недостаточно свободного места."
 
+#, python-format
 msgid "There is no free space on the drive [%s]."
 msgstr "На диске нет свободного места [%s]."
 
+msgid "There is no hosts in this group."
+msgstr "В этой группе нет хостов."
+
+#, python-format
 msgid ""
 "There is no space in the directory [%s]\n"
 " Available[%s], required [%s]."
@@ -1871,90 +3935,184 @@
 "Доступно [%s], необходимо [%s]."
 
 msgid "There is no update for the current configuration."
-msgstr "Для текущей версии, обновления отсутствуют."
+msgstr "Для текущей версии обновления отсутствуют."
 
-msgid "There was an error Download."
-msgstr "Была ошибка загрузки."
+msgid "This host has been added already to this group."
+msgstr "Этот хост уже добавлен в эту группу."
 
 msgid ""
-"There was an error Download. \n"
-"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+"This host requires registration. \n"
+"Please fill your login and password in the host configuration. Available under blue button."
 msgstr ""
-"Была ошибка загрузки. \n"
-"Статус[%s], tmpБуффРазмер[%r], может работать Gameplayer[%r]"
+"Этот узел требует регистрации. \n"
+"Заполните свой логин и пароль в конфигурации хоста. Доступен по синей кнопке."
 
-msgid "There was an error downloading."
-msgstr "Ошибка при загрузке."
+msgid "This site is protected with Google reCaptcha v2."
+msgstr "Этот сайт защищен google recaptcha v2."
 
-msgid "This site requires login. Please complete host configuration data."
+msgid "This step is required to proper select binaries for installation."
+msgstr "Этот шаг необходим для правильного выбора исполняемых файлов для установки."
+
+msgid "Thriller Movies"
+msgstr "Триллеры"
+
+msgid "Thursday"
+msgstr "Четверг"
+
+msgid "Tip! You can connect USB flash drive to fix this problem."
+msgstr "Совет! Вы можете подключить USB-накопитель, чтобы решить эту проблему."
+
+msgid "Title:"
+msgstr "Заглавие:"
+
+msgid ""
+"To watch videos from http://vk.com/ you need to login.\n"
+"Please fill your login and password in the IPTVPlayer configuration."
 msgstr ""
-"Этот сайт требует логин. Пожалуйста, заполните данные конфигурации хостов."
+"Для просмотра видео с http://vk.com/ необходимо авторизоваться на сайте.\n"
+"Пожалуйста, введите свой логин и пароль в конфигурацию IPTVPlayer."
 
-msgid "Today, too many people are watching a movie with"
-msgstr "Сегодня слишком много пользователей смотрят фильм с"
+msgid "Today"
+msgstr "Сегодня"
 
 msgid "Top"
-msgstr "Высший"
+msgstr "Популярное"
+
+msgid "Top +250"
+msgstr "Топ +250"
+
+msgid "Top Movies"
+msgstr "Лучшие фильмы"
+
+msgid "Top Videos"
+msgstr "Лучшие видео"
+
+msgid "Top movies"
+msgstr "Лучшие фильмы"
 
-msgid "Topics"
-msgstr "Темы"
+msgid "Top rated"
+msgstr "Самые популярные"
+
+msgid "Top series"
+msgstr "Лучшие серии"
 
-msgid "Total Divas"
-msgstr "Всего Примадонны"
+msgid "Total size: "
+msgstr "Общий размер: "
+
+msgid "Trailer"
+msgstr "Трейлер"
+
+#, python-format
+msgid "Trailer - %s"
+msgstr "Трейлер - %s"
+
+msgid "Trailers"
+msgstr "Трейлеры"
+
+msgid "Translations"
+msgstr "Переводы"
 
 msgid "Transparent"
 msgstr "Прозрачный"
 
-msgid "Try again for some time"
-msgstr "Попробуйте еще раз в течение некоторого времени"
+msgid "Trauma"
+msgstr "Травма"
+
+msgid "Treatment Consult"
+msgstr "Консультации лечения"
+
+msgid "Trending"
+msgstr "Имеющие тенденцию"
+
+msgid "Try to bypass DRM (it may be illegal)"
+msgstr "Попробовать обойти DRM (может быть незаконно)"
+
+msgid "Tuesday"
+msgstr "Вторник"
 
 msgid "Turkish"
-msgstr "Турция"
+msgstr "Турецкий"
 
 msgid "Turn off buffering for http://prognoza.pogody.tv/"
 msgstr "Выключить буферизацию для http://prognoza.pogody.tv/"
 
+msgid "Tutorials"
+msgstr "Учебники"
+
 msgid "Type: "
 msgstr "Тип: "
 
-msgid "Türk"
-msgstr "Турецкий"
+#, python-format
+msgid "Type: %s"
+msgstr "Тип: %s"
+
+msgid "Ukrainian proxy server url"
+msgstr "URL украинского прокси-сервера"
 
-msgid "UNKNOWN"
-msgstr "НЕИЗВЕСТНЫЙ"
+msgid "Umount iso file"
+msgstr "Отмонтировать iso-файл"
 
-msgid "Ukraine"
-msgstr "Украина"
+msgid "Unknow data in the captcha item!"
+msgstr "Неизвестные данные в элементе проверки!"
 
 msgid "Unknown"
 msgstr "Неизвестный"
 
-msgid "Unknown protocol %s"
-msgstr "Неизвестный протокол %s"
+#, python-format
+msgid "Unknown captcha form! Data: \"%s\""
+msgstr "Неизвестная форма captcha! Данные: \"%s\""
+
+msgid "Unknown error."
+msgstr "Неизвестная ошибка."
+
+#, python-format
+msgid "Unknown file extension \"%s\"."
+msgstr "Неизвестное расширение файла \"%s\"."
 
+#, python-format
 msgid "Unknown protocol [%s]"
 msgstr "Неизвестный протокол [%s]"
 
+msgid "Unknown server response."
+msgstr "Неизвестный ответ сервера."
+
+#, python-format
+msgid "Unknown server response: \"%s\""
+msgstr "Неизвестный ответ сервера: \"%s\""
+
+#, python-format
+msgid "Unknown subtitle parser for format \"%s\"."
+msgstr "Неизвестный синтаксический анализатор субтитров для формата \"%s\"."
+
 msgid "Unpacking the archive completed successfully."
 msgstr "Распаковка архива успешно завершена."
 
+#, python-format
+msgid "Unrar error code[%s]."
+msgstr "Код ошибки unrar [%s]."
+
+msgid "Unset watched"
+msgstr "Отменить просмотр"
+
+#, python-format
+msgid "Unzip error code[%s]."
+msgstr "Код ошибки распаковки [%s]."
+
 msgid "Update"
-msgstr "Обновить плеер (Нажмите OK)"
+msgstr "Обновить"
+
+msgid "Update Archive Type:"
+msgstr "Обновить тип архива:"
 
 msgid "Update completed successfully. For the moment, the system will reboot."
-msgstr ""
-"Обновление успешно завершено. На данный момент, система перезагрузится."
+msgstr "Обновление успешно завершено. На данный момент, система перезагрузится."
 
 msgid ""
 "Update failed.\n"
 "Check the status by selecting interesting and pressing OK."
 msgstr ""
 "Не удалось выполнить обновление.\n"
-"Проверьте нужное вам, и нажмите OK."
-
-msgid ""
-"Update failed. Check the status by selectiong interesting and pressing ok."
-msgstr "Обновление не удалось. Проверьте статус выбранного, нажмите кнопку ОК."
+"Проверьте статус, выбрав интересное и нажав OK."
 
 msgid "Update not available."
 msgstr "Обновление недоступно."
@@ -1963,40 +4121,68 @@
 msgstr "Пакеты, доступные для обновления"
 
 msgid "Update packet was downloaded successfully."
-msgstr "Обновленный пакет был успешно загружен."
+msgstr "Пакет обновлений был успешно загружен."
 
 msgid "Update server not selected."
-msgstr "Сервер обновлений не выбран."
+msgstr "Не выбран сервер обновлений."
 
 msgid "Upload date"
 msgstr "Дата публикации"
 
-msgid "Urllists player"
-msgstr "Гиперссылки Плеер"
+msgid "Uploads"
+msgstr "Загрузки"
 
-msgid "Use German proxy for link request"
-msgstr "Использовать Немецкий прокси для запроса ссылки"
+msgid "Urllists player"
+msgstr "Плеер URL-списков"
 
 msgid "Use Polish proxy for http://prognoza.pogody.tv/"
-msgstr "Использовать прокси-сервер для Польского http://prognoza.pogody.tv/"
+msgstr "Использовать польский прокси-сервер для http://prognoza.pogody.tv/"
 
-msgid "Use a proxy gateway"
-msgstr "Использовать прокси-шлюз"
+msgid "Use default quality:"
+msgstr "Качество по умолчанию:"
+
+msgid "Use default video quality"
+msgstr "Качество видео по умолчанию"
 
 msgid "Use default video quality:"
-msgstr "Использовать качество видео по умолчанию:"
+msgstr "Видеокачество по умолчанию:"
 
-msgid "Use defauult qality:"
-msgstr "Качество использования по умолчанию:"
+msgid "Use links cache"
+msgstr "Использовать кеш ссылок"
 
-msgid "Use ru proxy server:"
-msgstr "Использовать прокси-сервер ру:"
+msgid "Use preferred bitrate"
+msgstr "Исп. предпочтительный битрейт"
 
-msgid "User Last.fm"
-msgstr "Пользователь Last.fm"
+msgid "Use preferred quality"
+msgstr "Исп. предпочтительное качество"
 
-msgid "User [%s] logon failure."
-msgstr "Пользователь [%s] ошибка входа в систему."
+msgid "Use proxy"
+msgstr "Использовать прокси"
+
+msgid "Use proxy server:"
+msgstr "Использовать прокси-сервер:"
+
+#, python-format
+msgid "Use software decoder for the %s"
+msgstr "Использовать программный декодер для %s"
+
+msgid "Use subtitles parser extension if available"
+msgstr "Расширенный парсер субтитров, если доступен"
+
+msgid "Use the PyCurl for HTTP(S) requests"
+msgstr "Использовать запросы PyCurl для HTTP(S)"
+
+msgid "Use web proxy gateway"
+msgstr "Использовать шлюз веб-прокси"
+
+msgid "Use web-proxy (it may be illegal):"
+msgstr "Использование web-прокси (может быть незаконно):"
+
+msgid "Use web-proxy for VODs (it may be illegal):"
+msgstr "Использовать веб-прокси для VOD (может быть незаконно):"
+
+msgid "User defined"
+msgstr "Пользовательские"
 
 msgid "User files"
 msgstr "Файлы пользователя"
@@ -2007,153 +4193,332 @@
 msgid "User links stored in the ytlist.txt file."
 msgstr "Ссылки пользователя, сохраненные в файле ytlist.txt."
 
-msgid "User-Agent"
-msgstr "Агент пользователя"
+#, python-format
+msgid "User login \"%s\" failed."
+msgstr "Ошибка входа в систему пользователя [%s]."
 
 msgid "Username:"
 msgstr "Имя пользователя:"
 
-msgid "Uses the default video quality:"
-msgstr "Использовать качество видео по умолчанию:"
+msgid ""
+"Using this host in your country can be illegal.\n"
+"Do you want to continue at your own risk?"
+msgstr ""
+"Использование этотго сайта в Вашей стране может быть незаконным.\n"
+"Вы хотите продолжить на свой страх и риск?"
+
+#, python-format
+msgid "Utility \"%s\" can not be found."
+msgstr "Утилита \"%s\" не найдена."
 
+#, python-format
 msgid ""
 "Utility \"%s\" has not been detected. \n"
 "Do you want to install it?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Вы хотите, установить новую?"
+"Утилита \"%s\" не была обнаружена. \n"
+"Вы хотите установить её?"
 
+#, python-format
 msgid ""
 "Utility \"%s\" has not been detected. \n"
 "What do you want to do?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Что вы хочете сделать?"
+"Утилита \"%s\" не была обнаружена. \n"
+"Что Вы хотите сделать?"
 
+#, python-format
 msgid ""
 "Utility \"%s\" is deprecated. \n"
 "Do you want to install new one?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Вы хотите, установить новую?"
+"Утилита \"%s\" не рекомендуется.\n"
+"Вы хотите установить новую?"
 
+#, python-format
 msgid ""
 "Utility \"%s\" is deprecated. \n"
 "What do you want to do?"
 msgstr ""
-"Утилита \"%s\" устарела. \n"
-"Что вы хотите сделать?"
+"Утилита \"%s\" не рекомендуется.\n"
+"Что Вы хотите сделать?"
 
-msgid "VIDEO"
-msgstr "ВИДЕО"
+msgid "VENUES"
+msgstr "ПЛОЩАДКА"
+
+msgid "VFD set current title:"
+msgstr "VFD устанавливает текущее название:"
+
+msgid "VIEWS"
+msgstr "ПРОСМОТРЫ"
 
-msgid "Version"
-msgstr "Версия"
+msgid "VOD"
+msgstr "VOD"
 
+msgid "Verify"
+msgstr "Проверка"
+
+#, python-format
 msgid ""
-"Version [%s] is ready for installation. After installation, restart of the "
-"system will be done.\n"
+"Version [%s] is ready for installation. After installation, restart of the system will be done.\n"
 "Do you want to continue?"
 msgstr ""
-"Версия [%s] готова к установке. После установки, cистема будет "
-"перезагружена.\n"
+"Версия [%s] готова к установке. После установки, cистема будет перезагружена.\n"
 "Вы хотите продолжить?"
 
 msgid "Video"
 msgstr "Видео"
 
-msgid "Video buffer size [MB]"
-msgstr "Размер буфера видео в [MB]"
+msgid "Video default quality:"
+msgstr "Качество видео по умолчанию:"
 
 msgid "Video format:"
-msgstr "Формат видео:"
+msgstr "Видеоформат:"
+
+msgid "Video mode"
+msgstr "Видеорежим"
 
 msgid "Video options"
-msgstr "Параметры видео"
+msgstr "Видеопараметры"
+
+msgid "Video policy"
+msgstr "Политика видео"
+
+msgid "Video policy for 4:3"
+msgstr "Видеополитика для 4:3"
+
+msgid "Video with DRM protection."
+msgstr "Видео с защитой DRM."
+
+msgid ""
+"Videomega has blocked your IP for some time.\n"
+"Please retry this link after some time."
+msgstr ""
+"Videomega заблокировал Ваш IP на некоторое время.\n"
+"Повторите попытку через некоторое время."
 
 msgid "Videos"
 msgstr "Видео"
 
+#, python-format
+msgid "Videos %s"
+msgstr "Видео %s"
+
+#, python-format
+msgid "Videos count: %s"
+msgstr "Количество видео: %s"
+
 msgid "View count"
 msgstr "Количество просмотров"
 
-msgid "WWE Main Event"
-msgstr "WWE Главное событие"
+msgid "Views"
+msgstr "Просмотры"
 
-msgid "Watch video materials from IPTV services"
-msgstr "Просмотр сервисов IPTV"
+msgid "Views:"
+msgstr "Просмотры:"
 
-msgid "Web streams player"
-msgstr "Проигрывать Веб-потоки"
+msgid "Views: "
+msgstr "Просмотры: "
 
-msgid "Webpages: "
-msgstr "Веб-страница: "
+#, python-format
+msgid "Views: %s"
+msgstr "Просмотры: %s"
 
-msgid "Week"
-msgstr "Неделю"
+msgid "Vimeo Suggestions"
+msgstr "Предложения Vimeo"
 
-msgid "Weekly"
-msgstr "Еженедельно"
+msgid "Vip level"
+msgstr "Уровень Vip"
 
-msgid "Writer"
-msgstr "Автор"
+msgid "Vip valid"
+msgstr "Vip действителен"
+
+msgid "Virtual Keyboard"
+msgstr "Виртуальная клавиатура"
+
+msgid "Virtual Keyboard type"
+msgstr "Тип виртуальной клавиатуры"
+
+#, python-format
+msgid "Waiting search thread to stop, please wait (%d)"
+msgstr "Ожидание поисковой строки для остановки. Пожалуйста, подождите (%d)"
+
+msgid "War Movies"
+msgstr "Фильмы о войне"
+
+msgid "Watch"
+msgstr "Просмотр"
+
+msgid "Watch Trailer"
+msgstr "Смотреть трейлер"
+
+msgid "Watch Videos Online"
+msgstr "Просмотр видео онлайн"
+
+msgid "We can't find the file you are looking for. It maybe got deleted by the owner or was removed due a copyright violation."
+msgstr "Мы не можем найти файл, который вы ищете. Возможно, он был удален владельцем или был удален из-за нарушения авторских прав."
+
+msgid "Web component has been reset and all threads are stopped. :)"
+msgstr "Веб-компонент был сброшен, и все потоки остановлены. :)"
+
+msgid "Web component has been reset, the following threads are still working:"
+msgstr "Веб-компонент сброшен. Продолжают работать следующие потоки:"
+
+msgid "Web interface version"
+msgstr "Версия веб-интерфейса"
+
+msgid "Web proxy"
+msgstr "Веб-прокси"
+
+msgid "Web proxy provider"
+msgstr "Поставщик web-прокси"
+
+msgid "Wednesday"
+msgstr "Cреда"
+
+msgid "Western Movies"
+msgstr "Фильмы Western"
+
+msgid "Whole file must be downloaded to start playback!"
+msgstr "Для начала воспроизведения необходимо загрузить весь файл!"
+
+msgid "With closed captioned."
+msgstr "С субтитрами."
+
+msgid "With subtitles"
+msgstr "С субтитрами"
+
+msgid "Write current title to file:"
+msgstr "Впишите текущий заголовок в файл:"
+
+msgid "Written Boards Review"
+msgstr "Письменный обзор советов"
+
+msgid "Wrong answer."
+msgstr "Неверный ответ."
+
+msgid "Wrong captcha image data!"
+msgstr "Неверные данные изображения с картинки!"
+
+msgid "Wrong format of rar archive."
+msgstr "Неправильный формат rar-архива."
+
+msgid "Wrong format of zip archive."
+msgstr "Неправильный формат zip-архива."
 
 msgid "Wrong indexes."
 msgstr "Неправильные индексы."
 
+#, python-format
+msgid "Wrong the encryption key size: %s\n"
+msgstr "Неверный размер ключа шифрования: %s\n"
+
+msgid "Wrong uri."
+msgstr "Неправильный uri."
+
+#, python-format
 msgid ""
 "Wrong version. \n"
 " downloaded version [%s] is different from the requested [%s]."
 msgstr "Неверная версия. Загруженная версия [%s] отличается от требуемой [%s]."
 
-msgid "You can use Russian proxy server as a workaround."
-msgstr ""
-"Вы можете использовать российской прокси-сервер в качестве обходного пути."
+#, python-format
+msgid "Wrong version: [%s]."
+msgstr "Неправильная версия: [%s]."
+
+msgid "Xbox One"
+msgstr "Xbox One"
+
+msgid "Xtream Host:"
+msgstr "Хост Xtream:"
+
+msgid "Xtream Pass:"
+msgstr "Пароль Xtream:"
+
+msgid "Xtream User Agent:"
+msgstr "Польз. агент Xtream:"
+
+msgid "Xtream User:"
+msgstr "Логин Xtream:"
+
+msgid "YOURPORN Server :"
+msgstr "Сервер YOURPORN:"
+
+msgid "Year"
+msgstr "Год"
+
+#, python-format
+msgid "Year %s"
+msgstr "Год %s"
+
+msgid "Year:"
+msgstr "Год:"
+
+msgid "Year: "
+msgstr "Год: "
+
+msgid "Yes"
+msgstr "Да"
+
+msgid "Yesterday"
+msgstr "Вчера"
+
+msgid "You are using old version of OpenWebif.<br> To go to E2iPlayer web Select the following link<br>"
+msgstr "Вы используете старую версию OpenWebif. <br> Для перехода на веб-сайт E2iPlayer выберите следующую ссылку <br>"
+
+msgid "You can disable HTTPS certificates validation in the E2iPlayer configuration to suppress this problem."
+msgstr "Вы можете отключить проверку сертификатов HTTPS в конфигурации E2iPlayer, чтобы устранить эту проблему."
+
+msgid "You can enable PyCurl in the E2iPlayer configuration to fix this problem."
+msgstr "Вы можете включить PyCurl в конфигурации E2iPlayer, чтобы устранить эту проблему."
+
+#, python-format
+msgid "You can install PyCurl package from %s to fix this problem."
+msgstr "Вы можете установить пакет PyCurl из %s, чтобы решить эту проблему."
+
+msgid "You can try to use proxy as workaround, check options under blue button."
+msgstr "Вы можете попробовать использовать прокси в качестве обходного пути. Проверьте параметры по синей кнопке."
+
+#, python-format
+msgid "You can use \"%s\" or \"%s\" services for automatic solution."
+msgstr "Вы можете использовать сервисы \"%s\" или \"%s\" для автоматического решения."
+
+msgid "You can use external eplayer to start playback faster."
+msgstr "Вы можете использовать внешний eplayer для ускорения воспроизведения."
 
 msgid "You do not have a premium account. Starting a sponsored broadcast."
 msgstr "Вы не имеете премиум аккаунта. Оплатите одну трансляцию."
 
-msgid "You do not have a premium account.Starting a sponsored broadcast."
-msgstr "Вы не имеете премиум-аккаунта. Оплатите одну трансляцию."
-
 msgid "You need to enter email and password in configuration."
 msgstr "Вы должны ввести адрес электронной почты и пароль в конфигурации."
 
-msgid ""
-"You probably have not access to this page due to geolocation restriction."
-msgstr ""
-"Вы, наверное, не имеете доступ к этой странице в связи с ограничением "
-"геолокации."
-
-msgid "Your OpenSSL version is [%s]"
-msgstr "Ваша версия OpenSSL является [%s]"
+msgid "You should never perform block I/O operations in the __init__."
+msgstr "Вы никогда не должны выполнять операции блочного ввода-вывода в __init__."
 
-msgid "Your platform is [%s]"
-msgstr "Ваша платформа [%s]"
+msgid "Your language preference:"
+msgstr "Ваши предпочтения языка:"
 
 msgid "Your search entry"
-msgstr "Введите тип поиска"
-
-msgid "Youtube player"
-msgstr "Ютубе плеер"
+msgstr "Ваша фраза поиска"
 
-msgid "Youtubes player"
-msgstr "Ютубе плеер"
+msgid "Youtube Suggestions"
+msgstr "Предложения YouTube"
 
+#, python-format
 msgid "[%s] - configuration"
-msgstr "[%s] - Конфигурация"
+msgstr "[%s] - конфигурация"
 
-msgid "[%s] will be used by IPTVPlayer."
-msgstr "[%s] Будет использоваться IPTV плеером."
+#, python-format
+msgid "[%s] will be used by %s."
+msgstr "[%s] Будет использовано %s."
 
+#, python-format
 msgid "[%s] with buffering"
-msgstr "%s с буферизацией"
+msgstr "[%s] с буферизацией"
 
+#, python-format
 msgid "[%s] without buffering"
-msgstr "%s без буферизации"
-
-msgid "[For download only] "
-msgstr "Только Скачать "
+msgstr "[%s] без буферизации"
 
 msgid "[HLS/M3U8] buffering"
 msgstr "Буферизация (HLS/M3U8)"
@@ -2161,374 +4526,376 @@
 msgid "[HTTP] buffering"
 msgstr "Буферизация (HTTP)"
 
+msgid "[Logged-in-only] "
+msgstr "[Только зарегистрированный] "
+
 msgid "[RTMP] buffering (rtmpdump required)"
 msgstr "Буферизация (RTMP)"
 
-msgid "[group]"
-msgstr "[Группа]"
+msgid "[Trailer]"
+msgstr "[Трейлер]"
 
-msgid "active"
-msgstr "Активный"
+msgid "[en]"
+msgstr "[en]"
+
+msgid "[pl]"
+msgstr "[pl]"
+
+msgid "[trailer]"
+msgstr "[трейлер]"
+
+msgid "_checkStatus except error"
+msgstr "_проверка статуса, исключая ошибки"
 
 msgid "after a week"
-msgstr "Через неделю"
+msgstr "через неделю"
 
 msgid "after closing"
-msgstr "После закрытия"
+msgstr "после закрытия"
 
 msgid "after day"
-msgstr "После одного дня"
+msgstr "через день"
 
 msgid "after three days"
-msgstr "После трех дней"
+msgstr "через три дня"
+
+msgid "all"
+msgstr "все"
 
 msgid "all types"
-msgstr "Все типы"
+msgstr "все типы"
 
-msgid "alltube.tv"
-msgstr "Все tube.тв"
+msgid "any"
+msgstr "любые"
 
 msgid "aqua"
-msgstr "Вода"
+msgstr "так себе"
 
-msgid "ascending"
-msgstr "Восходящий"
+msgid "armv5t"
+msgstr "armv5t"
 
-msgid "assessment"
-msgstr "Оценка"
+msgid "armv7"
+msgstr "armv7"
 
-msgid "average"
-msgstr "Средний"
+msgid "auto"
+msgstr "авто"
 
-msgid "back_pressed prev sel index %s"
-msgstr "Назад к предыдущему индексу %s"
+msgid "average"
+msgstr "средний"
 
-msgid "based on IP"
-msgstr "На основе IP"
+msgid "black"
+msgstr "чёрный"
 
 msgid "blue"
-msgstr "Синий"
+msgstr "синий"
 
 msgid "bottom"
-msgstr "Земля"
-
-msgid "buffer-duration"
-msgstr "Продолжительность буферизации"
+msgstr "нижний"
 
-msgid "buffer-size"
-msgstr "Размер буфера"
+msgid "buffering location"
+msgstr "расположение буфера"
 
 msgid "center"
-msgstr "Центр"
-
-msgid "channel"
-msgstr "Канал"
+msgstr "центр"
 
-msgid "console"
-msgstr "Консоль"
+msgid "cmdwrap tool"
+msgstr "инструмент cmdwrap"
 
-msgid "cover"
-msgstr "Обложка"
+msgid "countries: "
+msgstr "страны: "
 
-msgid "data"
-msgstr "Данные"
-
-msgid "date added"
-msgstr "Дата добавления"
-
-msgid "date-add"
-msgstr "Дата-надстройки"
+msgid "de"
+msgstr "de"
 
 msgid "default"
-msgstr "По умолчанию"
+msgstr "по умолчанию"
 
-msgid "descending"
-msgstr "Нисходящий"
+msgid "direct link"
+msgstr "прямая ссылка"
 
-msgid "deutsch"
-msgstr "Немецкий"
+msgid "downloads location"
+msgstr "место загрузок"
 
-msgid "direct link"
-msgstr "Прямая ссылка"
+msgid "duktape"
+msgstr "duktape"
 
-msgid "download-buffer-path"
-msgstr "Скачать-буфер путь"
+#, python-format
+msgid "duration: %s"
+msgstr "длительность: %s"
 
-msgid "downmix"
-msgstr "Микширование"
+msgid "e-mail"
+msgstr "e-mail"
 
-msgid "english"
-msgstr "Английский"
+msgid "email"
+msgstr "эл. адрес"
 
-msgid "espanol"
-msgstr "Испанский"
+#, python-format
+msgid "episode: %s"
+msgstr "эпизод: %s"
 
 msgid "external eplayer3"
-msgstr "Внешний eplayer3"
+msgstr "внешний eplayer3"
 
 msgid "external gstplayer"
-msgstr "Внешний gstplayer"
+msgstr "внешний gstplayer"
 
-msgid "favourites"
-msgstr "Избранное"
-
-msgid "favourtes"
-msgstr "Избранное"
+msgid "first check if host works properly in GUI and web <b>BEFORE</b> reporting error in it !!!"
+msgstr "Cначала проверьте, правильно ли работает хост в GUI и адрес <b>ПЕРЕД</b> сообщеним об ошибке!"
 
 msgid "format"
-msgstr "Формат"
+msgstr "формат"
 
-msgid "free premium player."
-msgstr "Бесплатно премиум плеер."
+msgid "from E2 settings"
+msgstr "из настроек E2"
 
 msgid "fuchsia"
-msgstr "Фуксия"
+msgstr "фуксия"
 
-msgid "good"
-msgstr "Хороший"
+msgid "geoblocked"
+msgstr "геоблокировка"
 
 msgid "gray"
-msgstr "Серый"
+msgstr "серый"
 
-msgid "group"
-msgstr "Группа"
+msgid "green"
+msgstr "зелёный"
+
+msgid "hasło"
+msgstr "пароль"
 
 msgid "hd"
-msgstr "hd"
+msgstr "HD"
 
-msgid "headertext"
-msgstr "Текст заголовка"
+msgid "hideproxy.me (DE)"
+msgstr "hideproxy.me (DE)"
+
+msgid "hideproxy.me (NL)"
+msgstr "hideproxy.me (NL)"
+
+msgid "hideproxy.me (US)"
+msgstr "hideproxy.me (US)"
 
 msgid "high"
-msgstr "Высокий"
+msgstr "высокий"
+
+msgid "highest"
+msgstr "высший"
+
+msgid "hlsdl downloader"
+msgstr "hlsdl загрузчик"
+
+msgid "horizontal"
+msgstr "горизонталь"
 
-msgid "http://www.ex.ua/"
-msgstr "EX.UA"
+msgid "host:"
+msgstr "хост:"
 
 msgid "https - validate SSL certificates"
-msgstr "Проверка сертификатов SSL"
+msgstr "https - проверка сертификатов SSL"
 
 msgid "i686"
 msgstr "i686"
 
 msgid "internal"
-msgstr "Внутренний"
+msgstr "внутренний"
 
-msgid "large"
-msgstr "Большой"
+msgid "jpeg"
+msgstr "jpeg"
 
-msgid "leave movie player..."
-msgstr "Оставить проигрыватель фильмов..."
+msgid "jpeg,png"
+msgstr "jpeg,png"
 
-msgid "lector hd free "
-msgstr "Просмотр HD бесплатно "
+msgid "jpeg,png,gif"
+msgstr "jpeg,png,gif"
 
-msgid "lector normal free "
-msgstr "Просмотр SD бесплатно "
+msgid "large"
+msgstr "большой"
 
-msgid "lime"
-msgstr "Лайм"
+msgid "leave movie player..."
+msgstr "покидание видеоплеера..."
 
-msgid "live"
-msgstr "Прямой"
+msgid "lime"
+msgstr "липа"
 
-msgid "live transfers"
-msgstr "Прямые Потоки"
+msgid "live since: "
+msgstr "жизнь с: "
 
 msgid "login"
-msgstr "Войти"
+msgstr "логин"
 
 msgid "low"
-msgstr "Низкий"
+msgstr "низкий"
 
-msgid "maroon"
-msgstr "Темно-бордовый"
+msgid "lowest"
+msgstr "наихудший"
 
-msgid "medium"
-msgstr "Средний"
+msgid "main"
+msgstr "главное"
 
-msgid "mipsel"
-msgstr "mipsel"
+msgid "maroon"
+msgstr "каштановый"
 
-msgid "mobile"
-msgstr "Мобильный"
+msgid "media count: "
+msgstr "количество медиа: "
 
-msgid "movie"
-msgstr "Фильм"
-
-msgid "movie4k.to"
-msgstr "Кино4k.to"
+msgid "medium"
+msgstr "средний"
 
-msgid "name"
-msgstr "Название"
+msgid "min"
+msgstr "мин"
 
-msgid "nasze-kino.eu"
-msgstr "Наше-Кино.eu"
+msgid "mipsel"
+msgstr "mipsel"
 
 msgid "navy"
-msgstr "Морской волны"
+msgstr "морской волны"
 
 msgid "no"
-msgstr "Нет"
+msgstr "нет"
 
-msgid "nocnyseans.pl"
-msgstr "Ночной Сеанс.pl"
-
-msgid "number of views"
-msgstr "Количество просмотров"
+msgid "not available"
+msgstr "не доступно"
 
 msgid "olive"
-msgstr "Оливковый"
-
-msgid "passthrough"
-msgstr "Нет"
+msgstr "оливковый"
 
 msgid "password"
-msgstr "Пароль"
-
-msgid "picture link"
-msgstr "Фото ссылка"
-
-msgid "playerlogo"
-msgstr "Плеер логотип"
-
-msgid "playlist"
-msgstr "Плейлист"
-
-msgid "polski"
-msgstr "Польский"
+msgstr "пароль"
 
 msgid "precompiled"
-msgstr "Перекомпилированные"
+msgstr "прекомпилированные"
+
+msgid "private"
+msgstr "частное"
 
 msgid "purple"
-msgstr "Пурпурный"
+msgstr "пурпурный"
+
+msgid "python-cjson"
+msgstr "python-cjson"
 
 msgid "quality"
-msgstr "Качество"
+msgstr "качество"
 
 msgid "recommended"
-msgstr "Рекомендуемый"
+msgstr "рекомендуемые"
 
 msgid "red"
-msgstr "Красный"
-
-msgid "release date"
-msgstr "Дата выпуска"
-
-msgid "ring-buffer-max-size"
-msgstr "Максимальный размер буфера"
+msgstr "красный"
 
 msgid "rootfs"
-msgstr "Корневые файлы"
+msgstr "корневая система"
 
 msgid "second"
-msgstr "Секунда"
+msgstr "секунда"
 
 msgid "seconds"
-msgstr "Секунд"
-
-msgid "self.getCurrentDirectory()"
-msgstr "Самостоятельно.получить Текущий каталог()"
-
-msgid "sequencer"
-msgstr "Секвенсор"
+msgstr "секунд"
 
 msgid "sh4"
 msgstr "sh4"
 
+msgid "shows"
+msgstr "Шоу"
+
 msgid "silver"
-msgstr "Серебро"
+msgstr "серебристый"
 
 msgid "small"
-msgstr "Небольшой"
+msgstr "маленький"
 
 msgid "standard"
-msgstr "Стандарт"
-
-msgid "statustext"
-msgstr "Статус текст"
+msgstr "стандарт"
 
 msgid "teal"
-msgstr "Чирок"
+msgstr "чирок"
 
 msgid "the best"
-msgstr "Лучший"
+msgstr "лучший"
 
-msgid "the name"
-msgstr "Имя"
+msgid "the highest"
+msgstr "наивысшее"
+
+msgid "the lowest"
+msgstr "наихудший"
 
 msgid "the worst"
-msgstr "Худший"
+msgstr "худший"
 
 msgid "top"
-msgstr "Вверх"
+msgstr "верх"
+
+msgid "trailer"
+msgstr "трейлер"
 
 msgid "unknown"
-msgstr "Неизвестный"
+msgstr "неизвестный"
+
+msgid "updated: "
+msgstr "обновлено: "
 
-msgid "updated"
-msgstr "Обновленный"
+msgid "version"
+msgstr "версия"
+
+msgid "vertical"
+msgstr "вертикаль"
 
 msgid "very high"
-msgstr "Очень высокий"
+msgstr "очень высокий"
 
-msgid "video"
-msgstr "Видео"
+msgid "viewers: "
+msgstr "зрители: "
 
-msgid "web-live.tv login:"
-msgstr "web-live.tv Войти:"
+msgid "views"
+msgstr "просмотры"
 
-msgid "web-live.tv password:"
-msgstr "web-live.tv Пароль:"
+msgid "views: "
+msgstr "просмотры: "
 
-msgid "web-live.tv premium user?"
-msgstr "web-live.tv Премиум пользователь?"
+msgid "visit site"
+msgstr "посетите сайт"
+
+#, python-format
+msgid "wait %s second"
+msgstr "ждать %s секунду"
+
+#, python-format
+msgid "wait %s seconds"
+msgstr "ждать %s секунд"
+
+msgid "watch"
+msgstr "просмотр"
 
 msgid "white"
-msgstr "Белый"
+msgstr "белый"
 
 msgid "with source code"
-msgstr "С исходным кодом"
+msgstr "с исходным кодом"
 
-msgid "worst"
-msgstr "Наихудший"
+msgid "www: "
+msgstr "www: "
 
 msgid "yellow"
-msgstr "Желтый"
+msgstr "жёлтый"
 
 msgid "yes, to console"
-msgstr "Да, на консоле"
+msgstr "да, в консоли"
 
 msgid "yes, to file /hdd/iptv.dbg"
-msgstr "Файл, на /hdd/iptv.dbg"
-
-msgid "Success."
-msgstr "Успешно."
-
-msgid "Autoplay start delay"
-msgstr "Автозапуск задержки пуска"
-
-msgid "Movie categories"
-msgstr "Категории фильмов"
-
-msgid "http://hdkinomir.com/"
-msgstr "HDКиномир"
-
-msgid "----------------- External exteplayer3 options -----------------"
-msgstr "----------------- Внешние опции exteplayer3 -----------------"
+msgstr "да, в файл /hdd/iptv.dbg"
 
+# # Other translate
 msgid "XXX"
-msgstr "Видео Порно"
+msgstr "Порновидео"
 
 msgid "--- Featured videos ---"
-msgstr "--- Избранные видео ---"
+msgstr "--- Рекомендуемые видео ---"
 
 msgid "--- Hits ---"
 msgstr "--- Хиты ---"
 
 msgid "--- Hot ---"
-msgstr "--- Горячий ---"
+msgstr "--- Свежие ---"
 
 msgid "--- Best Videos ---"
 msgstr "--- Лучшие Видео ---"
@@ -2537,13 +4904,13 @@
 msgstr "--- Новые Видео ---"
 
 msgid "--- Tags alfabetical ---"
-msgstr "--- Слова алфавита ---"
+msgstr "--- По алфавиту ---"
 
 msgid "--- Pornstars ---"
 msgstr "--- Порно звезды ---"
 
 msgid "--- New ---"
-msgstr "--- Новый ---"
+msgstr "--- Новые ---"
 
 msgid "--- Top Rated ---"
 msgstr "--- Самые популярные ---"
@@ -2552,22 +4919,22 @@
 msgstr "--- Наиболее просматриваемые ---"
 
 msgid "--- Most Favorited ---"
-msgstr "--- Большинство избранном ---"
+msgstr "--- Избранные большинством ---"
 
 msgid "--- Most Discussed ---"
 msgstr "--- Самые обсуждаемые ---"
 
 msgid "--- Newest ---"
-msgstr "--- Новейший ---"
+msgstr "--- Новейшие ---"
 
 msgid "--- Most Viewed ---"
 msgstr "--- Наиболее просматриваемые ---"
 
 msgid "--- Most Favored ---"
-msgstr "--- Наибольшего благоприятствования ---"
+msgstr "--- Пользующиеся преимуществом ---"
 
 msgid "--- Popular ---"
-msgstr "--- Популярный ---"
+msgstr "--- Популярные ---"
 
 msgid "--- On Air ---"
 msgstr "--- В эфире ---"
@@ -2578,17 +4945,14 @@
 msgid "--- Longest ---"
 msgstr "--- Самый длинный ---"
 
-msgid "--- Most viewed ---"
-msgstr "--- Наиболее просматриваемые ---"
-
 msgid "--- Lastest ---"
-msgstr "--- Последнее ---"
+msgstr "--- Последние ---"
 
 msgid "--- Highest Rated ---"
 msgstr "--- Наивысший рейтинг ---"
 
 msgid "--- Most Popular ---"
-msgstr "--- Самый популярный ---"
+msgstr "--- Самый популярные ---"
 
 msgid " - Local version"
 msgstr " - Локальная версия"
@@ -2599,116 +4963,107 @@
 msgid "---Search History"
 msgstr "---История поиска"
 
-msgid "Search History"
-msgstr "История поиска"
-
 msgid "---Search"
 msgstr "---Поиск"
 
-msgid "Search movies"
-msgstr "Поиск фильмов"
-
 msgid "Search "
 msgstr "Поиск "
 
 msgid "--- Cams ---"
-msgstr "--- Веб-кам ---"
+msgstr "--- web-камеры ---"
 
 msgid "Cams"
-msgstr "Веб-кам"
+msgstr "Web-камеры"
 
 msgid "Update Now & Restart Enigma2"
-msgstr "Обновить сейчас & Перезагрузить Enigma2"
+msgstr "Обновить сейчас и перезагрузить Enigma2"
 
 msgid "ERROR - Error unpacking %s' % source"
-msgstr "Ошибка - ошибка распаковки %s' % источник"
+msgstr "Ошибка: Сбой распаковки %s' % источник"
 
 msgid "Require pin:"
-msgstr "Запрашивать PIN-код:"
+msgstr "Требовать PIN-код:"
 
 msgid "File Location xxxlist.txt :"
 msgstr "Расположение файла xxxlist.txt :"
 
-msgid "Sort xxxlist :"
-msgstr "Сортировка xxxlist :"
-
 msgid "--- boy ---"
-msgstr "--- Мальчик ---"
+msgstr "--- Мальчики ---"
 
 msgid "--- gay ---"
-msgstr "--- Гей ---"
+msgstr "--- Геи ---"
 
 msgid "--- Transgender ---"
-msgstr "--- Трансгендер ---"
+msgstr "--- Трансгендеры ---"
 
 msgid "--- Couple ---"
 msgstr "--- Пара ---"
 
 msgid "--- Mature ---"
-msgstr "--- Зрелый ---"
+msgstr "--- Зрелые ---"
 
 msgid "--- Fetish ---"
 msgstr "--- Фетиш ---"
 
 msgid "--- Lesbian ---"
-msgstr "--- Лесбиянка ---"
+msgstr "--- Лесбиянки ---"
 
 msgid "--- Soul_mate ---"
-msgstr "--- Родственная душа ---"
+msgstr "--- Родственные души ---"
 
 msgid "--- Hot_flirt ---"
-msgstr "--- Горячий Флирт ---"
+msgstr "--- Горячий флирт ---"
 
 msgid "--- Girl ---"
-msgstr "--- Девушка ---"
+msgstr "--- Девушки ---"
 
 msgid "boy"
-msgstr "Мальчик"
+msgstr "мальчики"
 
 msgid "gay"
-msgstr "Гей"
+msgstr "геи"
 
 msgid "Transgender"
-msgstr "Трансгендер"
+msgstr "Трансгендеры"
 
 msgid "Couple"
-msgstr "Пара"
+msgstr "Пары"
 
 msgid "Mature"
-msgstr "Зрелый"
+msgstr "Зрелые"
 
 msgid "Fetish"
 msgstr "Фетиш"
 
 msgid "Lesbian"
-msgstr "Лесбиянка"
+msgstr "Лесбиянки"
 
 msgid "Soul_mate"
-msgstr "Родственная душа"
+msgstr "Родственные души"
 
 msgid "Hot_flirt"
-msgstr "Горячий Флирт"
+msgstr "Горячий флирт"
 
 msgid "Girl"
-msgstr "Девушка"
+msgstr "Девушки"
 
 msgid "--- Couples ---"
 msgstr "--- Пары ---"
 
 msgid "--- Male ---"
-msgstr "--- Мужчина ---"
+msgstr "--- Мужские ---"
 
 msgid "--- Transsexual ---"
-msgstr "--- Транссексуал ---"
+msgstr "--- Транссексуалы ---"
 
 msgid "--- Female ---"
-msgstr "--- Женский ---"
+msgstr "--- Женские ---"
 
 msgid "vapor"
-msgstr "Пар"
+msgstr "пары"
 
 msgid "Men"
-msgstr "Но"
+msgstr "Мужчины"
 
 msgid "Shemale"
 msgstr "Транссексуал"
@@ -2717,31 +5072,31 @@
 msgstr "Женщины"
 
 msgid "new"
-msgstr "Новый"
+msgstr "новый"
 
 msgid "ERROR - Error downloading: "
-msgstr "ОШИБКА - ошибка загрузки: "
+msgstr "ОШИБКА. Сбой загрузки: "
 
 msgid "ERROR"
 msgstr "ОШИБКА"
 
 msgid "ERROR - Error unpacking /tmp/iptv-host-xxx.tar.gz"
-msgstr "ОШИБКА - ошибка распаковки /tmp/iptv-host-xxx.tar.gz"
+msgstr "ОШИБКА. Сбой распаковки /tmp/iptv-host-xxx.tar.gz"
 
 msgid "ERROR - Invalid file format /tmp/iptv-host-xxx.tar.gz"
-msgstr "ОШИБКА - неверный формат файла /tmp/iptv-host-xxx.tar.gz"
+msgstr "ОШИБКА. Неверный формат файла /tmp/iptv-host-xxx.tar.gz"
 
 msgid "ERROR - copy error"
-msgstr "ОШИБКА - ошибка копирования"
+msgstr "ОШИБКА. Сбой копирования"
 
 msgid "Update End. Please manual restart enigma2"
-msgstr "Обновление Конец. Пожалуйста ручной перезапуск Enigma2"
+msgstr "Обновление завершено. Перезапустите Enigma"
 
 msgid "---UPDATE---"
 msgstr "---ОБНОВИТЬ---"
 
 msgid "UPDATE MENU"
-msgstr "МЕНЮ ОБНОВЛЕНИЕ"
+msgstr "МЕНЮ ОБНОВЛЕНИЯ"
 
 msgid " - Remote version"
 msgstr " - Удаленная версия"
@@ -2750,37 +5105,25 @@
 msgstr "ОБНОВИТЬ"
 
 msgid "UPDATE-CHANGES"
-msgstr "ОБНОВИТЬ-ИЗМЕНЕНИЯ"
+msgstr "ИЗМЕНЕНИЯ В ОБНОВЛЕНИИ"
 
 msgid "UPDATE-NOW"
-msgstr "ОБНОВИТЬ-СЕЙЧАС"
+msgstr "ОБНОВИТЬ СЕЙЧАС"
 
 msgid "CHANGES IN VERSION"
-msgstr "Изминения в версии"
+msgstr "Изменения в версии"
 
 msgid "Update Now"
 msgstr "Обновить сейчас"
 
 msgid "Remote XXXversion"
-msgstr "Удаленный XXXверсия"
+msgstr "Управление XXX-версией"
 
 msgid "Local  XXXversion"
-msgstr "Локальный  XXXверсия"
+msgstr "Локальная  XXX-версия"
 
 msgid "Most Favorited"
-msgstr "Большинство избранном"
-
-msgid "xxxlist.txt"
-msgstr "Файл-xxx.txt"
-
-msgid "+++ XXXLIST +++"
-msgstr "+++ ФАЙЛ-XXX +++"
-
-msgid "On Air"
-msgstr "В эфире"
-
-msgid "Longest"
-msgstr "Самый длинный"
+msgstr "Самые популярные"
 
 msgid "Highest Rated"
 msgstr "Наивысший рейтинг"
@@ -2789,28 +5132,25 @@
 msgstr "Порно звезды"
 
 msgid "Last"
-msgstr "Последний"
+msgstr "Последние"
 
 msgid "Most Favored"
-msgstr "Наибольшего благоприятствования"
-
-msgid "Newest"
-msgstr "Новейший"
+msgstr "Пользующиеся популярностью"
 
 msgid "Featured videos"
 msgstr "Избранные видео"
 
 msgid "New Videos"
-msgstr "Новые Видео"
+msgstr "Новые видео"
 
 msgid "Hits"
 msgstr "Хиты"
 
 msgid "Hot"
-msgstr "Горячий"
+msgstr "Свежие"
 
 msgid "LAST"
-msgstr "ПОСЛЕДНИЙ"
+msgstr "ПОСЛЕДНИЕ"
 
 msgid "Next"
 msgstr "Следующий"
@@ -2821,15 +5161,8 @@
 msgid "Last Page"
 msgstr "Последняя страница"
 
-msgid "Software decoding as"
-msgstr "Декодировать"
-
-msgid "Some changes will be applied only after movie player restart."
-msgstr ""
-"Некоторые изменения будут применены только после перезапуска видеоплеера."
-
 msgid "IPTV Player download manager"
-msgstr "IPTV Плеер менеджер загрузок"
+msgstr "Менеджер загрузок IPTVPlayer"
 
 msgid "Animation [dubbing]"
 msgstr "Анимация [перезапись]"
@@ -2843,122 +5176,80 @@
 msgid "Series [subtitles]"
 msgstr "Серии [субтитры]"
 
-msgid "The worst"
-msgstr "Худший"
-
-msgid "The best"
-msgstr "Лучший"
-
-msgid "Video default quality:"
-msgstr "Качество видео по умолчанию:"
-
-msgid "Use default quality:"
-msgstr "Качество использования по умолчанию:"
-
-msgid "Portal:"
-msgstr "Портал:"
-
-msgid "Live-streams"
-msgstr "Прямые-потоки"
-
-msgid "New Movies"
-msgstr "Новые фильмы"
-
 msgid "HD Movies"
-msgstr "HD Фильмы"
+msgstr "HD-фильмы"
 
 msgid "Latest Movies"
 msgstr "Последние фильмы"
 
 msgid "Latest TV Episodes"
-msgstr "Последние ТВ Эпизоды"
+msgstr "Последние ТВ-эпизоды"
 
 msgid "New TV Episodes"
-msgstr "Новые ТВ Эпизоды"
+msgstr "Новые ТВ-эпизоды"
 
 msgid "Coming Soon"
 msgstr "Скоро"
 
-msgid "Most popular"
-msgstr "Самый популярный"
-
 msgid "Treat episode as TV Show"
-msgstr "Смотреть эпизод, как ТВ-шоу"
+msgstr "Рассматривать эпизод, как ТВ-шоу"
 
 msgid "Show recommended by Rafalcool1:"
-msgstr "Показать рекомендовано Rafalcool1:"
+msgstr "Показать рекомендованное Rafalcool1:"
 
 msgid "Recommended by Rafalcool1"
-msgstr "Рекомендуется Rafalcool1"
+msgstr "Рекомендованные Rafalcool1"
 
 msgid "List of movies prepared by Rafalcool1"
 msgstr "Список фильмов, подготовленных Rafalcool1"
 
-msgid "http://fs.to/"
-msgstr "FS.TO"
-
 msgid "Use ru proxy server to get file lists"
-msgstr "Использовать прокси-сервер, чтобы получить списки файлов"
-
-msgid "Audio"
-msgstr "Аудио"
-
-msgid "New episodes"
-msgstr "Новые серии"
+msgstr "Использовать российский прокси-сервер для получения списков файлов"
 
 msgid "External player use software decoder for the WMA"
-msgstr "Применить наружный декодер для WMA"
+msgstr "Внешний плеер использует программный декодер WMA"
 
 msgid "AAC mix mode"
-msgstr "    Выбор режима AAC"
+msgstr "Режим смесителя AAC"
 
 msgid "Preferred protocol:"
-msgstr "Выберите протокол:"
+msgstr "Выбранный протокол:"
 
 msgid "Use the default video quality:"
-msgstr "Используйте качество видео по умолчанию:"
+msgstr "Использовать качество видео по умолчанию:"
 
 msgid "password:"
-msgstr "Пароль:"
+msgstr "пароль:"
 
 msgid "login:"
-msgstr "Логин:"
+msgstr "логин:"
 
 msgid "Sort results after:"
 msgstr "Сортировать результаты после:"
 
-msgid "Alphabetically"
-msgstr "В алфавитном порядке"
-
-msgid "Top rated"
-msgstr "Самые популярные"
-
-msgid "Latest"
-msgstr "Последний"
-
 msgid "Najtrafniejsze"
-msgstr "Новые"
+msgstr "Новейшие"
 
 msgid "Folder start"
-msgstr "Начало"
+msgstr "Начало папки"
 
 msgid "Name hamster (login)"
-msgstr "Имя (логин)"
+msgstr "Имя пользователя (логин)"
 
 msgid "Password for hamster"
-msgstr "Пароль для chomika"
+msgstr "Пароль пользователя"
 
 msgid "Explore"
-msgstr "Исследовать"
+msgstr "Обзор"
 
 msgid "Small films and anime"
-msgstr "Фильмы и аниме"
+msgstr "Короткие фильмы и аниме"
 
 msgid "Films Extremal"
-msgstr "Фильмы Экстремальное"
+msgstr "Экстремальные фильмы"
 
 msgid "Automotive , accidents"
-msgstr "Автомобильные аварии"
+msgstr "Автопромышленность, аварии"
 
 msgid "Muzik"
 msgstr "Музыка"
@@ -2966,12 +5257,6 @@
 msgid "Straight from Polish"
 msgstr "Прямо с Польского"
 
-msgid "Sport"
-msgstr "Спорт"
-
-msgid "Comedies"
-msgstr "Комедии"
-
 msgid "Miscellaneous"
 msgstr "Разное"
 
@@ -2985,22 +5270,19 @@
 msgstr "Видео пользователя 3dEU?"
 
 msgid "  Filmy3dEU login:"
-msgstr "  Filmy3dEU логин:"
+msgstr " Filmy3dEU логин:"
 
 msgid "  Filmy3dEU password:"
-msgstr "  Filmy3dEU пароль:"
+msgstr " Filmy3dEU пароль:"
 
 msgid "Added date"
-msgstr "Добавлена дата"
+msgstr "Добавленная дата"
 
 msgid "Comment count"
 msgstr "Количество комментариев"
 
-msgid "Recommended"
-msgstr "Рекомендуемые"
-
 msgid "Most Watched"
-msgstr "Самые ценные"
+msgstr "Самые просматриваемые"
 
 msgid "Homepage"
 msgstr "Домашняя страница"
@@ -3011,9 +5293,6 @@
 msgid "Katalog A-Z"
 msgstr "Каталог A-Z"
 
-msgid "Localization"
-msgstr "Локализация"
-
 msgid "Argentina"
 msgstr "Аргентина"
 
@@ -3072,13 +5351,13 @@
 msgstr "Сингапур"
 
 msgid "Swiss"
-msgstr "Швейцарский"
+msgstr "Швейцарские"
 
 msgid "Switzerland"
 msgstr "Швейцария"
 
 msgid "Schweiz"
-msgstr "Швеция"
+msgstr "Шведские"
 
 msgid "Tunisia"
 msgstr "Тунис"
@@ -3102,7 +5381,7 @@
 msgstr "Мексика"
 
 msgid "Belgian"
-msgstr "Бельгийский"
+msgstr "Бельгийские"
 
 msgid "Austria"
 msgstr "Австрия"
@@ -3117,7 +5396,7 @@
 msgstr "Чешская Республика"
 
 msgid "Arab"
-msgstr "Арабский"
+msgstr "Арабские"
 
 msgid "Korea"
 msgstr "Корея"
@@ -3125,24 +5404,18 @@
 msgid "China"
 msgstr "Китай"
 
-msgid "Serials"
-msgstr "Сериалы"
-
 msgid "sun sessions"
-msgstr "Солнце сессии"
+msgstr "солнечные сессии"
 
 msgid "Other videos"
 msgstr "Другие видео"
 
 msgid "Ibiza Global Radio"
-msgstr "Ibiza Глобальный Радио"
+msgstr "Ibiza Global Radio"
 
 msgid "Top 100"
 msgstr "Топ 100"
 
-msgid "Year"
-msgstr "Год"
-
 msgid "24 h"
 msgstr "24 ч"
 
@@ -3159,10 +5432,10 @@
 msgstr "Список фильмов"
 
 msgid "Anime Issued"
-msgstr "Аниме Выпущено"
+msgstr "Выпущенные аниме"
 
 msgid "New episodes broadcast"
-msgstr "Новые эпизоды трансляции"
+msgstr "Транляции новых эпизодов"
 
 msgid "Recently added episodes from previous seasons"
 msgstr "Недавно добавленные эпизоды из прошлых сезонов"
@@ -3171,79 +5444,67 @@
 msgstr "Предвестник"
 
 msgid "User PREMIUM KinomanTV?"
-msgstr "ПРЕМИУМ Пользователь KinomanTV?"
+msgstr "Пользователь PREMIUM KinomanTV?"
 
 msgid "  KinomanTV login:"
-msgstr "  KinomanTV Логин:"
+msgstr "  KinomanTV логин:"
 
 msgid "  KinomanTV password:"
-msgstr "  KinomanTV Пароль:"
+msgstr "  KinomanTV пароль:"
 
 msgid "Categories films"
 msgstr "Категории фильмов"
 
 msgid "Last added"
-msgstr "Последние добавления"
-
-msgid "Most rated"
-msgstr "По рейтингу"
+msgstr "Последние добавленые"
 
 msgid "My Favorites"
 msgstr "Мои любимые"
 
 msgid "Enter data into your account (blue key)."
-msgstr "Введите данные в свой аккаунт (ключ)."
-
-msgid "Geolocation IP:"
-msgstr "Географическое положение IP:"
-
-msgid "TV channels"
-msgstr "Телеканалы"
-
-msgid "Radio stations"
-msgstr "Радиостанции"
+msgstr "Введите данные Вашего аккаунта (синяя клавиша)."
 
 msgid "Latest series"
 msgstr "Последние серии"
 
 msgid "bitrate: worst"
-msgstr "Битрейт: наихудший"
+msgstr "битрейт: наихудший"
 
 msgid "bitrate: 200p"
-msgstr "Битрейт: 200p"
+msgstr "битрейт: 200p"
 
 msgid "bitrate: 450p"
-msgstr "Битрейт: 450p"
+msgstr "битрейт: 450p"
 
 msgid "bitrate: 900"
-msgstr "Битрейт: 900"
+msgstr "битрейт: 900"
 
 msgid "bitrate: 1800"
-msgstr "Битрейт: 1800"
+msgstr "битрейт: 1800"
 
 msgid "bitrate: the best"
-msgstr "Битрейт: лучший"
+msgstr "битрейт: лучший"
 
 msgid "The default video format:"
-msgstr "Формат видео по умолчанию:"
+msgstr "Видеоформат по умолчанию:"
 
 msgid "Use the default video format:"
-msgstr "Используйте формат видео по умолчанию:"
+msgstr "Использовать видеоформат по умолчанию:"
 
 msgid "Ekstraklasa use a proxy?"
 msgstr "Использовать прокси-сервер экстракласса?"
 
 msgid "Goals"
-msgstr "Место назначения"
+msgstr "Цели"
 
 msgid "Shortcuts"
 msgstr "Ярлыки"
 
 msgid "Gateway queue"
-msgstr "Очередной шлюз"
+msgstr "Очередь шлюза"
 
 msgid "Warehouse"
-msgstr "Склад"
+msgstr "Хранить"
 
 msgid "The most relevant"
 msgstr "Наиболее актуальное"
@@ -3251,29 +5512,26 @@
 msgid "Popularity"
 msgstr "Популярность"
 
-msgid "Items"
-msgstr "Предметы"
-
 msgid "Recent Items (Popular)"
-msgstr "Последние товары (Популярный)"
+msgstr "Последние пункты (популярные)"
 
 msgid "Recent Items (All)"
-msgstr "Последние товары (Все)"
+msgstr "Последние пункты (все)"
 
 msgid "Feature Potential Items"
-msgstr "Функция потенциальных товары"
+msgstr "Потенциально последние пункты"
 
 msgid "Top Items (Today)"
-msgstr "Лучшие товары (Cегодня)"
+msgstr "Лучшие пункты (сегодня)"
 
 msgid "Top Items (This Week)"
-msgstr "Лучшие товары (На этой неделе)"
+msgstr "Лучшие пункты (на этой неделе)"
 
 msgid "Top Items (This Month)"
-msgstr "Лучшие товары (Этот месяц)"
+msgstr "Лучшие пункты (в этом месяце)"
 
 msgid "Top Items (All time)"
-msgstr "Лучшие товары (Все время)"
+msgstr "Лучшие товары (за всё время)"
 
 msgid "Yoursay"
 msgstr "Ты говоришь"
@@ -3282,40 +5540,31 @@
 msgstr "Текущие"
 
 msgid "Must See"
-msgstr "Должен видеть"
+msgstr "Нужно увидеть"
 
 msgid "Syria"
 msgstr "Сирия"
 
 msgid "Entertainment"
-msgstr "Развлекательная программа"
+msgstr "Развлекательные"
 
 msgid "Browse Channels"
-msgstr "Просмотр каналов"
+msgstr "Обзор каналов"
 
 msgid "By default, sort by:"
-msgstr "По умолчанию, сортировать по:"
+msgstr "По умолчанию сортировать по:"
 
 msgid "***Any***"
 msgstr "***Любые***"
 
 msgid "most viewed"
-msgstr "Наиболее просматриваемые"
-
-msgid "longest"
-msgstr "Самый длинный"
+msgstr "наиболее просматриваемые"
 
 msgid "top rated"
-msgstr "Самые популярные"
-
-msgid "random"
-msgstr "Случайный"
-
-msgid "Lastest"
-msgstr "Последний"
+msgstr "самые популярные"
 
 msgid "Use a proxy"
-msgstr "Используйте прокси"
+msgstr "Использовать прокси"
 
 msgid "Films"
 msgstr "Фильмы"
@@ -3327,34 +5576,34 @@
 msgstr "Россказни"
 
 msgid "preferred streaming protocol"
-msgstr "Предпочтительным протоколом потоковой"
+msgstr "предпочтительный протокол потока"
 
 msgid "Age viewer:"
 msgstr "Возраст просмотра:"
 
 msgid "Hide Video in the list above the age of the viewer:"
-msgstr "Скрыть видео в списке выше возраста зрителя:"
+msgstr "Скрыть видео в списке свыше возраста зрителя:"
 
 msgid "TOP100 Always"
-msgstr "Топ 100 Всегда"
+msgstr "Топ 100 всегда"
 
 msgid "TOP100 Of the week"
-msgstr "Топ 100 Недели"
+msgstr "Топ 100 недели"
 
 msgid "TOP100 Month"
-msgstr "Топ 100 Месяц"
+msgstr "Топ 100 месяца"
 
 msgid "MOB: low"
-msgstr "MOB: Низкий"
+msgstr "MOB: низкий"
 
 msgid "SD: standard"
-msgstr "SD: Стандарт"
+msgstr "SD: стандартный"
 
 msgid "HD: high"
-msgstr "HD: Высокая"
+msgstr "HD: высокий"
 
 msgid "FHD: very high"
-msgstr "FHD: Очень высоко"
+msgstr "FHD: очень высокий"
 
 msgid "Popular movies"
 msgstr "Популярные фильмы"
@@ -3363,7 +5612,7 @@
 msgstr "Темы фильмов"
 
 msgid "Editorial"
-msgstr "Редакционный"
+msgstr "Редакционные"
 
 msgid "Action RPG"
 msgstr "Действие RPG"
@@ -3378,65 +5627,56 @@
 msgstr "Тип соединения:"
 
 msgid "Very high"
-msgstr "Очень высоко"
+msgstr "Очень высокое"
 
 msgid "Best"
-msgstr "Лучший"
+msgstr "Лучшие"
 
 msgid "Worst"
-msgstr "Наихудший"
+msgstr "Наихудшее"
 
 msgid "Very low"
-msgstr "Очень низкий"
+msgstr "Очень низкое"
 
 msgid "Average"
-msgstr "В среднем"
+msgstr "Среднее"
 
 msgid "TVN Introduce yourself as:"
-msgstr "TVN Представьте себя:"
+msgstr "TVN представляет себя как:"
 
 msgid "TVN use a proxy?"
-msgstr "TVN использовать прокси-сервер?"
+msgstr "Использовать прокси-сервер для TVN?"
 
 msgid "No name"
 msgstr "Без имени"
 
 msgid "Audience zone"
-msgstr "Аудитория зона"
+msgstr "Аудиторная зона"
 
 msgid "  password:"
-msgstr "  Пароль:"
+msgstr " Пароль:"
 
 msgid "The default video format"
-msgstr "Формат видео по умолчанию"
+msgstr "Видеоформат по умолчанию"
 
 msgid "Use Proxy?"
-msgstr "Используй прокси?"
+msgstr "Использовать прокси?"
 
 msgid "More as next page"
-msgstr "Подробнее в следующем странице"
+msgstr "Подробнее на следующей странице"
 
 msgid ":for"
-msgstr "Для"
-
-msgid "Programs"
-msgstr "Программы"
+msgstr ":для"
 
 msgid "Information & journalism"
 msgstr "Информация и журналистика"
 
 msgid "Information Services"
-msgstr "Информационные услуги"
+msgstr "Информационные каналы"
 
 msgid "Journalism"
 msgstr "Журналистика"
 
-msgid "Program A-Z"
-msgstr "Программа A-Z"
-
-msgid "Prefered format"
-msgstr "Предпочтительный формат"
-
 msgid "SORT"
 msgstr "СОРТИРОВАТЬ"
 
@@ -3444,911 +5684,782 @@
 msgstr "ПОСЛЕДНИЕ ВИДЕО"
 
 msgid "SHOW REPLAY"
-msgstr "ИГРАТЬ ШОУ"
+msgstr "ИГРОВЫЕ ШОУ"
 
 msgid "WWE NETWORK"
-msgstr "WWE СЕТЬ"
+msgstr "СЕТЬ WWE"
 
 msgid "SMACKDOWN"
-msgstr "ОБРУШИТЬ"
+msgstr "ОБРУШЕНИЕ"
 
 msgid "LUCHA UNDERGROUND"
-msgstr "Подпольный бойцовский"
+msgstr "ПОДПОЛЬНЫЕ БОЙЦОВСКИЕ"
 
 msgid "DEFAULT"
 msgstr "ПО УМОЛЧАНИЮ"
 
-msgid "VIEWS"
-msgstr "ПРОСМОТРЫ"
-
-msgid "DATE"
-msgstr "ДАТА"
-
 msgid "format: best"
-msgstr "Формат: лучший"
+msgstr "формат: лучший"
 
 msgid "format: worst"
-msgstr "Формат: наихудший"
+msgstr "формат: наихудший"
 
 msgid "format: 720"
-msgstr "Формат: 720"
+msgstr "формат: 720"
 
 msgid "format: 240p"
-msgstr "Формат: 240p"
+msgstr "формат: 240p"
 
 msgid "format: 360p"
-msgstr "Формат: 360p"
+msgstr "формат: 360p"
 
 msgid "format: 480p"
-msgstr "Формат: 480p"
+msgstr "формат: 480p"
 
 msgid "Cannot find player content"
-msgstr "Не можете найти содержание плеер"
+msgstr "Невозможно найти плеер контента"
 
 msgid "Sort movies: "
 msgstr "Сортировать фильмы: "
 
 msgid "last added"
-msgstr "Последние добавленные"
+msgstr "последние добавленные"
 
 msgid "last watched"
-msgstr "Последнее наблюдал"
-
-msgid "views"
-msgstr "Просмотры"
+msgstr "последние просмотренные"
 
 msgid "favorite"
-msgstr "Любимый"
+msgstr "любимые"
 
 msgid "TOP100 Week"
-msgstr "TOP100 Неделю"
+msgstr "TOP 100 за неделю"
 
 msgid "TOP100 of the Month"
-msgstr "TOP100 месяца"
+msgstr "TOP 100 за месяц"
 
 msgid "Iplex use a proxy?"
-msgstr "Iplex использовать прокси-сервер?"
+msgstr "Использовать прокси-сервер для Iplex?"
 
 msgid "WrestlingNet._listVideos - no markers [m1][m2] found!"
-msgstr "WrestlingNet._listВидео - без маркеров [м1] [м2] найден!"
+msgstr "WrestlingNet._listВидео: не найдены маркеры [м1][м2]!"
 
 msgid ""
-"Please visit '%s' from using web-browser form the PC. If links are available "
-"please report this problem.\n"
+"Please visit '%s' from using web-browser form the PC. If links are available please report this problem.\n"
 "Email: samsamsam@o2.pl"
 msgstr ""
-"Пожалуйста, посетите '%s' от использования веб-браузера образуют ПК. Если "
-"ссылки доступны, пожалуйста, сообщите об этой проблеме.\n"
+"Пожалуйста, посетите '%s', используя web-браузер ПК. Если ссылки доступны, пожалуйста, сообщите об этой проблеме.\n"
 "E-mail: samsamsam@o2.pl"
 
-msgid ""
-"Last error: \"Videomega has blocked your IP for some time. Please retry this "
-"link after some time.\""
-msgstr ""
-"Последняя ошибка: \"Videomega заблокировал ваш IP в течение некоторого "
-"времени. Пожалуйста, повторите попытку открыть эту ссылку после некоторого "
-"времени.\""
+msgid "Last error: \"Videomega has blocked your IP for some time. Please retry this link after some time.\""
+msgstr "Последняя ошибка: \"Videomega заблокировал ваш IP на некоторое время. Пожалуйста, повторите попытку открыть эту ссылку через некоторое время.\""
 
 msgid "Newest added"
-msgstr "Последним добавил"
+msgstr "Последние добавленные"
 
 msgid "Oldest added"
-msgstr "Старые добавил"
+msgstr "Добавленные давно"
 
 msgid "Newest year"
-msgstr "Новый год"
+msgstr "Новейшие за год"
 
 msgid "Oldest year"
-msgstr "Старые год"
+msgstr "Старые за год"
 
 msgid "Best rating"
-msgstr "СМС голосование"
+msgstr "СМС-голосование"
 
 msgid "Worse rating"
-msgstr "Хуже рейтинг"
-
-msgid "Most viewed"
-msgstr "Наиболее просматриваемые"
+msgstr "Худшие по рейтингу"
 
 msgid "Less viewed"
-msgstr "Меньше просматриваемые"
-
-msgid "Login failed."
-msgstr "Ошибка входа."
-
-msgid ""
-"This host requires registration. \n"
-"Please fill your login and password in the host configuration. Available "
-"under blue button."
-msgstr ""
-"Этот узел требует регистрации. \n"
-"Заполните свой логин и пароль в конфигурации хост. Доступен под синюю кнопку."
-
-msgid "Default video quality"
-msgstr "По умолчанию качество видео"
-
-msgid "Use default video quality"
-msgstr "Использование качество видео по умолчанию"
-
-msgid "Icon type"
-msgstr "Тип иконка"
+msgstr "Менее просматриваемые"
 
 msgid "The problem with user logon \"%s\".\n"
 msgstr "Проблема с входом пользователя \"%s\".\n"
 
-msgid "Randomize a playlist"
-msgstr "Функция случайного воспроизведения"
-
 msgid "New Releases"
 msgstr "Новые релизы"
 
 msgid "Categorization:"
-msgstr "Категоризации:"
-
-msgid "http://online-kinopokaz.ru/"
-msgstr "Кинопоказ"
-
-msgid "Labels"
-msgstr "Этикетки"
+msgstr "Категоризация:"
 
 msgid "Latest Update"
 msgstr "Последнее обновление"
 
 msgid "Anime List"
-msgstr "Аниме Список"
+msgstr "Список аниме"
 
 msgid "Create Date"
 msgstr "Дата создания"
 
-msgid "Top Movies"
-msgstr "Лучшие фильмы"
-
 msgid "New HD Videos"
-msgstr "Новые HD Видео"
+msgstr "Новые HD-видео"
 
 msgid "Use proxy gateway"
 msgstr "Использовать прокси-шлюз"
 
 msgid "show iframe for audio item"
-msgstr "Включить заставку в режиме ауди"
+msgstr "включить заставку в аудиорежиме"
 
 msgid "Iframe file"
-msgstr "Расположение заставки"
+msgstr "Файл заставки"
 
 msgid "Clear iframe file"
-msgstr "Расположение очистить заставки"
-
-msgid "Total size: "
-msgstr "Размер файла: "
-
-msgid "Show file size"
-msgstr "Показать размер файла"
+msgstr "Очистить файл заставки"
 
-msgid "All Leagues"
-msgstr "Все Лиги"
-
-msgid "Previous Seasons"
-msgstr "Предыдущие сезоны"
-
-msgid "Goal Of The Month"
-msgstr "Игры месяца"
-
-msgid "Promoted"
-msgstr "Повышен"
-
-msgid "Catrtoon list"
-msgstr "Список мультфильмов"
-
-msgid "New cartoon"
-msgstr "Новый мультфильм"
-
-msgid "Sort by alphabet"
-msgstr "Сортировка по алфавиту"
+msgid "Mounted on %s"
+msgstr "Смонтировано на %s"
 
-msgid "Sort by popularity"
-msgstr "Сортировать по популярности"
+msgid "Mangas"
+msgstr "Мангас"
 
-msgid "Latest update"
-msgstr "Последнее обновление"
+msgid "Recently Added"
+msgstr "Недавно добавленные"
 
-msgid "Remove disabled services"
-msgstr "Удалить сервисы которые не работают"
+msgid "SovDub"
+msgstr "Совесткий дубляж"
 
-msgid ""
-"Some changes will be applied only after plugin update.\n"
-"Do you want to perform update now?"
-msgstr ""
-"Некоторые изменения будут применены только после обновления плагина.\n"
-"Вы хотите, чтобы выполнить обновление?"
+msgid "Foreign films"
+msgstr "Зарубежные фильмы"
 
-msgid "Make directory [%s]"
-msgstr "Создать каталог [%s]"
+msgid "Major rankings"
+msgstr "Основные рейтинги"
 
 msgid ""
-"Can not get mount points - cmd mount failed.\n"
-"Return code[%s].\n"
-"Return data[%s]."
+"Fatal Error!\n"
+"Your Openssl is not supported."
 msgstr ""
-"Невозможно получить точки монтирования - cmd монтирования неудачная.\n"
-"Код возврата[%s].\n"
-"Возврат данных[%s]."
+"Фатальная ошибка!\n"
+"Ваш Openssl не поддерживается."
 
 msgid ""
-"Mount ISO file [%s] on [%s] failed.\n"
-"Return code[%s].\n"
-"Return data[%s]."
+"OpenSSL in your image is not supported.\n"
+"Some functions may not work correctly."
 msgstr ""
-"Монтировать ISO файл [%s] на [%s] не смогли.\n"
-"Код возврата[%s].\n"
-"Возврат данных[%s]."
-
-msgid "Mounted on %s"
-msgstr "Прикреплено к %s"
-
-msgid "Umount iso file"
-msgstr "Размонтирование файл iso"
-
-msgid "Set file name"
-msgstr "Установить имя файла"
-
-msgid "File \"%s\" already exists!"
-msgstr "Файл \"%s\" уже существует!"
+"OpenSSL в изображении не поддерживается.\n"
+"Некоторые функции могут работать некорректно."
 
-msgid "Mangas"
-msgstr "Мангас"
+msgid "bestfit"
+msgstr "оптимальное"
 
-msgid "By Year"
-msgstr "По годам"
+msgid "panscan"
+msgstr "панорама"
 
-msgid "Recently Added"
-msgstr "Недавно добавленный"
+msgid "letterbox"
+msgstr "letterbox"
 
-msgid "New"
-msgstr "Новый"
+msgid "nonlinear"
+msgstr "без чёрных полос"
 
-msgid "Home"
-msgstr "Главная"
+msgid "Most Viewed"
+msgstr "Наиболее просматриваемые"
 
-msgid "Season"
-msgstr "Время года"
+msgid "Windows Media Video 9 Screen decoder"
+msgstr "Экранный декодер Windows Media Video 9"
 
-msgid ""
-"Plugin can be run on one of the following platforms: sh4, mipsel, i686, "
-"armv7, armv5t."
-msgstr ""
-"Плагин может работать на одной из следующих платформ: sh4, mipsel, i686, "
-"armv7, armv5t."
+msgid "Get free credits"
+msgstr "Получить кредиты бесплатно"
 
-msgid "SovDub"
-msgstr "Совесткий дубляж"
+msgid "Fail to get \"%s\""
+msgstr "Не удалось получить \"%s\""
 
-msgid "Foreign films"
-msgstr "Зарубежные фильмы"
+msgid "file://"
+msgstr "файл://"
 
-msgid "Major rankings"
-msgstr "Основные рейтинги"
+msgid "Top Cartoons"
+msgstr "Лучшие мультики"
 
-msgid "By year"
-msgstr "По годам"
+msgid "Cartoon List"
+msgstr "Список мультфильмов"
 
-msgid "Watch Trailer"
-msgstr "Смотреть трейлер"
+msgid "only Anime"
+msgstr "только аниме"
 
-msgid "[Trailer]"
-msgstr "[Трейлер]"
+msgid "only Cartoons"
+msgstr "только мультфильмы"
 
-msgid "Detection of the OpenSSL 1.0.0 version."
-msgstr "Обнаружение версии OpenSSL 1.0.0."
+msgid "json load error 2"
+msgstr "Ошибка 2 при загрузке json"
 
 msgid ""
-"Fatal Error!\n"
-"Openssl could not be found. Please install it and retry."
+"Download subtitles error.\n"
+"wget error code[%d]."
 msgstr ""
-"Фатальная ошибка!\n"
-"Openssl не может быть найден. Пожалуйста, установите его и повторите."
+"Ошибка загрузки субтитров.\n"
+"Код ошибки wget[%d]."
 
-msgid ""
-"Fatal Error!\n"
-"Your Openssl is not supported."
-msgstr ""
-"Фатальная ошибка!\n"
-"Ваш Openssl не поддерживается."
+msgid "unzip error - please check if utitlity unzip is available"
+msgstr "Ошибка unzip: пожалуйста, проверьте доступность утилиты распаковки"
 
-msgid ""
-"OpenSSL in your image is not supported.\n"
-"Some functions may not work correctly."
-msgstr ""
-"OpenSSL в изображении не поддерживается.\n"
-"Некоторые функции могут работать некорректно."
+msgid "write error"
+msgstr "Ошибка записи"
 
-msgid "Install into the \"%s\"."
-msgstr "Установить в \"%s\"."
+msgid "decode error"
+msgstr "Ошибка декодирования"
 
-msgid "Decode file [%s] problem."
-msgstr "Раскодировать файл [%s] проблема."
+msgid "read error"
+msgstr "Ошибка чтения"
 
-msgid "Latest movies"
-msgstr "Последние фильмы"
+msgid "gzip error"
+msgstr "Ошибка gzip"
 
-msgid "Movies genres"
-msgstr "Фильмы жанры"
+msgid "OpenSubtitles.org"
+msgstr "OpenSubtitles.org"
 
-msgid "Movies by year"
-msgstr "Фильмы по годам"
+msgid "Napisy24.pl"
+msgstr "Napisy24.pl"
 
-msgid "TV Series"
-msgstr "Телесериал"
+msgid "Titlovi.com"
+msgstr "Titlovi.com"
 
-msgid "Series list"
-msgstr "Список серии"
+msgid "Youtube.com"
+msgstr "Youtube.com"
 
-msgid "Popular Episodes"
-msgstr "Популярные эпизоды"
+msgid "Subscene.com"
+msgstr "Subscene.com"
 
-msgid "Newest Episodes"
-msgstr "Новые эпизоды"
+msgid "If available you can choose other source."
+msgstr "Если доступно, Вы можете выбрать другой источник."
 
-msgid "All A-Z"
-msgstr "Все A-Z"
+msgid "Use UA proxy server to get file lists"
+msgstr "Использовать UA прокси-сервер для получения списков файлов"
 
-msgid "From E2 settings"
-msgstr "Настройки E2"
+msgid "IPTVPlayer - Start"
+msgstr "Запуск IPTVPlayer"
 
-msgid "bestfit"
-msgstr "Оптимальное"
+msgid "Info..."
+msgstr "Информация."
 
-msgid "panscan"
-msgstr "Панорама"
+msgid "Global sorting :"
+msgstr "Глобальная сортировка:"
 
-msgid "letterbox"
-msgstr "Режим ящика"
+msgid "External player use software decoder for the AC3"
+msgstr "Применить внешний декодер AC3 для External player"
 
-msgid "nonlinear"
-msgstr "Без чёрных полос"
+msgid "External player use software decoder for the EAC3"
+msgstr "Применить внешний декодер EAC3 для External player"
 
-msgid "Cartoons"
-msgstr "Мультсериалы"
+msgid "External player use software decoder for the MP3"
+msgstr "Применить внешний декодер MP3 для External player"
 
-msgid "Genre selection"
-msgstr "Выбор жанра"
+msgid "By title"
+msgstr "По названию"
 
-msgid "By country"
-msgstr "По странам"
+msgid "Dokumentalne"
+msgstr "Документальные"
 
-msgid "Translations"
-msgstr "Переводы"
+msgid "Dla dzieci"
+msgstr "Для детей"
 
-msgid "Collections"
-msgstr "Подборки"
+msgid "The problem with user logon \"%s\"."
+msgstr "Проблема с входом пользователя \"%s\"."
 
 msgid ""
-"Link is not supported by the gstplayer. Please use the extelayer3 if "
-"available."
+"Access to this service requires login.\n"
+"Please register on the site \"%s\" and then put your e-mail and password in the host configuration under blue button."
 msgstr ""
-"Ссылка не поддерживается проигрывателем gstplayer. Пожалуйста, используйте "
-"extelayer3 если таковая имеется."
+"Для доступа к этой услуге требуется вход в систему.\n"
+"Пожалуйста, зарегистрируйтесь на сайте \"%s\", после чего введите свою электронную почту и пароль в конфигурацию хоста по голубой кнопке."
 
-msgid "Fatal error: consoleWrite failed!"
-msgstr "Фатальная ошибка: Консоль записи произошел сбой!"
+msgid "Login mode"
+msgstr "Режим входа"
 
-msgid "Most Viewed"
-msgstr "Наиболее просматриваемые"
+msgid "Secure cookie name"
+msgstr "Безопасное имя файла cookie"
 
-msgid "Windows Media Video 9 Screen decoder"
-msgstr "Windows Медиа Видео 9 Экран декодер"
+msgid "Secure cookie value"
+msgstr "Безопасное значение cookie"
 
-msgid "Sort alphabetically"
-msgstr "Сортировать по алфавиту"
+msgid "Name"
+msgstr "Имя"
 
-msgid "Fail to get captcha data."
-msgstr "Не удалось получить данные."
+msgid "This service requires a new Enigma2 image with a Python version %s or later."
+msgstr "Этот сервис требует нового имиджа enigma2 с версией Python %s или более поздней версией."
 
-msgid "Send"
-msgstr "Послать"
+msgid "Advance (cookie item)"
+msgstr "Авансовый (элемент cookie)"
 
-msgid "Answer"
-msgstr "Ответ"
+msgid "Simple (e-mail, password)"
+msgstr "Простой (адрес электронной почты, пароль)"
 
-msgid "Wrong answer."
-msgstr "Неверный ответ."
+msgid "iMPACT Wrestling"
+msgstr "борьба iMPACT"
 
-msgid "Get free credits"
-msgstr "Получить кредиты бесплатно"
+msgid "Indy"
+msgstr "Инди"
 
-msgid "Fail to get \"%s\""
-msgstr "Не удалось получить \"%s\""
+msgid "Cinemamovies"
+msgstr "Фильмы в кинотеатрах"
 
-msgid "Subtitles conversion to UTF-8 failed."
-msgstr "Субтитры преобразование в UTF-8 не удалось."
+msgid "Najnowsze"
+msgstr "Последний"
 
-msgid "Simplify the title and try again."
-msgstr "Упростить название и повторите попытку."
+msgid "Popularność"
+msgstr "Популярность"
 
-msgid "Ukrainian proxy server url"
-msgstr "Адрес украинского прокси-сервер"
+msgid "Najlepiej oceniane"
+msgstr "Лучшие по рейтингу"
 
-msgid "file://"
-msgstr "путь://"
+msgid "Sortuj wyniki wyszukiwania po:"
+msgstr "Сортировать результаты поиска по:"
 
-msgid "An error occurred while writing into: %s"
-msgstr "Произошла ошибка при записи в: %s"
+msgid "Alfabetycznie"
+msgstr "По алфавиту"
 
-msgid "Top Cartoons"
-msgstr "Лучшие Мультики"
+msgid "Stacje Radiowe"
+msgstr "Радиостанции"
 
-msgid "Anime"
-msgstr "Аниме"
+msgid "Kanały Muzyczne"
+msgstr "Музыкальные каналы"
 
-msgid "Cartoon List"
-msgstr "Список мультфильмов"
+msgid "Sety Muzyczne"
+msgstr "Sety Muzyczne"
 
-msgid "only Anime"
-msgstr "Только аниме"
+msgid "Radia RMFON"
+msgstr "Радио RMFON"
 
-msgid "only Cartoons"
-msgstr "Только мультфильм"
+msgid "Radia ZET"
+msgstr "Радио ZET"
 
-msgid "Views"
-msgstr "Просмотры"
+msgid "Radia Lokalne"
+msgstr "Местное радио"
 
-msgid "Preview"
-msgstr "Предварительный просмотр"
+msgid "Wszystkie"
+msgstr "Все"
 
-msgid ""
-"It seems that the subtitle's provider \"%s\" has crashed. Do you want to "
-"report this problem?"
-msgstr ""
-"Кажется, что поставщик субтитры \"%s\" разбился. Вы хотите, чтобы сообщить о "
-"проблеме?"
+msgid "Nastroje"
+msgstr "Капризы"
 
-msgid "Subtitles \"%s\" downloaded correctly."
-msgstr "Субтитры \"%s\" скачал правильно."
+msgid "Programy onetu"
+msgstr "Программы Onet"
 
-msgid "Do you want to finish?"
-msgstr "Вы хотите, включить субтитры?"
+msgid "Programy TV"
+msgstr "ТВ программы"
 
-msgid "Season %s"
-msgstr "Время года %s"
+msgid "Brak nazwy"
+msgstr "Нет имени"
 
-msgid "Failed to create directory \"%s\"."
-msgstr "Не удалось создать каталог \"%s\"."
+msgid ", odcinek "
+msgstr ", эпизод "
 
-msgid "Unzip error code[%s]."
-msgstr "Распакуйте код ошибки[%s]."
+msgid ", sezon "
+msgstr ", сезон "
 
-msgid "It seems that unzip utility is not installed."
-msgstr "Создается впечатление, что утилита разархивировать не установлена."
+msgid " (planowany)"
+msgstr " (запланированные)"
 
-msgid "Wrong format of zip archive."
-msgstr "Неправильный формат почтового архива."
+msgid "Następna strona"
+msgstr "Следующая страница"
 
-msgid "Unrar error code[%s]."
-msgstr "Unrar код ошибки[%s]."
+msgid "Używaj danych z pamięci podręcznej:"
+msgstr "Использовать данные кеша:"
 
-msgid "It seems that unrar utility is not installed."
-msgstr "Кажется, что unrar утилита не установлена."
+msgid "Domyślny format video:"
+msgstr "Формат видео по умолчанию:"
 
-msgid "Wrong format of rar archive."
-msgstr "Неправильный формат rar архива."
+msgid "Używaj domyślnego format video:"
+msgstr "Используйте формат видео по умолчанию:"
 
-msgid "Failed to write the file \"%s\"."
-msgstr "Не удалось записать файл \"%s\"."
+#, python-format
+msgid "%s"
+msgstr "%s"
 
-msgid "Failed to convert the file \"%s\" to UTF-8."
-msgstr "Не удалось преобразовать файлы \"%s\" в UTF-8."
+msgid "[en] External subtitles download - how to"
+msgstr "[en] Как скачать внешние субтитры"
 
-msgid "Failed to open the file \"%s\"."
-msgstr "Не удалось открыть файл \"%s\"."
+msgid "[pl] External subtitles download - how to"
+msgstr "[pl] Как скачать внешние субтитры"
 
-msgid "Login failed!"
-msgstr "Ошибка входа!"
+msgid "[dash] "
+msgstr "[дефис] "
 
-msgid ""
-"Error message: \"%s\".\n"
-"Error code: \"%s\"."
-msgstr ""
-"Сообщение об ошибке: \"%s\".\n"
-"Код ошибки: \"%s\"."
+msgid "You can try to use WebProxy as workaround, check options under blue button."
+msgstr "Вы можете попробовать использовать Веб-прокси в качестве обходного пути. Проверка параметров по синей кнопке."
 
-msgid "Get languages failed!"
-msgstr "Получить языки не удалось!"
+msgid "--Wszystkie--"
+msgstr "-- Все --"
 
-msgid "Failed to download subtitle."
-msgstr "Не удалось загрузить субтитры."
+msgid "You can disable HTTPS certificates validation in the IPTVPlayer configuration to suppress this problem."
+msgstr "Вы можете отключить проверку сертификатов HTTPS в конфигурации IPTVPlayer, чтобы устранить эту проблему."
 
-msgid "Failed to gzip."
-msgstr "Не удалось gzip."
+msgid "You can enable PyCurl in the IPTVPlayer configuration to fix this problem."
+msgstr "Вы можете включить PyCurl в конфигурации IPTVPlayer, чтобы устранить эту проблему."
 
-msgid "Failed to decode to UTF-8."
-msgstr "Не удалось декодировать в UTF-8."
+msgid "Please report this problem to the developer iptvplayere2@gmail.com."
+msgstr "Сообщите об этой проблеме разработчику iptvplayere2@gmail.com."
 
-msgid "Failed to write file \"%s\"."
-msgstr "Не удалось записать файл \"%s\"."
+msgid "You can install PyCurl package from http://www.iptvplayer.gitlab.io/ to fix this problem."
+msgstr "Пакет PyCurl можно установить с http://www.iptvplayer.gitlab.io/, чтобы устранить эту проблему."
 
-msgid "json load error 2"
-msgstr "Ошибка загрузки 2 json"
+#, python-format
+msgid "Użytkownika \"%s\" zalogowany poprawnie. Brak premium!"
+msgstr "Пользователь \"%s\" зарегистрирован правильно. Никакого премиума!"
 
-msgid ""
-"Download subtitles error.\n"
-"wget error code[%d]."
-msgstr ""
-"Ошибка скачать субтитры.\n"
-"wget код ошибки[%d]."
+#, python-format
+msgid "Problem z zalogowanie użytkownika \"%s\". Sprawdź dane do logowania w konfiguracji hosta."
+msgstr "Проблема с протоколированием пользователя \"%s\". Проверьте данные входа в конфигурацию хоста."
 
-msgid "unzip error - please check if utitlity unzip is available"
-msgstr ""
-"распакуйте ошибка - пожалуйста, проверьте, если утилита распакуйте доступна"
+msgid "Login on https://1fichier.com/ failed."
+msgstr "Вход по https://1fichier.com/ не выполнен."
 
-msgid "write error"
-msgstr "ошибка записи"
+msgid "https://openload.co/ link extractor error."
+msgstr "Ошибка ошибка выделения канала https://openload.co/."
 
-msgid "decode error"
-msgstr "ошибка декодирования"
+#, python-format
+msgid "Problem z zalogowanie użytkownika \"%s. Sprawdź dane do logowania w konfiguracji hosta.\""
+msgstr "Проблема с протоколированием пользователя \"%s. Проверьте данные для входа в конфигурацию хоста.\""
 
-msgid "read error"
-msgstr "ошибка чтения"
+#, python-format
+msgid "Could not find JS function %r"
+msgstr "Не удалось найти  JS-функцию %r"
 
-msgid "gzip error"
-msgstr "ошибка gzip"
+msgid "Preferred slanguage"
+msgstr "Предпочтительный язык"
 
-msgid "_checkStatus except error"
-msgstr "Проверка статуса, за исключением ошибок"
+#, python-format
+msgid ""
+"OpenSSL in your image has different library names then these used by IPTVPlayer.\n"
+"There is need to create following symlinks:\n"
+"%s\n"
+"to be able to install binary components from IPTVPlayer server.\n"
+"Do you want to proceed?"
+msgstr ""
+"OpenSSL на Вашем изображении имеет разные имена библиотек, а они используются IPTVPlayer.\n"
+"Необходимо создать следующие символические ссылки:\n"
+"%s\n"
+", чтобы иметь возможность устанавливать бинарные компоненты с сервера IPTVPlayer.\n"
+"Вы хотите продолжить?"
 
-msgid "Confirm the title of the movie"
-msgstr "Подтвердите название фильма"
+msgid "Configure E2iPlayer"
+msgstr "Настройки E2iPlayer"
 
-msgid "Searching subtitles for \"%s\""
-msgstr "Поиск субтитры для \"%s\""
+msgid "Use black iframe at normal video playback finish"
+msgstr "Использовать черный iframe при нормальном воспроизведении видео"
 
-msgid "Select subtitles provider:"
-msgstr "Выбор провайдера субтитров:"
+msgid "Create summary screen"
+msgstr "Создать итоговый экран"
 
-msgid "OpenSubtitles.org"
-msgstr "Открытые субтитры"
+msgid "Please visit http://www.iptvplayer.gitlab.io/captcha.html to learn how to redirect this task to the external device."
+msgstr "Посетите http://www.iptvplayer.gitlab.io/captcha.html, чтобы узнать, как перенаправить эту задачу на внешнее устройство."
 
-msgid "Napisy24.pl"
-msgstr "Субтитры24"
+msgid "My JDownloader e-mail"
+msgstr "Моя электронная почта JDownloader"
 
-msgid "Titlovi.com"
-msgstr "Титлы"
+msgid "My JDownloader password"
+msgstr "Мой пароль JDownloader"
 
-msgid "Youtube.com"
-msgstr "Youtube"
+msgid "My JDownloader device name"
+msgstr "Имя устройства JDownloader"
 
-msgid "Subscene.com"
-msgstr "Subscene"
+msgid "Info Banner clock format"
+msgstr "Формат инфобанера часов"
 
-msgid "If available you can choose other source."
-msgstr "При наличии вы можете выбрать другой источник."
+msgid "Info Banner timeout"
+msgstr "Время ожидания инфобанера"
 
-msgid "Reverse a playlist"
-msgstr "Повторить плейлист"
+msgid "    Allow suggestions"
+msgstr "    Разрешить предложения"
 
-msgid "Use UA proxy server to get file lists"
-msgstr "С помощью UA прокси-сервер, чтобы получить списки файлов"
+msgid "Such as downloading and installation additional binaries"
+msgstr "Таких, как загрузка и установка дополнительных бинарных модулей"
 
-msgid "any"
-msgstr "Любые"
+msgid "Teletext decoder"
+msgstr "Декодер телетекста"
 
-msgid "C subtitle parser"
-msgstr "C парсер субтитров"
+msgid "Testers: "
+msgstr "Тестеры: "
 
-msgid "It improves subtitles parsing.\n"
-msgstr "Он улучшает субтитры синтаксического анализа.\n"
+msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player based on the ffmpeg and libeplayer."
+msgstr "Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера на основе FFmpeg и libeplayer."
 
-msgid "Use subtitles parser extension if available"
-msgstr "Использовать субтитры расширения парсер, если доступно"
+msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player."
+msgstr "Утилита \"%s\" используется IPTV Плеером в качестве внешнего видеоплеера."
 
-msgid "Copy post installed binaries."
-msgstr "Копировать после установки двоичных файлов."
+msgid "The current host crashed"
+msgstr "Данный хост не работает"
 
-msgid "IPTVPlayer - Start"
-msgstr "IPTVПлеер - Запуск"
+msgid "The default video quality:"
+msgstr "Качество видео по умолчанию:"
 
-msgid "Info..."
-msgstr "Информация"
+#, python-format
+msgid "The \"%s\" utility is used by the IPTVPlayer to buffering and downloading [%s] links."
+msgstr "Утилита \"%s\" используется IPTVPlayer-ом для кэширования и загрузки ссылок [%s]."
+
+#, python-format
+msgid "The \"%s\" utility is used by the IPTVPlayer to determine the encoding of the text."
+msgstr "Утилита \"%s\" используется IPTVPlayer-ом для определения кодировки текста."
 
-msgid "Sort Myfreecams :"
-msgstr "Сортировка Myfreecams :"
+msgid "The problem with obtaining the gateway proxy!"
+msgstr "Проблема с получением шлюза прокси!"
 
-msgid "Global search :"
-msgstr "Глобальный поиск :"
+msgid "The problem with the logged-in user \"%s\". Check your login details in the host configuration."
+msgstr "Проблема с авторизирацией пользователя \"%s\". Проверьте свои регистрационные данные в конфигурации хоста."
 
-msgid "Global sorting :"
-msgstr "Глобальная сортировка :"
+msgid "The problem with the user's logon \"%s\". Check your login details in the host configuration."
+msgstr "Проблема с входом пользователя \"%s\". Проверьте свои регистрационные данные в конфигурации хоста."
 
-msgid "External player use software decoder for the AC3"
-msgstr "Применить наружный декодер для AC3"
+msgid "The user Last.fm"
+msgstr "Пользователь Last.fm"
 
-msgid "External player use software decoder for the EAC3"
-msgstr "Применить наружный декодер для EAC3"
+msgid ""
+"There are no active premium account.\n"
+"Using a limited version that may not work properly with congested links."
+msgstr ""
+"Нет активных премиум-аккаунтов.\n"
+"Использовать ограниченную версию, которая не может работать должным образом с перегруженными ссылками."
 
-msgid "External player use software decoder for the MP3"
-msgstr "Применить наружный декодер для MP3"
+msgid "There was an error Download."
+msgstr "Была ошибка загрузки."
 
 msgid ""
-"Using this host in your country can be illegal.\n"
-"Do you want to continue at your own risk?"
+"There was an error Download. \n"
+"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
 msgstr ""
-"Используя этот хост в вашей стране может быть незаконным.\n"
-"Вы хотите продолжить на свой страх и риск?"
+"Была ошибка загрузки. \n"
+"Статус[%s], tmpБуффРазмер[%r], может работать Gameplayer[%r]"
 
-msgid "http://tree.tv/"
-msgstr "tree"
+msgid "There was an error downloading."
+msgstr "Ошибка при загрузке."
 
-msgid "Live TV"
-msgstr "Прямой эфир"
+msgid "This site requires login. Please complete host configuration data."
+msgstr "Этот сайт требует логин. Пожалуйста, заполните данные конфигурации хостов."
 
-msgid "Live Radio"
-msgstr "Радио в прямом эфире"
+msgid "Today, too many people are watching a movie with"
+msgstr "Сегодня слишком много пользователей смотрят фильм с"
 
-msgid "Icons quality"
-msgstr "Качество иконки"
+msgid "Try again for some time"
+msgstr "Попробуйте снова через некоторое время"
 
-msgid "Your language preference:"
-msgstr "Ваши предпочтения языка:"
+msgid "Unknown protocol %s"
+msgstr "Неизвестный протокол %s"
 
-msgid "By title"
-msgstr "По названию"
+msgid "Update failed. Check the status by selectiong interesting and pressing ok."
+msgstr "Обновление не удалось. Проверьте статус выбранного и нажмите кнопку ОК."
 
-msgid "Dokumentalne"
-msgstr "Документальный"
+msgid "Use German proxy for link request"
+msgstr "Использовать немецкий прокси для запроса ссылки"
 
-msgid "Dla dzieci"
-msgstr "Для детей"
+msgid "Use a proxy gateway"
+msgstr "Использовать прокси-шлюз"
 
-msgid "Verify"
-msgstr "Проверить"
+msgid "Use defauult qality:"
+msgstr "Качество по умолчанию:"
 
-msgid "Stand-Up"
-msgstr "Встаньте"
+msgid "Use ru proxy server:"
+msgstr "Использовать русский прокси-сервер:"
 
-msgid ""
-"Please remember to visit http://www.sport365.live/ and watch a few "
-"advertisements.\n"
-"This will fix problem, if your playback is constantly interrupted."
-msgstr ""
-"Пожалуйста, не забудьте посетить http://www.sport365.live/ и посмотреть "
-"несколько рекламных объявлений.\n"
-"Это позволит устранить проблему, если воспроизведение постоянно прерывается."
+msgid "User Last.fm"
+msgstr "Пользователь Last.fm"
 
-msgid "Anime list"
-msgstr "Список аниме"
+msgid "User [%s] logon failure."
+msgstr "Ошибка входа в систему пользователя [%s]."
 
-msgid "Movies list"
-msgstr "Список фильмов"
+msgid "Video buffer size [MB]"
+msgstr "Размер видеобуфера в [МБ]"
 
-msgid "Opening. Please wait..."
-msgstr "Открытие. Пожалуйста , подождите ..."
+msgid "WWE Main Event"
+msgstr "Главное событие WWE"
 
-msgid "Closing. Please wait..."
-msgstr "Закрытие. Пожалуйста , подождите ..."
+msgid "Watch video materials from IPTV services"
+msgstr "Просмотр видео из сервисов IPTV"
 
-msgid "Alternative proxy server (2)"
-msgstr "Альтернативный прокси - сервер (2)"
+msgid "Web streams player"
+msgstr "Проигрываттель web-потоков"
 
-msgid "Alternative proxy server (1)"
-msgstr "Альтернативный прокси - сервер (1)"
+msgid "Webpages: "
+msgstr "Web-страница: "
 
-msgid "Use proxy server:"
-msgstr "Использовать прокси - сервер:"
+msgid "Week"
+msgstr "Неделю"
 
-msgid "Any"
-msgstr "Любые"
+msgid "Weekly"
+msgstr "Еженедельно"
 
-msgid "Year: "
-msgstr "Год: "
+msgid "Writer"
+msgstr "Автор"
 
-msgid "Connection to server failed!"
-msgstr "Подключение к серверу не удалось!"
+msgid "You can use Russian proxy server as a workaround."
+msgstr "Вы можете использовать российской прокси-сервер в качестве обходного пути."
 
-msgid "Enable reordering"
-msgstr "Включить перемещения"
+msgid "You probably have not access to this page due to geolocation restriction."
+msgstr "Вы, наверное, не имеете доступ к этой странице в связи с географическим ограничением."
 
-msgid "Disable reordering"
-msgstr "Отключить перемещения"
+msgid "Your OpenSSL version is [%s]"
+msgstr "Ваша версия OpenSSL является [%s]"
 
-msgid ""
-"To watch videos from http://vk.com/ you need to login.\n"
-"Please fill your login and password in the IPTVPlayer configuration."
-msgstr ""
-"Для просмотра видео с http://vk.com/ необходимо авторизоваться на сайте.\n"
-"Пожалуйста , заполните свой логин и пароль в конфигурации IPTVPlayer."
+msgid "Your platform is [%s]"
+msgstr "Ваша платформа [%s]"
 
-msgid ""
-"Login user \"%s\" to http://vk.com/ failed!\n"
-"Please check your login data in the IPTVPlayer configuration."
-msgstr ""
-"Логин пользователя \"%s\" войти http://vk.com/ не удалось!\n"
-"Пожалуйста , проверьте свои данные для входа в конфигурации IPTVPlayer."
+msgid "Youtube player"
+msgstr "Youtube-плеер"
 
-msgid "The problem with user logon \"%s\"."
-msgstr "Проблема входа пользователя в систему \"%s\"."
+msgid "Youtubes player"
+msgstr "Youtube-плеер"
 
-msgid "http://sovdub.ru/"
-msgstr "Совесткий дубляж"
+msgid "[%s] will be used by IPTVPlayer."
+msgstr "[%s] будет использоваться IPTVPlayer."
 
-msgid "Video mode"
-msgstr "Режим видео"
+msgid "[For download only] "
+msgstr "[Только загрузка] "
 
-msgid "Is this message displayed correctly?"
-msgstr "Отображается это сообщение правильно?"
+msgid "[group]"
+msgstr "[группа]"
 
-msgid "Preferred format:"
-msgstr "Предпочтительный формат:"
+msgid "active"
+msgstr "активный"
 
-msgid "Use web-proxy (it may be illegal):"
-msgstr "Использование веб-прокси (это может быть незаконно):"
+msgid "back_pressed prev sel index %s"
+msgstr "назад, к предыдущему индексу %s"
 
-msgid "Latest programs"
-msgstr "Последние программы"
+msgid "based on IP"
+msgstr "на основе IP"
 
-msgid "Latest news broadcast"
-msgstr "Последние новости вещания"
+msgid "buffer-duration"
+msgstr "время буферизации"
 
-msgid "Last chance"
-msgstr "Последний шанс"
+msgid "buffer-size"
+msgstr "размер буфера"
 
-msgid "Live broadcasts"
-msgstr "Прямые трансляции"
+msgid "channel"
+msgstr "канал"
 
-msgid "Programs A-Ö"
-msgstr "Программы A-Ö"
+msgid "console"
+msgstr "консоль"
 
-msgid "Only available in Sweden.\n"
-msgstr "Доступно только в Швеции.\n"
+msgid "cover"
+msgstr "обложка"
 
-msgid "Only available in Sweden."
-msgstr "Доступно только в Швеции."
+msgid "data"
+msgstr "данные"
 
-msgid "Detection of glibc version."
-msgstr "Обнаружение glibc версии."
+msgid "date added"
+msgstr "дата добавлена"
 
-msgid "Detection version of installed standard C library."
-msgstr "Обнаружение версии установленной стандартной библиотеки C."
+msgid "date-add"
+msgstr "добавление даты"
 
-msgid "hlsdl downloader"
-msgstr "hlsdl загрузчик"
+msgid "descending"
+msgstr "нисходящий"
 
-msgid ""
-"\n"
-"For more info please ask samsamsam@o2.pl"
-msgstr ""
-"\n"
-"Для получения дополнительной информации, пожалуйста спросите  у samsamsam@o2."
-"pl"
+msgid "deutsch"
+msgstr "немецкий"
 
-msgid "It improves HLS/M3U8 stream download.\n"
-msgstr "Это улучшает HLS/M3U8 потока загрузки.\n"
+msgid "download-buffer-path"
+msgstr "маршрут буфера загрузки"
 
-msgid "Alternative domain:"
-msgstr "Альтернативный домен:"
+msgid "downmix"
+msgstr "микширование"
 
-msgid ""
-"Fatal Error!\n"
-"Plugin is not supported with your platform."
-msgstr ""
-"Фатальная ошибка!\n"
-"Плагин не поддерживается на вашей платформе."
+msgid "english"
+msgstr "английский"
 
-msgid ""
-"\n"
-"Please visit http://duktape.org/"
-msgstr ""
-"\n"
-"Пожалуйста, посетите http://duktape.org/"
+msgid "espanol"
+msgstr "испанский"
 
-msgid ""
-"Duktape is an embeddable Javascript engine, with a focus on portability and "
-"compact footprint.\n"
-msgstr ""
-"Duktape - это встраиваемый движок Javascript с акцентом на портативность и "
-"компактность.\n"
+msgid "favourtes"
+msgstr "избранное"
 
-msgid "TV Show"
-msgstr "ТВ шоу"
+msgid "free premium player."
+msgstr "свободный плеер."
 
-msgid ""
-"Access to this service requires login.\n"
-"Please register on the site \"%s\" and then put your e-mail and password in "
-"the host configuration under blue button."
-msgstr ""
-"Для доступа к этой услуге требуется вход в систему.\n"
-"Пожалуйста, зарегистрируйтесь на сайте \"%s\", после чего введите свою "
-"электронную почту и пароль в конфигурацию хоста по голубой кнопке."
+msgid "good"
+msgstr "хороший"
 
-msgid "Login mode"
-msgstr "Режим входа"
+msgid "group"
+msgstr "группа"
 
-msgid "Secure cookie name"
-msgstr "Безопасное имя файла cookie"
+msgid "headertext"
+msgstr "текст заголовка"
 
-msgid "Secure cookie value"
-msgstr "Безопасное значение cookie"
+msgid "Upcoming"
+msgstr "Предстоящие"
 
-msgid "Name"
-msgstr "Имя"
+msgid "Allow watched flag to be set (experimental)"
+msgstr "Разрешить просмотр установленного флага (экспериментальный)"
 
-msgid "ID"
-msgstr "Идентификация"
+msgid "The color of the watched item"
+msgstr "Цвет наблюдаемого элемента"
 
-msgid "Trailer"
-msgstr "Трейлер"
+msgid "External movie player default aspect ratio:"
+msgstr "Дефолтное соотн. сторон видео для ext-плеера:"
 
-msgid ""
-"This service requires a new Enigma2 image with a Python version %s or later."
-msgstr ""
-"Этот сервис требует нового enigma2 изображения с версией Python %s или более "
-"поздней версией."
+msgid "You can also install SNI patch for you python if available."
+msgstr "Вы также можете установить патч SNI для python, если он доступен."
 
-msgid "Genre: "
-msgstr "Жанр: "
+msgid "IPTVPlayer enable/disabled groups"
+msgstr "Включение/выключение групп IPTVPlayer"
 
-msgid "Order by: "
-msgstr "Сортировать по: "
+msgid "<font color=\"#FE642E\">REMEMBER:</font></b> IPTVPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
+msgstr "<font color=\"#FE642E\">ЗАПОМНИТЕ:</font></b> IPTVPlayer <b>ТОЛЬКО</b> специализированный веб-браузер. Он <b>НЕ</b> распространяет никакие материалы!</font>"
 
-msgid "Score at least: "
-msgstr "Оценка по крайней мере: "
+msgid "You are using old version of OpenWebif.<br> To go to IPTVPlayer web Select the following link<br>"
+msgstr "Вы используете старую версию OpenWebif. <br> Перейти на веб-Выбор IPTVPlayer следующей ссылки<br>"
 
-msgid "trailer"
-msgstr "Трейлер"
+msgid "lector hd free "
+msgstr "бесплатный просмотр HD "
 
-msgid "Advance (cookie item)"
-msgstr "Авансовый (элемент cookie)"
+msgid "lector normal free "
+msgstr "бесплатный просмотр SD "
 
-msgid "Simple (e-mail, password)"
-msgstr "Простой (адрес электронной почты, пароль)"
+msgid "live"
+msgstr "прямой"
 
-msgid "Top series"
-msgstr "Лучшие серии"
+msgid "live transfers"
+msgstr "прямые потоки"
 
-msgid "Top movies"
-msgstr "Лучшие фильмы"
+msgid "mobile"
+msgstr "мобильный"
 
-msgid "Upcoming"
-msgstr "Предстоящие"
+msgid "movie"
+msgstr "фильм"
 
-msgid "Most watched"
-msgstr "Самые просматриваемые"
+msgid "name"
+msgstr "название"
 
-msgid "Last update"
-msgstr "Последнее обновление"
+msgid "number of views"
+msgstr "количество просмотров"
 
-msgid "Cartoon list"
-msgstr "Список мультфильмов"
+msgid "passthrough"
+msgstr "сквозной"
 
-msgid "Initialize web interface (experimental)"
-msgstr "Включить веб-интерфейс (экспериментальный)"
+msgid "picture link"
+msgstr "ссылка на фото"
 
-msgid "Allow watched flag to be set (experimental)"
-msgstr "Разрешить просмотр установленного флага (экспериментальный)"
+msgid "playerlogo"
+msgstr "логотип плеера"
 
-msgid "The color of the viewed item"
-msgstr "Цвет просматриваемого объекта"
+msgid "playlist"
+msgstr "плейлист"
 
-msgid "The color of the watched item"
-msgstr "Цвет из часов эд пункта"
+msgid "polski"
+msgstr "польский"
 
-msgid "Unset watched"
-msgstr "Отменить просмотр"
+msgid "release date"
+msgstr "дата выхода"
 
-msgid "Set watched"
-msgstr "Установить наблюдаемый"
+msgid "ring-buffer-max-size"
+msgstr "максимум ring-буфера"
+
+msgid "sequencer"
+msgstr "секвенсер"
 
-msgid "http://kinotan.ru/"
-msgstr "Кинотан"
+msgid "statustext"
+msgstr "статус-текст"
 
-msgid "Show paid items (it may be illegal)"
-msgstr "Показывать платные предметы (это может быть незаконно)"
+msgid "the name"
+msgstr "имя"
 
-msgid "Show items with DRM"
-msgstr "Показывать элементы с DRM"
+msgid "video"
+msgstr "видео"
 
-msgid "Items with DRM protection."
-msgstr "Элементы с защитой DRM."
+msgid "web-live.tv login:"
+msgstr "логин web-live.tv:"
 
-msgid "Video with DRM protection."
-msgstr "Видео с защитой DRM."
+msgid "web-live.tv password:"
+msgstr "пароль web-live.tv:"
 
-msgid "Trailers"
-msgstr "Трейлеры"
+msgid "web-live.tv premium user?"
+msgstr "премиум пользователь web-live.tv?"
+
+msgid "worst"
+msgstr "наихудшее"
diff -ruN o/IPTVPlayer/locale/ua/LC_MESSAGES/IPTVPlayer.po pc/IPTVPlayer/locale/ua/LC_MESSAGES/IPTVPlayer.po
--- o/IPTVPlayer/locale/ua/LC_MESSAGES/IPTVPlayer.po	1970-01-01 03:00:00.000000000 +0300
+++ pc/IPTVPlayer/locale/ua/LC_MESSAGES/IPTVPlayer.po	2020-05-12 00:07:45.112290927 +0300
@@ -0,0 +1,8780 @@
+msgid ""
+msgstr ""
+"Project-Id-Version: IPTVPlayer\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2019-08-27 14:37+0200\n"
+"PO-Revision-Date: \n"
+"Last-Translator: vovan43 <yuozyo@ukr.net>\n"
+"Language-Team: IPTVPlayer\n"
+"Language: uk_UA\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=UTF-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"X-Generator: Poedit 1.8.6\n"
+"X-Poedit-Basepath: .\n"
+"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
+"X-Poedit-SearchPath-0: ../plugin\n"
+
+#: ../components/iptvplayerwidget.py:1685
+#, python-format
+msgid "\tDisk space available: %s"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1684
+#, python-format
+msgid "\tDisk space required: %s"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:431 ../hosts/hosteurosportplayer.py:583
+msgid ""
+"\n"
+"Error[1]."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:442 ../hosts/hosteurosportplayer.py:617
+msgid ""
+"\n"
+"Error[2]."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:450
+msgid ""
+"\n"
+"Error[3]."
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:482
+msgid ""
+"\n"
+"Error[4]."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:802
+#, fuzzy, python-format
+msgid ""
+"\n"
+"For more info please ask %s "
+msgstr ""
+"\n"
+"Для отримання детальної інформації, будь-ласка, звертайтесь до автора samsamsam@o2.pl"
+
+#: ../setup/iptvsetupimpl.py:867 ../setup/iptvsetupimpl.py:927
+#, fuzzy
+msgid ""
+"\n"
+"For more info please ask samsamsam@o2.pl"
+msgstr ""
+"\n"
+"Для отримання детальної інформації, будь-ласка, звертайтесь до автора samsamsam@o2.pl"
+
+#: ../setup/iptvsetupimpl.py:739 ../setup/iptvsetupimpl.py:1238
+msgid ""
+"\n"
+"For more info please ask the author samsamsam@o2.pl"
+msgstr ""
+"\n"
+"Для отримання детальної інформації, будь-ласка, звертайтесь до автора samsamsam@o2.pl"
+
+#: ../setup/iptvsetupimpl.py:1193
+msgid ""
+"\n"
+"For more info please visit http://fluendo.com/"
+msgstr ""
+"\n"
+"Для отримання детальної інформації, будь-ласка, відвідайте http://fluendo.com/"
+
+#: ../components/iptvplayerwidget.py:482 ../components/iptvsubdownloader.py:371
+msgid ""
+"\n"
+"Make sure you are using the latest version of the plugin."
+msgstr ""
+"\n"
+"Переконайтесь, що ви використовуєте останню версію плагіна."
+
+#: ../setup/iptvsetupimpl.py:991
+#, fuzzy
+msgid ""
+"\n"
+"Please visit http://duktape.org/"
+msgstr ""
+"\n"
+"Для отримання детальної інформації, будь-ласка, відвідайте http://fluendo.com/"
+
+#: ../components/iptvplayerwidget.py:477
+#, fuzzy
+msgid ""
+"\n"
+"This host is not integral part of the E2iPlayer plugin.\n"
+"It is not supported by E2iPlayer team."
+msgstr ""
+"\n"
+"Цей хост не являється невідємною частиною плагіна IPTVПлеєр.\n"
+"Це не підтримується авторами IPTVПлеєра."
+
+#: ../components/iptvplayerwidget.py:483
+#, fuzzy
+msgid ""
+"\n"
+"You can also report problem here: \n"
+" https://gitlab.com/maxbambi/e2iplayer/issues"
+msgstr ""
+"\n"
+"Повідомити про проблему ви можете тут: \n"
+"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
+"або тут: samsamsam@o2.pl"
+
+#: ../components/iptvsubdownloader.py:372
+msgid ""
+"\n"
+"You can also report problem here: \n"
+"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
+"or here: samsamsam@o2.pl"
+msgstr ""
+"\n"
+"Повідомити про проблему ви можете тут: \n"
+"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
+"або тут: samsamsam@o2.pl"
+
+#: ../components/iptvdirbrowser.py:78 ../components/iptvdirbrowser.py:300
+#: ../components/configbase.py:83 ../components/iptvfavouriteswidgets.py:45
+#: ../iptvdm/iptvdmui.py:420 ../iptvupdate/updatemainwindow.py:66
+#: ../iptvupdate/updatemainwindow.py:202 ../iptvupdate/updatemainwindow.py:204
+#: ../setup/iptvsetupwidget.py:46 ../setup/iptvsetupwidget.py:47
+msgid " "
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:363
+msgid "    Allowed formats of thumbnails"
+msgstr "    Дозволенний формат ескізів"
+
+#: ../components/iptvconfigmenu.py:392
+msgid "    Audio buffer size [KB]"
+msgstr "    Розмір буфера Аудіо [KB]"
+
+#: ../components/iptvconfigmenu.py:345
+msgid "    Background color"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:347
+msgid "    Default suggestions provider"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:368
+msgid "    Enable hosts groups"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:371
+msgid "    Number of columns"
+msgstr "    Кількість колонок"
+
+#: ../components/iptvconfigmenu.py:370
+msgid "    Number of rows"
+msgstr "    Кількість рядків"
+
+#: ../components/iptvconfigmenu.py:364
+msgid "    Remove thumbnails"
+msgstr "    Видалити ескізи"
+
+#: ../components/iptvconfigmenu.py:369
+msgid "    Service icon size"
+msgstr "    Розмір іконки сервіса"
+
+#: ../components/iptvconfigmenu.py:346
+msgid "    Show suggestions"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:391
+msgid "    Video buffer size [MB]"
+msgstr "    Розмір буфера Відео [MB]"
+
+#: ../hosts/hostsportdeutschland.py:139
+#, python-format
+msgid " (planned %s)"
+msgstr ""
+
+#: ../hosts/hostfilmpertutti.py:190
+#, fuzzy
+msgid " - others links"
+msgstr "Лінки користувача"
+
+#: ../setup/iptvsetupimpl.py:743 ../setup/iptvsetupimpl.py:806
+#: ../setup/iptvsetupimpl.py:871 ../setup/iptvsetupimpl.py:931
+#: ../setup/iptvsetupimpl.py:995 ../setup/iptvsetupimpl.py:1197
+#: ../setup/iptvsetupimpl.py:1242
+msgid ""
+" has not been detected. \n"
+"Do you want to install it? "
+msgstr ""
+" Це не було виявлено. \n"
+"Ви бажаєте, втановити це? "
+
+#: ../setup/iptvsetupimpl.py:744 ../setup/iptvsetupimpl.py:807
+#: ../setup/iptvsetupimpl.py:872 ../setup/iptvsetupimpl.py:932
+#: ../setup/iptvsetupimpl.py:996 ../setup/iptvsetupimpl.py:1198
+#: ../setup/iptvsetupimpl.py:1243
+msgid ""
+" is deprecated. \n"
+"Do you want to install new one? "
+msgstr ""
+" не рекомендується. \n"
+"Ви бажаєте, встановити новий? "
+
+#: ../hosts/hoststreaminghdfun.py:266
+msgid " main link"
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:55
+msgid " or "
+msgstr ""
+
+#: ../components/e2ivk.py:628
+#, python-format
+msgid "\"%s\" Virtual Keyboard layout not available."
+msgstr ""
+
+#: ../libs/wagasworld.py:111
+#, python-format
+msgid "\"%s\" login failed! Please check your login and password."
+msgstr ""
+
+#: ../hosts/hostwebstream.py:141
+msgid "\"Web\" streams player"
+msgstr "\"Веб\" Потоки плеєра"
+
+#: ../hosts/hostplayrtsiw.py:456
+#, python-format
+msgid "%s "
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:51
+#, python-format
+msgid "%s - service overview"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:54
+#, fuzzy, python-format
+msgid "%s - subtitles provider"
+msgstr "Провайдер субтитрів: %s"
+
+#: ../hosts/hosteskago.py:249 ../hosts/hostmythewatchseries.py:253
+#, python-format
+msgid "%s - trailer"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:404 ../components/iptvconfigmenu.py:405
+#: ../hosts/hostbsto.py:41 ../hosts/hostbsto.py:43 ../hosts/hostmrpiracy.py:54
+#: ../hosts/hostmrpiracy.py:56
+#, python-format
+msgid "%s API KEY"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:402
+#, python-format
+msgid "%s device name"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:59
+#, fuzzy, python-format
+msgid "%s download manager"
+msgstr "Менеджер завантажень"
+
+#: ../components/iptvconfigmenu.py:400
+#, python-format
+msgid "%s e-mail"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:314
+#, fuzzy, python-format
+msgid "%s episodes"
+msgstr "Нові серії"
+
+#: ../Web/webParts.py:125
+#, python-format
+msgid "%s file is %d KB in size. Last %d lines are:"
+msgstr ""
+
+#: ../Web/webParts.py:122
+#, python-format
+msgid "%s file is %d MB in size. Last %d lines are:"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:421 ../hosts/hosttwitchtv.py:441
+#, python-format
+msgid "%s followers"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:73
+#, python-format
+msgid "%s has been protected with google recaptcha v2. You can try to use API version."
+msgstr ""
+
+#: ../libs/urlparser.py:8285
+#, python-format
+msgid "%s link extractor error."
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:335
+#, fuzzy, python-format
+msgid "%s login"
+msgstr "Зайти"
+
+#: ../hosts/hostdixmax.py:206
+#, python-format
+msgid "%s minutes"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:336 ../components/iptvconfigmenu.py:401
+#, fuzzy, python-format
+msgid "%s password"
+msgstr "пароль"
+
+#: ../iptvdm/iptvbuffui.py:565
+#, python-format
+msgid "%s returned %s: %s"
+msgstr ""
+
+#: ../hosts/hostserialeco.py:183 ../hosts/hostserialeco.py:217
+#, python-format
+msgid "%s s%se%s"
+msgstr ""
+
+#: ../libs/youtube_dl/extractor/vevo.py:89
+#, python-format
+msgid "%s said: This page is currently unavailable in your region"
+msgstr ""
+
+#: ../components/confighost.py:82
+#, fuzzy, python-format
+msgid "%s services configuration"
+msgstr "Конфігурація хосту(натисніть ОК)"
+
+#: ../hosts/hostplayrtsiw.py:440
+#, fuzzy, python-format
+msgid "%s shows"
+msgstr "ТВ шоу"
+
+#: ../hosts/hostiptvplayerinfo.py:52 ../hosts/hostiptvplayerinfo.py:53
+#, fuzzy, python-format
+msgid "%s subtitles download - how to"
+msgstr "Завантажити субтитри"
+
+#: ../libs/recaptcha_v2_2captcha.py:74 ../libs/recaptcha_v2_9kw.py:74
+#, python-format
+msgid "%s timeout."
+msgstr ""
+
+#: ../components/ihost.py:649
+#, python-format
+msgid ""
+"%s uses \"geo-blocking\" measures to prevent you from accessing the services from abroad.\n"
+" Host country: %s, your country: %s"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:168 ../hosts/hosttwitchtv.py:214
+#: ../hosts/hosttwitchtv.py:259 ../hosts/hosttwitchtv.py:295
+#: ../hosts/hosttwitchtv.py:355 ../hosts/hosttwitchtv.py:477
+#, fuzzy, python-format
+msgid "%s viewers"
+msgstr "Вік перегляду:"
+
+#: ../hosts/hostcimaclubcom.py:239 ../hosts/hostmediasetplay.py:263
+#: ../hosts/hostmediasetplay.py:405 ../hosts/hosttwitchtv.py:420
+#: ../hosts/hosttwitchtv.py:440
+#, fuzzy, python-format
+msgid "%s views"
+msgstr "Перегляди"
+
+#: ../hosts/hostcimaclubcom.py:243
+#, python-format
+msgid "%s/10"
+msgstr ""
+
+#: ../components/iptvpictureplayer.py:252
+#: ../components/iptvpictureplayer.py:322
+msgid "++"
+msgstr ""
+
+#: ../components/iptvpictureplayer.py:247
+msgid "--"
+msgstr ""
+
+#: ../hosts/hostkissanimeto.py:156
+#, fuzzy
+msgid "-- OK --"
+msgstr "--- В етері ---"
+
+#: ../components/configextmovieplayer.py:301
+msgid "----------------- External exteplayer3 options -----------------"
+msgstr "----------------- Зовнішні опції exteplayer3 -----------------"
+
+#: ../hosts/hostwebstream.py:104
+msgid "----------Other----------"
+msgstr "----------Інше----------"
+
+#: ../hosts/hostfilmpalast.py:56
+#, fuzzy
+msgid "--All Episodes--"
+msgstr "Епізоди"
+
+#: ../hosts/hostandrijaiandjelka.py:74 ../hosts/hostappletrailers.py:56
+#: ../hosts/hostdixmax.py:144 ../hosts/hostdixmax.py:148
+#: ../hosts/hostefilmytv.py:110 ../hosts/hostefilmytv.py:119
+#: ../hosts/hostefilmytv.py:295 ../hosts/hosteskago.py:155
+#: ../hosts/hostfenixsite.py:95 ../hosts/hostfilma24hdcom.py:253
+#: ../hosts/hostfilmpalast.py:100 ../hosts/hostfilmpertutti.py:53
+#: ../hosts/hostfilmstreamhdit.py:62 ../hosts/hostddl.py:181
+#: ../hosts/hostnaszekinotv.py:244 ../hosts/hostgledalica.py:125
+#: ../hosts/hosthdfilmetv.py:111 ../hosts/hosthdsto.py:168
+#: ../hosts/hostitvcom.py:113 ../hosts/hostlibrestream.py:102
+#: ../hosts/hostmeczykipl.py:47 ../hosts/hostmusicmp3ru.py:106
+#: ../hosts/hostngolos.py:115 ../hosts/hostngolos.py:164
+#: ../hosts/hostnuteczki.py:116 ../hosts/hostofficialfilmillimite.py:88
+#: ../hosts/hostoipeirates.py:100 ../hosts/hostplayrtsiw.py:228
+#: ../hosts/hostplayrtsiw.py:242 ../hosts/hostserijeonline.py:116
+#: ../hosts/hostskstream.py:129 ../hosts/hostsportdeutschland.py:99
+#: ../hosts/hostsvtplayse.py:134 ../hosts/hosttainieskaiseirestv.py:93
+#: ../hosts/hosttfarjocom.py:82 ../hosts/hosttfarjocom.py:110
+#: ../hosts/hosttvnowde.py:127 ../hosts/hosttvnowde.py:226
+#: ../hosts/hostvumedicom.py:113 ../hosts/hostvumedicom.py:150
+#: ../hosts/hostwatchwrestlinguno.py:64 ../hosts/hostyoutube.py:99
+#: ../libs/livetvhdnet.py:73 ../libs/webcamera.py:183
+msgid "--All--"
+msgstr "--Все--"
+
+#: ../hosts/hostegybest.py:117 ../hosts/hostfilmixco.py:180
+#: ../hosts/hostfilmixco.py:198 ../hosts/hostplusdede.py:157
+#: ../hosts/hostplusdede.py:167 ../hosts/hostted.py:104 ../hosts/hostted.py:110
+#: ../hosts/hostted.py:116 ../hosts/hostted.py:121 ../hosts/hostted.py:138
+#: ../hosts/hostted.py:144 ../hosts/hostted.py:149
+msgid "--Any--"
+msgstr ""
+
+#: ../hosts/hostyoutube.py:102
+msgid "--Other--"
+msgstr "--Інший-"
+
+#: ../components/configextmovieplayer.py:77
+msgid "12 hour format "
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+#, fuzzy
+msgid "16:10 Letterbox"
+msgstr "Режим ящика"
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:10 PanScan"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:9"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+#, fuzzy
+msgid "16:9 Letterbox"
+msgstr "Режим ящика"
+
+#: ../components/iptvconfigmenu.py:215
+msgid "16:9 always"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:77
+msgid "24 hour format "
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+#, fuzzy
+msgid "4:3 Letterbox"
+msgstr "Режим ящика"
+
+#: ../components/iptvconfigmenu.py:215
+msgid "4:3 PanScan"
+msgstr ""
+
+#: ../Web/webParts.py:97
+msgid "<font color=\"#FE642E\">REMEMBER:</font></b> E2iPlayer <b>IS ONLY</b> specialized Web browser. It does <b>NOT</b> host any materials!!!</font>"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:67
+msgid "> Press OK to start <"
+msgstr "> Натисніть кнопку OK, щоб розпочати <"
+
+#: ../hosts/hostbbcsport.py:478
+msgid "A TV License is required to watch BBC iPlayer streams, see the BBC website for more information: https://www.bbc.co.uk/iplayer/help/tvlicence"
+msgstr ""
+
+#: ../hosts/host3player.py:57 ../hosts/hostbbciplayer.py:56
+#: ../hosts/hostbbciplayer.py:189 ../hosts/hostnaszekinotv.py:175
+#: ../hosts/hostgledalica.py:240 ../hosts/hostserienstreamto.py:72
+#: ../hosts/hosttvnowde.py:60
+msgid "A-Z"
+msgstr ""
+
+#: ../hosts/host9anime.py:48 ../hosts/hostaltadefinizione.py:70
+#: ../hosts/hostaltadefinizionecool.py:63
+#, fuzzy
+msgid "A-Z List"
+msgstr "Аніме Список"
+
+#: ../components/configextmovieplayer.py:317
+#, fuzzy
+msgid "AAC downmix mode"
+msgstr "Вибір режиму AAC"
+
+#: ../hosts/hostalltubetv.py:36
+msgid "ABC"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:115 ../Web/webParts.py:318
+msgid "ABORTED"
+msgstr "ПЕРЕРВАНО"
+
+#: ../components/configextmovieplayer.py:315
+#, fuzzy
+msgid "AC3 downmix mode"
+msgstr "Вибір режиму AC3"
+
+#: ../hosts/hostmusicmp3ru.py:326
+msgid "ALBUMS"
+msgstr ""
+
+#: ../hosts/hostmediasetplay.py:183
+msgid "API initialization failed!"
+msgstr ""
+
+#: ../hosts/hostdancetrippin.py:37 ../hosts/hostmusicmp3ru.py:327
+msgid "ARTISTS"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:186
+msgid "AZ"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:168 ../iptvupdate/updatemainwindow.py:331
+msgid "Aborted"
+msgstr "Перервано"
+
+#: ../components/VirtualKeyBoard.py:99
+msgid "Accept"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:128
+msgid "Access denied. Please check password."
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:68
+#, fuzzy
+msgid "Action Movies"
+msgstr "Кращі фільми"
+
+#: ../Web/webParts.py:63
+msgid "Active host"
+msgstr ""
+
+#: ../hosts/hostddl.py:552
+msgid "Actor:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:553
+msgid "Actors:"
+msgstr ""
+
+#: ../components/playerselector.py:469
+#, fuzzy, python-format
+msgid "Add host %s to group"
+msgstr "Добавити в групу"
+
+#: ../components/iptvplayerwidget.py:593
+msgid "Add item to favourites"
+msgstr "Додати до вибраного"
+
+#: ../components/iptvfavouriteswidgets.py:299
+msgid "Add item to group"
+msgstr "Добавити в групу"
+
+#: ../components/iptvfavouriteswidgets.py:180
+#: ../components/iptvfavouriteswidgets.py:265
+msgid "Add new group"
+msgstr "Добавити нову групу"
+
+#: ../components/iptvfavouriteswidgets.py:41
+#: ../components/iptvfavouriteswidgets.py:105
+msgid "Add new group of favourites"
+msgstr "Добавити нову групу вибраного"
+
+#: ../iptvupdate/updatemainwindow.py:374
+msgid "Add repository last version."
+msgstr ""
+
+#: ../Web/webParts.py:421
+#, fuzzy
+msgid "Add to downloader"
+msgstr "Зупинка завантаження"
+
+#: ../hosts/hostfreediscpl.py:246
+#, fuzzy, python-format
+msgid "Added by: %s, directory: %s"
+msgstr "Створити каталог [%s]"
+
+#: ../hosts/hostfrancetv.py:412 ../hosts/hostsportitalia.py:207
+#, fuzzy, python-brace-format
+msgid "Added: {0}"
+msgstr "Додана дата"
+
+#: ../hosts/hostlookmovieag.py:69
+#, fuzzy
+msgid "Adventure Movies"
+msgstr "Відбірне відео"
+
+#: ../components/iptvplayerwidget.py:1143 ../hosts/host3player.py:156
+#: ../hosts/host9anime.py:104 ../hosts/hostakoam.py:134
+#: ../hosts/hostalltubetv.py:37 ../hosts/hostalltubetv.py:149
+#: ../hosts/hostanimeodcinki.py:83 ../hosts/hostbbciplayer.py:230
+#: ../hosts/hostcimaclubcom.py:168 ../hosts/hostcrtankocom.py:35
+#: ../hosts/hostdailymotion.py:103 ../hosts/hostdancetrippin.py:225
+#: ../hosts/hostegybest.py:103 ../hosts/hostfightvideo.py:72
+#: ../hosts/hostfilmeonlineto.py:140 ../hosts/hostfilmezz.py:114
+#: ../hosts/hosttvplayercom.py:126 ../hosts/hosthdfull.py:136
+#: ../hosts/hosthdstreams.py:130 ../hosts/hostkabarety.py:40
+#: ../hosts/hostkabarety.py:86 ../hosts/hostkinomanco.py:160
+#: ../hosts/hostkinomanco.py:185 ../hosts/hostkinomanco.py:194
+#: ../hosts/hostkinomanco.py:204 ../hosts/hostkinox.py:151
+#: ../hosts/hostkinox.py:277 ../hosts/hostkkiste.py:138
+#: ../hosts/hostlookmovieag.py:61 ../hosts/hostmrpiracy.py:156
+#: ../hosts/hostmythewatchseries.py:95 ../hosts/hostorthobulletscom.py:75
+#: ../hosts/hostplayrtsiw.py:352 ../hosts/hostputlockertvto.py:175
+#: ../hosts/hostshahiidanimenet.py:85 ../hosts/hostshoutcast.py:64
+#: ../hosts/hostsolarmovie.py:149 ../hosts/hosttwitchtv.py:100
+#: ../hosts/hosttwitchtv.py:103 ../hosts/hostyifytv.py:71
+#: ../libs/skylinewebcamscom.py:94 ../subproviders/subprov_titlovicom.py:134
+msgid "All"
+msgstr "Все"
+
+#: ../hosts/hostthewatchseriesto.py:66
+msgid "All A-Z"
+msgstr ""
+
+#: ../hosts/hostourmatchnet.py:37
+msgid "All Leagues"
+msgstr "Всі Ліги"
+
+#: ../hosts/hosttwitchtv.py:51
+#, fuzzy
+msgid "All Platforms"
+msgstr "Платформа"
+
+#: ../hosts/hostmovie4kto.py:79
+msgid "All TV shows"
+msgstr "Все ТВ-шоу"
+
+#: ../hosts/hosturllist.py:49
+msgid "All in one"
+msgstr "Всі файли без поділу на категорії"
+
+#: ../Web/webParts.py:482
+#, fuzzy
+msgid "All materials"
+msgstr "Всі фільми"
+
+#: ../hosts/hostmovie4kto.py:74
+msgid "All movies"
+msgstr "Всі фільми"
+
+#: ../hosts/hostfrancetv.py:289
+#, fuzzy
+msgid "All programs"
+msgstr "Програми"
+
+#: ../hosts/hostfrancetv.py:313
+#, fuzzy
+msgid "All shows"
+msgstr "Все ТВ-шоу"
+
+#: ../hosts/hosttwitchtv.py:116
+#, fuzzy
+msgid "All time"
+msgstr "Всі файли без поділу на категорії"
+
+#: ../hosts/hostfrancetv.py:288 ../hosts/hostfrancetv.py:314
+#: ../hosts/hostfrancetv.py:334
+#, fuzzy
+msgid "All videos"
+msgstr "Всі фільми"
+
+#: ../hosts/hostyoutube.py:38
+msgid "Allow dash format:"
+msgstr "Дозволити формат різних типів:"
+
+#: ../components/iptvconfigmenu.py:339
+msgid "Allow downgrade"
+msgstr "Дозволити зниження при оновленні"
+
+#: ../hosts/hostvevo.py:31
+msgid "Allow hls format"
+msgstr "Дозволити формат hls"
+
+#: ../hosts/hostfavourites.py:31
+msgid "Allow watched flag to be set"
+msgstr ""
+
+#: ../hosts/hostbsto.py:81
+#, fuzzy
+msgid "Alphabet"
+msgstr "В алфавітному порядку"
+
+#: ../hosts/hostdancetrippin.py:44
+#, fuzzy
+msgid "Alphabetical "
+msgstr "В алфавітному порядку"
+
+#: ../hosts/hostfilmpalast.py:53 ../hosts/hostfilmpalast.py:57
+#: ../hosts/hostlocalmedia.py:38 ../hosts/hostkissanimeto.py:285
+#: ../hosts/hostkisscartoonme.py:203 ../hosts/hostmovs4ucom.py:48
+msgid "Alphabetically"
+msgstr "В алфавітному порядку"
+
+#: ../hosts/hosthoofootcom.py:229
+msgid "Alternative"
+msgstr ""
+
+#: ../hosts/host123movieshd.py:33 ../hosts/hostfilmeonlineto.py:35
+#: ../hosts/hostfilmixco.py:36 ../hosts/hostfilmstreamvkcom.py:34
+#: ../hosts/hosticefilmsinfo.py:34 ../hosts/hostkinox.py:35
+#: ../hosts/hostkkiste.py:34 ../hosts/hostmovie4kto.py:40
+#: ../hosts/hostplanetstreamingcom.py:30 ../hosts/hostputlockertvto.py:38
+#: ../hosts/hostseriesonline.py:34 ../hosts/hostskstream.py:34
+#: ../hosts/hostsolarmovie.py:35 ../hosts/hostyesmoviesto.py:36
+#, fuzzy
+msgid "Alternative domain:"
+msgstr "Альтернативна геолокація IP 1:"
+
+#: ../hosts/hostlaola1tv.py:40
+msgid "Alternative geolocation IP 1:"
+msgstr "Альтернативна геолокація IP 1:"
+
+#: ../hosts/hostlaola1tv.py:41
+msgid "Alternative geolocation IP 2:"
+msgstr "Альтернативна геолокація IP 2:"
+
+#: ../components/iptvconfigmenu.py:375 ../hosts/host123movieshd.py:25
+#: ../hosts/hostakoam.py:26 ../hosts/hostcimaclubcom.py:24
+#: ../hosts/hostfilmeonlineto.py:27 ../hosts/hostfilmstreamvkcom.py:26
+#: ../hosts/hostddl.py:27 ../hosts/hosthdsto.py:34
+#: ../hosts/hosticefilmsinfo.py:27 ../hosts/hostkinox.py:27
+#: ../hosts/hostkissanimeto.py:32 ../hosts/hostkkiste.py:26
+#: ../hosts/hostlosmovies.py:28 ../hosts/hostplanetstreamingcom.py:22
+#: ../hosts/hostputlockertvto.py:30 ../hosts/hostseriesonline.py:26
+#: ../hosts/hostskstream.py:26 ../hosts/hostsolarmovie.py:28
+#: ../hosts/hostyesmoviesto.py:28 ../hosts/hostyifytv.py:31
+#: ../hosts/hostzalukajcom.py:36
+#, fuzzy
+msgid "Alternative proxy server (1)"
+msgstr "Німецький проксі-сервер гіперпосилання"
+
+#: ../components/iptvconfigmenu.py:376 ../hosts/host123movieshd.py:26
+#: ../hosts/hostakoam.py:27 ../hosts/hostcimaclubcom.py:25
+#: ../hosts/hostfilmeonlineto.py:28 ../hosts/hostfilmstreamvkcom.py:27
+#: ../hosts/hostddl.py:28 ../hosts/hosthdsto.py:35
+#: ../hosts/hosticefilmsinfo.py:28 ../hosts/hostkinox.py:28
+#: ../hosts/hostkissanimeto.py:33 ../hosts/hostkkiste.py:27
+#: ../hosts/hostlosmovies.py:29 ../hosts/hostplanetstreamingcom.py:23
+#: ../hosts/hostputlockertvto.py:31 ../hosts/hostseriesonline.py:27
+#: ../hosts/hostskstream.py:27 ../hosts/hostsolarmovie.py:29
+#: ../hosts/hostyesmoviesto.py:29 ../hosts/hostyifytv.py:32
+#: ../hosts/hostzalukajcom.py:37
+#, fuzzy
+msgid "Alternative proxy server (2)"
+msgstr "Німецький проксі-сервер гіперпосилання"
+
+#: ../hosts/hostthewatchseriesto.py:39
+#, fuzzy
+msgid "Always"
+msgstr "Топ 100 Завжди"
+
+#: ../libs/ustvnow.py:118
+#, python-format
+msgid ""
+"An error occurred when try to sign in the user \"%s.\n"
+"Please check your login credentials and try again later...\""
+msgstr ""
+"Виникла помилка при спробі зайти в користувача \"%s.\n"
+"Будь-ласка, перевірте ваші облікові дані і спробуйте ще раз пізніше...\""
+
+#: ../components/iptvextmovieplayer.py:960
+#, python-format
+msgid "An error occurred while loading a subtitle from [%s]."
+msgstr "Виникла помилка при завантаженні субтитрів з [%s]."
+
+#: ../components/iptvextmovieplayer.py:1907
+#, fuzzy, python-format
+msgid "An error occurred while writing into: %s"
+msgstr "Виникла помилка при завантаженні субтитрів з [%s]."
+
+#: ../hosts/hostorthobulletscom.py:115
+msgid "Anatomy"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:70
+#, fuzzy
+msgid "Animation Movies"
+msgstr "Анімація [субтитри]"
+
+#: ../hosts/hostyifytv.py:73
+#, fuzzy
+msgid "Animations"
+msgstr "Інформація"
+
+#: ../hosts/hostmrpiracy.py:689 ../hosts/hosttreetv.py:68
+#, fuzzy
+msgid "Anime"
+msgstr "Аніме Список"
+
+#: ../hosts/hostwatchcartoononline.py:348
+#, fuzzy
+msgid "Anime Search"
+msgstr "Пошук"
+
+#: ../hosts/hostanimeodcinki.py:42 ../hosts/hostkissanimeto.py:60
+#: ../hosts/hostshahiidanimenet.py:44
+#, fuzzy
+msgid "Anime list"
+msgstr "Аніме Список"
+
+#: ../hosts/hostefilmytv.py:566 ../hosts/hostfilmezz.py:349
+#: ../hosts/hostfreediscpl.py:145 ../hosts/hostnaszekinotv.py:449
+#: ../hosts/hostkinomanco.py:645 ../hosts/hostmooviecc.py:453
+#: ../hosts/hostplusdede.py:563 ../hosts/hostserienstreamto.py:533
+#: ../hosts/hoststreamliveto.py:308 ../hosts/hostzalukajcom.py:368
+#: ../libs/firstonetvnet.py:339 ../libs/urlparser.py:3911
+msgid "Answer"
+msgstr ""
+
+#: ../hosts/hostcineto.py:113 ../hosts/hostcineto.py:123
+#: ../hosts/hostfilisertv.py:109 ../hosts/hosthdstreams.py:117
+#: ../hosts/hostkinomanco.py:222 ../hosts/hostmozicsillag.py:105
+#: ../hosts/hostmozicsillag.py:110 ../hosts/hostmozicsillag.py:115
+#: ../hosts/hostmozicsillag.py:120 ../hosts/hostmozicsillag.py:124
+#: ../hosts/hostmozicsillag.py:128 ../hosts/hoststreamliveto.py:136
+#: ../hosts/hosttreetv.py:113 ../hosts/hosttreetv.py:135
+#: ../hosts/hostvimeo.py:156 ../hosts/hostyifytv.py:151
+#: ../hosts/hostyifytv.py:168 ../subproviders/subprov_podnapisinet.py:109
+msgid "Any"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:77 ../components/e2isimpledownloader.py:63
+#: ../components/iptvsubsimpledownloader.py:72
+msgid "Apply"
+msgstr "Застосувати"
+
+#: ../hosts/hostorthobulletscom.py:116
+msgid "Approaches"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "April"
+msgstr ""
+
+#: ../hosts/hostegybest.py:63
+#, fuzzy
+msgid "Arabic movies"
+msgstr "Всі фільми"
+
+#: ../hosts/hosttwitchtv.py:105 ../iptvdm/iptvdmui.py:76 ../Web/webParts.py:254
+msgid "Archive"
+msgstr "Архів"
+
+#: ../hosts/hostlocalmedia.py:611
+#, python-format
+msgid "Are you sure you want to remove file \"%s\"?"
+msgstr "Ви впевненні, що бажаєте видалити файл \"%s\"?"
+
+#: ../hosts/hostvevo.py:380
+#, fuzzy
+msgid "Artists"
+msgstr "Популярні виконавці"
+
+#: ../components/iptvextmovieplayer.py:655
+msgid "Aspect"
+msgstr "Аспект"
+
+#: ../hosts/hostdancetrippin.py:225 ../hosts/hostrtbfbe.py:686
+msgid "Audio"
+msgstr "Аудіо"
+
+#: ../components/iptvextmovieplayer.py:515
+#, fuzzy
+msgid "Audio tracks"
+msgstr "Вибір звукової дорожки"
+
+#: ../hosts/hostsportitalia.py:77
+msgid "August"
+msgstr ""
+
+#: ../hosts/hostekstraklasatv.py:144
+msgid "Author"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:26 ../components/iptvconfigmenu.py:84
+#: ../components/iptvconfigmenu.py:87 ../hosts/hostmovie4kto.py:34
+#: ../hosts/hostthewatchseriesto.py:39 ../libs/youtubeparser.py:30
+msgid "Auto"
+msgstr "Автоматично"
+
+#: ../components/iptvconfigmenu.py:327
+msgid "Auto check for plugin update"
+msgstr "Автоматична перевірка оновлень плагіна"
+
+#: ../components/iptvplayerwidget.py:716
+msgid "Auto selection based on the settings"
+msgstr "Автовибір на основі налаштувань"
+
+#: ../subproviders/subprov_youtubecom.py:62
+msgid "Auto-translate"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:328
+msgid "Automatically turn on external subtitles"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:482
+msgid "Autoplay start delay"
+msgstr "Автозапуск затримки пуску"
+
+#: ../hosts/host3player.py:56
+msgid "BY DAY"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:114
+msgid "Basic Science"
+msgstr ""
+
+#: ../hosts/hostpinkbike.py:41
+msgid "Best Pinkbike Videos"
+msgstr ""
+
+#: ../hosts/hostshoutcast.py:126
+#, fuzzy, python-format
+msgid "Bitrate: %s"
+msgstr "Бітрейт: поганий"
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Black"
+msgstr "Чорний"
+
+#: ../components/configextmovieplayer.py:364
+#, fuzzy
+msgid "Black iframe file"
+msgstr "Очистити розташування заставки"
+
+#: ../components/iptvconfigmenu.py:484
+msgid "Block wmv files"
+msgstr "Блокувати WMV файли"
+
+#: ../hosts/hostorthobulletscom.py:76
+msgid "Board Review"
+msgstr ""
+
+#: ../hosts/hosttwitchtv.py:478
+#, fuzzy, python-format
+msgid "Broadcaster: %s"
+msgstr "Трансляції"
+
+#: ../hosts/hostdixmax.py:117 ../hosts/hosttwitchtv.py:135
+msgid "Browse"
+msgstr "Дивитись"
+
+#: ../hosts/hostvumedicom.py:78
+#, fuzzy
+msgid "Browse videos"
+msgstr "Перегляд каналів"
+
+#: ../components/iptvconfigmenu.py:393
+#, fuzzy
+msgid "Buffering location"
+msgstr "Буфер шлях"
+
+#: ../hosts/hostkinotan.py:51
+msgid "By Year"
+msgstr "По рокам"
+
+#: ../hosts/hostgledalica.py:68
+#, fuzzy
+msgid "By category"
+msgstr "Категорія"
+
+#: ../hosts/hostkinotan.py:48
+#, fuzzy
+msgid "By country"
+msgstr "Кількість переглядів"
+
+#: ../subproviders/subprov_subscenecom.py:114
+msgid "By media title"
+msgstr ""
+
+#: ../subproviders/subprov_subscenecom.py:115
+#, fuzzy
+msgid "By release name"
+msgstr "дата випуску"
+
+#: ../hosts/hostcimaclubcom.py:127
+msgid "By year"
+msgstr ""
+
+#: ../hosts/hostgledalica.py:67
+msgid "By years"
+msgstr ""
+
+#: ../hosts/hostitvcom.py:31
+msgid "Bypass geo-blocking for VODs (it may be illegal):"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:738
+#, fuzzy
+msgid "C subtitle parser"
+msgstr "Субтитри"
+
+#: ../hosts/hostdancetrippin.py:36
+msgid "CHANNELS "
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:64
+msgid "CINEMA MOVIES"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:77
+msgid "CME SAE"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:335 ../hosts/hostwatchwrestlinguno.py:295
+msgid "COMMENTS"
+msgstr ""
+
+#: ../hosts/hostarconaitvme.py:51
+msgid "Cable"
+msgstr ""
+
+#: ../hosts/hostredbull.py:54
+#, fuzzy
+msgid "Calendar"
+msgstr "Стандарт"
+
+#: ../hosts/hostlocalmedia.py:239
+#, python-format
+msgid ""
+"Can not get mount points - cmd mount failed.\n"
+"Return code[%s].\n"
+"Return data[%s]."
+msgstr ""
+"Неможливо отримати точки монтування - cmd монтування невдале.\n"
+"Код повернення[%s].\n"
+"Повернення даних[%s]."
+
+#: ../components/iptvdirbrowser.py:74 ../components/iptvdirbrowser.py:299
+#: ../components/configbase.py:84 ../components/e2isimpledownloader.py:62
+#: ../components/iptvmultipleinputbox.py:102
+#: ../components/iptvsubdownloader.py:103
+#: ../components/iptvsubsimpledownloader.py:70
+#: ../components/recaptcha_v2myjd_widget.py:63
+#: ../components/VirtualKeyBoard.py:101 ../Web/webParts.py:82
+msgid "Cancel"
+msgstr "Відмінити"
+
+#: ../hosts/hostefilmytv.py:558 ../hosts/hostfreediscpl.py:104
+#: ../hosts/hostnaszekinotv.py:412 ../hosts/hostkinomanco.py:637
+#: ../hosts/hostplusdede.py:555 ../hosts/hostserienstreamto.py:508
+#: ../hosts/hostzalukajcom.py:344
+msgid "Captcha"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:121
+msgid ""
+"Captcha solved.\n"
+"Waiting for notification."
+msgstr ""
+
+#: ../hosts/hostbsto.py:39 ../hosts/hostmrpiracy.py:52
+msgid "Captcha solving service"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:70 ../hosts/hostkinotan.py:41
+#: ../hosts/hosttreetv.py:67
+#, fuzzy
+msgid "Cartoons"
+msgstr "Список мультфільмів"
+
+#: ../hosts/hostmozicsillag.py:42
+#, fuzzy
+msgid "Catalog"
+msgstr "Каталог A-Z"
+
+#: ../hosts/hostbbcsport.py:172
+msgid "Catch up"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione1.py:97 ../hosts/hostbbciplayer.py:55
+#: ../hosts/hostdailymotion.py:46 ../hosts/hostdarshowcom.py:96
+#: ../hosts/hostfilma24io.py:75 ../hosts/hostfilmpalast.py:52
+#: ../hosts/hostfilmstreamvkcom.py:98 ../hosts/hostfrancetv.py:447
+#: ../hosts/hostgreekdocumentaries3.py:33 ../hosts/hosthdpopcornscom.py:38
+#: ../hosts/hostitvcom.py:57 ../hosts/hostmooviecc.py:54
+#: ../hosts/hostmooviecc.py:59 ../hosts/hostmovizlandcom.py:32
+#: ../hosts/hostmovs4ucom.py:49 ../hosts/hostokgoals.py:38
+#: ../hosts/hostorthobulletscom.py:68 ../hosts/hostpinkbike.py:42
+#: ../hosts/hostplayrtsiw.py:169 ../hosts/hostserijeonline.py:56
+#: ../hosts/hostsportdeutschland.py:55 ../hosts/hoststreamcomplet.py:30
+#: ../hosts/hostsvtplayse.py:82 ../hosts/hosttantifilmorg.py:38
+#: ../hosts/hosttvnowde.py:63 ../hosts/hostustreamtv.py:30
+#: ../hosts/hostvimeo.py:65 ../hosts/hostwatchwrestlinguno.py:29
+#: ../hosts/hostzdfmediathek.py:83
+msgid "Categories"
+msgstr "Категорії"
+
+#: ../hosts/hostfilmstreamhdit.py:170
+#, fuzzy
+msgid "Categories:"
+msgstr "Категорії"
+
+#: ../libs/iklubnet.py:30
+#, fuzzy
+msgid "Categorization"
+msgstr "Категоризації:"
+
+#: ../hosts/hostkisscartoonme.py:45
+msgid "Catrtoon list"
+msgstr "Список мультфільмів"
+
+#: ../components/iptvplayerwidget.py:597
+msgid "Change active movie player"
+msgstr "Вибір активного відеоплеєра"
+
+#: ../hosts/hostliveleak.py:203 ../hosts/hostyoutube.py:57
+#: ../libs/wagasworld.py:56
+msgid "Channel"
+msgstr "Канал"
+
+#: ../hosts/hostuktvplay.py:136 ../hosts/hostuktvplay.py:200
+#, fuzzy, python-format
+msgid "Channel: %s"
+msgstr "Канали"
+
+#: ../hosts/hostbbciplayer.py:54 ../hosts/hostfrancetv.py:446
+#: ../hosts/hosttvplayercom.py:76 ../hosts/hostitvcom.py:55
+#: ../hosts/hostliveleak.py:46 ../hosts/hostororotv.py:41
+#: ../hosts/hostredbull.py:53 ../hosts/hostsvtplayse.py:80
+#: ../hosts/hosttvnowde.py:62 ../hosts/hosttwitchtv.py:118
+#: ../hosts/hosttwitchtv.py:153 ../hosts/hostvimeo.py:395
+#: ../libs/showsporttvcom.py:134
+msgid "Channels"
+msgstr "Канали"
+
+#: ../hosts/hosttwitchtv.py:631
+#, fuzzy
+msgid "Channles"
+msgstr "Канали"
+
+#: ../iptvupdate/updatemainwindow.py:380
+msgid "Checking version."
+msgstr "Перевірка версії."
+
+#: ../hosts/hostzdfmediathek.py:85
+#, fuzzy
+msgid "Children"
+msgstr "Для дітей"
+
+#: ../hosts/hostkinox.py:89 ../hosts/hostmovie4kto.py:72
+msgid "Cinema movies"
+msgstr "Кінофільми"
+
+#: ../components/e2ivk.py:423
+msgid "Clear"
+msgstr ""
+
+#: ../Web/webSite.py:69
+msgid "Click"
+msgstr ""
+
+#: ../hosts/hostkijknl.py:60 ../hosts/hosttwitchtv.py:120
+#: ../hosts/hosttwitchtv.py:283
+msgid "Clips"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:1296
+#, fuzzy
+msgid "Closing. Please wait..."
+msgstr "Йде обробка, будь-ласка, зачекайте."
+
+#: ../hosts/hostkinotan.py:50 ../hosts/hostmovs4ucom.py:41
+#: ../hosts/hosttreetv.py:70
+#, fuzzy
+msgid "Collections"
+msgstr "Колекція"
+
+#: ../hosts/hostyifytv.py:72
+msgid "Comedies"
+msgstr "Комедії"
+
+#: ../hosts/hostlookmovieag.py:71
+#, fuzzy
+msgid "Comedy Movies"
+msgstr "Комедії"
+
+#: ../hosts/hostbbcsport.py:172
+#, fuzzy
+msgid "Coming up"
+msgstr "Скоро"
+
+#: ../hosts/hostplusdede.py:325
+#, fuzzy, python-format
+msgid "Comments: %s"
+msgstr "Кількість коментарів"
+
+#: ../hosts/hostiptvplayerinfo.py:46
+msgid "Commits"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:281
+msgid "Completed."
+msgstr "Завершено."
+
+#: ../iptvupdate/updatemainwindow.py:620 ../iptvupdate/updatemainwindow.py:638
+msgid "Completed.\n"
+msgstr "Завершено.\n"
+
+#: ../components/iptvextmovieplayer.py:513
+#: ../components/iptvplayerwidget.py:1144
+#: ../components/iptvplayerwidget.py:1277
+msgid "Configuration"
+msgstr "Конфігурація"
+
+#: ../components/confighost.py:32
+#, fuzzy, python-format
+msgid "Configuration [%s] service"
+msgstr "Конфігурація служби[%s]"
+
+#: ../plugin.py:81
+#, fuzzy, python-format
+msgid "Configure %s"
+msgstr "Налаштування хостинга"
+
+#: ../components/iptvplayerwidget.py:608
+msgid "Configure host"
+msgstr "Налаштування хостинга"
+
+#: ../components/configextmovieplayer.py:238
+#: ../components/configextmovieplayer.py:274
+msgid "Configuring an external movie player"
+msgstr "Налаштування зовнішнього відеоплеєра"
+
+#: ../components/iptvconfigmenu.py:659
+msgid "Confirm new pin"
+msgstr "Підтвердіть новий PIN-код"
+
+#: ../components/iptvsubdownloader.py:213
+#, fuzzy
+msgid "Confirm the title of the movie"
+msgstr "Підтвердіть назву фільму"
+
+#: ../components/iptvconfigmenu.py:667
+msgid "Confirmation error."
+msgstr "Помилка при вводі."
+
+#: ../iptvupdate/updatemainwindow.py:382
+msgid "Confirmation of installation."
+msgstr "Підтвердження встановлення."
+
+#: ../hosts/hostallboxtv.py:518 ../hosts/hostnaszekinotv.py:661
+#, fuzzy
+msgid "Connection error."
+msgstr "Помилка при вводі."
+
+#: ../hosts/hostkreskowkazone.py:265 ../hosts/hostmrpiracy.py:583
+#: ../hosts/hosttreetv.py:413
+msgid "Connection to server failed!"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:259
+msgid "Continue downloading"
+msgstr "Продовжити завантаження"
+
+#: ../hosts/hostlocalmedia.py:595
+msgid "Copy"
+msgstr "Копіювати"
+
+#: ../iptvupdate/updatemainwindow.py:869
+msgid "Copy all graphics."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:861 ../iptvupdate/updatemainwindow.py:871
+msgid "Copy graphics without icons."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:873
+msgid "Copy icons."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:378
+msgid "Copy post installed binaries."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:292
+#, fuzzy
+msgid "Correct version."
+msgstr "Перевірка версії."
+
+#: ../hosts/hostvevo.py:375
+#, fuzzy, python-format
+msgid "Count: %s"
+msgstr "Країни"
+
+#: ../hosts/hostsovdub.py:32 ../hosts/hostyifytv.py:67
+msgid "Countries"
+msgstr "Країни"
+
+#: ../components/configextmovieplayer.py:299
+msgid "Create LCD/VFD summary screen"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:420
+#, python-format
+msgid ""
+"Create OpenSSL symlinks failed with following error \"%s\".\n"
+"Some functions may not work correctly."
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:72
+#, fuzzy
+msgid "Crime Movies"
+msgstr "Нові фільми"
+
+#: ../libs/pCommon.py:1375
+msgid "Critical Error – Content-Encoding gzip cannot be handled!"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:335
+msgid "Critical Error – cookie can't be saved!"
+msgstr ""
+
+#: ../hosts/hostted.py:356
+#, fuzzy
+msgid "Curator"
+msgstr "Конфігурація"
+
+#: ../iptvupdate/updatemainwindow.py:346
+#, python-format
+msgid "Currently you have version [%s]."
+msgstr "В даний час у вас версія [%s]."
+
+#: ../hosts/hostlocalmedia.py:598
+msgid "Cut"
+msgstr "Перемістити"
+
+#: ../libs/sportstream365.py:27
+msgid "Cyrillic Latin Converter"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:39 ../hosts/hosttvnowde.py:30
+#: ../libs/youtube_dl/extractor/bbc.py:25
+msgid "DASH/mpd"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:332 ../hosts/hostwatchwrestlinguno.py:292
+msgid "DATE"
+msgstr "ДАТА"
+
+#: ../iptvdm/iptvlist.py:118 ../Web/webParts.py:326
+msgid "DOWNLOAD ERROR"
+msgstr "ПОМИЛКА ЗАВАНТАЖЕННЯ"
+
+#: ../iptvdm/iptvlist.py:112 ../Web/webParts.py:302 ../Web/webParts.py:310
+msgid "DOWNLOADED"
+msgstr "ЗАВАНТАЖЕНІ"
+
+#: ../iptvdm/iptvlist.py:109 ../Web/webParts.py:294
+msgid "DOWNLOADING"
+msgstr "ЗАВАНТАЖЕННЯ"
+
+#: ../hosts/hosttvplayercom.py:227
+#, fuzzy
+msgid "DRM protected streams are not supported."
+msgstr "Потік Silverlight не підтримується."
+
+#: ../hosts/hostkijknl.py:248
+msgid "DRM protection detected."
+msgstr ""
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Darkgray"
+msgstr "Темно-сірий"
+
+#: ../libs/beinmatch.py:167
+#, python-format
+msgid ""
+"Data for link generation could not be found.\n"
+"Please report this problem to %s"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:405
+msgid "Data mismatch."
+msgstr ""
+
+#: ../hosts/hostplusdede.py:319
+#, fuzzy, python-format
+msgid "Date: %s"
+msgstr "Кінцева помилка: %s"
+
+#: ../Web/webParts.py:111
+msgid "Debug file does not exist - nothing to delete"
+msgstr ""
+
+#: ../Web/webSite.py:266
+msgid "Debug file does not exist - nothing to download"
+msgstr ""
+
+#: ../Web/webParts.py:107
+msgid "Debug file has been deleted"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:487
+msgid "Debug logs"
+msgstr "Включити журнал діагностики"
+
+#: ../Web/webParts.py:113
+msgid "Debug option is disabled - nothing to display"
+msgstr ""
+
+#: ../Web/webParts.py:115
+msgid "Debug option set to console - nothing to display"
+msgstr ""
+
+#: ../Web/webParts.py:117
+msgid "Debug option set to debugfile, but file does not exist - nothing to display"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "December"
+msgstr ""
+
+#: ../components/iptvpictureplayer.py:332
+#, fuzzy, python-format
+msgid "Decode file [%s] problem."
+msgstr "Проблема з завантаженням файлу [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:878
+msgid "Decrypt archive."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:978
+#, fuzzy
+msgid "Decryption the archive completed successfully."
+msgstr "Розпаковка архіву успішно завершена."
+
+#: ../components/iptvconfigmenu.py:83 ../components/iptvconfigmenu.py:88
+#: ../hosts/hostfenixsite.py:260 ../hosts/hostfilmehdnet.py:78
+#: ../hosts/hosthdstreams.py:148 ../hosts/hostkinomanco.py:213
+#: ../hosts/hostmyfreemp3.py:81 ../hosts/hosttvjworg.py:28
+#: ../libs/sportstream365.py:21
+#, fuzzy
+msgid "Default"
+msgstr "по замовчуванню"
+
+#: ../components/configextmovieplayer.py:322
+msgid "Default video aspect ratio"
+msgstr "Відео пропорції по замовчуванню"
+
+#: ../components/configextmovieplayer.py:324
+#, fuzzy
+msgid "Default video policy for 16:9"
+msgstr "Відео співвідношення сторін по замовчуванню"
+
+#: ../components/configextmovieplayer.py:326
+#, fuzzy
+msgid "Default video policy for 4:3"
+msgstr "Відео співвідношення сторін по замовчуванню"
+
+#: ../hosts/hosttvjworg.py:41
+msgid "Default video quality"
+msgstr "По замовчуванню якість відео"
+
+#: ../hosts/hostbbciplayer.py:29 ../hosts/hostbbcsport.py:37
+#: ../hosts/hostkissanimeto.py:37 ../hosts/hostkisscartoonme.py:28
+#: ../hosts/hostsvtplayse.py:44 ../hosts/hostvevo.py:29
+#: ../hosts/hostyoutube.py:33
+msgid "Default video quality:"
+msgstr "Формат відео-по замовчуванню:"
+
+#: ../Web/webParts.py:307 ../Web/webParts.py:316 ../Web/webParts.py:324
+#: ../Web/webParts.py:331
+msgid "Delete"
+msgstr ""
+
+#: ../Web/webParts.py:123
+#, fuzzy
+msgid "Delete log file"
+msgstr "Виберіть файл з субтитрами"
+
+#: ../components/iptvfavouriteswidgets.py:45
+msgid "Description:"
+msgstr "Опис:"
+
+#: ../setup/iptvsetupimpl.py:244
+msgid "Detection of MIPSEL FPU ABI."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:168
+#, fuzzy
+msgid "Detection of glibc version."
+msgstr "Виявлення FFmpeg версії."
+
+#: ../setup/iptvsetuphelper.py:123
+#, python-format
+msgid "Detection of the \"%s\" utility."
+msgstr "Засоби виявлення \"%s\" утіліта."
+
+#: ../setup/iptvsetupimpl.py:355
+#, fuzzy
+msgid "Detection of the OpenSSL 1.0.0 version."
+msgstr "Виявлення версії OpenSSL."
+
+#: ../setup/iptvsetupimpl.py:283 ../setup/iptvsetupimpl.py:313
+msgid "Detection of the OpenSSL version."
+msgstr "Виявлення версії OpenSSL."
+
+#: ../setup/iptvsetupimpl.py:466
+msgid "Detection of the ffmpeg version."
+msgstr "Виявлення FFmpeg версії."
+
+#: ../setup/iptvsetupimpl.py:430
+msgid "Detection of the gstreamer version."
+msgstr "Виявлення GStreamer версії."
+
+#: ../setup/iptvsetupimpl.py:193
+msgid "Detection of the platform."
+msgstr "Виявлення платформи."
+
+#: ../setup/iptvsetupimpl.py:168
+msgid "Detection version of installed standard C library."
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:30
+msgid "Deutsch"
+msgstr "Німецький"
+
+#: ../components/iptvplayerwidget.py:692
+msgid "Developers: "
+msgstr "Розробники: "
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:546
+msgid "Director:"
+msgstr ""
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:547
+msgid "Directors:"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1677
+#, python-format
+msgid "Directory \"%s\" does not exists."
+msgstr ""
+
+#: ../Web/webThreads.py:198
+msgid "Disable"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:354
+msgid "Disable live at plugin start"
+msgstr "Відключити, перейти на початок плагіна"
+
+#: ../components/playerselector.py:501
+#, fuzzy
+msgid "Disable not used services"
+msgstr "Видалити сервіси які не працюють"
+
+#: ../components/iptvfavouriteswidgets.py:174
+#, fuzzy
+msgid "Disable reordering"
+msgstr "Відключити режим перепризначення"
+
+#: ../components/confighost.py:153 ../components/playerselector.py:474
+msgid "Disable reordering mode"
+msgstr "Відключити режим перепризначення"
+
+#: ../components/playerselector.py:479
+msgid "Disable/Enable groups"
+msgstr ""
+
+#: ../components/playerselector.py:477
+#, fuzzy
+msgid "Disable/Enable services"
+msgstr "Видалити сервіси які не працюють"
+
+#: ../hosts/hostredbull.py:51
+#, fuzzy
+msgid "Discover"
+msgstr "обкладинка"
+
+#: ../components/iptvconfigmenu.py:361
+msgid "Display thumbnails"
+msgstr "Показати мініатюри"
+
+#: ../hosts/hostdixmax.py:55
+msgid "DixMax Suggestions"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:53 ../setup/iptvsetupimpl.py:63
+#: ../setup/iptvsetupimpl.py:66 ../setup/iptvsetupimpl.py:73
+#: ../setup/iptvsetupimpl.py:76 ../setup/iptvsetupimpl.py:82
+#: ../setup/iptvsetupimpl.py:88
+msgid "Do not install (not recommended)"
+msgstr "Не встановлюйте (не рекомендуєтся)"
+
+#: ../components/e2ivk.py:634
+#, python-format
+msgid "Do you want to download \"%s\" Virtual Keyboard layout now?"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:520
+msgid "Do you want to finish?"
+msgstr ""
+
+#: ../components/e2ivk.py:636
+#, python-format
+msgid "Do you want to try to re-download \"%s\" Virtual Keyboard layout?"
+msgstr ""
+
+#: ../hosts/hostkinox.py:91
+#, fuzzy
+msgid "Documentaries"
+msgstr "Документи"
+
+#: ../hosts/hostlookmovieag.py:74
+#, fuzzy
+msgid "Documentary Movies"
+msgstr "Документи"
+
+#: ../components/iptvextmovieplayer.py:815
+#: ../components/iptvplayerwidget.py:171
+#, fuzzy
+msgid "Download"
+msgstr "Завантажити"
+
+#: ../hosts/hostkissanimeto.py:138
+#, fuzzy, python-format
+msgid "Download \"%s\" in to \"%s\" failed!"
+msgstr "Завантажити субтитри \"%s\""
+
+#: ../hosts/hostplayrtsiw.py:506 ../hosts/hostplayrtsiw.py:507
+#, fuzzy, python-format
+msgid "Download %s"
+msgstr "Завантажити"
+
+#: ../iptvdm/iptvdmui.py:260 ../Web/webParts.py:315 ../Web/webParts.py:323
+#: ../Web/webParts.py:330
+msgid "Download again"
+msgstr "Завантажити ще раз"
+
+#: ../components/iptvsubsimpledownloader.py:130
+#, python-format
+msgid ""
+"Download can not be started.\n"
+" Incorrect address ('%r')."
+msgstr ""
+"Завантаження не може розпочатися.\n"
+" Неправильний адрес ('%r')."
+
+#: ../components/e2isimpledownloader.py:108
+#, fuzzy, python-format
+msgid ""
+"Download can not be started.\n"
+"Downloader %s not working correctly.\n"
+"Last error \"%s (%s)\"."
+msgstr ""
+"Завантаження не може розпочатися.\n"
+"Завантажувач %s працює неправильно.\n"
+"Статус[%s]"
+
+#: ../components/iptvsubsimpledownloader.py:138
+#, python-format
+msgid ""
+"Download can not be started.\n"
+"Downloader %s not working correctly.\n"
+"Status[%s]"
+msgstr ""
+"Завантаження не може розпочатися.\n"
+"Завантажувач %s працює неправильно.\n"
+"Статус[%s]"
+
+#: ../components/e2isimpledownloader.py:99
+#, fuzzy, python-format
+msgid ""
+"Download can not be started.\n"
+"Incorrect address \"%r\"."
+msgstr ""
+"Завантаження не може розпочатися.\n"
+" Неправильний адрес ('%r')."
+
+#: ../components/e2isimpledownloader.py:113
+#, fuzzy, python-format
+msgid ""
+"Download failed.\n"
+"Last error \"%s (%s)\"."
+msgstr ""
+"Помилка завантаження.\n"
+"Статус[%s]"
+
+#: ../components/iptvsubsimpledownloader.py:142
+#, python-format
+msgid ""
+"Download failed.\n"
+"Status[%s]"
+msgstr ""
+"Помилка завантаження.\n"
+"Статус[%s]"
+
+#: ../Web/webParts.py:119 ../Web/webParts.py:134
+#, fuzzy
+msgid "Download log file"
+msgstr "Завантажити ще раз"
+
+#: ../components/iptvplayerwidget.py:611 ../components/playerselector.py:462
+#: ../components/playerselector.py:475 ../Web/webParts.py:63
+#: ../Web/webParts.py:80
+#, fuzzy
+msgid "Download manager"
+msgstr "Менеджер завантажень"
+
+#: ../Web/webParts.py:240
+msgid "Download manager is not initialized"
+msgstr ""
+
+#: ../components/iptvsubdownloader.py:508
+#, fuzzy
+msgid "Download subtiles failed."
+msgstr "Завантажити субтитри %s"
+
+#: ../components/iptvextmovieplayer.py:812
+msgid "Download suggested"
+msgstr "Можна завантажувати"
+
+#: ../components/iptvplayerwidget.py:1819
+#: ../components/iptvsubdownloader.py:465
+msgid "Downloading"
+msgstr "Завантаження"
+
+#: ../setup/iptvsetuphelper.py:125
+#, python-format
+msgid ""
+"Downloading \"%s\" failed. \n"
+"Do you want to retry?"
+msgstr ""
+"Завантаження \"%s\" не вдалося. \n"
+"Ви бажаєте, спробувати ще раз?"
+
+#: ../setup/iptvsetuphelper.py:124
+#, fuzzy, python-format
+msgid "Downloading \"%s\"."
+msgstr "Завантаження  \"%s\""
+
+#: ../iptvupdate/updatemainwindow.py:376
+msgid "Downloading an update packet."
+msgstr "Завантаження пакета оновлення."
+
+#: ../iptvdm/iptvbuffui.py:209
+#, python-format
+msgid ""
+"Downloading can not be started.\n"
+" Downloader %s does not work properly.\n"
+"Status[%s]"
+msgstr ""
+"Завантаження не може розпочатися.\n"
+" Завантажувач %s не працює відповідно.\n"
+"Статус[%s]"
+
+#: ../iptvdm/iptvbuffui.py:198
+#, python-format
+msgid ""
+"Downloading can not be started.\n"
+" The address ('%r') is incorrect."
+msgstr ""
+"Завантаження не може розпочатися.\n"
+" Адрес ('%r') невірний."
+
+#: ../components/iptvarticlerichvisualizer.py:207
+#: ../components/iptvpictureplayer.py:277
+#, python-format
+msgid ""
+"Downloading cannot be started.\n"
+" Downloader [%s] not working properly.\n"
+" Status[%s]"
+msgstr ""
+"Завантаження неможливе.\n"
+"Завантажувач [%s] не працює відповідно.\n"
+"Статус[%s]"
+
+#: ../components/iptvarticlerichvisualizer.py:199
+#: ../components/iptvpictureplayer.py:259
+#, python-format
+msgid ""
+"Downloading cannot be started.\n"
+" Invalid URI[%s]."
+msgstr ""
+"Завантаження неможливе.\n"
+" Невірний адрес [%s]."
+
+#: ../components/iptvarticlerichvisualizer.py:219
+#: ../components/iptvarticlerichvisualizer.py:224
+#: ../components/iptvpictureplayer.py:326
+#, python-format
+msgid "Downloading file [%s] problem."
+msgstr "Проблема з завантаженням файлу [%s]."
+
+#: ../components/e2isimpledownloader.py:93
+#, fuzzy, python-format
+msgid ""
+"Downloading file:\n"
+"%r."
+msgstr "Проблема з завантаженням файлу [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:852
+#, fuzzy
+msgid "Downloading graphics package."
+msgstr "Завантаження пакета оновлення."
+
+#: ../iptvupdate/updatemainwindow.py:864
+#, fuzzy
+msgid "Downloading icons package."
+msgstr "Завантаження пакета оновлення."
+
+#: ../components/iptvsubsimpledownloader.py:124
+#, python-format
+msgid ""
+"Downloading subtitles.\n"
+" ('%r')."
+msgstr ""
+"Завантаження субтитрів.\n"
+" ('%r')."
+
+#: ../hosts/hostlocalmedia.py:120 ../iptvdm/iptvdmui.py:77
+#: ../Web/webParts.py:255
+msgid "Downloads"
+msgstr "Завантажити"
+
+#: ../components/iptvconfigmenu.py:395
+#, fuzzy
+msgid "Downloads location"
+msgstr "Завантажити ще раз"
+
+#: ../hosts/hostplusdede.py:323
+#, fuzzy, python-format
+msgid "Downloads: %s"
+msgstr "Завантажити"
+
+#: ../hosts/hostlookmovieag.py:73
+#, fuzzy
+msgid "Drama Movies"
+msgstr "HD Фільми"
+
+#: ../hosts/hostyifytv.py:74
+#, fuzzy
+msgid "Dramas"
+msgstr "Серіал"
+
+#: ../setup/iptvsetupimpl.py:992
+msgid "Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.\n"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:497 ../hosts/hostted.py:355
+#, fuzzy
+msgid "Duration"
+msgstr "Конфігурація"
+
+#: ../hosts/hostfilma24io.py:229 ../hosts/hostofficialfilmillimite.py:251
+#, fuzzy
+msgid "Duration:"
+msgstr "Опис:"
+
+#: ../hosts/hostuktvplay.py:199
+#, fuzzy, python-format
+msgid "Duration: %s"
+msgstr "Станції"
+
+#: ../hosts/hostfrancetv.py:412 ../hosts/hostsportitalia.py:207
+#, python-brace-format
+msgid "Duration: {0}"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:81
+msgid "During processing, please do not interrupt."
+msgstr "Під час обробки, будь-ласка, не переривайте."
+
+#: ../iptvupdate/updatemainwindow.py:82
+msgid "During processing, please wait."
+msgstr "Йде обробка, будь-ласка, зачекайте."
+
+#: ../components/iptvplayerwidget.py:690
+#, fuzzy
+msgid "E-mail: "
+msgstr "Ел. адрес"
+
+#: ../iptvupdate/updatemainwindow.py:322
+#, python-format
+msgid ""
+"E2 GUI restart after IPTVPlayer update to version[%s].\n"
+"\n"
+msgstr ""
+"Перезавантажити eнігму після оновлення IPTV Плеєра до версії[%s].\n"
+"\n"
+
+#: ../components/configbase.py:80 ../components/configbase.py:129
+#: ../components/iptvconfigmenu.py:302
+#, fuzzy
+msgid "E2iPlayer - settings"
+msgstr "IPTV Плеєр - Налаштування"
+
+#: ../components/configgroups.py:36
+msgid "E2iPlayer enable/disabled groups"
+msgstr ""
+
+#: ../Web/webParts.py:461 ../Web/webParts.py:502
+#, fuzzy
+msgid "ERROR:"
+msgstr "ПОМИЛКА"
+
+#: ../components/iptvextmovieplayer.py:1438
+msgid ""
+"ERROR: pipeline could not be constructed: no element \"playbin2\" \n"
+"Please check if gstreamer plugins are available in your system."
+msgstr ""
+"ПОМИЛКА: Не вдалося створити:, відсутність контролю: відсутність елементу \"playbin2 \" \n"
+"Перевірте встанолення GStreamer плагіни в вашій системі."
+
+#: ../components/iptvplayerwidget.py:594 ../components/iptvplayerwidget.py:595
+msgid "Edit favourites"
+msgstr "Редагувати вибране"
+
+#: ../hosts/hostorthobulletscom.py:78
+msgid "Educational Animation"
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:45 ../libs/edemtv.py:39 ../libs/ustvnow.py:40
+msgid "Email"
+msgstr "Ел. адрес"
+
+#: ../Web/webThreads.py:200
+msgid "Enable"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:173
+#, fuzzy
+msgid "Enable reordering"
+msgstr "Включити режим перепризначення"
+
+#: ../components/confighost.py:151 ../components/playerselector.py:472
+msgid "Enable reordering mode"
+msgstr "Включити режим перепризначення"
+
+#: ../libs/youtube_dl/extractor/youtube.py:127
+#, python-format
+msgid ""
+"Encryption function body extraction failed!\n"
+"Please report the problem to %s"
+msgstr ""
+
+#: ../libs/youtube_dl/extractor/youtube.py:121
+#, python-format
+msgid ""
+"Encryption function name extraction failed!\n"
+"Please report the problem to %s"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:939
+#, fuzzy
+msgid "Encryption key was downloaded successfully."
+msgstr "Оновлений пакет успішно завантажений."
+
+#: ../hosts/hosthdfull.py:34 ../hosts/hostlaola1tv.py:30
+#: ../hosts/hostmovie4kto.py:34 ../hosts/hostngolos.py:25
+#: ../hosts/hosttvjworg.py:28
+msgid "English"
+msgstr "Англійський"
+
+#: ../components/configbase.py:283
+msgid "Enter a value"
+msgstr "Введіть значення"
+
+#: ../components/iptvdirbrowser.py:263
+msgid "Enter name"
+msgstr "Введіть код"
+
+#: ../components/iptvconfigmenu.py:653
+msgid "Enter new pin"
+msgstr "Введіть новий PIN-код"
+
+#: ../components/iptvconfigmenu.py:647
+msgid "Enter old pin"
+msgstr "Введіть старий PIN-код"
+
+#: ../components/iptvplayerwidget.py:973 ../components/iptvplayerwidget.py:1387
+#: ../components/iptvplayerwidget.py:1421
+#: ../components/iptvplayerwidget.py:1464 ../plugin.py:89 ../plugin.py:98
+msgid "Enter pin"
+msgstr "Введіть PIN-код"
+
+#: ../components/e2ivk.py:310
+msgid "Enter the text"
+msgstr ""
+
+#: ../hosts/hostkijknl.py:260
+msgid "Entitlement parsing error."
+msgstr ""
+
+#: ../hosts/hostdixmax.py:294 ../hosts/hostdplayit.py:264
+#: ../libs/moonwalkcc.py:292 ../libs/moonwalkcc.py:302
+#: ../subproviders/subprov_napiprojektpl.py:232
+#, fuzzy
+msgid "Episode"
+msgstr "Епізоди"
+
+#: ../hosts/hostwatchcartoononline.py:349
+#, fuzzy
+msgid "Episode Search"
+msgstr "Епізоди"
+
+#: ../hosts/hostcartoonhd.py:493
+#, fuzzy
+msgid "Episode title"
+msgstr "Епізоди"
+
+#: ../hosts/hostdarshowcom.py:200 ../hosts/hostgledalica.py:241
+#: ../hosts/hostkijknl.py:59 ../hosts/hostkinomanco.py:850
+msgid "Episodes"
+msgstr "Епізоди"
+
+#: ../hosts/hostlocalmedia.py:666
+#, python-format
+msgid "Error code: %s\n"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:130
+#, python-format
+msgid ""
+"Error code: %s\n"
+"Error message: %s"
+msgstr ""
+
+#: ../hosts/hostbbcsport.py:404 ../hosts/hosteurosportplayer.py:561
+msgid "Error communicating with the server."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:222
+#, fuzzy, python-format
+msgid "Error deleting file \"%s\".\n"
+msgstr "Помилка видалення файлів \"%s\" .\n"
+
+#: ../Web/webParts.py:109
+msgid "Error during deletion of the debug file."
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:795
+#, fuzzy, python-format
+msgid "Error message \"%s\"."
+msgstr "Помилка читання файлу \"%s\" .\n"
+
+#: ../subproviders/subprov_opensubtitlesorg.py:203
+#: ../subproviders/subprov_opensubtitlesorg.py:205
+#, python-format
+msgid ""
+"Error message: \"%s\".\n"
+"Error code: \"%s\"."
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:666
+#, fuzzy, python-format
+msgid "Error message: %s\n"
+msgstr "Помилка читання файлу \"%s\" .\n"
+
+#: ../components/e2ivksuggestion.py:95
+#, fuzzy
+msgid "Error occurs"
+msgstr ""
+"Виникла помилка.\n"
+"[%s]"
+
+#: ../iptvdm/iptvbuffui.py:256 ../iptvdm/iptvbuffui.py:562
+msgid "Error occurs during download."
+msgstr "Помилка завантаження."
+
+#: ../tools/iptvfavourites.py:193 ../tools/iptvfavourites.py:209
+#, fuzzy, python-format
+msgid "Error reading file \"%s\".\n"
+msgstr "Помилка читання файлу \"%s\" .\n"
+
+#: ../tools/iptvfavourites.py:239 ../tools/iptvfavourites.py:253
+#: ../tools/iptvhostgroups.py:211 ../tools/iptvhostgroups.py:294
+#, fuzzy, python-format
+msgid "Error writing file \"%s\".\n"
+msgstr "Помилка запису файлу \"%s\" .\n"
+
+#: ../iptvupdate/updatemainwindow.py:990
+#, python-format
+msgid ""
+"Error. Return code [%d]\n"
+"%s."
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:79
+msgid "Ethical & Legal"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:94
+#, fuzzy
+msgid "Events"
+msgstr "Головна подія"
+
+#: ../hosts/hostorthobulletscom.py:80
+msgid "Exam Review"
+msgstr ""
+
+#: ../components/iptvdirbrowser.py:270
+msgid "Exception occurs"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:379
+msgid "Executing user scripts."
+msgstr "Запуск скриптів користувача."
+
+#: ../components/iptvplayerwidget.py:169
+msgid "Exit"
+msgstr "Вихід"
+
+#: ../components/iptvconfigmenu.py:480
+msgid "External movie player config"
+msgstr "Зовнішній плеєр конфігурація"
+
+#: ../iptvupdate/updatemainwindow.py:377
+msgid "Extracting an update packet."
+msgstr "Вилучення пакета оновлення."
+
+#: ../iptvupdate/updatemainwindow.py:853
+#, fuzzy
+msgid "Extracting graphics package."
+msgstr "Вилучення пакета оновлення."
+
+#: ../iptvupdate/updatemainwindow.py:865
+#, fuzzy
+msgid "Extracting icons package."
+msgstr "Вилучення пакета оновлення."
+
+#: ../hosts/hostfilmstreamhdit.py:35
+msgid "FILM ARCHIVE"
+msgstr ""
+
+#: ../libs/filmonapi.py:90
+msgid "FREE"
+msgstr ""
+
+#: ../hosts/hostefilmytv.py:554 ../hosts/hostfilmezz.py:336
+#: ../hosts/hostfilisertv.py:377 ../hosts/hostfreediscpl.py:130
+#: ../hosts/hostnaszekinotv.py:436 ../hosts/hostkinomanco.py:632
+#: ../hosts/hostmooviecc.py:440 ../hosts/hostplusdede.py:549
+#: ../hosts/hostserienstreamto.py:520 ../hosts/hoststreamliveto.py:262
+#: ../hosts/hoststreamliveto.py:275 ../hosts/hoststreamliveto.py:288
+#: ../hosts/hoststreamliveto.py:302 ../hosts/hoststreamliveto.py:332
+#: ../hosts/hostzalukajcom.py:355 ../libs/recaptcha_v1.py:36
+#: ../libs/recaptcha_v1.py:63 ../libs/recaptcha_v2.py:37
+#: ../libs/recaptcha_v2.py:71 ../libs/urlparser.py:3905
+#, fuzzy, python-format
+msgid "Fail to get \"%s\"."
+msgstr "Встановіть в \"%s\" ."
+
+#: ../hosts/hoststreamliveto.py:267
+#, fuzzy
+msgid "Fail to get captcha data."
+msgstr "Папка даних кеша"
+
+#: ../subproviders/subprov_napisy24pl.py:80
+#: ../subproviders/subprov_opensubtitlesorg2.py:132
+#, python-format
+msgid "Failed to connect to server \"%s\"."
+msgstr ""
+
+#: ../components/isubprovider.py:597 ../subproviders/subprov_napisy24pl.py:366
+#: ../subproviders/subprov_popcornsubtitles.py:150
+#, python-format
+msgid "Failed to convert the file \"%s\" to UTF-8."
+msgstr ""
+
+#: ../components/isubprovider.py:524
+#, fuzzy, python-format
+msgid "Failed to create directory \"%s\"."
+msgstr "Проблема з каталогом [%s]."
+
+#: ../subproviders/subprov_opensubtitlesorg.py:372
+msgid "Failed to decode to UTF-8."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:302
+#: ../subproviders/subprov_opensubtitlesorg.py:358
+#: ../subproviders/subprov_opensubtitlesorg3.py:267
+#: ../subproviders/subprov_popcornsubtitles.py:105
+#: ../subproviders/subprov_youtubecom.py:97
+#, fuzzy
+msgid "Failed to download subtitle."
+msgstr "Завантажити субтитри %s"
+
+#: ../subproviders/subprov_opensubtitlesorg.py:365
+#: ../subproviders/subprov_opensubtitlesorg3.py:276
+msgid "Failed to gzip."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:94
+#: ../subproviders/subprov_opensubtitlesorg2.py:158
+#, python-format
+msgid "Failed to log in user \"%s\". Please check your login and password."
+msgstr ""
+
+#: ../components/isubprovider.py:600 ../subproviders/subprov_napisy24pl.py:369
+#: ../subproviders/subprov_popcornsubtitles.py:153
+#, python-format
+msgid "Failed to open the file \"%s\"."
+msgstr ""
+
+#: ../subproviders/subprov_popcornsubtitles.py:98
+msgid "Failed to page with subtitle link."
+msgstr ""
+
+#: ../components/isubprovider.py:487 ../subproviders/subprov_napisy24pl.py:310
+#: ../subproviders/subprov_opensubtitlesorg.py:384
+#: ../subproviders/subprov_popcornsubtitles.py:113
+#: ../subproviders/subprov_youtubecom.py:105
+#, fuzzy, python-format
+msgid "Failed to write file \"%s\"."
+msgstr "Помилка запису файлу \"%s\" .\n"
+
+#: ../subproviders/subprov_napisy24pl.py:363
+#: ../subproviders/subprov_popcornsubtitles.py:147
+#, fuzzy, python-format
+msgid "Failed to write the file \"%s\"."
+msgstr "Помилка запису файлу \"%s\" .\n"
+
+#: ../components/iptvplayerwidget.py:1456
+#, python-format
+msgid "Failed: %s"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:76
+#, fuzzy
+msgid "Family Movies"
+msgstr "HD Фільми"
+
+#: ../hosts/hostlookmovieag.py:78
+#, fuzzy
+msgid "Fantasy Movies"
+msgstr "HD Фільми"
+
+#: ../setup/iptvsetupimpl.py:348
+msgid ""
+"Fatal Error!\n"
+"Openssl could not be found. Please install it and retry."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:221
+msgid ""
+"Fatal Error!\n"
+"Plugin is not supported with your platform."
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:2160
+msgid "Fatal error: consoleWrite failed!"
+msgstr ""
+
+#: ../hosts/hostfavourites.py:38
+#, fuzzy
+msgid "Favourites"
+msgstr "Вибране"
+
+#: ../components/iptvfavouriteswidgets.py:177
+#: ../components/iptvfavouriteswidgets.py:263
+msgid "Favourites groups"
+msgstr "Група Вибране"
+
+#: ../components/iptvfavouriteswidgets.py:153
+msgid "Favourites manager"
+msgstr "Менеджер вибраного"
+
+#: ../hosts/hostmovie4kto.py:77
+msgid "Featured"
+msgstr "Рекомендовані"
+
+#: ../hosts/hostsportitalia.py:77
+msgid "February"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:649
+#, fuzzy, python-format
+msgid "File \"%s\" already exists"
+msgstr "Файл \"%s\" вже існує!"
+
+#: ../hosts/hostlocalmedia.py:632
+#, python-format
+msgid "File \"%s\" already exists!"
+msgstr "Файл \"%s\" вже існує!"
+
+#: ../libs/urlparser.py:2521
+#, fuzzy
+msgid "File Not Found."
+msgstr "Субтитри не знайдені."
+
+#: ../iptvupdate/updatemainwindow.py:311
+#, python-format
+msgid "File [%s] reading failed."
+msgstr "Проблема читання файлу [%s]."
+
+#: ../components/iptvplayerwidget.py:1708
+#, python-format
+msgid "File [%s] was added to downloading queue."
+msgstr "Файл [%s] файл додано до завантаження."
+
+#: ../components/iptvplayerwidget.py:1702
+#, python-format
+msgid "File can not be downloaded. Protocol [%s] is unsupported"
+msgstr "Файл не можливо завантажити. Протокол [%s] не підтримується"
+
+#: ../iptvupdate/updatemainwindow.py:728
+#, fuzzy, python-format
+msgid ""
+"File not found:\n"
+"[%s]."
+msgstr "Субтитри не знайдені."
+
+#: ../hosts/hostkinomanco.py:618
+msgid "Fill captcha"
+msgstr ""
+
+#: ../suggestions/filmstarts.py:17
+msgid "Filmstarts Suggestions"
+msgstr ""
+
+#: ../suggestions/filmweb.py:17
+msgid "Filmweb Suggestions"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:63
+#, fuzzy
+msgid "Filter By Year"
+msgstr "По рокам"
+
+#: ../hosts/hostcimaclubcom.py:131 ../hosts/hostfilmixco.py:128
+#: ../hosts/hostnaszekinotv.py:169 ../hosts/hostmovs4ucom.py:42
+#: ../hosts/hostnuteczki.py:93
+msgid "Filters"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:427 ../components/iptvconfigmenu.py:438
+#: ../components/iptvconfigmenu.py:449 ../components/iptvconfigmenu.py:460
+#: ../components/iptvconfigmenu.py:470
+msgid "First movie player in buffering mode"
+msgstr "Вибрати перший крок плеєра в режимі (буферизації)"
+
+#: ../components/iptvconfigmenu.py:422 ../components/iptvconfigmenu.py:433
+#: ../components/iptvconfigmenu.py:444 ../components/iptvconfigmenu.py:455
+#: ../components/iptvconfigmenu.py:465
+msgid "First movie player without buffering mode"
+msgstr "Вибрати перший крок плеєра"
+
+#: ../setup/iptvsetupimpl.py:1192
+msgid "Fluendo mpegdemux for GSTREAMER 0.10"
+msgstr "Зробити даний mpegdemux для GSTREAMER 0.10"
+
+#: ../components/iptvconfigmenu.py:382
+msgid "Folder for cache data"
+msgstr "Папка даних кеша"
+
+#: ../components/iptvconfigmenu.py:383
+msgid "Folder for temporary data"
+msgstr "Папка для тимчасових даних"
+
+#: ../components/iptvplayerwidget.py:1214
+#: ../components/iptvplayerwidget.py:1282
+msgid "Following host are broken or additional python modules are needed."
+msgstr "Хост не працює, або немає додаткових модулів Python."
+
+#: ../hosts/hostorthobulletscom.py:112
+msgid "Foot & Ankle"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1594
+msgid "Format 'wmv' blocked in configuration."
+msgstr "Формат 'wmv' заблокованний в конфігурації."
+
+#: ../hosts/hosttvplayercom.py:126 ../hosts/hoststreamliveto.py:136
+msgid "Free"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "French"
+msgstr "Франція"
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Friday"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:84
+#: ../components/configextmovieplayer.py:96
+#: ../components/configextmovieplayer.py:108
+#: ../components/configextmovieplayer.py:120
+#: ../components/configextmovieplayer.py:132
+msgid "From E2 settings"
+msgstr "Налаштування E2"
+
+#: ../hosts/host123movieshd.py:185
+msgid "Functionality protected by Google reCAPTCHA!"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1237
+msgid "GST-IFDSRC for GSTREAMER 1.X"
+msgstr "GST-IFDSRC для GSTREAMER 1.X"
+
+#: ../hosts/hosttwitchtv.py:479
+#, fuzzy, python-format
+msgid "Game: %s"
+msgstr "Ігри"
+
+#: ../hosts/hosttwitchtv.py:150 ../hosts/hosttwitchtv.py:629
+msgid "Games"
+msgstr "Ігри"
+
+#: ../hosts/hosthitboxtv.py:41
+msgid "Games played Now"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:117
+msgid "General"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:47 ../hosts/hostszenestreamz.py:39
+#: ../hosts/hostszenestreamz.py:41
+#, fuzzy
+msgid "Genre selection"
+msgstr "Селектор Графічних послуг"
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostddl.py:543
+#, fuzzy
+msgid "Genre:"
+msgstr "Жанри"
+
+#: ../hosts/hostgamatocom.py:70
+#, fuzzy
+msgid "Genre: "
+msgstr "Жанри"
+
+#: ../hosts/hostshoutcast.py:124
+#, fuzzy, python-format
+msgid "Genre: %s"
+msgstr "Жанри"
+
+#: ../hosts/hostanimeodcinki.py:44 ../hosts/hostbsto.py:80
+#: ../hosts/hostdarshowcom.py:96 ../hosts/hostlookmovieag.py:64
+#: ../hosts/hostmovie4kto.py:75 ../hosts/hostmovie4kto.py:80
+#: ../hosts/hostmovs4ucom.py:50 ../hosts/hostserienstreamto.py:73
+#: ../hosts/hostshoutcast.py:44 ../hosts/hostsovdub.py:31
+#: ../hosts/hostthewatchseriesto.py:67 ../hosts/hostvidcorncom.py:507
+#: ../hosts/hostyifytv.py:65
+msgid "Genres"
+msgstr "Жанри"
+
+#: ../hosts/hostappletrailers.py:96 ../hosts/hostfilma24io.py:237
+#: ../hosts/hostddl.py:544 ../hosts/hostofficialfilmillimite.py:259
+#, fuzzy
+msgid "Genres:"
+msgstr "Жанри"
+
+#: ../hosts/hostdrdk.py:27
+msgid "Geolocation IP:"
+msgstr "Географічне положення IP:"
+
+#: ../hosts/hostardmediathek.py:402 ../hosts/hostmovie4kto.py:34
+msgid "German"
+msgstr "Німеччина"
+
+#: ../components/iptvconfigmenu.py:378
+msgid "German proxy server url"
+msgstr "Німецький проксі-сервер гіперпосилання"
+
+#: ../libs/ustvnow.py:43
+msgid "Get EPG"
+msgstr "Отримати EPG"
+
+#: ../iptvupdate/updatemainwindow.py:877
+msgid "Get decryption key."
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:230
+#, fuzzy
+msgid "Get languages failed!"
+msgstr "Виберіть мову"
+
+#: ../libs/videostar.py:92
+#, python-format
+msgid "Get page \"%s\" error."
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:203
+#, fuzzy
+msgid "Get token failed!"
+msgstr "Помилка входу."
+
+#: ../iptvupdate/updatemainwindow.py:730
+#, fuzzy, python-brace-format
+msgid "GitLab version from {0} was downloaded successfully."
+msgstr "Оновлений пакет успішно завантажений."
+
+#: ../components/iptvconfigmenu.py:83
+msgid "Gitlab"
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:56
+#, fuzzy
+msgid "Go to the host configuration available under blue button."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../hosts/hostourmatchnet.py:39
+msgid "Goal Of The Month"
+msgstr "Ігри місяця"
+
+#: ../suggestions/google.py:18
+msgid "Google Suggestions"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:366
+msgid "Graphic services selector"
+msgstr "Селектор Графічних послуг"
+
+#: ../components/iptvfavouriteswidgets.py:59 ../tools/iptvfavourites.py:87
+#, python-format
+msgid "Group \"%s\" already exists."
+msgstr "Група \"%s\" вже існує."
+
+#: ../components/iptvfavouriteswidgets.py:45
+#, python-format
+msgid "Group %d"
+msgstr "Група %d"
+
+#: ../hosts/hosturllist.py:33
+msgid "Group links into categories: "
+msgstr "Група, посиланя по категоріям: "
+
+#: ../tools/iptvfavourites.py:176
+#, python-format
+msgid "Group with id[%s] not found."
+msgstr "Група з ідентифікатором[%s] не знайдена."
+
+#: ../hosts/hostvimeo.py:396
+#, fuzzy
+msgid "Groups"
+msgstr "група"
+
+#: ../libs/videostar.py:182
+#, python-format
+msgid "Guest timeout: %s"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:59
+msgid "HDFull Suggestions"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:38 ../hosts/hosttvnowde.py:29
+#: ../libs/youtube_dl/extractor/bbc.py:24
+msgid "HLS/m3u8"
+msgstr ""
+
+#: ../hosts/hostfilmstreamhdit.py:34
+msgid "HOME"
+msgstr ""
+
+#: ../libs/pCommon.py:340
+#, python-format
+msgid "HTTPS connection error \"%s\"\n"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:111
+msgid "Hand"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:55
+msgid "Hardware floating point"
+msgstr ""
+
+#: ../components/playerselector.py:485
+#, python-format
+msgid "Hide \"%s\" group"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+msgid "High"
+msgstr ""
+
+#: ../libs/weebtv.py:31
+msgid "High (or HD)"
+msgstr "Високий (або HD)"
+
+#: ../hosts/hostbbciplayer.py:193 ../hosts/hosttwitchtv.py:106
+msgid "Highlights"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:77
+#, fuzzy
+msgid "History Movies"
+msgstr "HD Фільми"
+
+#: ../hosts/hostyoutube.py:55
+msgid "History of searched phrases."
+msgstr "Історія пошуку."
+
+#: ../hosts/host9anime.py:44 ../hosts/hostfilmezz.py:65
+#: ../hosts/hostkissanimeto.py:59 ../hosts/hostkisscartoonme.py:44
+#: ../hosts/hostourmatchnet.py:34
+#, fuzzy
+msgid "Home"
+msgstr "Домашня сторінка"
+
+#: ../hosts/hostzdfmediathek.py:80 ../hosts/hostzdfmediathek.py:96
+msgid "Home page"
+msgstr "Головна сторінка"
+
+#: ../hosts/hostlookmovieag.py:79
+#, fuzzy
+msgid "Horror Movies"
+msgstr "HD Фільми"
+
+#: ../libs/urlparser.py:610
+#, fuzzy, python-format
+msgid "Hosting \"%s\" not supported."
+msgstr "Потік Silverlight не підтримується."
+
+#: ../libs/urlparser.py:612
+#, fuzzy, python-format
+msgid "Hosting \"%s\" unknown."
+msgstr "Встановлення \"%s\" ."
+
+#: ../hosts/hosturllist.py:93 ../hosts/hosturllist.py:105
+#, python-format
+msgid "Hosting: %s, %s"
+msgstr "Хостинг: %s, %s"
+
+#: ../Web/webParts.py:192
+#, fuzzy
+msgid "Hosts settings"
+msgstr "Налаштування E2"
+
+#: ../hosts/hostorthobulletscom.py:81
+msgid "Humanitarian"
+msgstr ""
+
+#: ../suggestions/imdb.py:17
+msgid "IMDb Suggestions"
+msgstr ""
+
+#: ../hosts/hostvidcorncom.py:495
+#, fuzzy
+msgid "IMDb rating"
+msgstr "Кращий рейтинг"
+
+#: ../iptvupdate/updatemainwindow.py:252 ../iptvupdate/updatemainwindow.py:340
+#: ../iptvupdate/updatemainwindow.py:343
+msgid "IPTVPlayer - update"
+msgstr "IPTVПлеєр - Оновлення"
+
+#: ../setup/iptvsetupwidget.py:87
+msgid ""
+"IPTVPlayer need some additional setup.\n"
+"Such as downloading and installation additional binaries.\n"
+"Press OK to start."
+msgstr ""
+"IPTVPlayer потрібні додаткові налаштування. \n"
+"таких, як завантаження і встановлення додаткових модулів двоїчного файлу,натисніть OK, шоб розпочати."
+
+#: ../hosts/hosttvjworg.py:43
+msgid "Icon type"
+msgstr "Тип іконка"
+
+#: ../hosts/hostardmediathek.py:35
+#, fuzzy
+msgid "Icons quality"
+msgstr "якість"
+
+#: ../hosts/hostzdfmediathek.py:37
+msgid "Icons size"
+msgstr "Размір іконок"
+
+#: ../hosts/hostorthobulletscom.py:82
+msgid "Industry"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:610
+msgid "Info"
+msgstr "Інформація"
+
+#: ../components/configextmovieplayer.py:298
+msgid "Info bar clock format"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:319
+msgid "Info bar timeout"
+msgstr ""
+
+#: ../setup/iptvsetupwidget.py:86 ../Web/webParts.py:80
+msgid "Information"
+msgstr "Інформація"
+
+#: ../components/iptvextmovieplayer.py:759
+msgid "Information about audio tracks not available."
+msgstr "Інформації про аудіо треки немає."
+
+#: ../Web/webParts.py:367
+msgid "Initial list"
+msgstr ""
+
+#: ../Web/webParts.py:241
+#, fuzzy
+msgid "Initialize Download Manager"
+msgstr "Менеджер завантажень"
+
+#: ../components/iptvconfigmenu.py:352
+msgid "Initialize web interface (experimental)"
+msgstr ""
+
+#: ../Web/webSite.py:172 ../Web/webSite.py:217 ../Web/webSite.py:344
+#: ../Web/webSite.py:521
+msgid "Initiating data, please wait"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:359
+msgid "Inject black iframe at video playback finish"
+msgstr ""
+
+#: ../components/iptvinputbox.py:23 ../components/iptvmultipleinputbox.py:35
+#: ../components/iptvmultipleinputbox.py:98
+msgid "Input"
+msgstr "Вхід"
+
+#: ../setup/iptvsetupimpl.py:50 ../setup/iptvsetupimpl.py:51
+#: ../setup/iptvsetupimpl.py:52 ../setup/iptvsetupimpl.py:61
+#: ../setup/iptvsetupimpl.py:62 ../setup/iptvsetupimpl.py:64
+#: ../setup/iptvsetupimpl.py:65 ../setup/iptvsetupimpl.py:71
+#: ../setup/iptvsetupimpl.py:72 ../setup/iptvsetupimpl.py:74
+#: ../setup/iptvsetupimpl.py:75 ../setup/iptvsetupimpl.py:80
+#: ../setup/iptvsetupimpl.py:81 ../setup/iptvsetupimpl.py:86
+#: ../setup/iptvsetupimpl.py:87
+#, fuzzy, python-format
+msgid "Install into the \"%s\"."
+msgstr "Встановіть в \"%s\" ."
+
+#: ../setup/iptvsetupimpl.py:1355
+msgid "Installation binary failed. Retry?"
+msgstr "Встановлення двоїчного файлу не вдалося. Повторіть?"
+
+#: ../iptvupdate/updatemainwindow.py:647
+msgid "Installation has been aborted."
+msgstr "Встановлення перервано."
+
+#: ../iptvupdate/updatemainwindow.py:645
+msgid "Installation has been confirmed."
+msgstr "Встановлення підтверждено."
+
+#: ../setup/iptvsetuphelper.py:130
+#, fuzzy, python-format
+msgid "Installing \"%s\"."
+msgstr "Встановлення \"%s\" ."
+
+#: ../iptvupdate/updatemainwindow.py:384
+msgid "Installing new version."
+msgstr "Встановлення нової версії."
+
+#: ../hosts/hostorthobulletscom.py:83
+msgid "Interactive Learning Center(ILC)"
+msgstr ""
+
+#: ../libs/urlparser.py:10898
+#, python-format
+msgid "Internal Server Error. Server response code: %s"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:126
+#, fuzzy
+msgid "Invalid email."
+msgstr "Невірний код."
+
+#: ../components/iptvdirbrowser.py:272
+msgid "Invalid name."
+msgstr "Невірний код."
+
+#: ../components/iptvextmovieplayer.py:709
+msgid "Is this message displayed correctly?"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:868
+msgid "It improves HLS/M3U8 stream download.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1239
+msgid "It improves buffering mode with the gstplayer.\n"
+msgstr "Це покращує режим буферизації с gstplayer.\n"
+
+#: ../setup/iptvsetupimpl.py:928
+msgid "It improves commands execution with very long arguments.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:803
+msgid "It improves json data parsing.\n"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:1194
+msgid "It improves playing of streams hls/m3u8.\n"
+msgstr "Це покращує відтворенняе потоків hls/m3u8.\n"
+
+#: ../setup/iptvsetupimpl.py:740
+msgid "It improves subtitles parsing.\n"
+msgstr ""
+
+#: ../libs/pCommon.py:475 ../libs/pCommon.py:1204
+msgid "It is not allowed to call getURLRequestData from main thread."
+msgstr ""
+
+#: ../hosts/hostcineto.py:372
+msgid "It looks like some kind of protection. Try again later."
+msgstr ""
+
+#: ../libs/pCommon.py:341
+#, python-format
+msgid "It looks like your current configuration do not allow to connect to the https://%s/.\n"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:476
+#, python-format
+msgid "It seems that the host \"%s\" has crashed."
+msgstr "Схоже, цей хост \"%s\" не працює."
+
+#: ../components/iptvplayerwidget.py:480
+#, python-format
+msgid "It seems that the host \"%s\" has crashed. Do you want to report this problem?"
+msgstr "Схоже, у вас \"%s\" виник збій. Ви бажаєте, повідомити про цю проблему?"
+
+#: ../components/iptvsubdownloader.py:369
+#, fuzzy, python-format
+msgid "It seems that the subtitle's provider \"%s\" has crashed. Do you want to report this problem?"
+msgstr "Схоже, у вас \"%s\" виник збій. Ви бажаєте, повідомити про цю проблему?"
+
+#: ../components/iptvextmovieplayer.py:1433
+#, python-format
+msgid ""
+"It seems that the video player \"%s\" does not work properly.\n"
+"\n"
+"STS: %s\n"
+"ERROR CODE: %r"
+msgstr ""
+"Схоже, що відео-плеєр \"%s\" не працює відповідно.\n"
+"\n"
+"STS: %s\n"
+"КОД ПОМИЛКИ: %r"
+
+#: ../components/isubprovider.py:535
+msgid "It seems that unrar utility is not installed."
+msgstr ""
+
+#: ../components/isubprovider.py:512 ../subproviders/subprov_napisy24pl.py:330
+msgid "It seems that unzip utility is not installed."
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Italian"
+msgstr "Італія"
+
+#: ../tools/iptvfavourites.py:156
+#, python-format
+msgid "Item idx[%d] not found in group[%s]."
+msgstr "Пункт idx[%d] не знайдено в групі[%s]."
+
+#: ../hosts/hostliveleak.py:45 ../hosts/hostliveleak.py:202
+msgid "Items"
+msgstr "Предмети"
+
+#: ../components/iptvfavouriteswidgets.py:296
+#, python-format
+msgid "Items in group \"%s\""
+msgstr "Місце в групі \"%s\""
+
+#: ../hosts/hosttvnowde.py:354
+msgid "Items with DRM protection."
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:158
+#, fuzzy
+msgid "JDownloader script execution"
+msgstr "Проблема з виконання скриптів користувача [%s]."
+
+#: ../components/recaptcha_v2myjd_widget.py:101
+#, python-format
+msgid ""
+"JDownloader script execution failed.\n"
+"Error code: %s\n"
+msgstr ""
+
+#: ../components/recaptcha_v2myjd_widget.py:98
+msgid "JDownloader script finished."
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "January"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Japanese"
+msgstr "Японський"
+
+#: ../hosts/hostorthobulletscom.py:84
+msgid "Jobs & Positions"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:85
+#, fuzzy
+msgid "Journal Club"
+msgstr "Журналістика"
+
+#: ../hosts/hostsportitalia.py:77
+msgid "July"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "June"
+msgstr ""
+
+#: ../hosts/hostalltubetv.py:31
+msgid "Junior"
+msgstr "Юнацький"
+
+#: ../hosts/hostorthobulletscom.py:108
+msgid "Knee & Sports"
+msgstr ""
+
+#: ../hosts/hostworldfree4u.py:42
+#, fuzzy
+msgid "LATEST"
+msgstr "ОСТАННІ ВІДЕО"
+
+#: ../hosts/hostdancetrippin.py:35
+msgid "LATEST CONTENT"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:334 ../hosts/hostwatchwrestlinguno.py:294
+msgid "LIKES"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:62
+msgid "LIST"
+msgstr ""
+
+#: ../hosts/host3player.py:55
+msgid "LIVE"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:102
+msgid "LIVE STREAMING"
+msgstr ""
+
+#: ../hosts/hostgreekdocumentaries3.py:35
+msgid "Labels"
+msgstr "Етикетки"
+
+#: ../hosts/hostddl.py:35 ../hosts/hosthdfull.py:40 ../hosts/hostkinox.py:217
+#: ../hosts/hostkinox.py:383 ../hosts/hosttvjworg.py:40
+#, fuzzy
+msgid "Language"
+msgstr "Мова:"
+
+#: ../hosts/hostlaola1tv.py:39 ../hosts/hostmovie4kto.py:39
+#: ../hosts/hostngolos.py:29 ../libs/skylinewebcamscom.py:35
+msgid "Language:"
+msgstr "Мова:"
+
+#: ../hosts/hosttwitchtv.py:419 ../hosts/hosttwitchtv.py:439
+#: ../hosts/hosttwitchtv.py:476
+#, fuzzy, python-format
+msgid "Language: %s"
+msgstr "Мова:"
+
+#: ../hosts/hostyifytv.py:66
+msgid "Languages"
+msgstr "Мови"
+
+#: ../Web/webParts.py:127
+#, python-format
+msgid "Last %d lines of the %s file are:"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:78
+#, fuzzy
+msgid "Last chance"
+msgstr "Остання сторінка"
+
+#: ../components/iptvconfigmenu.py:307
+msgid "Last checked version"
+msgstr "Кінцева перевірка версії"
+
+#: ../hosts/hosttwitchtv.py:113
+#, fuzzy
+msgid "Last day"
+msgstr "Остання сторінка"
+
+#: ../components/iptvplayerwidget.py:336 ../libs/pCommon.py:1376
+#, fuzzy, python-format
+msgid ""
+"Last error:\n"
+"%s"
+msgstr "Кінцева помилка: %s"
+
+#: ../components/iptvplayerwidget.py:1528
+#: ../components/iptvplayerwidget.py:2034
+#: ../components/iptvsubdownloader.py:513
+#: ../components/iptvsubdownloader.py:553
+#, python-format
+msgid "Last error: \"%s\""
+msgstr "Кінцева помилка: \"%s\""
+
+#: ../hosts/hosttwitchtv.py:115
+#, fuzzy
+msgid "Last month"
+msgstr "Кінцева помилка"
+
+#: ../hosts/host9anime.py:46
+#, fuzzy
+msgid "Last update"
+msgstr "Останні оновлення"
+
+#: ../hosts/hosttwitchtv.py:114
+#, fuzzy
+msgid "Last week"
+msgstr "Остання сторінка"
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
+msgid "Lastest"
+msgstr "Послідній"
+
+#: ../hosts/hostplayrtsiw.py:148
+msgid "Latest"
+msgstr "Послідній"
+
+#: ../hosts/hostlookmovieag.py:62
+#, fuzzy
+msgid "Latest Added Movies"
+msgstr "Щойно добавленні"
+
+#: ../hosts/hostfilmezz.py:70
+msgid "Latest added"
+msgstr "Щойно добавленні"
+
+#: ../hosts/hostmovienightws.py:28
+#, fuzzy
+msgid "Latest movies"
+msgstr "Послідні серії"
+
+#: ../hosts/hostsvtplayse.py:77
+#, fuzzy
+msgid "Latest news broadcast"
+msgstr "Нові епізоди трансляції"
+
+#: ../hosts/hostsvtplayse.py:76
+#, fuzzy
+msgid "Latest programs"
+msgstr "Нові оновлення"
+
+#: ../hosts/hostkissanimeto.py:66 ../hosts/hostkisscartoonme.py:50
+msgid "Latest update"
+msgstr "Останні оновлення"
+
+#: ../hosts/hostmovie4kto.py:73 ../hosts/hostmovie4kto.py:78
+msgid "Latest updates"
+msgstr "Нові оновлення"
+
+#: ../components/iptvplayerwidget.py:689
+msgid "Lead programmer: "
+msgstr ""
+
+#: ../Web/webParts.py:437
+msgid "Level:"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Lightgray"
+msgstr "Світло-сірий"
+
+#: ../components/configextmovieplayer.py:334
+msgid "Line Spacing"
+msgstr "Міжрядковий інтервал"
+
+#: ../components/iptvextmovieplayer.py:1857
+msgid "Link is not supported by the gstplayer. Please use the extelayer3 if available."
+msgstr ""
+
+#: ../hosts/host3player.py:356 ../hosts/host7tvde.py:286
+msgid "Link protected with DRM."
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:19
+msgid "Link protected with Google ReCaptcha v2"
+msgstr ""
+
+#: ../hosts/hostekinotv.py:395 ../hosts/hostekinotv.py:413
+#: ../hosts/hostfilmezz.py:301 ../hosts/hostfreediscpl.py:83
+#: ../hosts/hosthdstreams.py:395 ../hosts/hosthdstreams.py:411
+#: ../hosts/hostmooviecc.py:407 ../hosts/hostserienstreamto.py:396
+msgid "Link protected with google recaptcha v2."
+msgstr ""
+
+#: ../Web/webParts.py:445
+#, fuzzy
+msgid "Links for"
+msgstr "Посилання"
+
+#: ../hosts/hosturllist.py:49
+#, fuzzy
+msgid "Links from all files without categories"
+msgstr "Посилання відеоролики і повідомлення, без розділу на категорії"
+
+#: ../hosts/hosturllist.py:50 ../hosts/hosturllist.py:51
+#: ../hosts/hosturllist.py:52
+#, python-format
+msgid "Links from the file %s"
+msgstr ""
+
+#: ../hosts/hostalltubetv.py:35
+msgid "List"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:159
+msgid "List by day"
+msgstr ""
+
+#: ../libs/ustvnow.py:42
+msgid "List only channels with subscription"
+msgstr "Список каналів в підписці"
+
+#: ../hosts/hostshoutcast.py:125
+#, fuzzy, python-format
+msgid "Listeners: %s"
+msgstr "Кінцева помилка: %s"
+
+#: ../hosts/hostbbciplayer.py:144 ../hosts/hostbbcsport.py:172
+#: ../hosts/hostfrancetv.py:448 ../hosts/hosthitboxtv.py:42
+#: ../hosts/hostplayrtsiw.py:142 ../hosts/hostrteieplayer.py:46
+#: ../hosts/hostyoutube.py:60 ../hosts/hostzdfmediathek.py:309
+msgid "Live"
+msgstr "На живо"
+
+#: ../hosts/hosthitboxtv.py:47
+msgid "Live Channels"
+msgstr "Поточні канали"
+
+#: ../hosts/hostardmediathek.py:63
+msgid "Live Radio"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:62
+#, fuzzy
+msgid "Live TV"
+msgstr "На живо"
+
+#: ../hosts/hostredbull.py:159 ../hosts/hostredbull.py:161
+#, fuzzy
+msgid "Live at: "
+msgstr "На живо"
+
+#: ../hosts/hostsvtplayse.py:79
+#, fuzzy
+msgid "Live broadcasts"
+msgstr "Трансляції"
+
+#: ../hosts/hosthitboxtv.py:267
+#, fuzzy
+msgid "Live now"
+msgstr "На живо"
+
+#: ../hosts/hosttwitchtv.py:630 ../hosts/hosturllist.py:51
+#, fuzzy
+msgid "Live streams"
+msgstr "Прямі-потоки"
+
+#: ../hosts/hostlaola1tv.py:467
+msgid "Live-streams"
+msgstr "Прямі-потоки"
+
+#: ../libs/wagasworld.py:57
+#, fuzzy
+msgid "LiveTv"
+msgstr "На живо"
+
+#: ../components/iptvextmovieplayer.py:814
+msgid "Load"
+msgstr "Завантажити"
+
+#: ../components/e2ivk.py:622 ../components/e2ivk.py:625
+#, python-format
+msgid "Load of the Virtual Keyboard layout \"%s\" failed due to the following error: \"%s\""
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1820
+#: ../components/iptvsubdownloader.py:466
+msgid "Loading"
+msgstr "Завантаження"
+
+#: ../components/iptvplayerwidget.py:1452
+#, python-format
+msgid "Loading %s failed due to following error:"
+msgstr ""
+
+#: ../Web/webSite.py:289 ../Web/webSite.py:347
+#, fuzzy
+msgid "Loading data, please wait"
+msgstr "Йде обробка, будь-ласка, зачекайте."
+
+#: ../Web/webSite.py:222 ../Web/webSite.py:525
+#, python-format
+msgid "Loading data, please wait (%d)"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:56
+msgid "LocalMedia"
+msgstr "Мої Медіа файли"
+
+#: ../components/e2ivk.py:617
+#, python-format
+msgid "Locale ID mismatched! %s <> %s"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:28
+msgid "Localization"
+msgstr "Локалізація"
+
+#: ../hosts/hoststreamliveto.py:36 ../libs/videostar.py:44
+msgid "Login"
+msgstr "Авторизуватися"
+
+#: ../subproviders/subprov_opensubtitlesorg.py:198
+#: ../subproviders/subprov_opensubtitlesorg.py:205
+#, fuzzy
+msgid "Login failed!"
+msgstr "Помилка входу."
+
+#: ../hosts/hostallboxtv.py:519 ../hosts/hostbbcsport.py:474
+#: ../hosts/hostcartoonhd.py:570 ../hosts/hostcdapl.py:454
+#: ../hosts/hostdixmax.py:454 ../hosts/hostefilmytv.py:693
+#: ../hosts/hostegybest.py:427 ../hosts/hostekinotv.py:495
+#: ../hosts/hostfilmezz.py:479 ../hosts/hostfilmixco.py:445
+#: ../hosts/hostfreediscpl.py:447 ../hosts/hostnaszekinotv.py:662
+#: ../hosts/hosttvplayercom.py:356 ../hosts/hosthdfull.py:614
+#: ../hosts/hosthdsto.py:514 ../hosts/hostkinomanco.py:795
+#: ../hosts/hostmaxtvgo.py:223 ../hosts/hostnuteczki.py:414
+#: ../hosts/hostorthobulletscom.py:257 ../hosts/hostplusdede.py:605
+#: ../hosts/hostrtbfbe.py:622 ../hosts/hostrtlmost.py:434
+#: ../hosts/hostserienstreamto.py:443 ../hosts/hostserienstreamto.py:552
+#: ../hosts/hostserijeonline.py:310 ../hosts/hoststreamliveto.py:413
+#: ../hosts/hostvidcorncom.py:572 ../hosts/hostvumedicom.py:371
+#: ../libs/edemtv.py:90 ../libs/firstonetvnet.py:107 ../libs/internetowa.py:85
+msgid "Login failed."
+msgstr "Помилка входу."
+
+#: ../hosts/hosteurosportplayer.py:607
+msgid "Login failed. Invalid email or password."
+msgstr ""
+
+#: ../libs/urlparser.py:5226
+#, fuzzy, python-brace-format
+msgid "Login on {0} failed."
+msgstr "Помилка входу."
+
+#: ../libs/urlparser.py:1952
+#, python-format
+msgid ""
+"Login user \"%s\" to http://vk.com/ failed!\n"
+"Please check your login data in the IPTVPlayer configuration."
+msgstr ""
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "Logs"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
+#, fuzzy
+msgid "Longest"
+msgstr "--- Самий довгий ---"
+
+#: ../hosts/hostlaola1tv.py:27 ../libs/weebtv.py:31
+#, fuzzy
+msgid "Low"
+msgstr "Низький"
+
+#: ../hosts/hosthdstreams.py:70 ../hosts/hostmythewatchseries.py:63
+msgid "MOVIES"
+msgstr ""
+
+#: ../hosts/hostarconaitvme.py:49 ../hosts/hostartetv.py:82
+#: ../hosts/hostfilmpalast.py:42 ../hosts/hostfilmstreamvkcom.py:97
+#: ../hosts/hosthoofootcom.py:29 ../hosts/hostkabarety.py:38
+#: ../hosts/hostokgoals.py:37 ../hosts/hostrtbfbe.py:91
+#: ../hosts/hostspiegeltv.py:78 ../hosts/hostwptv.py:50
+#: ../hosts/hostwrealu24tv.py:44
+msgid "Main"
+msgstr "Головний"
+
+#: ../hosts/hostcimaclubcom.py:113 ../hosts/hostnuteczki.py:86
+#, fuzzy
+msgid "Main menu"
+msgstr "Головна подія"
+
+#: ../hosts/hostlocalmedia.py:294
+#, python-format
+msgid "Make directory [%s]"
+msgstr "Створити каталог [%s]"
+
+#: ../iptvdm/iptvdmui.py:171 ../Web/webParts.py:256
+msgid "Manager status: "
+msgstr "Статус менеджера: "
+
+#: ../hosts/hostfilmstreamvkcom.py:100
+#, fuzzy
+msgid "Manga"
+msgstr "Мангас"
+
+#: ../hosts/hostsportitalia.py:77
+msgid "Mars"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:50
+msgid "Max items per page"
+msgstr "Максимальна кількість на сторінці"
+
+#: ../iptvdm/iptvdmapi.py:233
+msgid "Max number of parallel downloads has been reached."
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "May"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:86
+msgid "Medtryx Marketing"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:87
+msgid "Meetings"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:521
+msgid "Menu"
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+msgid "Mid"
+msgstr "Середній"
+
+#: ../hosts/hostyifytv.py:350 ../hosts/hostyifytv.py:354
+msgid "Mirror"
+msgstr ""
+
+#: ../hosts/hostkijknl.py:61
+msgid "Missed"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:61
+#, fuzzy
+msgid "Missed the program?"
+msgstr "Ви пропускаєте?"
+
+#: ../hosts/hostardmediathek.py:60 ../hosts/hostzdfmediathek.py:81
+#: ../hosts/hostzdfmediathek.py:98
+msgid "Missed the show?"
+msgstr "Ви пропускаєте?"
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Monday"
+msgstr ""
+
+#: ../hosts/hostddl.py:549
+msgid "Mood:"
+msgstr ""
+
+#: ../hosts/hostddl.py:550
+msgid "Moods:"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:174 ../hosts/hostdancetrippin.py:146
+#: ../hosts/hostlocalmedia.py:390 ../hosts/hostrtbfbe.py:337
+#: ../hosts/hosttvpvod.py:404 ../libs/wagasworld.py:174
+msgid "More"
+msgstr "Опції"
+
+#: ../hosts/hostardmediathek.py:38 ../hosts/hostzdfmediathek.py:40
+msgid "More important"
+msgstr "Важливо"
+
+#: ../hosts/hostbbciplayer.py:57
+msgid "Most Popular"
+msgstr "Найпопулярніші"
+
+#: ../hosts/hostdancetrippin.py:43
+#, fuzzy
+msgid "Most featured"
+msgstr "По рейтингу"
+
+#: ../hosts/hostplayrtsiw.py:154
+#, fuzzy
+msgid "Most popular"
+msgstr "Найпопулярніші"
+
+#: ../hosts/hostdailymotion.py:52
+msgid "Most rated"
+msgstr "По рейтингу"
+
+#: ../hosts/hostdailymotion.py:51 ../hosts/hostplayrtsiw.py:231
+#: ../hosts/hostplayrtsiw.py:236 ../hosts/hostplayrtsiw.py:245
+#: ../hosts/hostplayrtsiw.py:250
+#, fuzzy
+msgid "Most recent"
+msgstr "--- Саме нове ---"
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostdailymotion.py:50
+#: ../hosts/hostxrysoise.py:30
+#, fuzzy
+msgid "Most viewed"
+msgstr "--- Найбільше переглянуті ---"
+
+#: ../hosts/host9anime.py:47
+#, fuzzy
+msgid "Most watched"
+msgstr "Найвище оціненні"
+
+#: ../hosts/hostlocalmedia.py:302
+#, python-format
+msgid ""
+"Mount ISO file [%s] on [%s] failed.\n"
+"Return code[%s].\n"
+"Return data[%s]."
+msgstr ""
+"Монтувати ISO файл [%s] на [%s] не змогли.\n"
+"Код повернення[%s].\n"
+"Повернення даних[%s]."
+
+#: ../components/iptvsubsimpledownloader.py:71
+msgid "Move group"
+msgstr "Пересування групи"
+
+#: ../hosts/hostlibrestream.py:29 ../hosts/hostyoutube.py:59
+msgid "Movie"
+msgstr "Фільм"
+
+#: ../hosts/hosthdkinomir.py:40
+msgid "Movie categories"
+msgstr "Категорії фільмів"
+
+#: ../components/iptvconfigmenu.py:476
+msgid "Movie player"
+msgstr "Відео плеєр"
+
+#: ../hosts/hostallboxtv.py:67 ../hosts/hostallboxtv.py:345
+#: ../hosts/hostalltubetv.py:29 ../hosts/hostarconaitvme.py:52
+#: ../hosts/hostefilmytv.py:83 ../hosts/hostefilmytv.py:767
+#: ../hosts/hostegybest.py:62 ../hosts/hostfilma24hdcom.py:31
+#: ../hosts/hostfilmativa.py:31 ../hosts/hostfilmativa.py:292
+#: ../hosts/hostfilmeonlineto.py:110 ../hosts/hostfilmezz.py:66
+#: ../hosts/hostfilmovizijastudio.py:45 ../hosts/hostfilmpalast.py:43
+#: ../hosts/hostforjatn.py:40 ../hosts/hostforjatn.py:391
+#: ../hosts/hostfilisertv.py:51 ../hosts/hostfreediscpl.py:60
+#: ../hosts/hostfreediscpl.py:505 ../hosts/hostnaszekinotv.py:730
+#: ../hosts/hostgamatocom.py:36 ../hosts/hosthdfilmetv.py:36
+#: ../hosts/hosthdstreams.py:550 ../hosts/hosticefilmsinfo.py:73
+#: ../hosts/hostkinomanco.py:848 ../hosts/hostkinox.py:90
+#: ../hosts/hostlookmovieag.py:54 ../hosts/hostlookmovieag.py:289
+#: ../hosts/hostmooviecc.py:46 ../hosts/hostmovie4kto.py:67
+#: ../hosts/hostmovs4ucom.py:39 ../hosts/hostmozicsillag.py:43
+#: ../hosts/hostmrpiracy.py:687 ../hosts/hostplanetstreamingcom.py:369
+#: ../hosts/hoststreaminghdfun.py:445 ../hosts/hostszenestreamz.py:38
+#: ../hosts/hostszenestreamz.py:39 ../hosts/hosttreetv.py:65
+#: ../hosts/hostvodpl.py:57 ../subproviders/subprov_prijevodi.py:48
+msgid "Movies"
+msgstr "Кіно"
+
+#: ../hosts/hostmovienightws.py:30
+#, fuzzy
+msgid "Movies by year"
+msgstr "Відео плеєр"
+
+#: ../hosts/hostmovienightws.py:29
+#, fuzzy
+msgid "Movies genres"
+msgstr "Категорії фільмів"
+
+#: ../hosts/hostanimeodcinki.py:43
+#, fuzzy
+msgid "Movies list"
+msgstr "Кіно"
+
+#: ../hosts/hostlocalmedia.py:666
+#, python-format
+msgid "Moving file from \"%s\" to \"%s\" failed.\n"
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:291
+#, python-format
+msgid "Moving playback buffer to the download manager failed with the following error \"%s\""
+msgstr ""
+
+#: ../hosts/hostfreediscpl.py:61 ../hosts/hostfreediscpl.py:506
+msgid "Music"
+msgstr "Музика"
+
+#: ../hosts/hostlookmovieag.py:80
+#, fuzzy
+msgid "Music Movies"
+msgstr "HD Фільми"
+
+#: ../libs/recaptcha_v2_myjd.py:16
+msgid "My JDownloader reCAPTCHA v2 solution"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:81
+#, fuzzy
+msgid "Mystery Movies"
+msgstr "Нові фільми"
+
+#: ../libs/skylinewebcamscom.py:70
+msgid "NEARBY CAMS"
+msgstr ""
+
+#: ../libs/skylinewebcamscom.py:69
+msgid "NEW"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:66
+msgid "NEW RELEASE LIST"
+msgstr ""
+
+#: ../components/iptvfavouriteswidgets.py:54
+msgid "Name cannot be empty."
+msgstr "Назва не може бути пуста."
+
+#: ../components/iptvfavouriteswidgets.py:55
+msgid ""
+"Name is not valid.\n"
+"Please remove special characters."
+msgstr ""
+"Це не вірна назва.\n"
+"Будь-ласка, видаліть спеціальні символи."
+
+#: ../components/iptvfavouriteswidgets.py:45
+msgid "Name:"
+msgstr "Назва:"
+
+#: ../hosts/hostcartoonhd.py:497
+msgid "Network"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:615 ../hosts/hostkinomanco.py:665
+#: ../hosts/hostkinomanco.py:793
+msgid "Network connection failed."
+msgstr ""
+
+#: ../libs/recaptcha_v2_2captcha.py:65 ../libs/recaptcha_v2_2captcha.py:79
+#: ../libs/recaptcha_v2_9kw.py:65 ../libs/recaptcha_v2_9kw.py:79
+#, python-format
+msgid "Network failed %s."
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:39
+msgid "Never"
+msgstr ""
+
+#: ../hosts/hostanimeodcinki.py:40 ../hosts/hostfilmativa.py:37
+#: ../hosts/hostfilmativa.py:41 ../hosts/hostfilmpalast.py:50
+#: ../hosts/hostserienstreamto.py:74
+#, fuzzy
+msgid "New"
+msgstr "Новини"
+
+#: ../hosts/hostfilmovizijastudio.py:49
+#, fuzzy
+msgid "New Episodes"
+msgstr "Нові серії"
+
+#: ../hosts/hostfilmovizijastudio.py:46
+msgid "New Movies"
+msgstr "Нові фільми"
+
+#: ../hosts/hostkissanimeto.py:67 ../hosts/hostkisscartoonme.py:51
+msgid "New cartoon"
+msgstr "Новий мультфільм"
+
+#: ../components/iptvdirbrowser.py:76
+msgid "New dir"
+msgstr "Новий шлях"
+
+#: ../hosts/hostfilmativa.py:42
+msgid "New episodes"
+msgstr "Нові серії"
+
+#: ../components/iptvplayerwidget.py:1376
+msgid "New icons will not be available."
+msgstr "Нові іконки не будуть доступні."
+
+#: ../hosts/hostdarshowcom.py:33
+#, fuzzy
+msgid "New series"
+msgstr "Телесеріал"
+
+#: ../hosts/hostkinomanco.py:304 ../hosts/hostkinomanco.py:314
+#: ../hosts/hostkinomanco.py:351 ../hosts/hostkinomanco.py:361
+#, fuzzy
+msgid "Newer"
+msgstr "Новітній рік"
+
+#: ../hosts/host9anime.py:45
+#, fuzzy
+msgid "Newest"
+msgstr "Новітній рік"
+
+#: ../hosts/hostthewatchseriesto.py:65
+#, fuzzy
+msgid "Newest Episodes"
+msgstr "Нові серії"
+
+#: ../hosts/hostserijeonline.py:55
+#, fuzzy
+msgid "Newest Videos"
+msgstr "Нові HD Відео"
+
+#: ../hosts/hostkinox.py:88
+msgid "News"
+msgstr "Новини"
+
+#: ../hosts/hostvumedicom.py:91
+#, fuzzy
+msgid "News Feed"
+msgstr "Новини"
+
+#: ../hosts/hostlookmovieag.py:198
+#, fuzzy
+msgid "Next Page"
+msgstr "Наступна сторінка"
+
+#: ../hosts/host123movieshd.py:208 ../hosts/host3player.py:180
+#: ../hosts/host3sktv.py:116 ../hosts/host3sktv.py:268
+#: ../hosts/host7tvde.py:267 ../hosts/host9anime.py:182
+#: ../hosts/hostakoam.py:173 ../hosts/hostallboxtv.py:229
+#: ../hosts/hostalltubetv.py:136 ../hosts/hostaltadefinizione.py:164
+#: ../hosts/hostaltadefinizione.py:272 ../hosts/hostaltadefinizione01.py:151
+#: ../hosts/hostaltadefinizione01.py:212 ../hosts/hostaltadefinizione1.py:167
+#: ../hosts/hostaltadefinizionecool.py:152
+#: ../hosts/hostaltadefinizionecool.py:237 ../hosts/hostandrijaiandjelka.py:108
+#: ../hosts/hostanimeodcinki.py:217 ../hosts/hostardmediathek.py:276
+#: ../hosts/hostartetv.py:208 ../hosts/hostartetv.py:234
+#: ../hosts/hostartetv.py:241 ../hosts/hostartetv.py:299
+#: ../hosts/hostbbciplayer.py:465 ../hosts/hostcartoonhd.py:170
+#: ../hosts/hostcdapl.py:219 ../hosts/hostchristusvincit.py:442
+#: ../hosts/hostcimaclubcom.py:252 ../hosts/hostcineblog.py:116
+#: ../hosts/hostcinemaxx.py:179 ../hosts/hostcinemay.py:106
+#: ../hosts/hostcineto.py:215 ../hosts/hostclassiccinemaonline.py:128
+#: ../hosts/hostclassiccinemaonline.py:161 ../hosts/hostcrtankocom.py:161
+#: ../hosts/hostcrtankocom.py:209 ../hosts/hostdailymotion.py:92
+#: ../hosts/hostdardarkomcom.py:141 ../hosts/hostdardarkomcom.py:177
+#: ../hosts/hostdarshowcom.py:173 ../hosts/hostdel.py:108
+#: ../hosts/hostdixmax.py:249 ../hosts/hostdokumentalnenet.py:134
+#: ../hosts/hostdpstreamingcx.py:104 ../hosts/hostefilmytv.py:206
+#: ../hosts/hostefilmytv.py:375 ../hosts/hostefilmytv.py:402
+#: ../hosts/hostegybest.py:192 ../hosts/hostekinotv.py:195
+#: ../hosts/hostekinotv.py:228 ../hosts/hostekstraklasatv.py:115
+#: ../hosts/hostekstraklasatv.py:119 ../hosts/hosteskago.py:211
+#: ../hosts/hosteurosportplayer.py:384 ../hosts/hosteurosportplayer.py:554
+#: ../hosts/hostfaselhdcom.py:155 ../hosts/hostfenixsite.py:163
+#: ../hosts/hostfightvideo.py:163 ../hosts/hostfightvideo.py:238
+#: ../hosts/hostfilma24hdcom.py:157 ../hosts/hostfilma24io.py:128
+#: ../hosts/hostfilmaoncom.py:127 ../hosts/hostfilmativa.py:117
+#: ../hosts/hostfilmehdnet.py:128 ../hosts/hostfilmeonlineto.py:242
+#: ../hosts/hostfilmezz.py:198 ../hosts/hostfilmixco.py:301
+#: ../hosts/hostfilmovizijastudio.py:244 ../hosts/hostfilmpalast.py:177
+#: ../hosts/hostfilmpertutti.py:106 ../hosts/hostfilmstreamhdit.py:114
+#: ../hosts/hostfilmstreamvkcom.py:155 ../hosts/hostfilmydokumentalneeu.py:126
+#: ../hosts/hostfokustv.py:166 ../hosts/hostforjatn.py:158
+#: ../hosts/hostfrancetv.py:426 ../hosts/hostbajeczkiorg.py:98
+#: ../hosts/hostddl.py:300 ../hosts/hostddl.py:323 ../hosts/hostddl.py:344
+#: ../hosts/hostfilisertv.py:195 ../hosts/hostfreediscpl.py:215
+#: ../hosts/hostfreediscpl.py:252 ../hosts/hostnaszekinotv.py:150
+#: ../hosts/hostgamatocom.py:143 ../hosts/hostgamatotvme.py:163
+#: ../hosts/hostgledalica.py:221 ../hosts/hostgreekdocumentaries3.py:136
+#: ../hosts/hosthd1080online.py:105 ../hosts/hosthd1080online.py:194
+#: ../hosts/hosthdfilmetv.py:191 ../hosts/hosthdfull.py:259
+#: ../hosts/hosthdfull.py:422 ../hosts/hosthdkinomir.py:205
+#: ../hosts/hosthdpopcornscom.py:170 ../hosts/hosthdsto.py:267
+#: ../hosts/hosthdstreams.py:210 ../hosts/hosthitboxtv.py:113
+#: ../hosts/hosthitboxtv.py:151 ../hosts/hosthoofootcom.py:206
+#: ../hosts/hostinteriatv.py:135 ../hosts/hostinteriatv.py:174
+#: ../hosts/hostiptvplayerinfo.py:116 ../hosts/hostkabarety.py:190
+#: ../hosts/hostkijknl.py:96 ../hosts/hostkijknl.py:224
+#: ../hosts/hostkinogo.py:147 ../hosts/hostkinogo.py:151
+#: ../hosts/hostkinomanco.py:447 ../hosts/hostkinotan.py:167
+#: ../hosts/hostkinox.py:391 ../hosts/hostkissanimeto.py:349
+#: ../hosts/hostkisscartoonme.py:272 ../hosts/hostkkiste.py:198
+#: ../hosts/hostkkiste.py:206 ../hosts/hostkreskoweczki.py:160
+#: ../hosts/hostla7it.py:310 ../hosts/hostlaola1tv.py:238
+#: ../hosts/hostlaola1tv.py:284 ../hosts/hostlibrestream.py:201
+#: ../hosts/hostliveleak.py:110 ../hosts/hostlosmovies.py:183
+#: ../hosts/hostluxveritatis.py:137 ../hosts/hostluxveritatis.py:256
+#: ../hosts/hostmeczykipl.py:104 ../hosts/hostmooviecc.py:204
+#: ../hosts/hostmovie4kto.py:222 ../hosts/hostmovie4kto.py:294
+#: ../hosts/hostmovie4kto.py:393 ../hosts/hostmovienightws.py:142
+#: ../hosts/hostmovierulzsx.py:154 ../hosts/hostmovizlandcom.py:155
+#: ../hosts/hostmovs4ucom.py:176 ../hosts/hostmozicsillag.py:210
+#: ../hosts/hostmrpiracy.py:274 ../hosts/hostmusicmp3ru.py:140
+#: ../hosts/hostmyfreemp3.py:134 ../hosts/hostmythewatchseries.py:161
+#: ../hosts/hostmythewatchseries.py:210 ../hosts/hostngolos.py:201
+#: ../hosts/hostnuteczki.py:304 ../hosts/hostofficialfilmillimite.py:146
+#: ../hosts/hostoipeirates.py:198 ../hosts/hostokgoals.py:104
+#: ../hosts/hostorthobulletscom.py:173 ../hosts/hostotakufr.py:132
+#: ../hosts/hostourmatchnet.py:227 ../hosts/hostpinkbike.py:134
+#: ../hosts/hostplanetstreamingcom.py:228 ../hosts/hostplayrtsiw.py:392
+#: ../hosts/hostplayrtsiw.py:478 ../hosts/hostplusdede.py:224
+#: ../hosts/hostplusdede.py:274 ../hosts/hostpmgsport.py:158
+#: ../hosts/hostputlockertvto.py:251 ../hosts/hostrtbfbe.py:203
+#: ../hosts/hostrtbfbe.py:354 ../hosts/hostrtlmost.py:318
+#: ../hosts/hostserialeco.py:98 ../hosts/hostserienstreamto.py:220
+#: ../hosts/hostseriesonline.py:219 ../hosts/hostserijeonline.py:187
+#: ../hosts/hostshahiidanimenet.py:167 ../hosts/hostshahiidanimenet.py:215
+#: ../hosts/hostskstream.py:192 ../hosts/hostsolarmovie.py:230
+#: ../hosts/hostsovdub.py:111 ../hosts/hostspiegeltv.py:291
+#: ../hosts/hostsportdeutschland.py:162 ../hosts/hostsportitalia.py:221
+#: ../hosts/hoststreamcomplet.py:94 ../hosts/hoststreaminghdfun.py:136
+#: ../hosts/hoststreamliveto.py:207 ../hosts/hostsvtplayse.py:273
+#: ../hosts/hostsvtplayse.py:407 ../hosts/hostszenestreamz.py:133
+#: ../hosts/hosttainieskaiseirestv.py:138 ../hosts/hosttantifilmorg.py:217
+#: ../hosts/hostted.py:317 ../hosts/hostted.py:367 ../hosts/hostted.py:426
+#: ../hosts/hosttfarjocom.py:163 ../hosts/hostthewatchseriesto.py:232
+#: ../hosts/hosttreetv.py:216 ../hosts/hostturcjatv.py:143
+#: ../hosts/hostturcjatv.py:184 ../hosts/hosttvgrypl.py:127
+#: ../hosts/hosttvnvod.py:335 ../hosts/hosttvproart.py:40
+#: ../hosts/hosttvpvod.py:401 ../hosts/hosttvpvod.py:598
+#: ../hosts/hosttvpvod.py:924 ../hosts/hosttwitchtv.py:177
+#: ../hosts/hosttwitchtv.py:219 ../hosts/hosttwitchtv.py:311
+#: ../hosts/hosttwitchtv.py:372 ../hosts/hosttwitchtv.py:426
+#: ../hosts/hosttwitchtv.py:446 ../hosts/hosttwitchtv.py:463
+#: ../hosts/hosttwitchtv.py:485 ../hosts/hostustreamtv.py:154
+#: ../hosts/hostvevo.py:156 ../hosts/hostvevo.py:307 ../hosts/hostvevo.py:334
+#: ../hosts/hostvidcorncom.py:172 ../hosts/hostvidcorncom.py:212
+#: ../hosts/hostvidcorncom.py:231 ../hosts/hostvidcorncom.py:251
+#: ../hosts/hostvideopenny.py:152 ../hosts/hostvimeo.py:258
+#: ../hosts/hostvimeo.py:322 ../hosts/hostvodpl.py:213
+#: ../hosts/hostvumedicom.py:208 ../hosts/hostvumedicom.py:263
+#: ../hosts/hostwatchwrestling.py:141 ../hosts/hostwatchwrestlinguno.py:126
+#: ../hosts/hostwgrane.py:160 ../hosts/hostworldfree4u.py:123
+#: ../hosts/hostwpolscepl.py:213 ../hosts/hostwptv.py:132
+#: ../hosts/hostwptv.py:213 ../hosts/hostwrealu24tv.py:86
+#: ../hosts/hostxrysoise.py:150 ../hosts/hostyesmoviesto.py:189
+#: ../hosts/hostyifytv.py:278 ../hosts/hostzalukajcom.py:202
+#: ../hosts/hostzdfmediathek.py:370 ../libs/wagasworld.py:96
+#: ../libs/webcamera.py:140 ../libs/youtubeparser.py:361
+#: ../libs/youtubeparser.py:397 ../subproviders/subprov_napiprojektpl.py:212
+#: ../subproviders/subprov_napisy24pl.py:173
+#: ../subproviders/subprov_opensubtitlesorg2.py:265
+#: ../subproviders/subprov_opensubtitlesorg2.py:301
+#: ../subproviders/subprov_subtitlesgr.py:100
+#: ../subproviders/subprov_titlovicom.py:228
+msgid "Next page"
+msgstr "Наступна сторінка"
+
+#: ../components/configextmovieplayer.py:26 ../hosts/hostkinomanco.py:157
+#: ../libs/youtubeparser.py:30 ../subproviders/subprov_subscenecom.py:256
+#: ../Web/webParts.py:172 ../Web/webParts.py:175 ../Web/webThreads.py:161
+#: ../Web/webThreads.py:164
+#, fuzzy
+msgid "No"
+msgstr "ні"
+
+#: ../components/iptvplayerwidget.py:2029
+#: ../components/iptvsubdownloader.py:548
+msgid ""
+"No item to display. \n"
+"Press OK to refresh.\n"
+msgstr ""
+"Нічого не знайдено.\n"
+"Натисніть ОК, щоб оновити.\n"
+
+#: ../Web/webSite.py:451
+msgid "No materials waiting in the downloader queue"
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:235
+msgid "No playable sources found."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:115
+msgid "No steps to execute."
+msgstr "Ніяких дій не виконувати."
+
+#: ../iptvupdate/updatemainwindow.py:629
+msgid "No user scripts."
+msgstr "Немає користувацьких скриптів."
+
+#: ../hosts/hostkijknl.py:258
+msgid "No valid entitlement found for asset."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1526
+#: ../components/iptvplayerwidget.py:1758
+#: ../components/iptvplayerwidget.py:2128
+msgid "No valid links available."
+msgstr "Немає працюючих посилань."
+
+#: ../components/configextmovieplayer.py:77 ../components/iptvconfigmenu.py:87
+#: ../components/iptvextmovieplayer.py:781 ../hosts/host123movieshd.py:24
+#: ../hosts/hostakoam.py:25 ../hosts/hostbsto.py:32
+#: ../hosts/hostcimaclubcom.py:23 ../hosts/hostfilmeonlineto.py:26
+#: ../hosts/hostfilmstreamvkcom.py:25 ../hosts/hostddl.py:25
+#: ../hosts/hostlocalmedia.py:38 ../hosts/hosthdsto.py:32
+#: ../hosts/hosthdstreams.py:31 ../hosts/hosticefilmsinfo.py:26
+#: ../hosts/hostkinox.py:26 ../hosts/hostkissanimeto.py:31
+#: ../hosts/hostkkiste.py:25 ../hosts/hostlosmovies.py:27
+#: ../hosts/hostmrpiracy.py:42 ../hosts/hostplanetstreamingcom.py:21
+#: ../hosts/hostputlockertvto.py:29 ../hosts/hostseriesonline.py:25
+#: ../hosts/hostskstream.py:25 ../hosts/hostsolarmovie.py:27
+#: ../hosts/hostyesmoviesto.py:27 ../hosts/hostyifytv.py:30
+#: ../hosts/hostzalukajcom.py:35
+msgid "None"
+msgstr "ні"
+
+#: ../Web/webSite.py:446
+#, fuzzy
+msgid "Nothing has been downloaded yet."
+msgstr "PIN-код змінено."
+
+#: ../iptvupdate/updatemainwindow.py:611
+msgid "Nothing to do here."
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "November"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:398
+msgid "Number of downloaded files simultaneously"
+msgstr "Кількість завантажених файлів одночасно"
+
+#: ../components/confighost.py:109 ../components/iptvmultipleinputbox.py:101
+#: ../components/VirtualKeyBoard.py:100
+msgid "OK"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:375
+msgid "Obtaining server list."
+msgstr "Отримання списку серверів."
+
+#: ../hosts/hostsportitalia.py:77
+msgid "October"
+msgstr ""
+
+#: ../libs/showsporttvcom.py:65
+msgid "Off Air"
+msgstr ""
+
+#: ../libs/weebtv.py:56
+msgid "Offline channels"
+msgstr "Оффлайн канали"
+
+#: ../hosts/hostkinomanco.py:303 ../hosts/hostkinomanco.py:311
+#: ../hosts/hostkinomanco.py:350 ../hosts/hostkinomanco.py:358
+#: ../hosts/hostplayrtsiw.py:279
+#, fuzzy
+msgid "Older"
+msgstr "Починаючи рік зі старих "
+
+#: ../hosts/hosteurosportplayer.py:95
+msgid "Olympics"
+msgstr ""
+
+#: ../hosts/hosteurosportplayer.py:91 ../libs/showsporttvcom.py:67
+#, fuzzy
+msgid "On Air"
+msgstr "--- В етері ---"
+
+#: ../hosts/hostardmediathek.py:39 ../hosts/hostzdfmediathek.py:41
+msgid "One link mode"
+msgstr "Режим Одно посилання"
+
+#: ../hosts/hostkinomanco.py:157
+msgid "Only VIP"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:151 ../hosts/hostsvtplayse.py:348
+msgid "Only available in Sweden."
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:253
+msgid "Only available in Sweden.\n"
+msgstr ""
+
+#: ../libs/urlparser.py:8070
+#, fuzzy
+msgid ""
+"Only logged in user have access.\n"
+"Please set login data in the host configuration under blue button."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../Web/webParts.py:484
+msgid "Only music"
+msgstr ""
+
+#: ../Web/webParts.py:483
+#, fuzzy
+msgid "Only videos"
+msgstr "Інші відео"
+
+#: ../setup/iptvsetupimpl.py:400
+#, python-format
+msgid ""
+"OpenSSL in your image has different library names then these used by %s.\n"
+"There is need to create following symlinks:\n"
+"%s\n"
+"to be able to install binary components from %s server.\n"
+"Do you want to proceed?"
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:283 ../setup/iptvsetupimpl.py:313
+msgid "OpenSSL lib is needed by wget and rtmpdump utilities."
+msgstr "OpenSSL потрібно для правильнї роботи Wget інструменту і rtmpdump."
+
+#: ../components/iptvextmovieplayer.py:393
+#, fuzzy
+msgid "Opening. Please wait..."
+msgstr "Йде обробка, будь-ласка, зачекайте."
+
+#: ../components/iptvplayerwidget.py:856 ../components/iptvsubdownloader.py:247
+msgid "Operation aborted!"
+msgstr "Операція перервана!"
+
+#: ../hosts/hostwatchwrestling.py:47 ../hosts/hostwatchwrestlinguno.py:51
+msgid "Order by comments"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:44 ../hosts/hostwatchwrestlinguno.py:48
+#, fuzzy
+msgid "Order by date"
+msgstr "Додана дата"
+
+#: ../hosts/hostwatchwrestling.py:46 ../hosts/hostwatchwrestlinguno.py:50
+msgid "Order by likes"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:45 ../hosts/hostwatchwrestlinguno.py:49
+#, fuzzy
+msgid "Order by views"
+msgstr "кількість переглядів"
+
+#: ../hosts/hostgamatocom.py:75
+msgid "Order by: "
+msgstr ""
+
+#: ../hosts/hosturllist.py:86
+#, fuzzy
+msgid "Other"
+msgstr "Інші"
+
+#: ../hosts/hostwatchwrestlinguno.py:42 ../hosts/hostwptv.py:53
+msgid "Others"
+msgstr "Інші"
+
+#: ../hosts/hostddl.py:558
+#, fuzzy
+msgid "Others tags:"
+msgstr "Інші"
+
+#: ../components/iptvconfigmenu.py:84
+#, fuzzy
+msgid "Own model"
+msgstr "Режим Одно посилання"
+
+#: ../hosts/hostdancetrippin.py:38
+#, fuzzy
+msgid "PARTIES"
+msgstr "СТАТТЯ"
+
+#: ../libs/filmonapi.py:89
+msgid "PAY"
+msgstr ""
+
+#: ../hosts/hostcartoonhd.py:497
+msgid "PEGI"
+msgstr ""
+
+#: ../iptvdm/iptvlist.py:107 ../Web/webParts.py:289
+msgid "PENDING"
+msgstr "ОЧІКУВАННЯ"
+
+#: ../libs/bilasportpw.py:34 ../libs/mlbstreamtv.py:29
+msgid "PORT"
+msgstr ""
+
+#: ../hosts/hostdplayit.py:249
+msgid "Packages"
+msgstr ""
+
+#: ../hosts/hosthdsto.py:65
+msgid "Page accessible to logged in members only."
+msgstr ""
+
+#: ../hosts/hosttvplayercom.py:126
+msgid "Paid"
+msgstr ""
+
+#: ../hosts/hostmrpiracy.py:49 ../hosts/hoststreamliveto.py:37
+#: ../libs/edemtv.py:40 ../libs/ustvnow.py:41 ../libs/videostar.py:45
+#, fuzzy
+msgid "Password"
+msgstr " Пароль"
+
+#: ../libs/weebtv.py:38
+msgid "Password:"
+msgstr "Пароль:"
+
+#: ../hosts/hosttwitchtv.py:104
+msgid "Past premieres"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:558
+#, python-format
+msgid "Paste \"%s\""
+msgstr "Вставити \"%s\""
+
+#: ../hosts/hostyoutube.py:31
+msgid "Path to ytlist.txt, urllist.txt"
+msgstr "Шлях до ytlist.txt, urllist.txt"
+
+#: ../Web/webParts.py:438
+msgid "Path:"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:113
+msgid "Pathology"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:88
+msgid "Pathology Rounds"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:109
+msgid "Pediatrics"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:369
+msgid "Pending"
+msgstr "До"
+
+#: ../hosts/hostvimeo.py:394
+msgid "People"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:89
+msgid "Physical Exam"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:665
+msgid "Pin has been changed."
+msgstr "PIN-код змінено."
+
+#: ../components/iptvconfigmenu.py:655 ../components/iptvplayerwidget.py:999
+#: ../components/iptvplayerwidget.py:1436 ../plugin.py:136
+msgid "Pin incorrect!"
+msgstr "Pin невірний!"
+
+#: ../components/iptvconfigmenu.py:356
+msgid "Pin protection for configuration"
+msgstr "Захист конфігурації налаштувань пін-кодом"
+
+#: ../components/iptvconfigmenu.py:355
+msgid "Pin protection for plugin"
+msgstr "Захист плагіна пін-кодом"
+
+#: ../components/iptvconfigmenu.py:349 ../hosts/hostlibrestream.py:33
+msgid "Platform"
+msgstr "Платформа"
+
+#: ../iptvdm/iptvdmui.py:256 ../iptvdm/iptvdmui.py:257
+#, python-format
+msgid "Play with [%s] player"
+msgstr "Відтворення запису в [%s]"
+
+#: ../hosts/hosttwitchtv.py:51
+#, fuzzy
+msgid "PlayStation 4"
+msgstr "Станції"
+
+#: ../hosts/hostnuteczki.py:354
+#, fuzzy, python-format
+msgid "Player %s"
+msgstr "IPTV Плеер %s"
+
+#: ../hosts/hostnuteczki.py:347
+#, fuzzy, python-format
+msgid "Player %s: %s"
+msgstr "IPTV Плеер %s"
+
+#: ../hosts/hostkijknl.py:293
+msgid "Player data parsing error."
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:75 ../hosts/hostyoutube.py:58
+msgid "Playlist"
+msgstr "Плейлист"
+
+#: ../hosts/hostdailymotion.py:345 ../hosts/hostted.py:75
+#: ../hosts/hostted.py:610 ../hosts/hostvevo.py:380
+msgid "Playlists"
+msgstr "Плейлисти"
+
+#: ../tools/e2ijs.py:34
+#, python-format
+msgid "Please consider restart your Engima2 and agree to install the %s utlity when the %s will propose this."
+msgstr ""
+
+#: ../hosts/hostfilmezz.py:303 ../hosts/hostserienstreamto.py:398
+#, fuzzy
+msgid "Please fill your login and password in the host configuration (available under blue button) and try again."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../components/iptvplayerwidget.py:337
+msgid "Please make sure that the folder for cache data (set in the configuration) is writable."
+msgstr ""
+
+#: ../hosts/hostfreediscpl.py:85
+#, fuzzy
+msgid "Please register and set login and password in the host configuration, to solve this problems permanently."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../iptvupdate/updatemainwindow.py:321
+msgid "Please remember that you use this plugin at your own risk."
+msgstr "Будь-ласка, памятайте, що ви використовуєте цей плагін на свій страх и ризик."
+
+#: ../libs/sport365live.py:128
+msgid ""
+"Please remember to visit http://www.sport365.live/ and watch a few advertisements.\n"
+"This will fix problem, if your playback is constantly interrupted."
+msgstr ""
+
+#: ../libs/pCommon.py:358
+#, python-format
+msgid "Please report this problem to the developer %s."
+msgstr ""
+
+#: ../hosts/hostserienstreamto.py:401
+msgid "Please retry later."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1678
+#, fuzzy, python-format
+msgid "Please set valid %s in the %s configuration."
+msgstr "IPTV-Плеєр конфігурація хосту"
+
+#: ../hosts/hostfreediscpl.py:84
+#, python-format
+msgid "Please visit \"%s\" and confirm that you are human."
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:51
+#, python-format
+msgid "Please visit %s to learn how to redirect this task to the external device."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:511
+msgid "Please wait - downloading initialization data."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:488
+msgid "Please wait for initialization data."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:193
+#, fuzzy
+msgid "Plugin can be run on one of the following platforms: sh4, mipsel, i686, armv7, armv5t."
+msgstr "Плагін може працювати на одній з наступних платформ: sh4, mipsel, i686, armv7."
+
+#: ../Web/webParts.py:199
+msgid "Plugin global settings"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:780
+msgid "Points"
+msgstr ""
+
+#: ../hosts/hosttvjworg.py:28
+#, fuzzy
+msgid "Polish"
+msgstr "Співвідношення сторін"
+
+#: ../components/iptvconfigmenu.py:377
+msgid "Polish proxy server url"
+msgstr "Польський проксі-сервер гіперпосилання"
+
+#: ../hosts/hostdixmax.py:116 ../hosts/hostfilmativa.py:38
+#: ../hosts/hostfilmativa.py:43 ../hosts/hosthoofootcom.py:30
+#: ../hosts/hostkabarety.py:39 ../hosts/hostourmatchnet.py:36
+#: ../hosts/hostserienstreamto.py:75 ../hosts/hostsvtplayse.py:75
+#: ../hosts/hosttwitchtv.py:109 ../hosts/hostustreamtv.py:29
+#: ../hosts/hostyifytv.py:63
+msgid "Popular"
+msgstr "Популярний"
+
+#: ../hosts/hostthewatchseriesto.py:64
+#, fuzzy
+msgid "Popular Episodes"
+msgstr "Популярні фільми"
+
+#: ../hosts/hosttwitchtv.py:459
+#, fuzzy, python-format
+msgid "Popularity: %s"
+msgstr "Популярне"
+
+#: ../hosts/hostlaola1tv.py:38
+msgid "Portal:"
+msgstr "Портал:"
+
+#: ../hosts/hostngolos.py:25
+#, fuzzy
+msgid "Portuguese"
+msgstr "Португальський"
+
+#: ../hosts/hostorthobulletscom.py:90
+msgid "Powerpoint Presentation"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:91
+msgid "Practice Management"
+msgstr ""
+
+#: ../hosts/hostddl.py:555
+msgid "Praise:"
+msgstr ""
+
+#: ../hosts/hostddl.py:556
+msgid "Praises:"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:36 ../hosts/hostzdfmediathek.py:38
+msgid "Prefered format"
+msgstr "Переважаючий формат"
+
+#: ../hosts/hostardmediathek.py:37 ../hosts/hostzdfmediathek.py:39
+msgid "Prefered quality"
+msgstr "Переважаюча якість"
+
+#: ../hosts/hosttvplayercom.py:47
+#, fuzzy
+msgid "Preferred bitrate"
+msgstr "Переважаючий формат"
+
+#: ../hosts/hostbbciplayer.py:31 ../hosts/hostbbcsport.py:39
+#: ../hosts/hostsvtplayse.py:46 ../hosts/hosttvnowde.py:37
+#, fuzzy
+msgid "Preferred format:"
+msgstr "Переважаючий формат"
+
+#: ../libs/sportstream365.py:26
+#, fuzzy
+msgid "Preferred language"
+msgstr "Переважаюча якість"
+
+#: ../libs/videostar.py:42
+msgid "Preferred quality"
+msgstr "Переважаюча якість"
+
+#: ../hosts/hostsportdeutschland.py:31 ../libs/filmonapi.py:29
+#: ../libs/videostar.py:41
+msgid "Preferred streaming protocol"
+msgstr "Переважаючий протокол потокової передачі"
+
+#: ../libs/weebtv.py:39
+msgid "Preferred video quality:"
+msgstr "Вибір якості відео:"
+
+#: ../hosts/hostallboxtv.py:68
+#, fuzzy
+msgid "Premieres"
+msgstr "Преміум користувач"
+
+#: ../hosts/hoststreamliveto.py:136
+#, fuzzy
+msgid "Premium"
+msgstr "Преміум користувач"
+
+#: ../libs/filmonapi.py:30 ../libs/weebtv.py:35
+msgid "Premium user"
+msgstr "Преміум користувач"
+
+#: ../hosts/hostrtlmost.py:74
+#, fuzzy
+msgid "Preview"
+msgstr "Попередній"
+
+#: ../hosts/hostourmatchnet.py:38
+msgid "Previous Seasons"
+msgstr "Попередні сезони"
+
+#: ../Web/webParts.py:360 ../Web/webParts.py:363 ../Web/webParts.py:365
+#, fuzzy
+msgid "Previous list"
+msgstr "Попередній"
+
+#: ../iptvupdate/updatemainwindow.py:615
+#, fuzzy
+msgid "Problem with copy binary.\n"
+msgstr "Проблема з каталогом [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:284
+#, fuzzy, python-format
+msgid ""
+"Problem with copy files.\n"
+"Status[%d], outData[%s]"
+msgstr ""
+"Проблема зі встановленням нової версії.\n"
+"Статус[%d], OutData[%s]"
+
+#: ../iptvupdate/updatemainwindow.py:971
+#, fuzzy, python-format
+msgid ""
+"Problem with decryption the archive. Return code [%d]\n"
+"%s."
+msgstr ""
+"Проблема з разпаковкою архіва. Код повернення [%d]\n"
+"%s."
+
+#: ../iptvupdate/updatemainwindow.py:931 ../iptvupdate/updatemainwindow.py:936
+#, fuzzy
+msgid "Problem with decryption the key."
+msgstr "Проблема з виконання скриптів користувача [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:914
+#, fuzzy, python-format
+msgid ""
+"Problem with downloading the encryption key:\n"
+"[%s]."
+msgstr ""
+"Проблема з завантаженням пакета оновлення:\n"
+"[%s]."
+
+#: ../iptvupdate/updatemainwindow.py:708 ../iptvupdate/updatemainwindow.py:897
+#, fuzzy, python-format
+msgid ""
+"Problem with downloading the packet:\n"
+"[%s]."
+msgstr ""
+"Проблема з завантаженням пакета оновлення:\n"
+"[%s]."
+
+#: ../iptvupdate/updatemainwindow.py:760
+#, python-format
+msgid "Problem with downloading the server list from [%s]."
+msgstr "Проблема з завантаженням списку серверів від [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:951
+#, python-format
+msgid ""
+"Problem with extracting the archive. Return code [%d]\n"
+"%s."
+msgstr ""
+"Проблема з разпаковкою архіва. Код повернення [%d]\n"
+"%s."
+
+#: ../iptvupdate/updatemainwindow.py:283
+#, python-format
+msgid ""
+"Problem with installing the new version.\n"
+"Status[%d], outData[%s]"
+msgstr ""
+"Проблема зі встановленням нової версії.\n"
+"Статус[%d], OutData[%s]"
+
+#: ../iptvupdate/updatemainwindow.py:801
+#, fuzzy
+msgid "Problem with parsing the server list."
+msgstr "Проблема з завантаженням списку серверів."
+
+#: ../iptvupdate/updatemainwindow.py:228
+#, python-format
+msgid "Problem with the directory [%s]."
+msgstr "Проблема з каталогом [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:282
+#, python-format
+msgid ""
+"Problem with the removal of the previous version.\n"
+"Status[%d], outData[%s]."
+msgstr ""
+"Проблема з видаленням попередньої версії.\n"
+"Статус[%d], OutData[%s]."
+
+#: ../iptvupdate/updatemainwindow.py:633
+#, fuzzy
+msgid "Problem with user script execution.\n"
+msgstr "Проблема з виконання скриптів користувача [%s]."
+
+#: ../hosts/hostorthobulletscom.py:92
+msgid "Professional Networks"
+msgstr ""
+
+#: ../hosts/hostrtlmost.py:72
+#, fuzzy
+msgid "Program"
+msgstr "Програми"
+
+#: ../hosts/hostardmediathek.py:61 ../hosts/hostzdfmediathek.py:82
+#: ../hosts/hostzdfmediathek.py:97
+msgid "Program A-Z"
+msgstr "Програма A-Z"
+
+#: ../hosts/hostrteieplayer.py:47
+#, fuzzy
+msgid "Programmes"
+msgstr "Програми"
+
+#: ../hosts/hostgreekdocumentaries3.py:34 ../hosts/hostwptv.py:52
+msgid "Programs"
+msgstr "Програми"
+
+#: ../hosts/hostsvtplayse.py:81
+#, fuzzy
+msgid "Programs A-Ö"
+msgstr "Програма A-Z"
+
+#: ../iptvdm/iptvdmui.py:264
+msgid "Promote item"
+msgstr "Переставити на початок списку"
+
+#: ../hosts/hostbbcsport.py:172 ../hosts/hosthoofootcom.py:31
+msgid "Promoted"
+msgstr "Підвищено"
+
+#: ../hosts/hostwebstream.py:434
+msgid "Protocol: "
+msgstr "Протокол: "
+
+#: ../hosts/hostekstraklasatv.py:145
+msgid "Published"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:539
+msgid "Published:"
+msgstr ""
+
+#: ../hosts/hostmovs4ucom.py:51
+#, fuzzy
+msgid "Qualities"
+msgstr "Якісний"
+
+#: ../hosts/hostlibrestream.py:32
+msgid "Quality"
+msgstr "Якісний"
+
+#: ../hosts/hosthdstreams.py:200
+#, fuzzy
+msgid "Quality:"
+msgstr "Якісний"
+
+#: ../libs/canlitvliveio.py:110
+msgid "RADIO"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:303
+msgid "RAM buffer size [MB] for local files"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:302
+msgid "RAM buffer size [MB] for network protocols"
+msgstr ""
+
+#: ../hosts/hostguardaserie.py:230
+msgid "RATING"
+msgstr ""
+
+#: ../hosts/hostworldfree4u.py:43
+msgid "RECENT"
+msgstr ""
+
+#: ../Web/webParts.py:355
+msgid "REMEMBER: "
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:100
+msgid "Radio"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:362
+#, fuzzy
+msgid "Radio iframe file"
+msgstr "Очистити розташування заставки"
+
+#: ../hosts/hostdrdk.py:39
+msgid "Radio stations"
+msgstr "Радіостанції"
+
+#: ../hosts/hostorthobulletscom.py:93
+#, fuzzy
+msgid "Radiology Rounds"
+msgstr "Радіостанції"
+
+#: ../hosts/hostcartoonhd.py:512
+#, fuzzy
+msgid "Raiting"
+msgstr "Рейтинг"
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostdailymotion.py:55
+#: ../hosts/hostxrysoise.py:30
+msgid "Random"
+msgstr "Випадковий"
+
+#: ../components/iptvplayerwidget.py:602
+msgid "Randomize a playlist"
+msgstr "Перемістити плейлист"
+
+#: ../hosts/hostallboxtv.py:71 ../hosts/hostdailymotion.py:53
+msgid "Ranking"
+msgstr "Знаходження"
+
+#: ../hosts/hostaltadefinizione01.py:298 ../hosts/hostaltadefinizione1.py:262
+#: ../hosts/hostcineblog.py:231 ../hosts/hostfilmpertutti.py:248
+#: ../hosts/hosthd1080online.py:255 ../hosts/hostkinox.py:217
+#: ../hosts/hostvidcorncom.py:500 ../libs/youtubeparser.py:31
+msgid "Rating"
+msgstr "Рейтинг"
+
+#: ../hosts/hostcineto.py:111
+#, fuzzy, python-format
+msgid "Rating %s"
+msgstr "Рейтинг"
+
+#: ../hosts/hostfaselhdcom.py:126 ../hosts/hostddl.py:539
+#: ../hosts/hostmovizlandcom.py:233
+#, fuzzy
+msgid "Rating:"
+msgstr "Рейтинг"
+
+#: ../hosts/hostgreekdocumentaries3.py:32 ../hosts/hosttwitchtv.py:110
+msgid "Recent"
+msgstr "Минулий"
+
+#: ../hosts/hostorthobulletscom.py:110
+#, fuzzy
+msgid "Recon"
+msgstr "секунда"
+
+#: ../hosts/hosthitboxtv.py:268
+#, fuzzy
+msgid "Recordings"
+msgstr "IPTV Записи"
+
+#: ../Web/webSite.py:67
+#, fuzzy
+msgid "Redirect"
+msgstr "пряме писилання"
+
+#: ../components/iptvplayerwidget.py:173
+msgid "Refresh"
+msgstr "Оновлення"
+
+#: ../components/iptvplayerwidget.py:1821
+#: ../components/iptvsubdownloader.py:467
+msgid "Refreshing"
+msgstr "Оновлюється"
+
+#: ../hosts/hostfilmstreamhdit.py:167
+#, fuzzy
+msgid "Release:"
+msgstr "Релізи"
+
+#: ../hosts/hostmovs4ucom.py:52 ../hosts/hostyifytv.py:62
+msgid "Releases"
+msgstr "Релізи"
+
+#: ../hosts/hostaltadefinizione01.py:303 ../hosts/hostaltadefinizione1.py:267
+#: ../hosts/hostcineblog.py:236
+#, fuzzy
+msgid "Relese"
+msgstr "Релізи"
+
+#: ../libs/youtubeparser.py:31
+msgid "Relevance"
+msgstr "Актуальний"
+
+#: ../Web/webParts.py:366
+#, fuzzy
+msgid "Reload list"
+msgstr "Плейлист"
+
+#: ../components/configextmovieplayer.py:296
+msgid "Remember last watched position"
+msgstr "Запамятати минуле місце відтворення"
+
+#: ../hosts/hostlocalmedia.py:592
+msgid "Remove"
+msgstr "Видалити"
+
+#: ../components/playerselector.py:487
+#, fuzzy, python-format
+msgid "Remove \"%s\" item"
+msgstr "Видалити елементи"
+
+#: ../components/iptvconfigmenu.py:351
+msgid "Remove disabled services"
+msgstr "Видалити сервіси які не працюють"
+
+#: ../iptvdm/iptvdmui.py:262
+msgid "Remove file"
+msgstr "Видалити файл"
+
+#: ../components/iptvfavouriteswidgets.py:178
+#: ../components/iptvfavouriteswidgets.py:264
+msgid "Remove group"
+msgstr "Видалити групу"
+
+#: ../components/iptvfavouriteswidgets.py:298 ../iptvdm/iptvdmui.py:263
+msgid "Remove item"
+msgstr "Видалити елементи"
+
+#: ../iptvupdate/updatemainwindow.py:381
+msgid "Removing unnecessary files."
+msgstr "Видалення непотрібних файлів."
+
+#: ../hosts/hostlocalmedia.py:590
+msgid "Rename"
+msgstr "Перейменувати"
+
+#: ../hosts/hostwatchwrestlinguno.py:32
+#, fuzzy
+msgid "Replay Shows"
+msgstr "ТВ Шоу"
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "Reset State"
+msgstr ""
+
+#: ../libs/recaptcha_v2_2captcha.py:88 ../libs/recaptcha_v2_9kw.py:88
+#, python-format
+msgid ""
+"Resolving reCaptcha with %s failed!\n"
+"\n"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:334
+msgid ""
+"Restart GUI failed. \n"
+"Please restart STB manually."
+msgstr ""
+"Перезапустити інтерфейс не вдалося. \n"
+"Будь-ласка, перезавантажте тюнер вручну."
+
+#: ../Web/webParts.py:368
+#, fuzzy
+msgid "Return to hosts list"
+msgstr "Список мультфільмів"
+
+#: ../components/iptvplayerwidget.py:603
+#, fuzzy
+msgid "Reverse a playlist"
+msgstr "Перемістити плейлист"
+
+#: ../hosts/hostlookmovieag.py:82
+#, fuzzy
+msgid "Romance Movies"
+msgstr "Нові фільми"
+
+#: ../hosts/hostmovie4kto.py:34
+#, fuzzy
+msgid "Russian"
+msgstr "Росія"
+
+#: ../components/iptvconfigmenu.py:379
+msgid "Russian proxy server url"
+msgstr "Російський проксі-сервер url"
+
+#: ../hosts/hostplayrtsiw.py:438
+msgid "SHOWS"
+msgstr ""
+
+#: ../hosts/hostmusicmp3ru.py:325
+msgid "SONGS"
+msgstr ""
+
+#: ../iptvdm/iptvdmui.py:172 ../Web/webParts.py:250
+msgid "STARTED"
+msgstr "ОПЕРАЦІЇ"
+
+#: ../iptvdm/iptvdmui.py:173 ../Web/webParts.py:246
+msgid "STOPPED"
+msgstr "ЗУПИНКА"
+
+#: ../hosts/hostsportitalia.py:78
+#, fuzzy
+msgid "Saturday"
+msgstr "Рекомендовані"
+
+#: ../components/configbase.py:82 ../components/iptvmultipleinputbox.py:35
+#: ../components/iptvmultipleinputbox.py:100 ../Web/webTools.py:54
+msgid "Save"
+msgstr ""
+
+#: ../components/configbase.py:196 ../components/iptvfavouriteswidgets.py:273
+msgid "Save changes?"
+msgstr "Зберегти зміни?"
+
+#: ../hosts/hosteurosportplayer.py:92 ../libs/showsporttvcom.py:134
+msgid "Schedule"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:75
+#, fuzzy
+msgid "Sci-Fi Movies"
+msgstr "HD Фільми"
+
+#: ../hosts/hostgamatocom.py:90
+msgid "Score at least: "
+msgstr ""
+
+#: ../hosts/host123movieshd.py:125 ../hosts/host3player.py:59
+#: ../hosts/host3sktv.py:77 ../hosts/host7tvde.py:55 ../hosts/host9anime.py:50
+#: ../hosts/hostakoam.py:111 ../hosts/hostallboxtv.py:73
+#: ../hosts/hostalltubetv.py:32 ../hosts/hostaltadefinizione.py:67
+#: ../hosts/hostaltadefinizione01.py:98 ../hosts/hostaltadefinizione1.py:100
+#: ../hosts/hostaltadefinizionecool.py:60 ../hosts/hostandrijaiandjelka.py:81
+#: ../hosts/hostanimeodcinki.py:45 ../hosts/hostappletrailers.py:44
+#: ../hosts/hostarconaitvme.py:54 ../hosts/hostardmediathek.py:64
+#: ../hosts/hostartetv.py:61 ../hosts/hostbbciplayer.py:58
+#: ../hosts/hostbsto.py:82 ../hosts/hostcartoonhd.py:81
+#: ../hosts/hostcdapl.py:66 ../hosts/hostchristusvincit.py:302
+#: ../hosts/hostcimaclubcom.py:50 ../hosts/hostcineblog.py:83
+#: ../hosts/hostcinemaxx.py:140 ../hosts/hostcinemay.py:48
+#: ../hosts/hostcineto.py:42 ../hosts/hostclassiccinemaonline.py:41
+#: ../hosts/hostcrtankocom.py:32 ../hosts/hostdailymotion.py:47
+#: ../hosts/hostdancetrippin.py:40 ../hosts/hostdardarkomcom.py:35
+#: ../hosts/hostdarshowcom.py:35 ../hosts/hostdixmax.py:124
+#: ../hosts/hostdokumentalnenet.py:47 ../hosts/hostdpstreamingcx.py:37
+#: ../hosts/hostefilmytv.py:85 ../hosts/hostegybest.py:66
+#: ../hosts/hostekinotv.py:68 ../hosts/hosteurosportplayer.py:96
+#: ../hosts/hostfaselhdcom.py:40 ../hosts/hostfenixsite.py:61
+#: ../hosts/hostfilma24hdcom.py:33 ../hosts/hostfilma24io.py:78
+#: ../hosts/hostfilmaoncom.py:81 ../hosts/hostfilmativa.py:33
+#: ../hosts/hostfilmehdnet.py:50 ../hosts/hostfilmeonlineto.py:112
+#: ../hosts/hostfilmezz.py:72 ../hosts/hostfilmixco.py:129
+#: ../hosts/hostfilmovizijastudio.py:51 ../hosts/hostfilmpalast.py:46
+#: ../hosts/hostfilmpertutti.py:42 ../hosts/hostfilmstreamhdit.py:36
+#: ../hosts/hostfilmstreamvkcom.py:101 ../hosts/hostfilmydokumentalneeu.py:33
+#: ../hosts/hostforjatn.py:43 ../hosts/hostbajeczkiorg.py:45
+#: ../hosts/hostddl.py:140 ../hosts/hostfilisertv.py:53
+#: ../hosts/hostfreediscpl.py:57 ../hosts/hostnaszekinotv.py:103
+#: ../hosts/hostgamatocom.py:38 ../hosts/hostgamatotvme.py:41
+#: ../hosts/hostgledalica.py:69 ../hosts/hostgreekdocumentaries3.py:37
+#: ../hosts/hostguardaserie.py:77 ../hosts/hosthd1080online.py:61
+#: ../hosts/hosthdfilmetv.py:39 ../hosts/hosthdfull.py:155
+#: ../hosts/hosthdkinomir.py:41 ../hosts/hosthdpopcornscom.py:39
+#: ../hosts/hosthdsto.py:147 ../hosts/hosthdstreams.py:73
+#: ../hosts/hosthitboxtv.py:44 ../hosts/hosthoofootcom.py:32
+#: ../hosts/hosticefilmsinfo.py:75 ../hosts/hostinteriatv.py:54
+#: ../hosts/hostkabarety.py:42 ../hosts/hostkijknl.py:55
+#: ../hosts/hostkinogo.py:90 ../hosts/hostkinomanco.py:76
+#: ../hosts/hostkinotan.py:43 ../hosts/hostkinox.py:94
+#: ../hosts/hostkissanimeto.py:61 ../hosts/hostkisscartoonme.py:46
+#: ../hosts/hostkkiste.py:147 ../hosts/hostkreskoweczki.py:43
+#: ../hosts/hostkreskowkazone.py:62 ../hosts/hostlaola1tv.py:54
+#: ../hosts/hostlibrestream.py:34 ../hosts/hostliveleak.py:47
+#: ../hosts/hostlookmovieag.py:56 ../hosts/hostlosmovies.py:60
+#: ../hosts/hostluxveritatis.py:54 ../hosts/hostmaxtvgo.py:60
+#: ../hosts/hostmooviecc.py:50 ../hosts/hostmovie4kto.py:69
+#: ../hosts/hostmovienightws.py:32 ../hosts/hostmovierulzsx.py:39
+#: ../hosts/hostmovizlandcom.py:33 ../hosts/hostmovs4ucom.py:44
+#: ../hosts/hostmozicsillag.py:46 ../hosts/hostmrpiracy.py:117
+#: ../hosts/hostmusicmp3ru.py:80 ../hosts/hostmyfreemp3.py:38
+#: ../hosts/hostmythewatchseries.py:70 ../hosts/hostninateka.py:54
+#: ../hosts/hostnuteczki.py:94 ../hosts/hostofficialfilmillimite.py:76
+#: ../hosts/hostoipeirates.py:79 ../hosts/hostokgoals.py:39
+#: ../hosts/hostororotv.py:42 ../hosts/hostorthobulletscom.py:70
+#: ../hosts/hostotakufr.py:61 ../hosts/hostourmatchnet.py:40
+#: ../hosts/hostpinkbike.py:43 ../hosts/hostplanetstreamingcom.py:107
+#: ../hosts/hostplaypuls.py:67 ../hosts/hostplayrtsiw.py:91
+#: ../hosts/hostplusdede.py:71 ../hosts/hostputlockertvto.py:136
+#: ../hosts/hostredbull.py:55 ../hosts/hostrtbfbe.py:96
+#: ../hosts/hostrteieplayer.py:49 ../hosts/hostrtlmost.py:167
+#: ../hosts/hostserialeco.py:40 ../hosts/hostserialnet.py:39
+#: ../hosts/hostserienstreamto.py:76 ../hosts/hostseriesonline.py:137
+#: ../hosts/hostserijeonline.py:57 ../hosts/hostshahiidanimenet.py:45
+#: ../hosts/hostshoutcast.py:45 ../hosts/hostskstream.py:116
+#: ../hosts/hostsolarmovie.py:120 ../hosts/hostsovdub.py:33
+#: ../hosts/hostspiegeltv.py:74 ../hosts/hostsportdeutschland.py:56
+#: ../hosts/hoststreamcomplet.py:31 ../hosts/hoststreaminghdfun.py:59
+#: ../hosts/hoststreamliveto.py:50 ../hosts/hostsvtplayse.py:84
+#: ../hosts/hostszenestreamz.py:42 ../hosts/hosttainieskaiseirestv.py:51
+#: ../hosts/hosttantifilmorg.py:39 ../hosts/hostted.py:77
+#: ../hosts/hosttfarjocom.py:71 ../hosts/hostthewatchseriesto.py:68
+#: ../hosts/hosttreetv.py:72 ../hosts/hostturcjatv.py:78
+#: ../hosts/hosttvgrypl.py:56 ../hosts/hosttvproart.py:33
+#: ../hosts/hosttvpvod.py:93 ../hosts/hosttwitchtv.py:136
+#: ../hosts/hostuktvplay.py:68 ../hosts/hostustreamtv.py:31
+#: ../hosts/hostvevo.py:96 ../hosts/hostvidcorncom.py:85
+#: ../hosts/hostvideopenny.py:96 ../hosts/hostvimeo.py:66
+#: ../hosts/hostvodpl.py:63 ../hosts/hostvumedicom.py:79
+#: ../hosts/hostwatchcartoononline.py:106 ../hosts/hostwatchwrestlinguno.py:44
+#: ../hosts/hostwgrane.py:66 ../hosts/hostwolnelekturypl.py:72
+#: ../hosts/hostworldfree4u.py:44 ../hosts/hostwpolscepl.py:39
+#: ../hosts/hostwptv.py:54 ../hosts/hostxrysoise.py:52
+#: ../hosts/hostyesmoviesto.py:105 ../hosts/hostyifytv.py:68
+#: ../hosts/hostyoutube.py:54 ../hosts/hostzdfmediathek.py:86
+#: ../Web/webParts.py:80
+msgid "Search"
+msgstr "Пошук"
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:52
+#, fuzzy
+msgid "Search Movies and TV Series"
+msgstr "Пошук фільмів"
+
+#: ../hosts/hostplayrtsiw.py:438 ../hosts/hostplayrtsiw.py:454
+#, fuzzy, python-format
+msgid "Search for \"%s\", %s, %s %s"
+msgstr "Пошук фільму \"%s\""
+
+#: ../components/e2ivk.py:716 ../hosts/host123movieshd.py:126
+#: ../hosts/host3player.py:60 ../hosts/host3sktv.py:78 ../hosts/host7tvde.py:56
+#: ../hosts/host9anime.py:51 ../hosts/hostakoam.py:112
+#: ../hosts/hostallboxtv.py:74 ../hosts/hostalltubetv.py:33
+#: ../hosts/hostaltadefinizione.py:68 ../hosts/hostaltadefinizione01.py:99
+#: ../hosts/hostaltadefinizione1.py:101 ../hosts/hostaltadefinizionecool.py:61
+#: ../hosts/hostandrijaiandjelka.py:82 ../hosts/hostanimeodcinki.py:46
+#: ../hosts/hostappletrailers.py:45 ../hosts/hostarconaitvme.py:55
+#: ../hosts/hostardmediathek.py:65 ../hosts/hostartetv.py:62
+#: ../hosts/hostbbciplayer.py:59 ../hosts/hostbsto.py:83
+#: ../hosts/hostcartoonhd.py:82 ../hosts/hostcdapl.py:67
+#: ../hosts/hostchristusvincit.py:303 ../hosts/hostcimaclubcom.py:51
+#: ../hosts/hostcineblog.py:84 ../hosts/hostcinemaxx.py:141
+#: ../hosts/hostcinemay.py:49 ../hosts/hostcineto.py:43
+#: ../hosts/hostclassiccinemaonline.py:42 ../hosts/hostcrtankocom.py:33
+#: ../hosts/hostdailymotion.py:48 ../hosts/hostdancetrippin.py:41
+#: ../hosts/hostdardarkomcom.py:36 ../hosts/hostdarshowcom.py:36
+#: ../hosts/hostdixmax.py:125 ../hosts/hostdokumentalnenet.py:48
+#: ../hosts/hostdpstreamingcx.py:38 ../hosts/hostefilmytv.py:86
+#: ../hosts/hostegybest.py:67 ../hosts/hostekinotv.py:69
+#: ../hosts/hosteurosportplayer.py:97 ../hosts/hostfaselhdcom.py:41
+#: ../hosts/hostfenixsite.py:62 ../hosts/hostfilma24hdcom.py:34
+#: ../hosts/hostfilma24io.py:79 ../hosts/hostfilmaoncom.py:82
+#: ../hosts/hostfilmativa.py:34 ../hosts/hostfilmehdnet.py:51
+#: ../hosts/hostfilmeonlineto.py:113 ../hosts/hostfilmezz.py:73
+#: ../hosts/hostfilmixco.py:130 ../hosts/hostfilmovizijastudio.py:52
+#: ../hosts/hostfilmpalast.py:47 ../hosts/hostfilmpertutti.py:43
+#: ../hosts/hostfilmstreamhdit.py:37 ../hosts/hostfilmstreamvkcom.py:102
+#: ../hosts/hostfilmydokumentalneeu.py:34 ../hosts/hostforjatn.py:44
+#: ../hosts/hostbajeczkiorg.py:46 ../hosts/hostddl.py:141
+#: ../hosts/hostfilisertv.py:54 ../hosts/hostfreediscpl.py:58
+#: ../hosts/hostnaszekinotv.py:104 ../hosts/hostgamatocom.py:39
+#: ../hosts/hostgamatotvme.py:42 ../hosts/hostgledalica.py:70
+#: ../hosts/hostgreekdocumentaries3.py:38 ../hosts/hostguardaserie.py:78
+#: ../hosts/hosthd1080online.py:62 ../hosts/hosthdfilmetv.py:40
+#: ../hosts/hosthdfull.py:156 ../hosts/hosthdkinomir.py:42
+#: ../hosts/hosthdpopcornscom.py:40 ../hosts/hosthdsto.py:148
+#: ../hosts/hosthdstreams.py:74 ../hosts/hosthitboxtv.py:45
+#: ../hosts/hosthoofootcom.py:33 ../hosts/hosticefilmsinfo.py:76
+#: ../hosts/hostinteriatv.py:55 ../hosts/hostkabarety.py:43
+#: ../hosts/hostkijknl.py:56 ../hosts/hostkinogo.py:91
+#: ../hosts/hostkinomanco.py:77 ../hosts/hostkinotan.py:44
+#: ../hosts/hostkinox.py:95 ../hosts/hostkissanimeto.py:62
+#: ../hosts/hostkisscartoonme.py:47 ../hosts/hostkkiste.py:148
+#: ../hosts/hostkreskoweczki.py:44 ../hosts/hostkreskowkazone.py:63
+#: ../hosts/hostlaola1tv.py:55 ../hosts/hostlibrestream.py:35
+#: ../hosts/hostliveleak.py:48 ../hosts/hostlookmovieag.py:57
+#: ../hosts/hostlosmovies.py:61 ../hosts/hostluxveritatis.py:55
+#: ../hosts/hostmaxtvgo.py:61 ../hosts/hostmooviecc.py:51
+#: ../hosts/hostmovie4kto.py:70 ../hosts/hostmovienightws.py:33
+#: ../hosts/hostmovierulzsx.py:40 ../hosts/hostmovizlandcom.py:34
+#: ../hosts/hostmovs4ucom.py:45 ../hosts/hostmozicsillag.py:47
+#: ../hosts/hostmrpiracy.py:118 ../hosts/hostmusicmp3ru.py:81
+#: ../hosts/hostmyfreemp3.py:39 ../hosts/hostmythewatchseries.py:71
+#: ../hosts/hostninateka.py:55 ../hosts/hostnuteczki.py:95
+#: ../hosts/hostofficialfilmillimite.py:77 ../hosts/hostoipeirates.py:80
+#: ../hosts/hostokgoals.py:40 ../hosts/hostororotv.py:43
+#: ../hosts/hostorthobulletscom.py:71 ../hosts/hostotakufr.py:62
+#: ../hosts/hostourmatchnet.py:41 ../hosts/hostpinkbike.py:44
+#: ../hosts/hostplanetstreamingcom.py:108 ../hosts/hostplaypuls.py:68
+#: ../hosts/hostplayrtsiw.py:92 ../hosts/hostplusdede.py:72
+#: ../hosts/hostputlockertvto.py:137 ../hosts/hostredbull.py:56
+#: ../hosts/hostrtbfbe.py:97 ../hosts/hostrteieplayer.py:50
+#: ../hosts/hostrtlmost.py:168 ../hosts/hostserialeco.py:41
+#: ../hosts/hostserialnet.py:40 ../hosts/hostserienstreamto.py:77
+#: ../hosts/hostseriesonline.py:138 ../hosts/hostserijeonline.py:58
+#: ../hosts/hostshahiidanimenet.py:46 ../hosts/hostshoutcast.py:46
+#: ../hosts/hostskstream.py:117 ../hosts/hostsolarmovie.py:121
+#: ../hosts/hostsovdub.py:34 ../hosts/hostspiegeltv.py:75
+#: ../hosts/hostsportdeutschland.py:57 ../hosts/hoststreamcomplet.py:32
+#: ../hosts/hoststreaminghdfun.py:60 ../hosts/hoststreamliveto.py:51
+#: ../hosts/hostsvtplayse.py:85 ../hosts/hostszenestreamz.py:43
+#: ../hosts/hosttainieskaiseirestv.py:52 ../hosts/hosttantifilmorg.py:40
+#: ../hosts/hostted.py:78 ../hosts/hosttfarjocom.py:72
+#: ../hosts/hostthewatchseriesto.py:69 ../hosts/hosttreetv.py:73
+#: ../hosts/hostturcjatv.py:79 ../hosts/hosttvgrypl.py:57
+#: ../hosts/hosttvproart.py:34 ../hosts/hosttvpvod.py:94
+#: ../hosts/hosttwitchtv.py:137 ../hosts/hostuktvplay.py:69
+#: ../hosts/hostustreamtv.py:32 ../hosts/hostvevo.py:97
+#: ../hosts/hostvidcorncom.py:86 ../hosts/hostvideopenny.py:97
+#: ../hosts/hostvimeo.py:67 ../hosts/hostvodpl.py:64
+#: ../hosts/hostvumedicom.py:80 ../hosts/hostwatchcartoononline.py:107
+#: ../hosts/hostwatchwrestlinguno.py:45 ../hosts/hostwgrane.py:67
+#: ../hosts/hostwolnelekturypl.py:73 ../hosts/hostworldfree4u.py:45
+#: ../hosts/hostwpolscepl.py:40 ../hosts/hostwptv.py:55
+#: ../hosts/hostxrysoise.py:53 ../hosts/hostyesmoviesto.py:106
+#: ../hosts/hostyifytv.py:69 ../hosts/hostyoutube.py:55
+#: ../hosts/hostzalukajcom.py:67 ../hosts/hostzdfmediathek.py:87
+msgid "Search history"
+msgstr "Історія пошуку"
+
+#: ../Web/webTools.py:39
+#, fuzzy
+msgid "Search in "
+msgstr "Пошук "
+
+#: ../Web/webParts.py:478
+msgid "Search in all active hosts"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:52
+#, fuzzy
+msgid "Search only in Movies"
+msgstr "Пошук фільмів"
+
+#: ../subproviders/subprov_opensubtitlesorg2.py:52
+msgid "Search only in TV Series"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1806
+msgid "Search results"
+msgstr "Результати пошуку"
+
+#: ../components/iptvplayerwidget.py:1868
+msgid "Search type"
+msgstr "Тип пошуку"
+
+#: ../hosts/hostyoutube.py:54
+msgid "Search youtube materials "
+msgstr "Пошук матеріалів в YouTube"
+
+#: ../Web/webSite.py:181
+#, fuzzy, python-format
+msgid "Searching in %s, please wait (%d)"
+msgstr "Йде обробка, будь-ласка, зачекайте."
+
+#: ../components/iptvsubdownloader.py:660
+#, fuzzy, python-format
+msgid "Searching subtitles for \"%s\""
+msgstr "Пошук субтитрів для \"%s\""
+
+#: ../Web/webSite.py:179
+#, fuzzy, python-format
+msgid "Searching, please wait (%d)"
+msgstr "Йде обробка, будь-ласка, зачекайте."
+
+#: ../hosts/hostcartoonhd.py:222 ../hosts/hostdixmax.py:308
+#: ../hosts/hostdplayit.py:264 ../hosts/hostddl.py:435
+#: ../hosts/hostkinomanco.py:506 ../libs/moonwalkcc.py:258
+#: ../subproviders/subprov_napiprojektpl.py:206
+msgid "Season"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:294 ../hosts/hosthd1080online.py:143
+#: ../hosts/hostplusdede.py:306 ../hosts/hostserialeco.py:159
+#: ../hosts/hostserialeco.py:191 ../hosts/hostszenestreamz.py:231
+#: ../hosts/hostszenestreamz.py:250 ../hosts/hostuktvplay.py:162
+#: ../subproviders/subprov_napisy24pl.py:227
+#: ../subproviders/subprov_opensubtitlesorg.py:302
+#: ../subproviders/subprov_opensubtitlesorg3.py:85
+#: ../subproviders/subprov_titlovicom.py:101
+#, python-format
+msgid "Season %s"
+msgstr ""
+
+#: ../hosts/hostdixmax.py:309
+#, python-format
+msgid "Season %s (%s)"
+msgstr ""
+
+#: ../hosts/hostgamatocom.py:187
+#, python-brace-format
+msgid "Season {0}"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:429 ../components/iptvconfigmenu.py:440
+#: ../components/iptvconfigmenu.py:451 ../components/iptvconfigmenu.py:462
+#: ../components/iptvconfigmenu.py:472
+msgid "Second movie player in buffering mode"
+msgstr "Вибрати другий крок плеєра в режимі (буферизації)"
+
+#: ../components/iptvconfigmenu.py:424 ../components/iptvconfigmenu.py:435
+#: ../components/iptvconfigmenu.py:446 ../components/iptvconfigmenu.py:457
+#: ../components/iptvconfigmenu.py:467
+msgid "Second movie player without buffering mode"
+msgstr "Вибрати другий крок плеєра"
+
+#: ../hosts/hostted.py:122
+msgid "See all events"
+msgstr ""
+
+#: ../hosts/hostted.py:111
+#, fuzzy
+msgid "See all languages"
+msgstr "Виберіть мову"
+
+#: ../hosts/hostted.py:105 ../hosts/hostted.py:139
+#, fuzzy
+msgid "See all topics"
+msgstr "всі типи"
+
+#: ../Web/webParts.py:418
+msgid "Select"
+msgstr "Вибрати"
+
+#: ../components/iptvextmovieplayer.py:684
+#: ../components/iptvextmovieplayer.py:700
+#, python-format
+msgid "Select %s"
+msgstr "Виберіть %s"
+
+#: ../components/iptvconfigmenu.py:331
+#, fuzzy
+msgid "Select GitLab repository owner"
+msgstr "Виберіть каталог"
+
+#: ../components/iptvplayerwidget.py:2153 ../iptvdm/iptvdmui.py:291
+msgid "Select action"
+msgstr "Виберіть дію"
+
+#: ../components/iptvextmovieplayer.py:757
+msgid "Select audio track"
+msgstr "Вибір звукової дорожки"
+
+#: ../components/iptvconfigmenu.py:586
+#, fuzzy
+msgid "Select directory"
+msgstr "Виберіть каталог"
+
+#: ../components/iptvfavouriteswidgets.py:106
+msgid "Select favourite group"
+msgstr "Виберіть групу вибраного"
+
+#: ../components/playerselector.py:520
+#, fuzzy
+msgid "Select group"
+msgstr "Виберіть опцію"
+
+#: ../components/e2ivk.py:746
+msgid "Select language"
+msgstr "Виберіть мову"
+
+#: ../components/iptvplayerwidget.py:1541
+msgid "Select link"
+msgstr "Виберіть посилання"
+
+#: ../components/iptvplayerwidget.py:744
+msgid "Select movie player"
+msgstr "Вибір плеєра"
+
+#: ../components/confighost.py:154 ../components/iptvchoicebox.py:51
+#: ../components/iptvchoicebox.py:68 ../components/iptvplayerwidget.py:612
+#: ../components/playerselector.py:490
+msgid "Select option"
+msgstr "Виберіть опцію"
+
+#: ../components/iptvimageselector.py:76
+#, fuzzy
+msgid "Select pictures"
+msgstr "Виберіть послугу"
+
+#: ../components/iptvplayerwidget.py:1297
+msgid "Select service"
+msgstr "Виберіть послугу"
+
+#: ../components/iptvextmovieplayer.py:865
+msgid "Select subtitles file"
+msgstr "Виберіть файл з субтитрами"
+
+#: ../components/iptvsubdownloader.py:418
+#, fuzzy
+msgid "Select subtitles provider:"
+msgstr "Виберіть файл з субтитрами"
+
+#: ../components/iptvsubsimpledownloader.py:225
+msgid "Select subtitles to download"
+msgstr "Виберіть субтитри для завантаження"
+
+#: ../components/iptvextmovieplayer.py:816
+msgid "Select subtitles track"
+msgstr "Виберіть дорожку субтитрів"
+
+#: ../components/configbase.py:273
+msgid "Select the directory"
+msgstr "Виберіть каталог"
+
+#: ../components/configbase.py:267
+#, fuzzy
+msgid "Select the file"
+msgstr "Виберіть файл з субтитрами"
+
+#: ../iptvupdate/updatemainwindow.py:836
+msgid "Select update server"
+msgstr "Виберіть сервер оновлень"
+
+#: ../components/iptvextmovieplayer.py:664
+msgid "Select video option"
+msgstr "Виберіть відео"
+
+#: ../Web/webParts.py:80
+#, fuzzy
+msgid "Selected hosts"
+msgstr "Виберіть %s"
+
+#: ../iptvupdate/updatemainwindow.py:880
+#, python-format
+msgid "Selected version [%s]."
+msgstr "Вибраний варіант [%s]."
+
+#: ../hosts/hostefilmytv.py:557 ../hosts/hostfilmezz.py:340
+#: ../hosts/hostfreediscpl.py:107 ../hosts/hostnaszekinotv.py:414
+#: ../hosts/hostkinomanco.py:636 ../hosts/hostmooviecc.py:444
+#: ../hosts/hostserienstreamto.py:510 ../hosts/hoststreamliveto.py:307
+#: ../hosts/hoststreamliveto.py:352 ../hosts/hostzalukajcom.py:346
+#: ../libs/recaptcha_v1.py:67 ../libs/urlparser.py:3910
+msgid "Send"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:77
+msgid "September"
+msgstr ""
+
+#: ../hosts/hostforjatn.py:392
+msgid "Seriale"
+msgstr "Серіали"
+
+#: ../hosts/hostkinotan.py:39
+msgid "Serials"
+msgstr "Серіали"
+
+#: ../hosts/hostalltubetv.py:30 ../hosts/hostefilmytv.py:84
+#: ../hosts/hostefilmytv.py:768 ../hosts/hostfilmativa.py:293
+#: ../hosts/hostfilmezz.py:67 ../hosts/hostfilmovizijastudio.py:48
+#: ../hosts/hostfilmpalast.py:44 ../hosts/hostfilmstreamvkcom.py:99
+#: ../hosts/hostforjatn.py:41 ../hosts/hostfilisertv.py:52
+#: ../hosts/hostnaszekinotv.py:731 ../hosts/hostgamatocom.py:37
+#: ../hosts/hosthdfilmetv.py:37 ../hosts/hosthdstreams.py:551
+#: ../hosts/hostkijknl.py:62 ../hosts/hostkinomanco.py:849
+#: ../hosts/hostkinox.py:92 ../hosts/hostmooviecc.py:47
+#: ../hosts/hostmovs4ucom.py:40 ../hosts/hostmozicsillag.py:44
+#: ../hosts/hostplanetstreamingcom.py:370 ../hosts/hoststreaminghdfun.py:446
+#: ../hosts/hostszenestreamz.py:40 ../hosts/hostszenestreamz.py:41
+#: ../hosts/hosttreetv.py:66 ../hosts/hostvodpl.py:58 ../hosts/hostwptv.py:51
+#: ../subproviders/subprov_prijevodi.py:48
+msgid "Series"
+msgstr "Серії"
+
+#: ../hosts/hostlibrestream.py:31
+#, fuzzy
+msgid "Series TV"
+msgstr "Серії"
+
+#: ../hosts/hostthewatchseriesto.py:63
+#, fuzzy
+msgid "Series list"
+msgstr "Серії"
+
+#: ../hosts/hostcineto.py:371
+msgid "Server return 404 - Not Found."
+msgstr ""
+
+#: ../subproviders/subprov_napisy24pl.py:99
+#, fuzzy, python-format
+msgid ""
+"Service %s requires registration. \n"
+"Please fill your login and password in the %s configuration."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../components/confighost.py:144
+#, python-format
+msgid "Service [%s] has no additional settings."
+msgstr "Конфігурація [%s] немає додаткових налаштувань."
+
+#: ../components/confighost.py:67 ../components/iptvconfigmenu.py:350
+msgid "Services configuration"
+msgstr "Конфігурація хосту(натисніть ОК)"
+
+#: ../hosts/hostiptvplayerinfo.py:50
+msgid "Services management"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:598
+msgid "Set active movie player"
+msgstr "Вибір активного відеоплеєра"
+
+#: ../hosts/hostlocalmedia.py:622
+msgid "Set file name"
+msgstr "Встановити ім'я файлу"
+
+#: ../components/iptvconfigmenu.py:358
+msgid "Set pin code"
+msgstr "Встановіть пін-код"
+
+#: ../hosts/hostfavourites.py:252
+#, fuzzy
+msgid "Set watched"
+msgstr "послідні переглянуті"
+
+#: ../Web/webParts.py:80
+#, fuzzy
+msgid "Settings"
+msgstr "Кращий рейтинг"
+
+#: ../hosts/hostorthobulletscom.py:107
+msgid "Shoulder & Elbow"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:485
+msgid "Show IPTVPlayer in extension list"
+msgstr "Показати IPTV Плеєр в меню плагінів"
+
+#: ../components/iptvconfigmenu.py:486
+msgid "Show IPTVPlayer in main menu"
+msgstr "Показати IPTV Плеєр в головному меню"
+
+#: ../libs/videostar.py:40 ../libs/weebtv.py:57
+msgid "Show all channels"
+msgstr "Показати всі канали"
+
+#: ../components/iptvconfigmenu.py:308
+msgid "Show all version in the update menu"
+msgstr "Показати всі версії в меню Оновлення"
+
+#: ../components/iptvconfigmenu.py:397
+msgid "Show download manager after adding new item"
+msgstr "Показати менеджер завантажеь після добавлення нового файлу"
+
+#: ../hosts/hostlocalmedia.py:47
+msgid "Show file size"
+msgstr "Показати размір файлу"
+
+#: ../hosts/hostlocalmedia.py:49
+msgid "Show hiddens catalogs"
+msgstr "Показати скриті каталоги"
+
+#: ../hosts/hostlocalmedia.py:48
+msgid "Show hiddens files"
+msgstr "Показати скриті файли"
+
+#: ../components/configextmovieplayer.py:360
+#, fuzzy
+msgid "Show iframe during audio playback"
+msgstr "Включити заставку в режимі аудіо"
+
+#: ../hosts/hosttvnowde.py:36
+msgid "Show items with DRM"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:35
+msgid "Show paid items (it may be illegal)"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:341
+msgid "Show update icon in service selection menu"
+msgstr "Показати оновлення в головному меню"
+
+#: ../hosts/hostredbull.py:198
+#, fuzzy
+msgid "Showcase"
+msgstr "Шоу"
+
+#: ../hosts/hostarconaitvme.py:50 ../hosts/hostitvcom.py:56
+msgid "Shows"
+msgstr "Шоу"
+
+#: ../components/iptvsubsimpledownloader.py:50
+msgid "Simple subtitles downloader"
+msgstr "Завантажувач простих субтитрів"
+
+#: ../components/iptvsubdownloader.py:554
+msgid "Simplify the title and try again."
+msgstr ""
+
+#: ../components/e2isimpledownloader.py:42
+#, fuzzy
+msgid "Single file downloader"
+msgstr "Завантажувач простих субтитрів"
+
+#: ../components/iptvconfigmenu.py:360
+msgid "Skin"
+msgstr "Вибір cкіна"
+
+#: ../hosts/hostfrancetv.py:38
+msgid "Skip geo-blocked links:"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:472 ../iptvupdate/updatemainwindow.py:483
+#: ../iptvupdate/updatemainwindow.py:492 ../iptvupdate/updatemainwindow.py:504
+msgid "Skipped."
+msgstr ""
+
+#: ../setup/iptvsetupwidget.py:94
+msgid ""
+"Skipping IPTVPlayer setup may cause problems.\n"
+"Are you sure to skip IPTVPlayer setup?"
+msgstr ""
+"Пропуск встановлення додатку, може привести до дефекту плагіна. \n"
+"Пропустити встановлення додаткових модулів. Ви впевнені?"
+
+#: ../components/configextmovieplayer.py:312
+msgid "Software decoding as"
+msgstr "Декодувати"
+
+#: ../components/iptvconfigmenu.py:55
+#, fuzzy
+msgid "Software floating point"
+msgstr "Декодувати"
+
+#: ../components/configextmovieplayer.py:268
+msgid "Some changes will be applied only after movie player restart."
+msgstr "Деякі зміни будуть застосовані тільки після перезапуску відеоплеєра."
+
+#: ../components/iptvconfigmenu.py:563 ../components/iptvplayerwidget.py:1397
+msgid ""
+"Some changes will be applied only after plugin update.\n"
+"Do you want to perform update now?"
+msgstr ""
+"Деякі зміни будуть застосовані тільки після оновлення плагіна.\n"
+"Ви хочете,оновити програмне забезпечення?"
+
+#: ../hosts/hosttvplayercom.py:257
+msgid "Sorry. TVPlayer is currently only available in the United Kingdom"
+msgstr ""
+
+#: ../hosts/hostlocalmedia.py:46
+#, fuzzy
+msgid "Sort alphabetically"
+msgstr "В алфавітному порядку"
+
+#: ../hosts/hostkissanimeto.py:64 ../hosts/hostkisscartoonme.py:48
+msgid "Sort by alphabet"
+msgstr "Сортування по алфавіту"
+
+#: ../hosts/hostkissanimeto.py:65 ../hosts/hostkisscartoonme.py:49
+msgid "Sort by popularity"
+msgstr "Сортувати по популярності"
+
+#: ../hosts/hostyoutube.py:30
+msgid "Sort by:"
+msgstr "Сортувати за:"
+
+#: ../hosts/hostfilisertv.py:118
+#, fuzzy
+msgid "Sort by: "
+msgstr "Сортувати за:"
+
+#: ../hosts/hosturllist.py:32
+msgid "Sort the list:"
+msgstr "Сортувати список:"
+
+#: ../libs/weebtv.py:53
+msgid "Sorted channels A-Z [live]"
+msgstr "Сортування каналів A-Z [прямий етер]"
+
+#: ../libs/weebtv.py:55
+msgid "Sorted most viewed channels general [live]"
+msgstr "Сортування всіх найбільш популярних каналів [прямий етер]"
+
+#: ../libs/weebtv.py:54
+msgid "Sorted most viewed channels now [live]"
+msgstr "Сортування каналів, самих популярних в даний час [прямий етер]"
+
+#: ../libs/urlparser.py:5097
+#, python-format
+msgid "Source %s"
+msgstr ""
+
+#: ../hosts/hosthdfull.py:34 ../hosts/hostmovie4kto.py:34
+#: ../hosts/hostngolos.py:25
+msgid "Spanish"
+msgstr "Іспанія"
+
+#: ../hosts/hostvumedicom.py:77
+msgid "Specialities"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:106
+msgid "Spine"
+msgstr ""
+
+#: ../hosts/hosticefilmsinfo.py:74
+msgid "Stand-Up"
+msgstr ""
+
+#: ../libs/weebtv.py:31
+#, fuzzy
+msgid "Standard"
+msgstr "Стандарт"
+
+#: ../hosts/hostardmediathek.py:59 ../iptvdm/iptvdmui.py:75
+#: ../Web/webParts.py:248 ../Web/webParts.py:252
+msgid "Start"
+msgstr "Початок"
+
+#: ../components/iptvconfigmenu.py:396
+msgid "Start download manager per default"
+msgstr "Включити менеджер завантажень по замовчуванню"
+
+#: ../iptvupdate/updatemainwindow.py:83
+#, python-format
+msgid "Step [%s] cannot be aborted. Please wait."
+msgstr "Активація [%s] не може перериватися. Будь-ласка, зачекайте."
+
+#: ../components/configextmovieplayer.py:313
+msgid "Stereo downmix mode for software decoder"
+msgstr "Стерео мікшування для декодера п/о"
+
+#: ../iptvdm/iptvdmui.py:74 ../Web/webParts.py:247 ../Web/webParts.py:251
+msgid "Stop"
+msgstr "Стоп"
+
+#: ../Web/webParts.py:299
+#, fuzzy
+msgid "Stop download"
+msgstr "Зупинка завантаження"
+
+#: ../iptvdm/iptvdmui.py:261
+msgid "Stop downloading"
+msgstr "Зупинка завантаження"
+
+#: ../components/iptvextmovieplayer.py:519
+#, fuzzy
+msgid "Stop playback with buffer save"
+msgstr "Вибрати плеєр без режиму буферизації"
+
+#: ../iptvdm/iptvbuffui.py:265 ../iptvdm/iptvbuffui.py:295
+msgid "Stop playing?"
+msgstr "Зупинити відтворення?"
+
+#: ../hosts/hostappletrailers.py:96
+#, fuzzy
+msgid "Studio:"
+msgstr "Аудіо"
+
+#: ../hosts/hostorthobulletscom.py:94
+msgid "Study Plan"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:69
+msgid "Subspecialities"
+msgstr ""
+
+#: ../components/configextmovieplayer.py:339
+msgid "Subtitle background"
+msgstr "Фон субтитрів"
+
+#: ../components/configextmovieplayer.py:350
+msgid "Subtitle border color"
+msgstr "Колір бордюра субтитрів"
+
+#: ../components/configextmovieplayer.py:348
+msgid "Subtitle border enabled"
+msgstr "Включити бордюри субтитрів "
+
+#: ../components/configextmovieplayer.py:351
+msgid "Subtitle border width"
+msgstr "Ширина бордюра субтитрів"
+
+#: ../components/configextmovieplayer.py:344
+msgid "Subtitle box height"
+msgstr "Висота субтитрів"
+
+#: ../components/configextmovieplayer.py:341
+msgid "Subtitle box position"
+msgstr "Позиція субтитрів"
+
+#: ../components/configextmovieplayer.py:330
+msgid "Subtitle font"
+msgstr "Шрифт субтитрів"
+
+#: ../components/configextmovieplayer.py:338
+msgid "Subtitle font color"
+msgstr "Колір шрифту субтитрів"
+
+#: ../components/configextmovieplayer.py:331
+msgid "Subtitle font size"
+msgstr "Субтитри розмір шрифту"
+
+#: ../components/configextmovieplayer.py:333
+#: ../components/configextmovieplayer.py:336
+msgid "Subtitle line height"
+msgstr "Субтитри висота рядка"
+
+#: ../components/configextmovieplayer.py:329
+msgid "Subtitle line wrapping"
+msgstr "Субтитри запакування рядка"
+
+#: ../components/configextmovieplayer.py:356
+msgid "Subtitle shadow X offset"
+msgstr "Тінь субтитрів Зміщення по X"
+
+#: ../components/configextmovieplayer.py:357
+msgid "Subtitle shadow Y offset"
+msgstr "Тінь субтитрів Y зміщення"
+
+#: ../components/configextmovieplayer.py:355
+msgid "Subtitle shadow color"
+msgstr "Колір тіні субтитрів"
+
+#: ../components/configextmovieplayer.py:353
+msgid "Subtitle shadow enabled"
+msgstr "Включити тіні субтитрів"
+
+#: ../components/configextmovieplayer.py:345
+msgid "Subtitle vertical alignment"
+msgstr "Вертикальне вирівнювання субтитрів"
+
+#: ../components/iptvextmovieplayer.py:514
+msgid "Subtitles"
+msgstr "Субтитри"
+
+#: ../components/iptvsubdownloader.py:519
+#, fuzzy, python-format
+msgid "Subtitles \"%s\" downloaded correctly."
+msgstr "Завантажити субтитри"
+
+#: ../components/iptvsubsimpledownloader.py:176
+#, fuzzy
+msgid "Subtitles conversion to UTF-8 failed."
+msgstr "Субтитри завантаженні успішно. [%s], перетворення в UTF-8."
+
+#: ../components/iptvsubsimpledownloader.py:144
+#, python-format
+msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
+msgstr "Субтитри завантаженні успішно. [%s], перетворення в UTF-8."
+
+#: ../components/iptvsubsimpledownloader.py:200
+#, python-format
+msgid "Subtitles for: %s"
+msgstr "Субтитри для: %s"
+
+#: ../iptvupdate/updatemainwindow.py:993
+msgid "Success."
+msgstr "Успішно."
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Sunday"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:95
+msgid "Surgical Approaches"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:96
+msgid "Surgical Cases"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:97
+msgid "Surgical Complications"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:98
+msgid "Surgical Techniques"
+msgstr ""
+
+#: ../components/iptvextmovieplayer.py:809
+msgid "Synchronize"
+msgstr "Синхронізувати"
+
+#: ../components/iptvconfigmenu.py:84
+msgid "System"
+msgstr ""
+
+#: ../hosts/hostmythewatchseries.py:65
+msgid "THIS WEEK'S SERIES POPULAR"
+msgstr ""
+
+#: ../hosts/hostnuteczki.py:92
+msgid "TOP 10"
+msgstr ""
+
+#: ../libs/skylinewebcamscom.py:71
+msgid "TOP live cams"
+msgstr ""
+
+#: ../hosts/hostforjatn.py:193 ../hosts/hostgamatotvme.py:200
+msgid "TRAILER"
+msgstr ""
+
+#: ../hosts/hostplayrtsiw.py:100 ../hosts/hostredbull.py:52
+#: ../libs/canlitvliveio.py:109
+msgid "TV"
+msgstr ""
+
+#: ../hosts/hosthdstreams.py:71
+msgid "TV SERIES"
+msgstr ""
+
+#: ../hosts/hostfilma24hdcom.py:32 ../hosts/hostlookmovieag.py:55
+#: ../hosts/hostlookmovieag.py:290 ../hosts/hostmovienightws.py:31
+#, fuzzy
+msgid "TV Series"
+msgstr "Телесеріал"
+
+#: ../hosts/hostmrpiracy.py:688
+#, fuzzy
+msgid "TV Show"
+msgstr "ТВ Шоу"
+
+#: ../hosts/hosticefilmsinfo.py:72 ../hosts/hosttreetv.py:69
+msgid "TV Shows"
+msgstr "ТВ Шоу"
+
+#: ../hosts/hostdrdk.py:38
+msgid "TV channels"
+msgstr "Телеканали"
+
+#: ../hosts/hostallboxtv.py:69 ../hosts/hostallboxtv.py:345
+#: ../hosts/hostegybest.py:65 ../hosts/hostfilmativa.py:32
+#: ../hosts/hostgreekdocumentaries3.py:36
+msgid "TV series"
+msgstr "Телесеріал"
+
+#: ../hosts/hostkinotan.py:40 ../hosts/hostmovie4kto.py:68
+msgid "TV shows"
+msgstr "ТВ шоу"
+
+#: ../hosts/hostvidcorncom.py:489
+#, fuzzy
+msgid "TV status"
+msgstr "статус текст"
+
+#: ../hosts/hostfilmeonlineto.py:111
+#, fuzzy
+msgid "TV-Series"
+msgstr "Серії"
+
+#: ../hosts/hostted.py:74 ../hosts/hostted.py:352 ../hosts/hostted.py:609
+msgid "Talks"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:99
+msgid "Techniques"
+msgstr ""
+
+#: ../hosts/hosturllist.py:31
+msgid "Text files ytlist and urllist are in:"
+msgstr "Текстові файли ytlist і urllist знаходяться:"
+
+#: ../setup/iptvsetuphelper.py:123
+#, python-format
+msgid "The \"%s\" utility is used by IPTVPlayer."
+msgstr "Утіліта \"%s\" використовується в IPTV Плеєрі."
+
+#: ../setup/iptvsetupimpl.py:1104
+#, fuzzy, python-format
+msgid "The \"%s\" utility is used by the %s as external movie player based on the ffmpeg and libeplayer."
+msgstr "Утіліта \"%s\" використовується IPTV Плеєром в якості зовнішнього відео плеєра.на основі FFmpeg і libeplayer."
+
+#: ../setup/iptvsetupimpl.py:1151
+#, fuzzy, python-format
+msgid "The \"%s\" utility is used by the %s as external movie player."
+msgstr "Утіліта \"%s\" використовується IPTV Плеєром в якості зовнішнього відео плеєра."
+
+#: ../setup/iptvsetupimpl.py:523 ../setup/iptvsetupimpl.py:585
+#: ../setup/iptvsetupimpl.py:1048
+#, fuzzy, python-format
+msgid "The \"%s\" utility is used by the %s to buffering and downloading [%s] links."
+msgstr "Утіліта \"%s\" використовується IPTV Плеєром для кешування і завантаження матеріала з посилань [%s]."
+
+#: ../setup/iptvsetupimpl.py:641
+#, fuzzy, python-format
+msgid "The \"%s\" utility is used by the %s to determine the encoding of the text."
+msgstr "В \"%s\" утіліта використовується IPTV Плеєром для визначення кодіровки текста."
+
+#: ../tools/e2ijs.py:33
+#, python-format
+msgid "The %s utility is necessary here but it was not detected."
+msgstr ""
+
+#: ../subproviders/subprov_youtubecom.py:53
+msgid "The YouTube video ID is invalid."
+msgstr ""
+
+#: ../hosts/hostlaola1tv.py:27
+#, fuzzy
+msgid "The best"
+msgstr "кращий"
+
+#: ../hosts/hostiptvplayerinfo.py:27
+#, fuzzy
+msgid "The color of the current version"
+msgstr "Виявлення версії OpenSSL."
+
+#: ../hosts/hostfavourites.py:33
+msgid "The color of the viewed item"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:311
+msgid "The default aspect ratio for the external player"
+msgstr ""
+
+#: ../hosts/hostallboxtv.py:471 ../hosts/hostdixmax.py:450
+#: ../hosts/hostkinomanco.py:660 ../hosts/hostmaxtvgo.py:120
+#: ../hosts/hostorthobulletscom.py:209 ../hosts/hostplusdede.py:518
+#: ../hosts/hostrtlmost.py:381 ../hosts/hostvumedicom.py:338
+#, fuzzy, python-format
+msgid ""
+"The host %s requires registration. \n"
+"Please fill your login and password in the host configuration. Available under blue button."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../hosts/hosteurosportplayer.py:578
+#, fuzzy, python-format
+msgid ""
+"The host %s requires subscription.\n"
+"Please fill your login and password in the host configuration - available under blue button."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../components/iptvconfigmenu.py:483
+msgid "The number of items in the search history"
+msgstr "Кількість елементів в історії пошуку"
+
+#: ../iptvdm/iptvbuffui.py:287
+#, python-format
+msgid ""
+"The playback buffer has been moved to the download manager.\n"
+"It will be saved in the file:\n"
+"\"%s\""
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:328
+#, fuzzy
+msgid "The preferred update server"
+msgstr "Виберіть сервер оновлень"
+
+#: ../iptvupdate/updatemainwindow.py:224
+#, python-format
+msgid "The problem with creating a directory [%s]."
+msgstr "Проблема зі створенням каталогу [%s]."
+
+#: ../tools/iptvfavourites.py:147
+msgid "The same item already exists in this group."
+msgstr "Те ж саме елемент вже існує в цій групі."
+
+#: ../hosts/hostlaola1tv.py:27
+#, fuzzy
+msgid "The worst"
+msgstr "гірший"
+
+#: ../components/iptvfavouriteswidgets.py:107
+#, fuzzy
+msgid "There are no other favourite groups"
+msgstr "Там немає групи вибране."
+
+#: ../hosts/hostfrancetv.py:499
+#, fuzzy
+msgid "There are some geoblocked links. If you want to use them, change option in the host configuration, available under blue button."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../components/iptvplayerwidget.py:1105
+#, fuzzy, python-format
+msgid ""
+"There is a new version available do you want to update? \n"
+"Your version [%s], latest version on server [%s]"
+msgstr ""
+"Існує нова версія плагіна. Ви бажаєте, оновити? \n"
+"Ваша версія [%s], остання версія на сервері [%s]."
+
+#: ../components/iptvplayerwidget.py:1683
+#, fuzzy, python-format
+msgid "There is no enough free space in the folder \"%s\"."
+msgstr "На диску немає вільного місця [%s]."
+
+#: ../components/iptvplayerwidget.py:1376
+#, python-format
+msgid "There is no free space on the drive [%s]."
+msgstr "На диску немає вільного місця [%s]."
+
+#: ../components/iptvplayerwidget.py:1229
+#, fuzzy
+msgid "There is no hosts in this group."
+msgstr "Там немає групи вибране."
+
+#: ../iptvupdate/updatemainwindow.py:237
+#, python-format
+msgid ""
+"There is no space in the directory [%s]\n"
+" Available[%s], required [%s]."
+msgstr ""
+"В каталозі не хватає місця [%s]\n"
+"Доступно [%s], необхідно [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:838
+msgid "There is no update for the current configuration."
+msgstr "Для поточної версії, оновлення відсутні."
+
+#: ../tools/iptvhostgroups.py:130
+#, fuzzy
+msgid "This host has been added already to this group."
+msgstr "Те ж саме елемент вже існує в цій групі."
+
+#: ../libs/edemtv.py:93
+msgid ""
+"This host requires registration. \n"
+"Please fill your login and password in the host configuration. Available under blue button."
+msgstr ""
+"Цей вузол вимагає реєстрації. \n"
+" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В наявності під синю кнопку . "
+
+#: ../hosts/hostseriesonline.py:87
+msgid "This site is protected with Google reCaptcha v2."
+msgstr ""
+
+#: ../setup/iptvsetupimpl.py:244
+msgid "This step is required to proper select binaries for installation."
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:83
+#, fuzzy
+msgid "Thriller Movies"
+msgstr "Нові фільми"
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Thursday"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1689
+msgid "Tip! You can connect USB flash drive to fix this problem."
+msgstr ""
+
+#: ../Web/webParts.py:434
+msgid "Title:"
+msgstr ""
+
+#: ../libs/urlparser.py:1948
+msgid ""
+"To watch videos from http://vk.com/ you need to login.\n"
+"Please fill your login and password in the IPTVPlayer configuration."
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:146
+msgid "Today"
+msgstr ""
+
+#: ../hosts/hostdarshowcom.py:34 ../hosts/hostefilmytv.py:111
+#: ../hosts/hostefilmytv.py:121 ../hosts/hostfilmpalast.py:51
+msgid "Top"
+msgstr "Верхній"
+
+#: ../hosts/hostyifytv.py:64
+#, fuzzy
+msgid "Top +250"
+msgstr "Топ 100"
+
+#: ../hosts/hostfilmovizijastudio.py:47
+msgid "Top Movies"
+msgstr "Кращі фільми"
+
+#: ../hosts/hostserijeonline.py:54
+#, fuzzy
+msgid "Top Videos"
+msgstr "Відео"
+
+#: ../hosts/hostfilmezz.py:68
+#, fuzzy
+msgid "Top movies"
+msgstr "Кращі фільми"
+
+#: ../hosts/hostcartoonhd.py:32 ../hosts/hostxrysoise.py:30
+msgid "Top rated"
+msgstr "Самі популярні"
+
+#: ../hosts/hostfilmezz.py:69
+#, fuzzy
+msgid "Top series"
+msgstr "Телесеріал"
+
+#: ../hosts/hostlocalmedia.py:412 ../hosts/hostlocalmedia.py:430
+msgid "Total size: "
+msgstr "Размір файлу: "
+
+#: ../hosts/hostdarshowcom.py:182 ../hosts/hostegybest.py:207
+#: ../hosts/hostfenixsite.py:265 ../hosts/hostgamatocom.py:248
+#: ../hosts/hosthdfilmetv.py:209 ../hosts/hostkinomanco.py:495
+#: ../hosts/hostmrpiracy.py:401 ../hosts/hostserienstreamto.py:236
+#: ../hosts/hostshahiidanimenet.py:193
+msgid "Trailer"
+msgstr ""
+
+#: ../hosts/hostdardarkomcom.py:196
+#, python-format
+msgid "Trailer - %s"
+msgstr ""
+
+#: ../hosts/hosthdfilmetv.py:38
+msgid "Trailers"
+msgstr ""
+
+#: ../hosts/hostkinotan.py:49
+#, fuzzy
+msgid "Translations"
+msgstr "Радіостанції"
+
+#: ../components/configextmovieplayer.py:62 ../components/iptvconfigmenu.py:88
+msgid "Transparent"
+msgstr "Прозорий"
+
+#: ../hosts/hostorthobulletscom.py:105
+msgid "Trauma"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:100
+msgid "Treatment Consult"
+msgstr ""
+
+#: ../hosts/hostdailymotion.py:54 ../hosts/hostegybest.py:61
+#: ../hosts/hostourmatchnet.py:35 ../hosts/hosttwitchtv.py:112
+#, fuzzy
+msgid "Trending"
+msgstr "До"
+
+#: ../hosts/hosttvplayercom.py:51
+msgid "Try to bypass DRM (it may be illegal)"
+msgstr ""
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Tuesday"
+msgstr ""
+
+#: ../hosts/hostmovie4kto.py:34
+msgid "Turkish"
+msgstr "Турція"
+
+#: ../hosts/hostwebstream.py:105
+msgid "Turn off buffering for http://prognoza.pogody.tv/"
+msgstr "Виключіть буферизацію для http://prognoza.pogody.tv/"
+
+#: ../hosts/hostiptvplayerinfo.py:47
+#, fuzzy
+msgid "Tutorials"
+msgstr "Редакційний"
+
+#: ../components/ihost.py:764 ../hosts/host123movieshd.py:381
+#: ../hosts/host3player.py:408 ../hosts/host3sktv.py:303
+#: ../hosts/host7tvde.py:449 ../hosts/host9anime.py:564
+#: ../hosts/hostakoam.py:439 ../hosts/hostallboxtv.py:569
+#: ../hosts/hostalltubetv.py:475 ../hosts/hostaltadefinizione.py:472
+#: ../hosts/hostaltadefinizione01.py:345 ../hosts/hostaltadefinizione1.py:305
+#: ../hosts/hostaltadefinizionecool.py:437 ../hosts/hostandrijaiandjelka.py:187
+#: ../hosts/hostanimeodcinki.py:388 ../hosts/hostappletrailers.py:202
+#: ../hosts/hostarconaitvme.py:213 ../hosts/hostardmediathek.py:443
+#: ../hosts/hostartetv.py:459 ../hosts/hostbbciplayer.py:614
+#: ../hosts/hostbsto.py:399 ../hosts/hostcartoonhd.py:615
+#: ../hosts/hostcdapl.py:543 ../hosts/hostchomikuj.py:394
+#: ../hosts/hostchristusvincit.py:506 ../hosts/hostcimaclubcom.py:475
+#: ../hosts/hostcineblog.py:274 ../hosts/hostcinemaxx.py:356
+#: ../hosts/hostcinemay.py:387 ../hosts/hostcineto.py:470
+#: ../hosts/hostclassiccinemaonline.py:289 ../hosts/hostcrtankocom.py:293
+#: ../hosts/hostdailymotion.py:329 ../hosts/hostdancetrippin.py:339
+#: ../hosts/hostdardarkomcom.py:412 ../hosts/hostdarshowcom.py:346
+#: ../hosts/hostdixmax.py:519 ../hosts/hostdokumentalnenet.py:195
+#: ../hosts/hostdpstreamingcx.py:290 ../hosts/hostdrdk.py:170
+#: ../hosts/hostefilmytv.py:754 ../hosts/hostegybest.py:463
+#: ../hosts/hostekinotv.py:538 ../hosts/hosteskago.py:411
+#: ../hosts/hosteurosportplayer.py:734 ../hosts/hostfaselhdcom.py:374
+#: ../hosts/hostfenixsite.py:365 ../hosts/hostfilma24hdcom.py:265
+#: ../hosts/hostfilma24io.py:271 ../hosts/hostfilmaoncom.py:415
+#: ../hosts/hostfilmativa.py:254 ../hosts/hostfilmehdnet.py:357
+#: ../hosts/hostfilmeonlineto.py:495 ../hosts/hostfilmezz.py:516
+#: ../hosts/hostfilmixco.py:517 ../hosts/hostfilmovizijastudio.py:516
+#: ../hosts/hostfilmpalast.py:412 ../hosts/hostfilmpertutti.py:294
+#: ../hosts/hostfilmstreamhdit.py:214 ../hosts/hostfilmstreamvkcom.py:314
+#: ../hosts/hostfilmydokumentalneeu.py:197 ../hosts/hostfokustv.py:342
+#: ../hosts/hostforjatn.py:375 ../hosts/hostbajeczkiorg.py:212
+#: ../hosts/hostddl.py:622 ../hosts/hostfilisertv.py:519
+#: ../hosts/hostfreediscpl.py:492 ../hosts/hostnaszekinotv.py:717
+#: ../hosts/hosttvplayercom.py:393 ../hosts/hostgamatocom.py:369
+#: ../hosts/hostgamatotvme.py:461 ../hosts/hostgledalica.py:464
+#: ../hosts/hostgreekdocumentaries3.py:244 ../hosts/hostguardaserie.py:286
+#: ../hosts/hosthd1080online.py:296 ../hosts/hosthdfilmetv.py:434
+#: ../hosts/hosthdfull.py:670 ../hosts/hosthdkinomir.py:295
+#: ../hosts/hosthdpopcornscom.py:371 ../hosts/hosthdsto.py:555
+#: ../hosts/hosthdstreams.py:537 ../hosts/hosthitboxtv.py:236
+#: ../hosts/hosthoofootcom.py:300 ../hosts/hosticefilmsinfo.py:444
+#: ../hosts/hostiitvpl.py:286 ../hosts/hostinteriatv.py:269
+#: ../hosts/hostkabarety.py:317 ../hosts/hostkijknl.py:347
+#: ../hosts/hostkinogo.py:293 ../hosts/hostkinomanco.py:835
+#: ../hosts/hostkinotan.py:427 ../hosts/hostkinox.py:620
+#: ../hosts/hostkissanimeto.py:535 ../hosts/hostkisscartoonme.py:447
+#: ../hosts/hostkkiste.py:433 ../hosts/hostkreskoweczki.py:273
+#: ../hosts/hostkreskowkazone.py:339 ../hosts/hostlaola1tv.py:429
+#: ../hosts/hostlibrestream.py:303 ../hosts/hostliveleak.py:191
+#: ../hosts/hostlookmovieag.py:276 ../hosts/hostlosmovies.py:473
+#: ../hosts/hostluxveritatis.py:367 ../hosts/hostmaxtvgo.py:315
+#: ../hosts/hostmooviecc.py:610 ../hosts/hostmovie4kto.py:542
+#: ../hosts/hostmovienightws.py:312 ../hosts/hostmovierulzsx.py:318
+#: ../hosts/hostmovizlandcom.py:285 ../hosts/hostmovs4ucom.py:494
+#: ../hosts/hostmozicsillag.py:480 ../hosts/hostmrpiracy.py:674
+#: ../hosts/hostmusicmp3ru.py:312 ../hosts/hostmyfreemp3.py:192
+#: ../hosts/hostmythewatchseries.py:421 ../hosts/hostngolos.py:382
+#: ../hosts/hostninateka.py:240 ../hosts/hostnuteczki.py:461
+#: ../hosts/hostofficialfilmillimite.py:295 ../hosts/hostoipeirates.py:416
+#: ../hosts/hostokgoals.py:237 ../hosts/hostororotv.py:220
+#: ../hosts/hostorthobulletscom.py:301 ../hosts/hostotakufr.py:299
+#: ../hosts/hostourmatchnet.py:374 ../hosts/hostpinkbike.py:188
+#: ../hosts/hostplanetstreamingcom.py:356 ../hosts/hostplaypuls.py:276
+#: ../hosts/hostplayrtsiw.py:624 ../hosts/hostplusdede.py:644
+#: ../hosts/hostputlockertvto.py:544 ../hosts/hostredbull.py:359
+#: ../hosts/hostrtbfbe.py:672 ../hosts/hostrteieplayer.py:348
+#: ../hosts/hostrtlmost.py:467 ../hosts/hostserialeco.py:320
+#: ../hosts/hostserialnet.py:354 ../hosts/hostserienstreamto.py:598
+#: ../hosts/hostseriesonline.py:484 ../hosts/hostserijeonline.py:350
+#: ../hosts/hostshahiidanimenet.py:354 ../hosts/hostshoutcast.py:191
+#: ../hosts/hostskstream.py:449 ../hosts/hostsolarmovie.py:536
+#: ../hosts/hostsovdub.py:225 ../hosts/hostspiegeltv.py:499
+#: ../hosts/hostsportdeutschland.py:233 ../hosts/hoststreamcomplet.py:259
+#: ../hosts/hoststreaminghdfun.py:428 ../hosts/hoststreamliveto.py:430
+#: ../hosts/hostsvtplayse.py:576 ../hosts/hostszenestreamz.py:333
+#: ../hosts/hosttainieskaiseirestv.py:385 ../hosts/hosttantifilmorg.py:470
+#: ../hosts/hostted.py:596 ../hosts/hosttfarjocom.py:401
+#: ../hosts/hostthewatchseriesto.py:357 ../hosts/hosttreetv.py:493
+#: ../hosts/hostturcjatv.py:226 ../hosts/hosttvgrypl.py:267
+#: ../hosts/hosttvnowde.py:516 ../hosts/hosttvnvod.py:470
+#: ../hosts/hosttvproart.py:157 ../hosts/hosttvpvod.py:995
+#: ../hosts/hosttwitchtv.py:616 ../hosts/hostuktvplay.py:275
+#: ../hosts/hostustreamtv.py:211 ../hosts/hostvevo.py:440
+#: ../hosts/hostvidcorncom.py:631 ../hosts/hostvideopenny.py:334
+#: ../hosts/hostvimeo.py:375 ../hosts/hostvodpl.py:428
+#: ../hosts/hostvumedicom.py:415 ../hosts/hostwatchcartoononline.py:335
+#: ../hosts/hostwatchwrestling.py:320 ../hosts/hostwatchwrestlinguno.py:279
+#: ../hosts/hostwgrane.py:221 ../hosts/hostwolnelekturypl.py:256
+#: ../hosts/hostworldfree4u.py:269 ../hosts/hostwpolscepl.py:291
+#: ../hosts/hostwptv.py:313 ../hosts/hostxrysoise.py:361
+#: ../hosts/hostyesmoviesto.py:499 ../hosts/hostyifytv.py:592
+#: ../hosts/hostyoutube.py:236 ../hosts/hostzalukajcom.py:488
+#: ../hosts/hostzdfmediathek.py:516
+msgid "Type: "
+msgstr "Тип: "
+
+#: ../hosts/hostshoutcast.py:129
+#, fuzzy, python-format
+msgid "Type: %s"
+msgstr "Тип: "
+
+#: ../components/iptvconfigmenu.py:380
+#, fuzzy
+msgid "Ukrainian proxy server url"
+msgstr "Німецький проксі-сервер гіперпосилання"
+
+#: ../hosts/hostlocalmedia.py:586
+msgid "Umount iso file"
+msgstr "Розмонтувати файл iso"
+
+#: ../hosts/hostkissanimeto.py:140
+msgid "Unknow data in the captcha item!"
+msgstr ""
+
+#: ../hosts/hostkinox.py:217 ../hosts/hostkinox.py:383
+#: ../hosts/hostserienstreamto.py:345
+msgid "Unknown"
+msgstr "Невідомий"
+
+#: ../hosts/hostkissanimeto.py:107
+#, python-format
+msgid "Unknown captcha form! Data: \"%s\""
+msgstr ""
+
+#: ../libs/videostar.py:134
+#, fuzzy
+msgid "Unknown error."
+msgstr "Невідомий"
+
+#: ../components/isubprovider.py:430
+#, python-format
+msgid "Unknown file extension \"%s\"."
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1596
+#, python-format
+msgid "Unknown protocol [%s]"
+msgstr "Невідомий протокол [%s]"
+
+#: ../hosts/hostkinomanco.py:668 ../hosts/hostkinomanco.py:790
+#: ../hosts/hostrtbfbe.py:547
+msgid "Unknown server response."
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:663
+#, python-format
+msgid "Unknown server response: \"%s\""
+msgstr ""
+
+#: ../subproviders/subprov_napiprojektpl.py:301
+#, python-format
+msgid "Unknown subtitle parser for format \"%s\"."
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:958
+msgid "Unpacking the archive completed successfully."
+msgstr "Розпаковка архіву успішно завершена."
+
+#: ../components/isubprovider.py:533
+#, python-format
+msgid "Unrar error code[%s]."
+msgstr ""
+
+#: ../hosts/hostfavourites.py:250
+#, fuzzy
+msgid "Unset watched"
+msgstr "послідні переглянуті"
+
+#: ../components/isubprovider.py:510 ../subproviders/subprov_napisy24pl.py:328
+#, python-format
+msgid "Unzip error code[%s]."
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:332 ../components/iptvconfigmenu.py:337
+#: ../components/iptvplayerwidget.py:1147
+#: ../components/iptvplayerwidget.py:1285
+msgid "Update"
+msgstr "Оновлення"
+
+#: ../iptvupdate/updatemainwindow.py:350
+msgid "Update completed successfully. For the moment, the system will reboot."
+msgstr "Оновлення успішно завершено. На даний момент, система перезагрузиться."
+
+#: ../iptvupdate/updatemainwindow.py:355
+msgid ""
+"Update failed.\n"
+"Check the status by selecting interesting and pressing OK."
+msgstr ""
+"Не вдалось виконати оновлення.\n"
+"Перевірте потрібне вам, і натисніть OK."
+
+#: ../iptvupdate/updatemainwindow.py:840
+msgid "Update not available."
+msgstr "Оновлення недоступно."
+
+#: ../components/iptvconfigmenu.py:340
+msgid "Update packet type"
+msgstr "Пакети, доступні для оновлення"
+
+#: ../iptvupdate/updatemainwindow.py:900
+msgid "Update packet was downloaded successfully."
+msgstr "Оновлений пакет успішно завантажений."
+
+#: ../iptvupdate/updatemainwindow.py:882
+msgid "Update server not selected."
+msgstr "Сервер оновлень не вибрано."
+
+#: ../libs/youtubeparser.py:31
+msgid "Upload date"
+msgstr "Дата публікації"
+
+#: ../hosts/hosttwitchtv.py:107
+#, fuzzy
+msgid "Uploads"
+msgstr "Дата публікації"
+
+#: ../hosts/hosturllist.py:38
+msgid "Urllists player"
+msgstr "Гіперлінки Плеєра"
+
+#: ../hosts/hostwebstream.py:106
+msgid "Use Polish proxy for http://prognoza.pogody.tv/"
+msgstr "Використовувати проксі-сервер для Польського http://prognoza.pogody.tv/"
+
+#: ../hosts/hostlaola1tv.py:37
+#, fuzzy
+msgid "Use default quality:"
+msgstr "Якість використання по замовчуванню:"
+
+#: ../hosts/hosttvjworg.py:42
+#, fuzzy
+msgid "Use default video quality"
+msgstr "Використовувати по замовчуванню якість відео:"
+
+#: ../hosts/hostbbciplayer.py:30 ../hosts/hostbbcsport.py:38
+#: ../hosts/hostsvtplayse.py:45 ../hosts/hostvevo.py:30
+#: ../hosts/hostyoutube.py:34
+msgid "Use default video quality:"
+msgstr "Використовувати по замовчуванню якість відео:"
+
+#: ../hosts/hostbsto.py:38 ../hosts/hostmrpiracy.py:51
+#, fuzzy
+msgid "Use links cache"
+msgstr "Лінки користувача"
+
+#: ../hosts/hosttvplayercom.py:48
+#, fuzzy
+msgid "Use preferred bitrate"
+msgstr "Переважаючий протокол:"
+
+#: ../libs/videostar.py:43
+#, fuzzy
+msgid "Use preferred quality"
+msgstr "Переважаюча якість"
+
+#: ../hosts/hostddl.py:36
+#, fuzzy
+msgid "Use proxy"
+msgstr "Використовуйте проксі"
+
+#: ../hosts/host123movieshd.py:31 ../hosts/hostakoam.py:30
+#: ../hosts/hostcimaclubcom.py:28 ../hosts/hostfilmeonlineto.py:33
+#: ../hosts/hostfilmstreamvkcom.py:32 ../hosts/hosthdsto.py:41
+#: ../hosts/hosticefilmsinfo.py:32 ../hosts/hostkinox.py:33
+#: ../hosts/hostkissanimeto.py:38 ../hosts/hostkkiste.py:32
+#: ../hosts/hostlosmovies.py:33 ../hosts/hostplanetstreamingcom.py:28
+#: ../hosts/hostputlockertvto.py:36 ../hosts/hostseriesonline.py:32
+#: ../hosts/hostskstream.py:32 ../hosts/hostsolarmovie.py:34
+#: ../hosts/hostyesmoviesto.py:34 ../hosts/hostyifytv.py:36
+#: ../hosts/hostzalukajcom.py:45
+#, fuzzy
+msgid "Use proxy server:"
+msgstr "Використовувати проксі-сервер ру:"
+
+#: ../components/configextmovieplayer.py:304
+#: ../components/configextmovieplayer.py:305
+#: ../components/configextmovieplayer.py:306
+#: ../components/configextmovieplayer.py:308
+#: ../components/configextmovieplayer.py:309
+#: ../components/configextmovieplayer.py:310
+#, fuzzy, python-format
+msgid "Use software decoder for the %s"
+msgstr "Застосовувати зовнішній декодер для AAC"
+
+#: ../components/iptvconfigmenu.py:407
+msgid "Use subtitles parser extension if available"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:373
+msgid "Use the PyCurl for HTTP(S) requests"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:44
+#, fuzzy
+msgid "Use web proxy gateway"
+msgstr "Використовувати проксі-шлюз"
+
+#: ../hosts/hostbbciplayer.py:32 ../hosts/hostbbcsport.py:31
+msgid "Use web-proxy (it may be illegal):"
+msgstr ""
+
+#: ../hosts/host3player.py:30 ../hosts/hostplayrtsiw.py:30
+msgid "Use web-proxy for VODs (it may be illegal):"
+msgstr ""
+
+#: ../hosts/hosturllist.py:52
+msgid "User files"
+msgstr "Файли користувача"
+
+#: ../hosts/hostyoutube.py:53
+msgid "User links"
+msgstr "Лінки користувача"
+
+#: ../hosts/hostyoutube.py:53
+msgid "User links stored in the ytlist.txt file."
+msgstr "Лінки користувача, збереженні в файлі ytlist.txt."
+
+#: ../hosts/hosttreetv.py:455
+#, fuzzy, python-format
+msgid "User login \"%s\" failed."
+msgstr "Користувач [%s] помилка входу в систему."
+
+#: ../libs/weebtv.py:37
+msgid "Username:"
+msgstr "Імя користувача:"
+
+#: ../components/confighost.py:214
+msgid ""
+"Using this host in your country can be illegal.\n"
+"Do you want to continue at your own risk?"
+msgstr ""
+
+#: ../iptvdm/ffmpegdownloader.py:70
+#, fuzzy, python-format
+msgid "Utility \"%s\" can not be found."
+msgstr "Фільм \"%s\" не знайдено."
+
+#: ../setup/iptvsetuphelper.py:127
+#, python-format
+msgid ""
+"Utility \"%s\" has not been detected. \n"
+"Do you want to install it?"
+msgstr ""
+"Утіліта \"%s\" застаріла. \n"
+"Ви бажаєте, встановити нову?"
+
+#: ../setup/iptvsetuphelper.py:126
+#, python-format
+msgid ""
+"Utility \"%s\" has not been detected. \n"
+"What do you want to do?"
+msgstr ""
+"Утіліта \"%s\" застаріла. \n"
+"Що ви бажаєте зробити?"
+
+#: ../setup/iptvsetuphelper.py:129
+#, python-format
+msgid ""
+"Utility \"%s\" is deprecated. \n"
+"Do you want to install new one?"
+msgstr ""
+"Утіліта \"%s\" застаріла. \n"
+"Ви бажаєте, встановити нову?"
+
+#: ../setup/iptvsetuphelper.py:128
+#, python-format
+msgid ""
+"Utility \"%s\" is deprecated. \n"
+"What do you want to do?"
+msgstr ""
+"Утіліта \"%s\" застаріла. \n"
+"Що ви бажаєте зробити?"
+
+#: ../hosts/hostdancetrippin.py:39
+msgid "VENUES"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:309
+msgid "VFD set current title:"
+msgstr ""
+
+#: ../hosts/hostwatchwrestling.py:333 ../hosts/hostwatchwrestlinguno.py:293
+msgid "VIEWS"
+msgstr "ПЕРЕГЛЯДИ"
+
+#: ../hosts/hosteurosportplayer.py:93
+msgid "VOD"
+msgstr ""
+
+#: ../components/iptvmultipleinputbox.py:106
+#: ../components/recaptcha_v2widget.py:91
+msgid "Verify"
+msgstr ""
+
+#: ../iptvupdate/updatemainwindow.py:642
+#, python-format
+msgid ""
+"Version [%s] is ready for installation. After installation, restart of the system will be done.\n"
+"Do you want to continue?"
+msgstr ""
+"Версія [%s] готова до встановлення. Після встановлення, cистема буде перезавантажена.\n"
+"Ви бажаєте продовжити?"
+
+#: ../hosts/hostdancetrippin.py:225 ../hosts/hostrtbfbe.py:685
+#: ../hosts/hostrtlmost.py:73 ../hosts/hostyoutube.py:56
+msgid "Video"
+msgstr "Відео"
+
+#: ../hosts/hostlaola1tv.py:36
+#, fuzzy
+msgid "Video default quality:"
+msgstr "Якість використання по замовчуванню:"
+
+#: ../hosts/hostyoutube.py:32
+msgid "Video format:"
+msgstr "Формат відео:"
+
+#: ../components/iptvextmovieplayer.py:655
+#, fuzzy
+msgid "Video mode"
+msgstr "Відео"
+
+#: ../components/iptvextmovieplayer.py:516
+msgid "Video options"
+msgstr "Параметри відео"
+
+#: ../components/iptvextmovieplayer.py:655
+#, fuzzy
+msgid "Video policy"
+msgstr "Відео співвідношення сторін по замовчуванню"
+
+#: ../components/iptvextmovieplayer.py:655
+#, fuzzy
+msgid "Video policy for 4:3"
+msgstr "Формат відео:"
+
+#: ../hosts/hosttvnowde.py:416
+msgid "Video with DRM protection."
+msgstr ""
+
+#: ../libs/urlparser.py:2497
+#, fuzzy
+msgid ""
+"Videomega has blocked your IP for some time.\n"
+"Please retry this link after some time."
+msgstr "Остання помилка: \"Videomega заблокував ваш IP - адресу протягом деякого часу . Будь ласка , повторіть цеПосилання через якийсь час . \""
+
+#: ../hosts/hostdailymotion.py:341 ../hosts/hosthitboxtv.py:43
+#: ../hosts/hosthitboxtv.py:48 ../hosts/hostlaola1tv.py:468
+#: ../hosts/hosttwitchtv.py:119 ../hosts/hosturllist.py:50
+#: ../hosts/hostvevo.py:380 ../hosts/hostvimeo.py:393
+#: ../hosts/hostwrealu24tv.py:45
+msgid "Videos"
+msgstr "Відео"
+
+#: ../hosts/hosttwitchtv.py:278
+#, fuzzy, python-format
+msgid "Videos %s"
+msgstr "Відео"
+
+#: ../hosts/hostuktvplay.py:137
+#, fuzzy, python-format
+msgid "Videos count: %s"
+msgstr "Кількість переглядів"
+
+#: ../libs/youtubeparser.py:31
+msgid "View count"
+msgstr "Кількість переглядів"
+
+#: ../hosts/hostaltadefinizione01.py:301 ../hosts/hostaltadefinizione1.py:139
+#: ../hosts/hostaltadefinizione1.py:265 ../hosts/hostcineblog.py:234
+#, fuzzy
+msgid "Views"
+msgstr "Перегляди"
+
+#: ../hosts/hostfaselhdcom.py:127 ../hosts/hosthdstreams.py:202
+#, fuzzy
+msgid "Views:"
+msgstr "Перегляди"
+
+#: ../libs/livetvhdnet.py:92
+#, fuzzy
+msgid "Views: "
+msgstr "Перегляди"
+
+#: ../hosts/hostplusdede.py:321
+#, python-format
+msgid "Views: %s"
+msgstr ""
+
+#: ../hosts/hostvimeo.py:30
+#, fuzzy
+msgid "Vimeo Suggestions"
+msgstr "Параметри відео"
+
+#: ../hosts/hostkinomanco.py:782
+msgid "Vip level"
+msgstr ""
+
+#: ../hosts/hostkinomanco.py:781
+msgid "Vip valid"
+msgstr ""
+
+#: ../components/e2ivk.py:352 ../components/VirtualKeyBoard.py:147
+msgid "Virtual Keyboard"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:343
+msgid "Virtual Keyboard type"
+msgstr ""
+
+#: ../Web/webSite.py:156
+#, python-format
+msgid "Waiting search thread to stop, please wait (%d)"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:84
+#, fuzzy
+msgid "War Movies"
+msgstr "Кіно"
+
+#: ../Web/webParts.py:298 ../Web/webParts.py:306 ../Web/webParts.py:314
+#: ../Web/webParts.py:322 ../Web/webParts.py:422
+msgid "Watch"
+msgstr ""
+
+#: ../hosts/hostgreekdocumentaries3.py:153
+msgid "Watch Trailer"
+msgstr ""
+
+#: ../plugin.py:32
+msgid "Watch Videos Online"
+msgstr ""
+
+#: ../libs/urlparser.py:8208
+msgid "We can't find the file you are looking for. It maybe got deleted by the owner or was removed due a copyright violation."
+msgstr ""
+
+#: ../Web/webSite.py:106
+msgid "Web component has been reset and all threads are stopped. :)"
+msgstr ""
+
+#: ../Web/webSite.py:108
+msgid "Web component has been reset, the following threads are still working:"
+msgstr ""
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+msgid "Web interface version"
+msgstr ""
+
+#: ../hosts/hostddl.py:26 ../hosts/hosthdsto.py:33
+#, fuzzy
+msgid "Web proxy"
+msgstr "Використовуйте проксі"
+
+#: ../hosts/hostthewatchseriesto.py:45
+#, fuzzy
+msgid "Web proxy provider"
+msgstr "Використовувати проксі-сервер ру:"
+
+#: ../hosts/hostsportitalia.py:78
+msgid "Wednesday"
+msgstr ""
+
+#: ../hosts/hostlookmovieag.py:85
+#, fuzzy
+msgid "Western Movies"
+msgstr "Нові фільми"
+
+#: ../iptvdm/iptvbuffui.py:530
+msgid "Whole file must be downloaded to start playback!"
+msgstr ""
+
+#: ../hosts/hostsvtplayse.py:153
+msgid "With closed captioned."
+msgstr ""
+
+#: ../hosts/hostegybest.py:64
+#, fuzzy
+msgid "With subtitles"
+msgstr "Субтитри"
+
+#: ../components/iptvconfigmenu.py:310
+msgid "Write current title to file:"
+msgstr ""
+
+#: ../hosts/hostorthobulletscom.py:101
+msgid "Written Boards Review"
+msgstr ""
+
+#: ../hosts/hoststreamliveto.py:334 ../libs/urlparser.py:3929
+#, fuzzy
+msgid "Wrong answer."
+msgstr "Неправильні індекси."
+
+#: ../libs/firstonetvnet.py:318
+msgid "Wrong captcha image data!"
+msgstr ""
+
+#: ../components/isubprovider.py:537
+msgid "Wrong format of rar archive."
+msgstr ""
+
+#: ../components/isubprovider.py:514 ../subproviders/subprov_napisy24pl.py:332
+msgid "Wrong format of zip archive."
+msgstr ""
+
+#: ../tools/iptvfavourites.py:112 ../tools/iptvfavourites.py:168
+msgid "Wrong indexes."
+msgstr "Неправильні індекси."
+
+#: ../iptvupdate/updatemainwindow.py:916
+#, python-format
+msgid "Wrong the encryption key size: %s\n"
+msgstr ""
+
+#: ../subproviders/subprov_popcornsubtitles.py:53
+#, fuzzy
+msgid "Wrong uri."
+msgstr "Неправильні індекси."
+
+#: ../iptvupdate/updatemainwindow.py:307
+#, python-format
+msgid ""
+"Wrong version. \n"
+" downloaded version [%s] is different from the requested [%s]."
+msgstr "Невірна версія. Завантажена версія [%s] відрізняється від потрібної [%s]."
+
+#: ../iptvupdate/updatemainwindow.py:725
+#, fuzzy, python-format
+msgid "Wrong version: [%s]."
+msgstr "Вибраний варіант [%s]."
+
+#: ../hosts/hosttwitchtv.py:51
+msgid "Xbox One"
+msgstr ""
+
+#: ../hosts/hostaltadefinizione.py:264 ../hosts/hostaltadefinizionecool.py:229
+#: ../hosts/hostcartoonhd.py:497 ../hosts/hostfilmovizijastudio.py:50
+#: ../hosts/hostlibrestream.py:30 ../hosts/hostvidcorncom.py:492
+msgid "Year"
+msgstr "Рік"
+
+#: ../hosts/hostcineto.py:121
+#, fuzzy, python-format
+msgid "Year %s"
+msgstr "Рік"
+
+#: ../hosts/hostddl.py:534
+#, fuzzy
+msgid "Year:"
+msgstr "Рік"
+
+#: ../hosts/hostfilisertv.py:109 ../hosts/hostfilisertv.py:112
+#: ../hosts/hostgamatocom.py:82 ../hosts/hostgamatocom.py:85
+#: ../hosts/hosttreetv.py:132 ../hosts/hosttreetv.py:135
+#, fuzzy
+msgid "Year: "
+msgstr "Рік"
+
+#: ../components/configextmovieplayer.py:26 ../hosts/hostkinomanco.py:157
+#: ../libs/youtubeparser.py:30 ../subproviders/subprov_subscenecom.py:255
+#: ../Web/webParts.py:171 ../Web/webParts.py:174 ../Web/webThreads.py:160
+#: ../Web/webThreads.py:163
+msgid "Yes"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:147
+msgid "Yesterday"
+msgstr ""
+
+#: ../Web/webSite.py:68
+msgid "You are using old version of OpenWebif.<br> To go to E2iPlayer web Select the following link<br>"
+msgstr ""
+
+#: ../libs/pCommon.py:344
+msgid "You can disable HTTPS certificates validation in the E2iPlayer configuration to suppress this problem."
+msgstr ""
+
+#: ../libs/pCommon.py:356
+msgid "You can enable PyCurl in the E2iPlayer configuration to fix this problem."
+msgstr ""
+
+#: ../libs/pCommon.py:360
+#, python-format
+msgid "You can install PyCurl package from %s to fix this problem."
+msgstr ""
+
+#: ../hosts/hosthdsto.py:65
+msgid "You can try to use proxy as workaround, check options under blue button."
+msgstr ""
+
+#: ../components/recaptcha_v2helper.py:56
+#, python-format
+msgid "You can use \"%s\" or \"%s\" services for automatic solution."
+msgstr ""
+
+#: ../iptvdm/iptvbuffui.py:532
+msgid "You can use external eplayer to start playback faster."
+msgstr ""
+
+#: ../libs/weebtv.py:181
+msgid "You do not have a premium account. Starting a sponsored broadcast."
+msgstr "Ви не маєте преміум акаунту. Оплатіть одну трансляцію."
+
+#: ../libs/ustvnow.py:121
+msgid "You need to enter email and password in configuration."
+msgstr "Ви повинні ввести адрес електронної пошти і пароль в конфігурації."
+
+#: ../libs/pCommon.py:476 ../libs/pCommon.py:1205
+msgid "You should never perform block I/O operations in the __init__."
+msgstr ""
+
+#: ../hosts/hostserienstreamto.py:46
+msgid "Your language preference:"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:1933
+#: ../components/iptvplayerwidget.py:1937
+msgid "Your search entry"
+msgstr "Введіть тип пошуку"
+
+#: ../suggestions/google.py:18
+msgid "Youtube Suggestions"
+msgstr ""
+
+#: ../components/confighost.py:44
+#, python-format
+msgid "[%s] - configuration"
+msgstr "[%s] - Конфігурація"
+
+#: ../setup/iptvsetupimpl.py:1279
+#, fuzzy, python-format
+msgid "[%s] will be used by %s."
+msgstr "[%s] буде використовуватися IPTV плеєром."
+
+#: ../components/iptvplayerwidget.py:719 ../components/iptvplayerwidget.py:721
+#, python-format
+msgid "[%s] with buffering"
+msgstr "%s з буферизацією"
+
+#: ../components/iptvplayerwidget.py:723 ../components/iptvplayerwidget.py:725
+#, python-format
+msgid "[%s] without buffering"
+msgstr "%s без буферизації"
+
+#: ../components/iptvconfigmenu.py:387
+msgid "[HLS/M3U8] buffering"
+msgstr "[HLS / M3U8] Буферизація"
+
+#: ../components/iptvconfigmenu.py:386
+msgid "[HTTP] buffering"
+msgstr "[HTTP] Буферизація"
+
+#: ../hosts/hostnuteczki.py:175 ../hosts/hostnuteczki.py:292
+msgid "[Logged-in-only] "
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:388
+msgid "[RTMP] buffering (rtmpdump required)"
+msgstr "[RTMP] Буферизація (rtmpdump обовязково)"
+
+#: ../hosts/hostdarshowcom.py:247
+msgid "[Trailer]"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:52
+msgid "[en]"
+msgstr ""
+
+#: ../hosts/hostiptvplayerinfo.py:53
+msgid "[pl]"
+msgstr ""
+
+#: ../hosts/hostfilmeonlineto.py:260 ../hosts/hosttainieskaiseirestv.py:183
+msgid "[trailer]"
+msgstr ""
+
+#: ../subproviders/subprov_opensubtitlesorg.py:169
+msgid "_checkStatus except error"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after a week"
+msgstr "через тиждень"
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after closing"
+msgstr "після закриття"
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after day"
+msgstr "після одного дня"
+
+#: ../components/iptvconfigmenu.py:58
+msgid "after three days"
+msgstr "після трьох днів"
+
+#: ../components/iptvconfigmenu.py:59 ../hosts/hostvevo.py:107
+#, fuzzy
+msgid "all"
+msgstr "малий"
+
+#: ../components/iptvconfigmenu.py:204
+msgid "all types"
+msgstr "всі типи"
+
+#: ../hosts/hostgamatocom.py:65 ../hosts/hostgamatocom.py:85
+#, fuzzy
+msgid "any"
+msgstr "Німеччина"
+
+#: ../components/configbase.py:33
+msgid "aqua"
+msgstr "вода"
+
+#: ../components/iptvconfigmenu.py:54
+msgid "armv5t"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "armv7"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:91 ../hosts/hostdailymotion.py:24
+msgid "auto"
+msgstr ""
+
+#: ../libs/videostar.py:32
+msgid "average"
+msgstr "середній"
+
+#: ../components/configbase.py:32
+#, fuzzy
+msgid "black"
+msgstr "Чорний"
+
+#: ../components/configbase.py:33
+msgid "blue"
+msgstr "синій"
+
+#: ../components/configextmovieplayer.py:74
+msgid "bottom"
+msgstr "низ"
+
+#: ../components/iptvplayerwidget.py:1678
+#, fuzzy
+msgid "buffering location"
+msgstr "тривалість буферизації"
+
+#: ../components/configextmovieplayer.py:74
+msgid "center"
+msgstr "центр"
+
+#: ../setup/iptvsetupimpl.py:926
+msgid "cmdwrap tool"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:88
+#, fuzzy
+msgid "countries: "
+msgstr "Країни"
+
+#: ../hosts/hostardmediathek.py:402
+msgid "de"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:215
+#: ../components/iptvsubsimpledownloader.py:272 ../hosts/hostddl.py:29
+#: ../libs/urlparser.py:7424
+msgid "default"
+msgstr "по замовчуванню"
+
+#: ../hosts/hosturllist.py:60
+msgid "direct link"
+msgstr "пряме писилання"
+
+#: ../components/iptvplayerwidget.py:1678
+#, fuzzy
+msgid "downloads location"
+msgstr "Завантажити ще раз"
+
+#: ../setup/iptvsetupimpl.py:990
+msgid "duktape"
+msgstr ""
+
+#: ../hosts/hosttvnowde.py:371
+#, fuzzy, python-format
+msgid "duration: %s"
+msgstr "Станції"
+
+#: ../components/iptvconfigmenu.py:416 ../hosts/hostallboxtv.py:38
+#: ../hosts/hostbbcsport.py:34 ../hosts/hosteurosportplayer.py:31
+#: ../hosts/hostfreediscpl.py:37 ../hosts/hostkinomanco.py:41
+#: ../hosts/hostmrpiracy.py:48 ../hosts/hostrtbfbe.py:39
+#: ../hosts/hostserienstreamto.py:48 ../hosts/hosttreetv.py:43
+#: ../hosts/hostvidcorncom.py:36
+#, fuzzy
+msgid "e-mail"
+msgstr "Ел. адрес"
+
+#: ../hosts/hosttvplayercom.py:49 ../hosts/hosthdsto.py:42
+#: ../libs/firstonetvnet.py:42 ../libs/goldvodtv.py:39
+#: ../libs/internetowa.py:33
+#, fuzzy
+msgid "email"
+msgstr "Ел. адрес"
+
+#: ../hosts/hosttvnowde.py:371
+#, fuzzy, python-format
+msgid "episode: %s"
+msgstr "Епізоди"
+
+#: ../components/iptvconfigmenu.py:91 ../components/iptvextmovieplayer.py:282
+msgid "external eplayer3"
+msgstr "Зовнішній eplayer3"
+
+#: ../components/iptvconfigmenu.py:91 ../components/iptvextmovieplayer.py:273
+msgid "external gstplayer"
+msgstr "Зовнішній gstplayer"
+
+#: ../Web/webParts.py:355
+msgid "first check if host works properly in GUI and web <b>BEFORE</b> reporting error in it !!!"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:29 ../hosts/hostzdfmediathek.py:31
+msgid "format"
+msgstr "Формат"
+
+#: ../components/configextmovieplayer.py:44
+#: ../components/configextmovieplayer.py:45
+#: ../components/configextmovieplayer.py:51
+#: ../components/configextmovieplayer.py:52
+#: ../components/configextmovieplayer.py:53
+#, fuzzy
+msgid "from E2 settings"
+msgstr "Налаштування E2"
+
+#: ../components/configbase.py:32
+msgid "fuchsia"
+msgstr "фуксія"
+
+#: ../hosts/hostplayrtsiw.py:291
+msgid "geoblocked"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "gray"
+msgstr "сірий"
+
+#: ../components/configbase.py:33
+msgid "green"
+msgstr ""
+
+#: ../hosts/hostzalukajcom.py:44
+msgid "hasło"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:28 ../hosts/hostzdfmediathek.py:30
+msgid "hd"
+msgstr "hd"
+
+#: ../hosts/hostthewatchseriesto.py:40
+msgid "hideproxy.me (DE)"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:40
+msgid "hideproxy.me (NL)"
+msgstr ""
+
+#: ../hosts/hostthewatchseriesto.py:40
+msgid "hideproxy.me (US)"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
+#: ../hosts/hostzdfmediathek.py:30 ../libs/videostar.py:32
+msgid "high"
+msgstr "Високий"
+
+#: ../hosts/hosttvplayercom.py:36
+#, fuzzy
+msgid "highest"
+msgstr "Високий"
+
+#: ../setup/iptvsetupimpl.py:866
+#, fuzzy
+msgid "hlsdl downloader"
+msgstr "Завантажити субтитри"
+
+#: ../hosts/hosttvjworg.py:29
+msgid "horizontal"
+msgstr ""
+
+#: ../Web/webParts.py:433
+msgid "host:"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:374
+msgid "https - validate SSL certificates"
+msgstr "https - перевірка сертифікатів SSL"
+
+#: ../components/iptvconfigmenu.py:54
+msgid "i686"
+msgstr "i686"
+
+#: ../components/iptvconfigmenu.py:91
+msgid "internal"
+msgstr "Внутрішній"
+
+#: ../components/iptvconfigmenu.py:59
+msgid "jpeg"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:59
+msgid "jpeg,png"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:59
+msgid "jpeg,png,gif"
+msgstr ""
+
+#: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
+#: ../hosts/hostzdfmediathek.py:27
+msgid "large"
+msgstr "Великий"
+
+#: ../components/iptvplayer.py:34 ../components/iptvplayer.py:35
+msgid "leave movie player..."
+msgstr "Залишити програвач фільмів..."
+
+#: ../components/configbase.py:33
+msgid "lime"
+msgstr "Лайм"
+
+#: ../hosts/hosthitboxtv.py:88
+msgid "live since: "
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:408 ../components/iptvconfigmenu.py:410
+#: ../components/iptvconfigmenu.py:413 ../hosts/hostcartoonhd.py:38
+#: ../hosts/hostdixmax.py:38 ../hosts/hostdokumentalnenet.py:29
+#: ../hosts/hostefilmytv.py:40 ../hosts/hostegybest.py:38
+#: ../hosts/hostfilmezz.py:39 ../hosts/hostfilmixco.py:37
+#: ../hosts/hostnaszekinotv.py:40 ../hosts/hosthdfull.py:41
+#: ../hosts/hostmaxtvgo.py:37 ../hosts/hostnuteczki.py:32
+#: ../hosts/hostorthobulletscom.py:39 ../hosts/hostplusdede.py:40
+#: ../hosts/hostserijeonline.py:36 ../hosts/hostturcjatv.py:38
+#: ../hosts/hostvumedicom.py:36 ../hosts/hostzalukajcom.py:43
+#: ../libs/filmonapi.py:32 ../libs/wagasworld.py:35 ../libs/wizjatv.py:37
+msgid "login"
+msgstr "Зайти"
+
+#: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
+#: ../hosts/hostzdfmediathek.py:30 ../libs/videostar.py:32
+msgid "low"
+msgstr "Низький"
+
+#: ../hosts/hosttvplayercom.py:42
+msgid "lowest"
+msgstr ""
+
+#: ../libs/webcamera.py:66
+msgid "main"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "maroon"
+msgstr "темно-бордовий"
+
+#: ../hosts/hosthitboxtv.py:72
+#, fuzzy
+msgid "media count: "
+msgstr "Кількість коментарів"
+
+#: ../hosts/hostardmediathek.py:25 ../hosts/hostardmediathek.py:28
+#: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
+#: ../hosts/hostzdfmediathek.py:27 ../hosts/hostzdfmediathek.py:30
+msgid "medium"
+msgstr "середній"
+
+#: ../hosts/hostkinomanco.py:467
+msgid "min"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54
+msgid "mipsel"
+msgstr "mipsel"
+
+#: ../components/configbase.py:33
+msgid "navy"
+msgstr "морські хвилі"
+
+#: ../components/iptvconfigmenu.py:165
+msgid "no"
+msgstr "ні"
+
+#: ../hosts/hostraiplay.py:277
+#, fuzzy
+msgid "not available"
+msgstr "Оновлення недоступно."
+
+#: ../components/configbase.py:33
+msgid "olive"
+msgstr "оливковий"
+
+#: ../components/iptvconfigmenu.py:409 ../components/iptvconfigmenu.py:411
+#: ../components/iptvconfigmenu.py:414 ../components/iptvconfigmenu.py:417
+#: ../hosts/hostallboxtv.py:39 ../hosts/hostbbcsport.py:35
+#: ../hosts/hostcartoonhd.py:39 ../hosts/hostdixmax.py:39
+#: ../hosts/hostdokumentalnenet.py:30 ../hosts/hostefilmytv.py:41
+#: ../hosts/hostegybest.py:39 ../hosts/hosteurosportplayer.py:32
+#: ../hosts/hostfilmezz.py:40 ../hosts/hostfilmixco.py:38
+#: ../hosts/hostfreediscpl.py:38 ../hosts/hostnaszekinotv.py:41
+#: ../hosts/hosttvplayercom.py:50 ../hosts/hosthdfull.py:42
+#: ../hosts/hosthdsto.py:43 ../hosts/hostkinomanco.py:42
+#: ../hosts/hostmaxtvgo.py:38 ../hosts/hostnuteczki.py:33
+#: ../hosts/hostorthobulletscom.py:40 ../hosts/hostplusdede.py:41
+#: ../hosts/hostrtbfbe.py:40 ../hosts/hostrtlmost.py:46
+#: ../hosts/hostserienstreamto.py:49 ../hosts/hostserijeonline.py:37
+#: ../hosts/hosttreetv.py:44 ../hosts/hostturcjatv.py:39
+#: ../hosts/hostvidcorncom.py:37 ../hosts/hostvumedicom.py:37
+#: ../libs/filmonapi.py:33 ../libs/firstonetvnet.py:43 ../libs/goldvodtv.py:40
+#: ../libs/internetowa.py:34 ../libs/wagasworld.py:36 ../libs/wizjatv.py:38
+msgid "password"
+msgstr "пароль"
+
+#: ../components/iptvconfigmenu.py:204
+msgid "precompiled"
+msgstr "перекомпільовані"
+
+#: ../components/iptvconfigmenu.py:83
+msgid "private"
+msgstr ""
+
+#: ../components/configbase.py:32
+msgid "purple"
+msgstr "пурпурний"
+
+#: ../setup/iptvsetupimpl.py:801
+msgid "python-cjson"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:29 ../hosts/hostzdfmediathek.py:31
+msgid "quality"
+msgstr "якість"
+
+#: ../setup/iptvsetupimpl.py:50 ../setup/iptvsetupimpl.py:61
+#: ../setup/iptvsetupimpl.py:64 ../setup/iptvsetupimpl.py:71
+#: ../setup/iptvsetupimpl.py:74 ../setup/iptvsetupimpl.py:80
+#: ../setup/iptvsetupimpl.py:86
+msgid "recommended"
+msgstr "рекомендований"
+
+#: ../components/configbase.py:32
+msgid "red"
+msgstr "червоний"
+
+#: ../hosts/hostlocalmedia.py:120
+msgid "rootfs"
+msgstr "Кореневі файли"
+
+#: ../components/configextmovieplayer.py:48
+msgid "second"
+msgstr "секунда"
+
+#: ../components/configextmovieplayer.py:48
+#: ../components/configextmovieplayer.py:49
+#: ../components/configextmovieplayer.py:50
+msgid "seconds"
+msgstr "секунд"
+
+#: ../components/iptvconfigmenu.py:54
+msgid "sh4"
+msgstr "sh4"
+
+#: ../hosts/hostplayrtsiw.py:438
+#, fuzzy
+msgid "shows"
+msgstr "Шоу"
+
+#: ../components/configbase.py:32
+msgid "silver"
+msgstr "срібло"
+
+#: ../hosts/hosthitboxtv.py:25 ../hosts/hostpinkbike.py:24
+#: ../hosts/hostzdfmediathek.py:27
+msgid "small"
+msgstr "малий"
+
+#: ../components/iptvconfigmenu.py:91
+msgid "standard"
+msgstr "Стандарт"
+
+#: ../components/configbase.py:33
+msgid "teal"
+msgstr "чирок"
+
+#: ../hosts/hostsvtplayse.py:34 ../libs/moonwalkcc.py:31
+#: ../libs/videostar.py:32 ../libs/youtubeparser.py:28
+#: ../libs/youtube_dl/extractor/bbc.py:20
+#: ../libs/youtube_dl/extractor/vevo.py:29
+msgid "the best"
+msgstr "кращий"
+
+#: ../hosts/hostchristusvincit.py:34
+#, fuzzy
+msgid "the highest"
+msgstr "кращий"
+
+#: ../hosts/hostchristusvincit.py:24
+#, fuzzy
+msgid "the lowest"
+msgstr "кращий"
+
+#: ../hosts/hostkissanimeto.py:30 ../hosts/hostkisscartoonme.py:24
+#: ../hosts/hostsvtplayse.py:30 ../hosts/hosttvjworg.py:30
+#: ../libs/moonwalkcc.py:31 ../libs/videostar.py:32 ../libs/youtubeparser.py:28
+#: ../libs/youtube_dl/extractor/bbc.py:16
+#: ../libs/youtube_dl/extractor/vevo.py:17
+msgid "the worst"
+msgstr "гірший"
+
+#: ../components/configextmovieplayer.py:74
+msgid "top"
+msgstr "вверх"
+
+#: ../hosts/host123movieshd.py:222 ../hosts/hostakoam.py:228
+#: ../hosts/hostallboxtv.py:278 ../hosts/hostaltadefinizione.py:193
+#: ../hosts/hostaltadefinizionecool.py:177 ../hosts/hostcartoonhd.py:206
+#: ../hosts/hostcartoonhd.py:234 ../hosts/hostfilma24io.py:155
+#: ../hosts/hostfilmaoncom.py:220 ../hosts/hostddl.py:364
+#: ../hosts/hostnaszekinotv.py:321 ../hosts/hostgamatocom.py:178
+#: ../hosts/hosthdfull.py:353 ../hosts/hostkinogo.py:181
+#: ../hosts/hostmozicsillag.py:270 ../hosts/hoststreaminghdfun.py:230
+#: ../hosts/hosttfarjocom.py:249
+msgid "trailer"
+msgstr ""
+
+#: ../components/iptvconfigmenu.py:54 ../components/iptvconfigmenu.py:92
+#: ../hosts/hosturllist.py:62
+msgid "unknown"
+msgstr "невідомий"
+
+#: ../hosts/hosthitboxtv.py:72
+#, fuzzy
+msgid "updated: "
+msgstr "оновленний"
+
+#: ../Web/webParts.py:63 ../Web/webParts.py:80
+#, fuzzy
+msgid "version"
+msgstr "Версія"
+
+#: ../hosts/hosttvjworg.py:29
+msgid "vertical"
+msgstr ""
+
+#: ../hosts/hostardmediathek.py:28 ../hosts/hostzdfmediathek.py:30
+msgid "very high"
+msgstr "дуже високий"
+
+#: ../hosts/hosthitboxtv.py:72
+#, fuzzy
+msgid "viewers: "
+msgstr "Перегляди"
+
+#: ../hosts/hostdailymotion.py:165
+msgid "views"
+msgstr "Перегляди"
+
+#: ../hosts/hosthitboxtv.py:88
+#, fuzzy
+msgid "views: "
+msgstr "Перегляди"
+
+#: ../Web/webThreads.py:78
+msgid "visit site"
+msgstr ""
+
+#: ../components/iptvplayerwidget.py:459
+#, fuzzy, python-format
+msgid "wait %s second"
+msgstr "секунда"
+
+#: ../components/iptvplayerwidget.py:458
+#, fuzzy, python-format
+msgid "wait %s seconds"
+msgstr "секунд"
+
+#: ../hosts/hostkinogo.py:180
+#, fuzzy
+msgid "watch"
+msgstr "%s Дивитись"
+
+#: ../components/configbase.py:32
+msgid "white"
+msgstr "білий"
+
+#: ../components/iptvconfigmenu.py:204
+msgid "with source code"
+msgstr "з початковим кодом"
+
+#: ../components/iptvplayerwidget.py:691
+msgid "www: "
+msgstr ""
+
+#: ../components/configbase.py:33
+msgid "yellow"
+msgstr "жовтий"
+
+#: ../components/iptvconfigmenu.py:165
+msgid "yes, to console"
+msgstr "так, на консолі"
+
+#: ../components/iptvconfigmenu.py:165
+msgid "yes, to file /media/hdd/iptv.dbg"
+msgstr "файл, на /media/hdd/iptv.dbg"
+
+#~ msgid ""
+#~ "\n"
+#~ "Please use \"Web\" streams player -> WeebTV instead."
+#~ msgstr ""
+#~ "\n"
+#~ "Будь-ласка, використовуйте \"Web\" потоки плеєра -> замість WeebTV."
+
+#~ msgid "    Buffer size [MB]"
+#~ msgstr "    Розмір буфера [MB]"
+
+#~ msgid "  Filmy3dEU login:"
+#~ msgstr "  Filmy3dEU логін:"
+
+#~ msgid "  Filmy3dEU password:"
+#~ msgstr "  Filmy3dEU пароль:"
+
+#~ msgid "  KinomanTV login:"
+#~ msgstr "  KinomanTV Логін:"
+
+#~ msgid "  KinomanTV password:"
+#~ msgstr "  KinomanTV Пароль:"
+
+#~ msgid "  password:"
+#~ msgstr "  Пароль:"
+
+#~ msgid " - Local version"
+#~ msgstr " - Локальна версія"
+
+#~ msgid " - Remote version"
+#~ msgstr " - Дистанційна версія"
+
+#~ msgid " Last.fm login:"
+#~ msgstr " Last.fm Вхід:"
+
+#~ msgid " Username or Email"
+#~ msgstr " Імя користувача або адрес електронної пошти"
+
+#~ msgid "%s - configuration"
+#~ msgstr "%s - Конфігурація"
+
+#~ msgid "%s [download]"
+#~ msgstr "%s Завантажити"
+
+#~ msgid "%s items in category"
+#~ msgstr "Пункти по категоріям %s сек"
+
+#~ msgid "%s viewers, %s channels"
+#~ msgstr "%s глядачів, %s канали"
+
+#~ msgid "%s will be used by IPTVPlayer."
+#~ msgstr "%s буде використовуватися в IPTVПлеєрі."
+
+#~ msgid "***Any***"
+#~ msgstr "***Будь-які***"
+
+#~ msgid "+++ XXXLIST +++"
+#~ msgstr "+++ ФАЙЛ-XXX +++"
+
+#~ msgid "--- Cams ---"
+#~ msgstr "--- Веб-кам ---"
+
+#~ msgid "--- Channels ---"
+#~ msgstr "--- Канали ---"
+
+#~ msgid "--- Couple ---"
+#~ msgstr "--- Пара ---"
+
+#~ msgid "--- Couples ---"
+#~ msgstr "--- Пари ---"
+
+#~ msgid "--- Featured videos ---"
+#~ msgstr "--- Вибране відео ---"
+
+#~ msgid "--- Female ---"
+#~ msgstr "--- Жіночий ---"
+
+#~ msgid "--- Fetish ---"
+#~ msgstr "--- Фетіш ---"
+
+#~ msgid "--- Girl ---"
+#~ msgstr "--- Дівчина ---"
+
+#~ msgid "--- Highest Rated ---"
+#~ msgstr "--- Найбільший рейтинг ---"
+
+#~ msgid "--- Hits ---"
+#~ msgstr "--- Хіти ---"
+
+#~ msgid "--- Hits ---."
+#~ msgstr "--- Шлягери ---"
+
+#~ msgid "--- Hot_flirt ---"
+#~ msgstr "--- Горячий Флірт ---"
+
+#~ msgid "--- Lastest ---"
+#~ msgstr "--- Останній ---"
+
+#~ msgid "--- Lesbian ---"
+#~ msgstr "--- Лесбіянка ---"
+
+#~ msgid "--- Male ---"
+#~ msgstr "--- Чоловік ---"
+
+#~ msgid "--- Mature ---"
+#~ msgstr "--- Літній ---"
+
+#~ msgid "--- Most Favored ---"
+#~ msgstr "--- Найбільшого сприяння ---"
+
+#~ msgid "--- Most Popular ---"
+#~ msgstr "--- Самий популярний ---"
+
+#~ msgid "--- Most Viewed ---"
+#~ msgstr "--- Найбільше переглянуті ---"
+
+#~ msgid "--- Most Viewedo ---"
+#~ msgstr "--- Найбільше переглядають ---"
+
+#~ msgid "--- New ---"
+#~ msgstr "--- Новий ---"
+
+#~ msgid "--- New Videos ---"
+#~ msgstr "--- Нові Відео ---"
+
+#~ msgid "--- Newest ---"
+#~ msgstr "--- Новітній ---"
+
+#~ msgid "--- Popular ---"
+#~ msgstr "--- Популярний ---"
+
+#~ msgid "--- Soul_mate ---"
+#~ msgstr "--- Рідна душа ---"
+
+#~ msgid "--- Transgender ---"
+#~ msgstr "--- Трансгендер ---"
+
+#~ msgid "--- Transsexual ---"
+#~ msgstr "--- Транссексуал ---"
+
+#~ msgid "--- boy ---"
+#~ msgstr "--- Хлопчик ---"
+
+#~ msgid "--- gay ---"
+#~ msgstr "--- Гей ---"
+
+#~ msgid "---Search"
+#~ msgstr "---Пошук"
+
+#~ msgid "---Search History"
+#~ msgstr "---Історія пошуку"
+
+#~ msgid "---UPDATE---"
+#~ msgstr "---ОНОВИТИ---"
+
+#~ msgid "..............."
+#~ msgstr "..............."
+
+#~ msgid "24 h"
+#~ msgstr "24 г"
+
+#~ msgid ":for"
+#~ msgstr "Для"
+
+#~ msgid "AUDIO"
+#~ msgstr "АУДІО"
+
+#~ msgid "Access status: "
+#~ msgstr "Статус доступу: "
+
+#~ msgid "Access status: [%r]"
+#~ msgstr "Статус доступу: [%r]"
+
+#~ msgid "Action RPG"
+#~ msgstr "Дія RPG"
+
+#~ msgid "Albums"
+#~ msgstr "Альбоми"
+
+#~ msgid "All programs in the Live Stream"
+#~ msgstr "Всі програми в Live Stream"
+
+#~ msgid "An unknown error has occurred."
+#~ msgstr "Виникла невідома помилка."
+
+#~ msgid "Animation [dubbing]"
+#~ msgstr "Анімація [перезапис]"
+
+#~ msgid "Anime Issued"
+#~ msgstr "Аніме Виданий"
+
+#~ msgid "Anuluj"
+#~ msgstr "Відмінити"
+
+#~ msgid "Arab"
+#~ msgstr "Арабський"
+
+#~ msgid "Argentina"
+#~ msgstr "Аргентина"
+
+#~ msgid "Audience zone"
+#~ msgstr "Приймальня"
+
+#~ msgid "Australia"
+#~ msgstr "Австралія"
+
+#~ msgid "Austria"
+#~ msgstr "Австрія"
+
+#~ msgid "Automotive , accidents"
+#~ msgstr "Автомобільні аварії"
+
+#~ msgid "Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg"
+#~ msgstr "Автори: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg "
+
+#~ msgid "Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, tomashj291"
+#~ msgstr "Автори: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, tomashj291"
+
+#~ msgid "Average"
+#~ msgstr "В середньому"
+
+#~ msgid "Belgian"
+#~ msgstr "Бельгійський"
+
+#~ msgid "Belgium"
+#~ msgstr "Бельгія"
+
+#~ msgid "Best"
+#~ msgstr "Найкраща"
+
+#~ msgid "Brazil"
+#~ msgstr "Бразилія"
+
+#~ msgid "By default, sort by:"
+#~ msgstr "По замовчуванню, сортувати за:"
+
+#~ msgid "CATEGORY"
+#~ msgstr "КАТЕГОРІЇ"
+
+#~ msgid "CHANGES IN VERSION"
+#~ msgstr "Зміни в версії"
+
+#~ msgid "Cams"
+#~ msgstr "Веб-кам"
+
+#~ msgid "Canada"
+#~ msgstr "Канада"
+
+#~ msgid "Cannot find player content"
+#~ msgstr "Не можливо знайти зміст плеєра"
+
+#~ msgid "Categories films"
+#~ msgstr "Категорії фільмів"
+
+#~ msgid "Ceska"
+#~ msgstr "Чеський"
+
+#~ msgid "China"
+#~ msgstr "Китай"
+
+#~ msgid "Configure IPTV Player"
+#~ msgstr "Налаштування IPTV-Плеєра"
+
+#~ msgid "Connection type:"
+#~ msgstr "Тип з'єднання:"
+
+#~ msgid ""
+#~ "Could not read from resource.\n"
+#~ "code: %r"
+#~ msgstr ""
+#~ "Не вдалося прочитати з ресурсу.\n"
+#~ "код: %r"
+
+#~ msgid ""
+#~ "Could not read from resource.\n"
+#~ "code: %s"
+#~ msgstr ""
+#~ "Не вдалося прочитати з ресурсу.\n"
+#~ "код: %s"
+
+#~ msgid "Country (changing may be illegal in your country)"
+#~ msgstr "Країна (поміняти,цей параметр може бути поза законом в вашій країні)"
+
+#~ msgid "Create Date"
+#~ msgstr "Дата створення"
+
+#~ msgid "Czech Republic"
+#~ msgstr "Чеська Республіка"
+
+#~ msgid "DEFAULT"
+#~ msgstr "ПО ЗАМОВЧУВАННЮ"
+
+#~ msgid "Daily"
+#~ msgstr "Щоденно"
+
+#~ msgid "Default second video policy"
+#~ msgstr "Відео співвідношення сторін по замовчуванню (второе)"
+
+#~ msgid "Device ID"
+#~ msgstr "ID пристрої"
+
+#~ msgid "Disable host protection (error == GS)"
+#~ msgstr "Відключити батьківський захист (помилка == GS)"
+
+#~ msgid "Display order:"
+#~ msgstr "Показати замовлення:"
+
+#~ msgid ""
+#~ "Downloading can not be started.\n"
+#~ " Downloader %s not working properly.\n"
+#~ "Status[%s]"
+#~ msgstr ""
+#~ "Завантаження не може розпочатися.\n"
+#~ " Завантажувач %s не працює відповідно.\n"
+#~ "Статус[%s]"
+
+#~ msgid ""
+#~ "Downloading can not be started.\n"
+#~ " The address ('%r') It is incorrect."
+#~ msgstr ""
+#~ "Завантаження не може розпочатися.\n"
+#~ " Адрес ('%r') це невірно."
+
+#~ msgid "ERROR - Error downloading: "
+#~ msgstr "ПОМИЛКА - помилка завантаження: "
+
+#~ msgid "ERROR - Error unpacking %s' % source"
+#~ msgstr "ПОМИЛКА - помилка розпаковки %s' % джерело"
+
+#~ msgid "ERROR - Error unpacking /tmp/iptv-host-xxx.tar.gz"
+#~ msgstr "ПОМИЛКА - помилка розпаковки /tmp/iptv-host-xxx.tar.gz"
+
+#~ msgid "ERROR - Invalid file format /tmp/iptv-host-xxx.tar.gz"
+#~ msgstr "ПОМИЛКА - невірний формат файла /tmp/iptv-host-xxx.tar.gz"
+
+#~ msgid "ERROR - copy error"
+#~ msgstr "ПОМИЛКА - помилка копіювання"
+
+#~ msgid "Ekstraklasa use a proxy?"
+#~ msgstr "Використовуйте проксі-сервер екстракласса?"
+
+#~ msgid "Enter data into your account (blue key)."
+#~ msgstr "Введіть дані в свій аккаунт (ключ)."
+
+#~ msgid "Entertainment"
+#~ msgstr "Розважальна програма"
+
+#~ msgid ""
+#~ "Error occurs during download. \n"
+#~ "Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+#~ msgstr ""
+#~ "Помилка завантаження. \n"
+#~ "Статус[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+
+#~ msgid "Explore"
+#~ msgstr "Досліджувати"
+
+#~ msgid "External player infobar timeout"
+#~ msgstr "Встановити тайм-аут інфопанелі плеєра"
+
+#~ msgid "External player use software decoder for the DTS"
+#~ msgstr "Застосовувати зовнішній декодер для DTS"
+
+#~ msgid "External player use software decoder for the WMA"
+#~ msgstr "Застосувати зовнішній декодер для WMA"
+
+#~ msgid "Extra"
+#~ msgstr "Додатковий"
+
+#~ msgid "FHD: very high"
+#~ msgstr "FHD: Дуже висока"
+
+#~ msgid "Favorite addresses are stored under the file urllist.user"
+#~ msgstr "Вибране. Посилання зберігаються в файлі urllist.user"
+
+#~ msgid "Feature Potential Items"
+#~ msgstr "Характеристика Можливих Товарів"
+
+#~ msgid "File Location xxxlist.txt :"
+#~ msgstr "Розміщення файлу xxxlist.txt :"
+
+#~ msgid "Films"
+#~ msgstr "Фільми"
+
+#~ msgid "Films Extremal"
+#~ msgstr "Фільми Екстремальні"
+
+#~ msgid "Filmy"
+#~ msgstr "Фільми"
+
+#~ msgid "Folder for temp data"
+#~ msgstr "Папка тимчасових даних"
+
+#~ msgid "Folder start"
+#~ msgstr "Початкова папка"
+
+#~ msgid "Following"
+#~ msgstr "Після"
+
+#~ msgid "France"
+#~ msgstr "Франція"
+
+#~ msgid "Gateway queue"
+#~ msgstr "Черговий шлюз"
+
+#~ msgid "German channles"
+#~ msgstr "Німецькі канали"
+
+#~ msgid "Get episodes list."
+#~ msgstr "Отримати список епізодів."
+
+#~ msgid "Get item type."
+#~ msgstr "Отримати тип елемента."
+
+#~ msgid "Get supported languages list."
+#~ msgstr "Відкрити список мов."
+
+#~ msgid "Global"
+#~ msgstr "Загальний"
+
+#~ msgid "Goals"
+#~ msgstr "Місце призначення"
+
+#~ msgid "Grade"
+#~ msgstr "Клас"
+
+#~ msgid "HD: high"
+#~ msgstr "HD: Висока"
+
+#~ msgid "HIGH"
+#~ msgstr "ВИСОКИЙ"
+
+#~ msgid "Harbinger"
+#~ msgstr "Провісник"
+
+#~ msgid "Hide Video in the list above the age of the viewer:"
+#~ msgstr "Приховати відео в списку вище віку глядача:"
+
+#~ msgid "Highest Rated"
+#~ msgstr "Найвищий рейтинг"
+
+#~ msgid "History"
+#~ msgstr "Історія"
+
+#~ msgid "IPTV - Player mode"
+#~ msgstr "IPTV - Режим Плеєра"
+
+#~ msgid "IPTV - the recorder mode"
+#~ msgstr "IPTV - Режим запису"
+
+#~ msgid "IPTV Player"
+#~ msgstr "IPTV Плеєр"
+
+#~ msgid "IPTV Player "
+#~ msgstr "IPTV Плеєр "
+
+#~ msgid "IPTV Player HD version %s"
+#~ msgstr "IPTV Плеєр HD версія %s"
+
+#~ msgid "IPTV Player download manager"
+#~ msgstr "IPTV Плеєр менеджер завантажень"
+
+#~ msgid "IPTV Player version %s"
+#~ msgstr "IPTV Плеєр версія %s"
+
+#~ msgid "IPTVPlayer need some additional setup"
+#~ msgstr "IPTV Плеєру потрібні додаткові налаштування"
+
+#~ msgid "IPTVPlayer setup version %s"
+#~ msgstr "IPTV Плеєр встановлення версії %s"
+
+#~ msgid "IPTVPlayer setup version %s "
+#~ msgstr "IPTV Плеєр Налаштування версії %s "
+
+#~ msgid "Ibiza Global Radio"
+#~ msgstr "Ibiza Глобальне Радіо"
+
+#~ msgid "Iframe file"
+#~ msgstr "Розташування заставки"
+
+#~ msgid "India"
+#~ msgstr "Індія"
+
+#~ msgid "Indonesia"
+#~ msgstr "Індонезія"
+
+#~ msgid "Information & journalism"
+#~ msgstr "Інформація і журналістика"
+
+#~ msgid "Information Services"
+#~ msgstr "Інформаційні послуги"
+
+#~ msgid "International"
+#~ msgstr "Міжнародний"
+
+#~ msgid "Iplex use a proxy?"
+#~ msgstr "Iplex використовувати проксі-сервер?"
+
+#~ msgid "Ireland"
+#~ msgstr "Ірландія"
+
+#~ msgid "Italiano"
+#~ msgstr "Італійський"
+
+#~ msgid "Italy"
+#~ msgstr "Італія"
+
+#~ msgid "Items in group"
+#~ msgstr "Місце в групі"
+
+#~ msgid "JSON module not available!"
+#~ msgstr "Модуль JSON не доступний!"
+
+#~ msgid "Japan"
+#~ msgstr "Японsя"
+
+#~ msgid "Korea"
+#~ msgstr "Корея"
+
+#~ msgid "LAST"
+#~ msgstr "ОСТАННІЙ"
+
+#~ msgid "LUCHA UNDERGROUND"
+#~ msgstr "Підпільна боротьба"
+
+#~ msgid "Last added"
+#~ msgstr "Послідні добавлення"
+
+#~ msgid "Last error: \"People who live where you live aren't allowed to watch this video.. Not because we don't luv ya, but because the owners have some restrictions. The good news, is there are tens of thousands of other videos to choose from.\""
+#~ msgstr "Кінцева помилка: \"Люди, які проживають, там де ви, не можуть подивитись це відео..  Тому що, власники мають обмеження. Добра новина, є десятки тисяч інших відео на вибір.\""
+
+#~ msgid "Last error: \"Silverlight stream not supported.\""
+#~ msgstr "Кінцева помилка: \"Потік Silverlight не підтримується.\""
+
+#~ msgid "Last error: \"The Mirror is broken.If available you can choose other source.\""
+#~ msgstr "Кінцева помилка: \"Відображення немає. При наявності ви можете вибрати інше джерело.\""
+
+#~ msgid "Latest TV Episodes"
+#~ msgstr "Послідні ТВ Епізоди"
+
+#~ msgid "Latest Update"
+#~ msgstr "Останні оновлення"
+
+#~ msgid "Less viewed"
+#~ msgstr "Менш популярні"
+
+#~ msgid "Life of students"
+#~ msgstr "Життя студентів"
+
+#~ msgid "Links to the video files from the file urllist.txt"
+#~ msgstr "Посилання на відео з файлу urllist.txt"
+
+#~ msgid "List of anime"
+#~ msgstr "Список аніме"
+
+#~ msgid "List of films"
+#~ msgstr "Список фільмів"
+
+#~ msgid "List of movies prepared by Rafalcool1"
+#~ msgstr "Список фільмів, підготовленних Rafalcool1"
+
+#~ msgid "Live broadcasts from the file urllist.stream"
+#~ msgstr "Прямі трансляції з файлу urllist.stream"
+
+#~ msgid "Liveleakers"
+#~ msgstr "Поточні"
+
+#~ msgid "Load automatically the subtitle from file with the same name"
+#~ msgstr "Завантажити субтитри автоматично з файлу з таким самим імям"
+
+#~ msgid "Loading..."
+#~ msgstr "Завантаження..."
+
+#~ msgid "Local  XXXversion"
+#~ msgstr "Локальна  XXXверсия"
+
+#~ msgid "Login user \"%s\" into %s"
+#~ msgstr "Користувач Зайти \"%s\" в %s"
+
+#~ msgid "Login:"
+#~ msgstr "Авторизація:"
+
+#~ msgid "MEDIUM"
+#~ msgstr "СЕРЕДНІЙ"
+
+#~ msgid "MERGE protocol source"
+#~ msgstr "Зєднувати джерело протоколу"
+
+#~ msgid "MOB: low"
+#~ msgstr "MOB: Низький"
+
+#~ msgid "MORE"
+#~ msgstr "БІЛЬШЕ"
+
+#~ msgid "Main developer, architect, coordinator: "
+#~ msgstr "Головний розробник, архітектор, координатор: "
+
+#~ msgid "Malaysia"
+#~ msgstr "Малайзія"
+
+#~ msgid "Men"
+#~ msgstr "Люди"
+
+#~ msgid "Mexico"
+#~ msgstr "Мексика"
+
+#~ msgid "Miscellaneous"
+#~ msgstr "Різне"
+
+#~ msgid "Month"
+#~ msgstr "Місяць"
+
+#~ msgid "Monthly"
+#~ msgstr "Щомісячно"
+
+#~ msgid "More as next page"
+#~ msgstr "Більше на наступній сторінці"
+
+#~ msgid "Morocco"
+#~ msgstr "Марокко"
+
+#~ msgid "Most"
+#~ msgstr "Найбільш"
+
+#~ msgid "Most Favorited"
+#~ msgstr "Самі обрані"
+
+#~ msgid "Mounted on %s"
+#~ msgstr "Закріплено до %s"
+
+#~ msgid "Move item"
+#~ msgstr "Пересунути пункт"
+
+#~ msgid "Music-Box"
+#~ msgstr "Збірка-Музика"
+
+#~ msgid "Musik"
+#~ msgstr "Музика"
+
+#~ msgid "Must See"
+#~ msgstr "Повинен подивитись"
+
+#~ msgid "Muzik"
+#~ msgstr "Музика"
+
+#~ msgid "My Favorites"
+#~ msgstr "Мої улюблені"
+
+#~ msgid "Najtrafniejsze"
+#~ msgstr "Нові"
+
+#~ msgid "Name hamster (login)"
+#~ msgstr "Імя (логін)"
+
+#~ msgid "Netherlands"
+#~ msgstr "Нідерланди"
+
+#~ msgid "New Releases"
+#~ msgstr "Нові релізи"
+
+#~ msgid "New TV Episodes"
+#~ msgstr "Нові ТВ Епізоди"
+
+#~ msgid "New folder"
+#~ msgstr "Нова папка"
+
+#~ msgid "Newest added"
+#~ msgstr "Останнім додав"
+
+#~ msgid "Next"
+#~ msgstr "Наступний"
+
+#~ msgid "No name"
+#~ msgstr "Без імені"
+
+#~ msgid "No valid links available. Last error: \"The Mirror is broken. If available you can choose other source.\""
+#~ msgstr "Немає працюючих посилань. Кінцева помилка: \"Відтворення немає. При наявності, ви можете вибрати інше джерело.\""
+
+#~ msgid "Now playing"
+#~ msgstr "Зараз в програмі"
+
+#~ msgid "Number of songs fetched at once for the station"
+#~ msgstr "Кількість пісень, знайдених під час відвідування станцій"
+
+#~ msgid "Odśwież"
+#~ msgstr "Оновлення"
+
+#~ msgid "Oldest added"
+#~ msgstr "Додав починаючи зі старих"
+
+#~ msgid "Operation aborted! "
+#~ msgstr "Операція перервана! "
+
+#~ msgid "PC"
+#~ msgstr "ПК"
+
+#~ msgid "PICTURE"
+#~ msgstr "ФОТО"
+
+#~ msgid "Page: "
+#~ msgstr "Сторінка: "
+
+#~ msgid "Pakistan"
+#~ msgstr "Пакистан"
+
+#~ msgid "Password for hamster"
+#~ msgstr "Пароль для chomika"
+
+#~ msgid "Philippines"
+#~ msgstr "Філіппіни"
+
+#~ msgid "Photos"
+#~ msgstr "Фото"
+
+#~ msgid "Play file"
+#~ msgstr "Відтворення відео"
+
+#~ msgid "PlayPuls"
+#~ msgstr "PlayPuls"
+
+#~ msgid "PlayPuls use a proxy?"
+#~ msgstr "PlayPuls використати проксі-сервер?"
+
+#~ msgid "Player > Recorder"
+#~ msgstr "Плеєр > Запис"
+
+#~ msgid "Please remember that you use the IPTVPlayer plugin at your own risk."
+#~ msgstr "Будь-ласка, памятайте, що ви використовуєте плагін IPTV Плеєр на свій страх і ризик."
+
+#~ msgid ""
+#~ "Please visit '%s' from using web-browser form the PC. If links are available please report this problem.\n"
+#~ "Email: samsamsam@o2.pl"
+#~ msgstr ""
+#~ "Будь ласка , відвідайте '%s' за допомогою веб-браузера вашого ПК . Якщо посилання доступні Будь ласка , повідомте про цю проблему .\n"
+#~ "E-mail: samsamsam@o2.pl"
+
+#~ msgid "Pol'skiy"
+#~ msgstr "Польський"
+
+#~ msgid "Poland"
+#~ msgstr "Польща"
+
+#~ msgid "Policy2"
+#~ msgstr "Співвідношення сторін2"
+
+#~ msgid "Polish channles"
+#~ msgstr "Польські канали"
+
+#~ msgid "Portugal"
+#~ msgstr "Португалія"
+
+#~ msgid "Preferred protocol:"
+#~ msgstr "Виберіть протокол:"
+
+#~ msgid "Preferred streaming protocol' + ': "
+#~ msgstr "Переважаючий протокол потокової передачі' + ': "
+
+#~ msgid "Press OK to start"
+#~ msgstr "Натисніть OK щоб розпочати"
+
+#~ msgid "Profile"
+#~ msgstr "Профіль"
+
+#~ msgid "Promoted channels"
+#~ msgstr "Популярні канали"
+
+#~ msgid "Promoted games"
+#~ msgstr "Популярні ігри"
+
+#~ msgid "Proxy server url"
+#~ msgstr "Проксі-сервер гіперпосилання"
+
+#~ msgid "Quarter"
+#~ msgstr "Чверть"
+
+#~ msgid "Raw"
+#~ msgstr "Неопрацьованний"
+
+#~ msgid "Recent Items (All)"
+#~ msgstr "Послідні товари (Все)"
+
+#~ msgid "Recent Items (Popular)"
+#~ msgstr "Послідні товари (Популярний)"
+
+#~ msgid "Recently Added"
+#~ msgstr "Недавно доданий"
+
+#~ msgid "Recently added episodes from previous seasons"
+#~ msgstr "Недавно добавлені епізоди з минулих сезонів"
+
+#~ msgid "Recommended"
+#~ msgstr "Рекомендовані"
+
+#~ msgid "Recommended by Rafalcool1"
+#~ msgstr "Рекомендується Rafalcool1"
+
+#~ msgid "Recorder > Player"
+#~ msgstr "Запис > Плеєр"
+
+#~ msgid "Records path"
+#~ msgstr "Місцезнаходження запису"
+
+#~ msgid "Regular"
+#~ msgstr "Постійний"
+
+#~ msgid "Remote XXXversion"
+#~ msgstr "Дистанційна XXXверсія"
+
+#~ msgid "Removing the old version."
+#~ msgstr "Видалення старої версії."
+
+#~ msgid "Request token from \"%s\""
+#~ msgstr "Символ запиту від \"%s\""
+
+#~ msgid "Request token from %s"
+#~ msgstr "Символ запиту від %s"
+
+#~ msgid "Require pin:"
+#~ msgstr "Запитувати PIN-код:"
+
+#~ msgid "Romania"
+#~ msgstr "Румунія"
+
+#~ msgid "SD: standard"
+#~ msgstr "SD: Стандарт"
+
+#~ msgid "SEARCH"
+#~ msgstr "ПОШУК"
+
+#~ msgid "SHOW REPLAY"
+#~ msgstr "ГРАТИ ШОУ"
+
+#~ msgid "SMACKDOWN"
+#~ msgstr "СКИНУТИ"
+
+#~ msgid "SORT"
+#~ msgstr "СОРТУВАТИ"
+
+#~ msgid "Schweiz"
+#~ msgstr "Швеція"
+
+#~ msgid "Search History"
+#~ msgstr "Історія пошуку"
+
+#~ msgid "Search for subitile for %s"
+#~ msgstr "Пошук субтитрів для %s"
+
+#~ msgid "Select movie"
+#~ msgstr "Виберіть фільм"
+
+#~ msgid "Series [dubbing]"
+#~ msgstr "Серії [перезапис]"
+
+#~ msgid "Series [subtitles]"
+#~ msgstr "Серії [субтитри]"
+
+#~ msgid "Shemale"
+#~ msgstr "Транссексуал"
+
+#~ msgid "Shortcuts"
+#~ msgstr "Клавіші швидкого доступу"
+
+#~ msgid "Show recommended by Rafalcool1:"
+#~ msgstr "Показати рекомендовано Rafalcool1:"
+
+#~ msgid "Sin in to"
+#~ msgstr "Зайти в систему"
+
+#~ msgid "Singapore"
+#~ msgstr "Сингапур"
+
+#~ msgid "Size of the icons"
+#~ msgstr "Розмір іконок"
+
+#~ msgid "Skipping IPTVPlayer serup may cause problems.Are you sure to skip IPTVPlayer setup?"
+#~ msgstr "Пропуск встановлення додатку, може привести до дефекту плагіна.Пропустити встановлення додаткових модулів. Ви впевнені?"
+
+#~ msgid "SmackDown"
+#~ msgstr "Скинути"
+
+#~ msgid "Small films and anime"
+#~ msgstr "Фільми і аніме"
+
+#~ msgid "Some changes will be applied only after plugin update."
+#~ msgstr "Деякі зміни будуть застосовані тільки після оновлення плагіна."
+
+#~ msgid "Songs"
+#~ msgstr "Пісні"
+
+#~ msgid "Sorry"
+#~ msgstr "Вибачте"
+
+#~ msgid "Sort movies: "
+#~ msgstr "Сортувати фільми: "
+
+#~ msgid "Sort results after:"
+#~ msgstr "Сортувати результати після:"
+
+#~ msgid "Sort search result by"
+#~ msgstr "Сортувати за результатами пошуку"
+
+#~ msgid "Sort xxxlist :"
+#~ msgstr "Сортування xxxlist :"
+
+#~ msgid "Spain"
+#~ msgstr "Іспанія"
+
+#~ msgid "Sport"
+#~ msgstr "Спорт"
+
+#~ msgid "Status object [%r]"
+#~ msgstr "Статус обєкта [%r]"
+
+#~ msgid "Straight from Polish"
+#~ msgstr "Прямо з Польського"
+
+#~ msgid "StreamLiveTo.tv"
+#~ msgstr "Прямий Потік для.ТВ"
+
+#~ msgid "Subtitles downloaded successfully. [%s]"
+#~ msgstr "Субтитри завантаженні успішно. [%s]"
+
+#~ msgid "Such as downloading and installation additional binaries"
+#~ msgstr "Таких, як завантаження і встановлення додаткових модулів двоїчного файла"
+
+#~ msgid "Swiss"
+#~ msgstr "Швейцарський"
+
+#~ msgid "Switzerland"
+#~ msgstr "Швейцарія"
+
+#~ msgid "Syria"
+#~ msgstr "Сірія"
+
+#~ msgid "TOP100 Month"
+#~ msgstr "Топ 100 Місяця"
+
+#~ msgid "TOP100 Of the week"
+#~ msgstr "Топ 100 Тижня"
+
+#~ msgid "TOP100 Week"
+#~ msgstr "TOP100 Тиждень"
+
+#~ msgid "TOP100 of the Month"
+#~ msgstr "TOP100 місяця"
+
+#~ msgid "TVN Introduce yourself as:"
+#~ msgstr "TVN Представтеся:"
+
+#~ msgid "TVN use a proxy?"
+#~ msgstr "TVN використовувати проксі-сервер?"
+
+#~ msgid "Tales"
+#~ msgstr "Вигадки"
+
+#~ msgid "Teletext decoder"
+#~ msgstr "Декодер телетексту"
+
+#~ msgid "Testers: "
+#~ msgstr "Тестери: "
+
+#~ msgid "The Witcher"
+#~ msgstr "Відьмак"
+
+#~ msgid "The current host crashed"
+#~ msgstr "Даний хост не працює"
+
+#~ msgid "The default video format"
+#~ msgstr "Формат відео по замовчуванню"
+
+#~ msgid "The default video format:"
+#~ msgstr "Формат відео по замовчуванню:"
+
+#~ msgid "The default video quality:"
+#~ msgstr "Якість відео по замовчуванню:"
+
+#~ msgid "The most relevant"
+#~ msgstr "Найбільш актуальне"
+
+#~ msgid "The problem with obtaining the gateway proxy!"
+#~ msgstr "Проблема з отриманням шлюзу проксі!"
+
+#~ msgid "The problem with the logged-in user \"%s. Check your login details in the host configuration.\""
+#~ msgstr "Проблема з авторизирацією користувача \"%s. Перевірте свої реєстраційні дані в конфігурації хост.\""
+
+#~ msgid "The problem with the user's logon \"%s\". Check your login details in the host configuration."
+#~ msgstr "Проблема зі входом користувача \"%s\". Перовірте свої реєстраційні дані в конфігурації хоста."
+
+#~ msgid "The problem with user logon \"%s\".\n"
+#~ msgstr "Проблема з входом користувача \"%s\".\n"
+
+#~ msgid "The user Last.fm"
+#~ msgstr "Користувач Last.fm"
+
+#~ msgid ""
+#~ "There are no active premium account.\n"
+#~ "Using a limited version that may not work properly with congested links."
+#~ msgstr ""
+#~ "Там немає активного преміум акаунта.\n"
+#~ "Використовувати обмежену версію, що не може працювати відповідно з перевантаженними посиланнями."
+
+#~ msgid "There was an error Download."
+#~ msgstr "Була помилка завантаження."
+
+#~ msgid ""
+#~ "There was an error Download. \n"
+#~ "Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
+#~ msgstr ""
+#~ "Була помилка завантаження. \n"
+#~ "Статус[%s], tmpБуфРозмір[%r], може працювати з Gameplayer[%r]"
+
+#~ msgid "There was an error downloading."
+#~ msgstr "Помилка при завантаженні."
+
+#~ msgid "This site requires login. Please complete host configuration data."
+#~ msgstr "Цей сайт потребує логін. Будь-ласка, заповніть дані конфігурації хостів."
+
+#~ msgid "Today, too many people are watching a movie with"
+#~ msgstr "Сьогодні дуже багато користувачів дивляться фільм з"
+
+#~ msgid "Top Items (All time)"
+#~ msgstr "Кращі товари (За весь час)"
+
+#~ msgid "Top Items (This Month)"
+#~ msgstr "Кращі товари (Цей місяць)"
+
+#~ msgid "Top Items (This Week)"
+#~ msgstr "Кращі товари (На цьому тижні)"
+
+#~ msgid "Top Items (Today)"
+#~ msgstr "Кращі товари (Cьогодні)"
+
+#~ msgid "Topics"
+#~ msgstr "Теми"
+
+#~ msgid "Topics films"
+#~ msgstr "Теми фільмів"
+
+#~ msgid "Total Divas"
+#~ msgstr "Тотальні Діви"
+
+#~ msgid "Treat episode as TV Show"
+#~ msgstr "Дивитись епізод, як ТВ-шоу"
+
+#~ msgid "Try again for some time"
+#~ msgstr "Попробуйте ще раз через деякий час"
+
+#~ msgid "Tunisia"
+#~ msgstr "Туніс"
+
+#~ msgid "Turkey"
+#~ msgstr "Турція"
+
+#~ msgid "Türk"
+#~ msgstr "Турецький"
+
+#~ msgid "UNKNOWN"
+#~ msgstr "НЕВІДОМИЙ"
+
+#~ msgid "UPDATE"
+#~ msgstr "ОНОВИТИ"
+
+#~ msgid "UPDATE MENU"
+#~ msgstr "МЕНЮ ОНОВЛЕННЯ"
+
+#~ msgid "UPDATE-CHANGES"
+#~ msgstr "ОНОВИТИ-ЗМІНИ"
+
+#~ msgid "UPDATE-NOW"
+#~ msgstr "ОНОВИТИ-ЗАРАЗ"
+
+#~ msgid "Ukraine"
+#~ msgstr "Україна"
+
+#~ msgid "United Kingdom"
+#~ msgstr "Великобританія"
+
+#~ msgid "United States"
+#~ msgstr "Сполучені Штати"
+
+#~ msgid "Unknown protocol %s"
+#~ msgstr "Невідомий протокол %s"
+
+#~ msgid "Update End. Please manual restart enigma2"
+#~ msgstr "Кінець оновлень. Будь-ласка ручний перезапуск Enigma2"
+
+#~ msgid "Update Now"
+#~ msgstr "Оновити зараз"
+
+#~ msgid "Update Now & Restart Enigma2"
+#~ msgstr "Обновити зараз & Перезаватажити Enigma2"
+
+#~ msgid "Update failed. Check the status by selectiong interesting and pressing ok."
+#~ msgstr "Оновлення не вдалося. Перевірте статус вибраного, натисніть кнопку ОК."
+
+#~ msgid "Use German proxy for link request"
+#~ msgstr "Використовувати Німецький проксі для запиту посилання"
+
+#~ msgid "Use Proxy?"
+#~ msgstr "Використовуй проксі?"
+
+#~ msgid "Use proxy gateway"
+#~ msgstr "Використати проксі-шлюз"
+
+#~ msgid "Use ru proxy server to get file lists"
+#~ msgstr "Використовувати проксі-сервер, щоб отримати списки файлів"
+
+#~ msgid "Use the default video format:"
+#~ msgstr "Використовуйте формат відео по замовчуванню:"
+
+#~ msgid "Use the default video quality:"
+#~ msgstr "Використовуйте якісь відео по замовчуванню:"
+
+#~ msgid "User Last.fm"
+#~ msgstr "Користувач Last.fm"
+
+#~ msgid "User PREMIUM KinomanTV?"
+#~ msgstr "ПРЕМІУМ Користувач KinomanTV?"
+
+#~ msgid "User Videos 3dEU?"
+#~ msgstr "Відео користувача 3dEU?"
+
+#~ msgid "User-Agent"
+#~ msgstr "Агент користувача"
+
+#~ msgid "Uses the default video quality:"
+#~ msgstr "Використовувати якість відео по замовчуванню:"
+
+#~ msgid "VIDEO"
+#~ msgstr "ВІДЕО"
+
+#~ msgid "Very high"
+#~ msgstr "Дуже висока"
+
+#~ msgid "Very low"
+#~ msgstr "Дуже низький"
+
+#~ msgid "Video buffer size [MB]"
+#~ msgstr "Розмір буфера відео в [MB]"
+
+#~ msgid "VietNam"
+#~ msgstr "В'єтнам"
+
+#~ msgid "WWE Main Event"
+#~ msgstr "WWE Головна подія"
+
+#~ msgid "WWE NETWORK"
+#~ msgstr "WWE МЕРЕЖА"
+
+#~ msgid "Waiting room"
+#~ msgstr "Зал очікування"
+
+#~ msgid "Warehouse"
+#~ msgstr "Склад"
+
+#~ msgid "Watch video materials from IPTV services"
+#~ msgstr "Перегляд сервісів IPTV"
+
+#~ msgid "Web streams player"
+#~ msgstr "Програвач Веб-потоків"
+
+#~ msgid "Webpages: "
+#~ msgstr "Веб-сторінка: "
+
+#~ msgid "Week"
+#~ msgstr "Тиждень"
+
+#~ msgid "Weekly"
+#~ msgstr "Щоденно"
+
+#~ msgid "Women"
+#~ msgstr "Жінки"
+
+#~ msgid "Worse rating"
+#~ msgstr "Поганий рейтинг"
+
+#~ msgid "Worst"
+#~ msgstr "Найгірша"
+
+#~ msgid "WrestlingNet._listVideos - no markers [m1][m2] found!"
+#~ msgstr "WrestlingNet._listВвдео - без маркерів [м1] [м2] знайдено!"
+
+#~ msgid "Writer"
+#~ msgstr "Автор"
+
+#~ msgid "XXX"
+#~ msgstr "Відео Порно"
+
+#~ msgid "You can use Russian proxy server as a workaround."
+#~ msgstr "Ви можете використати російський проксі-сервер в якосі обхідного шляху."
+
+#~ msgid "You do not have a premium account.Starting a sponsored broadcast."
+#~ msgstr "Ви не маєте преміум-акаунту. Оплатіть одну трансляцію."
+
+#~ msgid "You probably have not access to this page due to geolocation restriction."
+#~ msgstr "Ви, мабуть, не маєте доступу до цієї сторінки в звязку з обмеженням геолокації."
+
+#~ msgid "Your OpenSSL version is [%s]"
+#~ msgstr "Ваша версія OpenSSL являється [%s]"
+
+#~ msgid "Your platform is [%s]"
+#~ msgstr "Ваша платформа [%s]"
+
+#~ msgid "Yoursay"
+#~ msgstr "Ти сказав"
+
+#~ msgid "Youtube player"
+#~ msgstr "Youtube плеєр"
+
+#~ msgid "Youtubes player"
+#~ msgstr "Youtube плеєр"
+
+#~ msgid "[For download only] "
+#~ msgstr "Тільки Скачати "
+
+#~ msgid "[group]"
+#~ msgstr "[група]"
+
+#~ msgid "active"
+#~ msgstr "активний"
+
+#~ msgid "alltube.tv"
+#~ msgstr "все tube.тв"
+
+#~ msgid "ascending"
+#~ msgstr "виходячий"
+
+#~ msgid "assessment"
+#~ msgstr "оцінка"
+
+#~ msgid "back_pressed prev sel index %s"
+#~ msgstr "назад до попереднього індексу %s"
+
+#~ msgid "based on IP"
+#~ msgstr "На основі IP"
+
+#~ msgid "bestfit"
+#~ msgstr "кращий"
+
+#~ msgid "bitrate: 1800"
+#~ msgstr "Бітрейт: 1800"
+
+#~ msgid "bitrate: 200p"
+#~ msgstr "Битрейт: 200p"
+
+#~ msgid "bitrate: 450p"
+#~ msgstr "Бітрейт: 450p"
+
+#~ msgid "bitrate: 900"
+#~ msgstr "Бітрейт: 900"
+
+#~ msgid "bitrate: the best"
+#~ msgstr "Бітрейт: кращий"
+
+#~ msgid "buffer-size"
+#~ msgstr "Розмір буфера"
+
+#~ msgid "channel"
+#~ msgstr "канал"
+
+#~ msgid "console"
+#~ msgstr "консоль"
+
+#~ msgid "data"
+#~ msgstr "дані"
+
+#~ msgid "date added"
+#~ msgstr "дата добавлення"
+
+#~ msgid "date-add"
+#~ msgstr "дата-надстройки"
+
+#~ msgid "descending"
+#~ msgstr "падаючий"
+
+#~ msgid "deutsch"
+#~ msgstr "німецький"
+
+#~ msgid "download-buffer-path"
+#~ msgstr "скачати-буфер шлях"
+
+#~ msgid "downmix"
+#~ msgstr "мікшування"
+
+#~ msgid "english"
+#~ msgstr "англійський"
+
+#~ msgid "espanol"
+#~ msgstr "іспанський"
+
+#~ msgid "favorite"
+#~ msgstr "Улюблені"
+
+#~ msgid "favourites"
+#~ msgstr "вибране"
+
+#~ msgid "favourtes"
+#~ msgstr "Вибране"
+
+#~ msgid "format: 240p"
+#~ msgstr "Формат: 240p"
+
+#~ msgid "format: 360p"
+#~ msgstr "Формат: 360p"
+
+#~ msgid "format: 480p"
+#~ msgstr "Формат: 480p"
+
+#~ msgid "format: 720"
+#~ msgstr "Формат: 720"
+
+#~ msgid "format: best"
+#~ msgstr "Формат: кращий"
+
+#~ msgid "format: worst"
+#~ msgstr "Формат: найгірший"
+
+#~ msgid "free premium player."
+#~ msgstr "Безоплатний преміум плеєр."
+
+#~ msgid "good"
+#~ msgstr "хороший"
+
+#~ msgid "headertext"
+#~ msgstr "текст заголовка"
+
+#~ msgid "http://fs.to/"
+#~ msgstr "FS.TO"
+
+#~ msgid "http://hdkinomir.com/"
+#~ msgstr "HDКіномір"
+
+#~ msgid "http://online-kinopokaz.ru/"
+#~ msgstr "Кінопоказ"
+
+#~ msgid "http://www.ex.ua/"
+#~ msgstr "EX.UA"
+
+#~ msgid "last added"
+#~ msgstr "Послідні добавлені"
+
+#~ msgid "lector hd free "
+#~ msgstr "Перегляд HD безоплати "
+
+#~ msgid "lector normal free "
+#~ msgstr "Перегляд SD безоплати "
+
+#~ msgid "live"
+#~ msgstr "прямий"
+
+#~ msgid "live transfers"
+#~ msgstr "Прямі Потоки"
+
+#~ msgid "login:"
+#~ msgstr "Логін:"
+
+#~ msgid "mobile"
+#~ msgstr "мобільний"
+
+#~ msgid "movie"
+#~ msgstr "фільм"
+
+#~ msgid "movie4k.to"
+#~ msgstr "кіно4k.to"
+
+#~ msgid "name"
+#~ msgstr "назва"
+
+#~ msgid "nasze-kino.eu"
+#~ msgstr "Наше-Кіно.eu"
+
+#~ msgid "new"
+#~ msgstr "Новий"
+
+#~ msgid "nocnyseans.pl"
+#~ msgstr "нічний Сеанс.pl"
+
+#~ msgid "nonlinear"
+#~ msgstr "нелінійний"
+
+#~ msgid "panscan"
+#~ msgstr "Панорама"
+
+#~ msgid "passthrough"
+#~ msgstr "пройти через"
+
+#~ msgid "password:"
+#~ msgstr "Пароль:"
+
+#~ msgid "picture link"
+#~ msgstr "Фото Посилання"
+
+#~ msgid "playerlogo"
+#~ msgstr "плеєр логотип"
+
+#~ msgid "playlist"
+#~ msgstr "плейлист"
+
+#~ msgid "polski"
+#~ msgstr "польський"
+
+#~ msgid "preferred streaming protocol"
+#~ msgstr "кращий протокол потокової передачі"
+
+#~ msgid "random"
+#~ msgstr "випадковий"
+
+#~ msgid "ring-buffer-max-size"
+#~ msgstr "максимальний розмір буферу"
+
+#~ msgid "self.getCurrentDirectory()"
+#~ msgstr "самостійно.отримати Поточний каталог()"
+
+#~ msgid "sequencer"
+#~ msgstr "секвенсор"
+
+#~ msgid "sun sessions"
+#~ msgstr "сонце сесій"
+
+#~ msgid "the name"
+#~ msgstr "імя"
+
+#~ msgid "vapor"
+#~ msgstr "Пар"
+
+#~ msgid "video"
+#~ msgstr "відео"
+
+#~ msgid "web-live.tv login:"
+#~ msgstr "web-live.tv Зайти:"
+
+#~ msgid "web-live.tv password:"
+#~ msgstr "web-live.tv Пароль:"
+
+#~ msgid "web-live.tv premium user?"
+#~ msgstr "web-live.tv Преміум користувач?"
+
+#~ msgid "worst"
+#~ msgstr "найгірший"
+
+#~ msgid "xxxlist.txt"
+#~ msgstr "Файл-xxx.txt"
+
+#~ msgid "youtube.com"
+#~ msgstr "youtube.com"
+
+#~ msgid "Аниме"
+#~ msgstr "Аніме"
+
+#~ msgid "Аудио"
+#~ msgstr "Аудіо"
+
+#~ msgid "Видео"
+#~ msgstr "Відео"
+
+#~ msgid "Игры"
+#~ msgstr "Ігри"
+
+#~ msgid "Литература"
+#~ msgstr "Література"
+
+#~ msgid "Мультфильмы"
+#~ msgstr "Мультфільми"
+
+#~ msgid "Сериалы"
+#~ msgstr "Серіали"
+
+#~ msgid "Фильмы"
+#~ msgstr "Фільми"
+
+#~ msgid "Фильмы 2013"
+#~ msgstr "Фільми 2013"
+
+#~ msgid "Фильмы 2014"
+#~ msgstr "Фільми 2014"
+
+#~ msgid "Фильмы 2015"
+#~ msgstr "Фільми 2015"
diff -ruN o/IPTVPlayer/locale/uk/LC_MESSAGES/IPTVPlayer.po pc/IPTVPlayer/locale/uk/LC_MESSAGES/IPTVPlayer.po
--- o/IPTVPlayer/locale/uk/LC_MESSAGES/IPTVPlayer.po	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/locale/uk/LC_MESSAGES/IPTVPlayer.po	1970-01-01 03:00:00.000000000 +0300
@@ -1,3651 +0,0 @@
-msgid ""
-msgstr ""
-"Project-Id-Version: IPTVPlayer\n"
-"POT-Creation-Date: 2013-12-15 12:19+0100\n"
-"PO-Revision-Date: \n"
-"Last-Translator: vovan43 <yuozyo@ukr.net>\n"
-"Language-Team: IPTVPlayer\n"
-"Language: uk_UA\n"
-"MIME-Version: 1.0\n"
-"Content-Type: text/plain; charset=UTF-8\n"
-"Content-Transfer-Encoding: 8bit\n"
-"X-Generator: Poedit 1.8.6\n"
-"X-Poedit-Basepath: .\n"
-"Plural-Forms: nplurals=3; plural=(n==1 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 "
-"|| n%100>=20) ? 1 : 2);\n"
-"X-Poedit-SearchPath-0: ../plugin\n"
-
-msgid ""
-"\n"
-"For more info please ask the author samsamsam@o2.pl"
-msgstr ""
-"\n"
-"Для отримання детальної інформації, будь-ласка, звертайтесь до автора "
-"samsamsam@o2.pl"
-
-msgid ""
-"\n"
-"For more info please visit http://fluendo.com/"
-msgstr ""
-"\n"
-"Для отримання детальної інформації, будь-ласка, відвідайте http://fluendo."
-"com/"
-
-msgid ""
-"\n"
-"Make sure you are using the latest version of the plugin."
-msgstr ""
-"\n"
-"Переконайтесь, що ви використовуєте останню версію плагіна."
-
-msgid ""
-"\n"
-"Please use \"Web\" streams player -> WeebTV instead."
-msgstr ""
-"\n"
-"Будь-ласка, використовуйте \"Web\" потоки плеєра -> замість WeebTV."
-
-msgid ""
-"\n"
-"This host is not integral part of the IPTVPlayer plugin.\n"
-"It is not supported by IPTVPlayer team."
-msgstr ""
-"\n"
-"Цей хост не являється невідємною частиною плагіна IPTVПлеєр.\n"
-"Це не підтримується авторами IPTVПлеєра."
-
-msgid ""
-"\n"
-"You can also report problem here: \n"
-"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
-"or here: samsamsam@o2.pl"
-msgstr ""
-"\n"
-"Повідомити про проблему ви можете тут: \n"
-"https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues\n"
-"або тут: samsamsam@o2.pl"
-
-msgid "    Allowed formats of thumbnails"
-msgstr "    Дозволенний формат ескізів"
-
-msgid "    Audio buffer size [KB]"
-msgstr "    Розмір буфера Аудіо [KB]"
-
-msgid "    Buffer size [MB]"
-msgstr "    Розмір буфера [MB]"
-
-msgid "    Number of columns"
-msgstr "    Кількість колонок"
-
-msgid "    Number of rows"
-msgstr "    Кількість рядків"
-
-msgid "    Remove thumbnails"
-msgstr "    Видалити ескізи"
-
-msgid "    Service icon size"
-msgstr "    Розмір іконки сервіса"
-
-msgid "    Video buffer size [MB]"
-msgstr "    Розмір буфера Відео [MB]"
-
-msgid "  Filmy3dEU login:"
-msgstr "  Filmy3dEU логін:"
-
-msgid "  Filmy3dEU password:"
-msgstr "  Filmy3dEU пароль:"
-
-msgid "  KinomanTV login:"
-msgstr "  KinomanTV Логін:"
-
-msgid "  KinomanTV password:"
-msgstr "  KinomanTV Пароль:"
-
-msgid "  password:"
-msgstr "  Пароль:"
-
-msgid " - Local version"
-msgstr " - Локальна версія"
-
-msgid " - Remote version"
-msgstr " - Дистанційна версія"
-
-msgid " Last.fm login:"
-msgstr " Last.fm Вхід:"
-
-msgid " Password"
-msgstr " Пароль"
-
-msgid " Username or Email"
-msgstr " Імя користувача або адрес електронної пошти"
-
-msgid ""
-" has not been detected. \n"
-"Do you want to install it? "
-msgstr ""
-" Це не було виявлено. \n"
-"Ви бажаєте, втановити це? "
-
-msgid ""
-" is deprecated. \n"
-"Do you want to install new one? "
-msgstr ""
-" не рекомендується. \n"
-"Ви бажаєте, встановити новий? "
-
-msgid "\"Web\" streams player"
-msgstr "\"Веб\" Потоки плеєра"
-
-msgid "%s - configuration"
-msgstr "%s - Конфігурація"
-
-msgid "%s [download]"
-msgstr "%s Завантажити"
-
-msgid "%s [watch]"
-msgstr "%s Дивитись"
-
-msgid "%s items in category"
-msgstr "Пункти по категоріям %s сек"
-
-msgid "%s viewers, %s channels"
-msgstr "%s глядачів, %s канали"
-
-msgid "%s will be used by IPTVPlayer."
-msgstr "%s буде використовуватися в IPTVПлеєрі."
-
-msgid "***Any***"
-msgstr "***Будь-які***"
-
-msgid "+++ XXXLIST +++"
-msgstr "+++ ФАЙЛ-XXX +++"
-
-msgid "--- Cams ---"
-msgstr "--- Веб-кам ---"
-
-msgid "--- Channels ---"
-msgstr "--- Канали ---"
-
-msgid "--- Couple ---"
-msgstr "--- Пара ---"
-
-msgid "--- Couples ---"
-msgstr "--- Пари ---"
-
-msgid "--- Featured videos ---"
-msgstr "--- Вибране відео ---"
-
-msgid "--- Female ---"
-msgstr "--- Жіночий ---"
-
-msgid "--- Fetish ---"
-msgstr "--- Фетіш ---"
-
-msgid "--- Girl ---"
-msgstr "--- Дівчина ---"
-
-msgid "--- Highest Rated ---"
-msgstr "--- Найбільший рейтинг ---"
-
-msgid "--- Hits ---"
-msgstr "--- Хіти ---"
-
-msgid "--- Hits ---."
-msgstr "--- Шлягери ---"
-
-msgid "--- Hot_flirt ---"
-msgstr "--- Горячий Флірт ---"
-
-msgid "--- Lastest ---"
-msgstr "--- Останній ---"
-
-msgid "--- Lesbian ---"
-msgstr "--- Лесбіянка ---"
-
-msgid "--- Longest ---"
-msgstr "--- Самий довгий ---"
-
-msgid "--- Male ---"
-msgstr "--- Чоловік ---"
-
-msgid "--- Mature ---"
-msgstr "--- Літній ---"
-
-msgid "--- Most Favored ---"
-msgstr "--- Найбільшого сприяння ---"
-
-msgid "--- Most Popular ---"
-msgstr "--- Самий популярний ---"
-
-msgid "--- Most Recent ---"
-msgstr "--- Саме нове ---"
-
-msgid "--- Most Viewed ---"
-msgstr "--- Найбільше переглянуті ---"
-
-msgid "--- Most Viewedo ---"
-msgstr "--- Найбільше переглядають ---"
-
-msgid "--- Most viewed ---"
-msgstr "--- Найбільше переглянуті ---"
-
-msgid "--- New ---"
-msgstr "--- Новий ---"
-
-msgid "--- New Videos ---"
-msgstr "--- Нові Відео ---"
-
-msgid "--- Newest ---"
-msgstr "--- Новітній ---"
-
-msgid "--- On Air ---"
-msgstr "--- В етері ---"
-
-msgid "--- Popular ---"
-msgstr "--- Популярний ---"
-
-msgid "--- Soul_mate ---"
-msgstr "--- Рідна душа ---"
-
-msgid "--- Transgender ---"
-msgstr "--- Трансгендер ---"
-
-msgid "--- Transsexual ---"
-msgstr "--- Транссексуал ---"
-
-msgid "--- boy ---"
-msgstr "--- Хлопчик ---"
-
-msgid "--- gay ---"
-msgstr "--- Гей ---"
-
-msgid "----------------- External exteplayer3 options -----------------"
-msgstr "----------------- Зовнішні опції exteplayer3 -----------------"
-
-msgid "----------Other----------"
-msgstr "----------Інше----------"
-
-msgid "---Search"
-msgstr "---Пошук"
-
-msgid "---Search History"
-msgstr "---Історія пошуку"
-
-msgid "---UPDATE---"
-msgstr "---ОНОВИТИ---"
-
-msgid "--All--"
-msgstr "--Все--"
-
-msgid "--Other--"
-msgstr "--Інший-"
-
-msgid "..............."
-msgstr "..............."
-
-msgid "24 h"
-msgstr "24 г"
-
-msgid ":for"
-msgstr "Для"
-
-msgid "> Press OK to start <"
-msgstr "> Натисніть кнопку OK, щоб розпочати <"
-
-msgid "AAC mix mode"
-msgstr "Вибір режиму AAC"
-
-msgid "ABORTED"
-msgstr "ПЕРЕРВАНО"
-
-msgid "AC3 mix mode"
-msgstr "Вибір режиму AC3"
-
-msgid "ARTICLE"
-msgstr "СТАТТЯ"
-
-msgid "AUDIO"
-msgstr "АУДІО"
-
-msgid "Aborted"
-msgstr "Перервано"
-
-msgid "Access status: "
-msgstr "Статус доступу: "
-
-msgid "Access status: [%r]"
-msgstr "Статус доступу: [%r]"
-
-msgid "Action RPG"
-msgstr "Дія RPG"
-
-msgid "Add item to favourites"
-msgstr "Додати до вибраного"
-
-msgid "Add item to group"
-msgstr "Добавити в групу"
-
-msgid "Add new group"
-msgstr "Добавити нову групу"
-
-msgid "Add new group of favourites"
-msgstr "Добавити нову групу вибраного"
-
-msgid "Added date"
-msgstr "Додана дата"
-
-msgid "Age viewer:"
-msgstr "Вік перегляду:"
-
-msgid "Albums"
-msgstr "Альбоми"
-
-msgid "All"
-msgstr "Все"
-
-msgid "All Leagues"
-msgstr "Всі Ліги"
-
-msgid "All TV shows"
-msgstr "Все ТВ-шоу"
-
-msgid "All in one"
-msgstr "Всі файли без поділу на категорії"
-
-msgid "All movies"
-msgstr "Всі фільми"
-
-msgid "All programs in the Live Stream"
-msgstr "Всі програми в Live Stream"
-
-msgid "Allow dash format:"
-msgstr "Дозволити формат різних типів:"
-
-msgid "Allow downgrade"
-msgstr "Дозволити зниження при оновленні"
-
-msgid "Allow hls format"
-msgstr "Дозволити формат hls"
-
-msgid "Alphabetically"
-msgstr "В алфавітному порядку"
-
-msgid "Alternative geolocation IP 1:"
-msgstr "Альтернативна геолокація IP 1:"
-
-msgid "Alternative geolocation IP 2:"
-msgstr "Альтернативна геолокація IP 2:"
-
-msgid ""
-"An error occurred when try to sign in the user \"%s.\n"
-"Please check your login credentials and try again later...\""
-msgstr ""
-"Виникла помилка при спробі зайти в користувача \"%s.\n"
-"Будь-ласка, перевірте ваші облікові дані і спробуйте ще раз пізніше...\""
-
-msgid "An error occurred while loading a subtitle from [%s]."
-msgstr "Виникла помилка при завантаженні субтитрів з [%s]."
-
-msgid "An unknown error has occurred."
-msgstr "Виникла невідома помилка."
-
-msgid "Animation [dubbing]"
-msgstr "Анімація [перезапис]"
-
-msgid "Animation [subtitles]"
-msgstr "Анімація [субтитри]"
-
-msgid "Anime Issued"
-msgstr "Аніме Виданий"
-
-msgid "Anime List"
-msgstr "Аніме Список"
-
-msgid "Anuluj"
-msgstr "Відмінити"
-
-msgid "Apply"
-msgstr "Застосувати"
-
-msgid "Arab"
-msgstr "Арабський"
-
-msgid "Archive"
-msgstr "Архів"
-
-msgid "Are you sure you want to remove file \"%s\"?"
-msgstr "Ви впевненні, що бажаєте видалити файл \"%s\"?"
-
-msgid "Argentina"
-msgstr "Аргентина"
-
-msgid "Aspect"
-msgstr "Аспект"
-
-msgid "Audience zone"
-msgstr "Приймальня"
-
-msgid "Audio"
-msgstr "Аудіо"
-
-msgid "Australia"
-msgstr "Австралія"
-
-msgid "Austria"
-msgstr "Австрія"
-
-msgid "Auto"
-msgstr "Автоматично"
-
-msgid "Auto check for plugin update"
-msgstr "Автоматична перевірка оновлень плагіна"
-
-msgid "Auto selection based on the settings"
-msgstr "Автовибір на основі налаштувань"
-
-msgid "Automotive , accidents"
-msgstr "Автомобільні аварії"
-
-msgid "Autoplay start delay"
-msgstr "Автозапуск затримки пуску"
-
-msgid "Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg"
-msgstr ""
-"Автори: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg "
-
-msgid ""
-"Autors: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, "
-"tomashj291"
-msgstr ""
-"Автори: samsamsam, zdzislaw22, mamrot, MarcinO, skalita, huball, matzg, "
-"tomashj291"
-
-msgid "Average"
-msgstr "В середньому"
-
-msgid "Belgian"
-msgstr "Бельгійський"
-
-msgid "Belgium"
-msgstr "Бельгія"
-
-msgid "Best"
-msgstr "Найкраща"
-
-msgid "Best rating"
-msgstr "Кращий рейтинг"
-
-msgid "Black"
-msgstr "Чорний"
-
-msgid "Block wmv files"
-msgstr "Блокувати WMV файли"
-
-msgid "Brazil"
-msgstr "Бразилія"
-
-msgid "Broadcasts"
-msgstr "Трансляції"
-
-msgid "Browse"
-msgstr "Дивитись"
-
-msgid "Browse Channels"
-msgstr "Перегляд каналів"
-
-msgid "Buffer path"
-msgstr "Буфер шлях"
-
-msgid "By Year"
-msgstr "По рокам"
-
-msgid "By default, sort by:"
-msgstr "По замовчуванню, сортувати за:"
-
-msgid "CATEGORY"
-msgstr "КАТЕГОРІЇ"
-
-msgid "CHANGES IN VERSION"
-msgstr "Зміни в версії"
-
-msgid "Cams"
-msgstr "Веб-кам"
-
-msgid ""
-"Can not get mount points - cmd mount failed.\n"
-"Return code[%s].\n"
-"Return data[%s]."
-msgstr ""
-"Неможливо отримати точки монтування - cmd монтування невдале.\n"
-"Код повернення[%s].\n"
-"Повернення даних[%s]."
-
-msgid "Canada"
-msgstr "Канада"
-
-msgid "Cancel"
-msgstr "Відмінити"
-
-msgid "Cannot find player content"
-msgstr "Не можливо знайти зміст плеєра"
-
-msgid "Categories"
-msgstr "Категорії"
-
-msgid "Categories films"
-msgstr "Категорії фільмів"
-
-msgid "Categorization:"
-msgstr "Категоризації:"
-
-msgid "Category"
-msgstr "Категорія"
-
-msgid "Catrtoon list"
-msgstr "Список мультфільмів"
-
-msgid "Ceska"
-msgstr "Чеський"
-
-msgid "Change active movie player"
-msgstr "Вибір активного відеоплеєра"
-
-msgid "Channel"
-msgstr "Канал"
-
-msgid "Channels"
-msgstr "Канали"
-
-msgid "Checking version."
-msgstr "Перевірка версії."
-
-msgid "China"
-msgstr "Китай"
-
-msgid "Cinema movies"
-msgstr "Кінофільми"
-
-msgid "Clear iframe file"
-msgstr "Очистити розташування заставки"
-
-msgid "Collection"
-msgstr "Колекція"
-
-msgid "Comedies"
-msgstr "Комедії"
-
-msgid "Coming Soon"
-msgstr "Скоро"
-
-msgid "Comment count"
-msgstr "Кількість коментарів"
-
-msgid "Completed."
-msgstr "Завершено."
-
-msgid "Completed.\n"
-msgstr "Завершено.\n"
-
-msgid "Configuration"
-msgstr "Конфігурація"
-
-msgid "Configuration for service[%s]"
-msgstr "Конфігурація служби[%s]"
-
-msgid "Configure IPTV Player"
-msgstr "Налаштування IPTV-Плеєра"
-
-msgid "Configure host"
-msgstr "Налаштування хостинга"
-
-msgid "Configuring an external movie player"
-msgstr "Налаштування зовнішнього відеоплеєра"
-
-msgid "Confirm new pin"
-msgstr "Підтвердіть новий PIN-код"
-
-msgid "Confirm title of the movie"
-msgstr "Підтвердіть назву фільму"
-
-msgid "Confirmation error."
-msgstr "Помилка при вводі."
-
-msgid "Confirmation of installation."
-msgstr "Підтвердження встановлення."
-
-msgid "Connection type:"
-msgstr "Тип з'єднання:"
-
-msgid "Continue downloading"
-msgstr "Продовжити завантаження"
-
-msgid "Copy"
-msgstr "Копіювати"
-
-msgid ""
-"Could not read from resource.\n"
-"code: %r"
-msgstr ""
-"Не вдалося прочитати з ресурсу.\n"
-"код: %r"
-
-msgid ""
-"Could not read from resource.\n"
-"code: %s"
-msgstr ""
-"Не вдалося прочитати з ресурсу.\n"
-"код: %s"
-
-msgid "Countries"
-msgstr "Країни"
-
-msgid "Country (changing may be illegal in your country)"
-msgstr "Країна (поміняти,цей параметр може бути поза законом в вашій країні)"
-
-msgid "Create Date"
-msgstr "Дата створення"
-
-msgid "Currently you have version [%s]."
-msgstr "В даний час у вас версія [%s]."
-
-msgid "Cut"
-msgstr "Перемістити"
-
-msgid "Czech Republic"
-msgstr "Чеська Республіка"
-
-msgid "DATE"
-msgstr "ДАТА"
-
-msgid "DEFAULT"
-msgstr "ПО ЗАМОВЧУВАННЮ"
-
-msgid "DOWNLOAD ERROR"
-msgstr "ПОМИЛКА ЗАВАНТАЖЕННЯ"
-
-msgid "DOWNLOADED"
-msgstr "ЗАВАНТАЖЕНІ"
-
-msgid "DOWNLOADING"
-msgstr "ЗАВАНТАЖЕННЯ"
-
-msgid "Daily"
-msgstr "Щоденно"
-
-msgid "Darkgray"
-msgstr "Темно-сірий"
-
-msgid "Debug logs"
-msgstr "Включити журнал діагностики"
-
-msgid "Default second video policy"
-msgstr "Відео співвідношення сторін по замовчуванню (второе)"
-
-msgid "Default video aspect ratio"
-msgstr "Відео пропорції по замовчуванню"
-
-msgid "Default video policy"
-msgstr "Відео співвідношення сторін по замовчуванню"
-
-msgid "Default video quality"
-msgstr "По замовчуванню якість відео"
-
-msgid "Default video quality:"
-msgstr "Формат відео-по замовчуванню:"
-
-msgid "Description:"
-msgstr "Опис:"
-
-msgid "Detection of the \"%s\" utility."
-msgstr "Засоби виявлення \"%s\" утіліта."
-
-msgid "Detection of the OpenSSL version."
-msgstr "Виявлення версії OpenSSL."
-
-msgid "Detection of the ffmpeg version."
-msgstr "Виявлення FFmpeg версії."
-
-msgid "Detection of the gstreamer version."
-msgstr "Виявлення GStreamer версії."
-
-msgid "Detection of the platform."
-msgstr "Виявлення платформи."
-
-msgid "Deutsch"
-msgstr "Німецький"
-
-msgid "Developers: "
-msgstr "Розробники: "
-
-msgid "Device ID"
-msgstr "ID пристрої"
-
-msgid "Disable host protection (error == GS)"
-msgstr "Відключити батьківський захист (помилка == GS)"
-
-msgid "Disable live at plugin start"
-msgstr "Відключити, перейти на початок плагіна"
-
-msgid "Disable reordering mode"
-msgstr "Відключити режим перепризначення"
-
-msgid "Display order:"
-msgstr "Показати замовлення:"
-
-msgid "Display thumbnails"
-msgstr "Показати мініатюри"
-
-msgid "Do not install (not recommended)"
-msgstr "Не встановлюйте (не рекомендуєтся)"
-
-msgid "Documents"
-msgstr "Документи"
-
-msgid "Download again"
-msgstr "Завантажити ще раз"
-
-msgid ""
-"Download can not be started.\n"
-" Incorrect address ('%r')."
-msgstr ""
-"Завантаження не може розпочатися.\n"
-" Неправильний адрес ('%r')."
-
-msgid ""
-"Download can not be started.\n"
-"Downloader %s not working correctly.\n"
-"Status[%s]"
-msgstr ""
-"Завантаження не може розпочатися.\n"
-"Завантажувач %s працює неправильно.\n"
-"Статус[%s]"
-
-msgid ""
-"Download failed.\n"
-"Status[%s]"
-msgstr ""
-"Помилка завантаження.\n"
-"Статус[%s]"
-
-msgid "Download subtitle \"%s\""
-msgstr "Завантажити субтитри \"%s\""
-
-msgid "Download subtitle %s"
-msgstr "Завантажити субтитри %s"
-
-msgid "Download suggested"
-msgstr "Можна завантажувати"
-
-msgid "Downloading"
-msgstr "Завантаження"
-
-msgid "Downloading \"%s\""
-msgstr "Завантаження  \"%s\""
-
-msgid ""
-"Downloading \"%s\" failed. \n"
-"Do you want to retry?"
-msgstr ""
-"Завантаження \"%s\" не вдалося. \n"
-"Ви бажаєте, спробувати ще раз?"
-
-msgid "Downloading an update packet."
-msgstr "Завантаження пакета оновлення."
-
-msgid ""
-"Downloading can not be started.\n"
-" Downloader %s does not work properly.\n"
-"Status[%s]"
-msgstr ""
-"Завантаження не може розпочатися.\n"
-" Завантажувач %s не працює відповідно.\n"
-"Статус[%s]"
-
-msgid ""
-"Downloading can not be started.\n"
-" Downloader %s not working properly.\n"
-"Status[%s]"
-msgstr ""
-"Завантаження не може розпочатися.\n"
-" Завантажувач %s не працює відповідно.\n"
-"Статус[%s]"
-
-msgid ""
-"Downloading can not be started.\n"
-" The address ('%r') It is incorrect."
-msgstr ""
-"Завантаження не може розпочатися.\n"
-" Адрес ('%r') це невірно."
-
-msgid ""
-"Downloading can not be started.\n"
-" The address ('%r') is incorrect."
-msgstr ""
-"Завантаження не може розпочатися.\n"
-" Адрес ('%r') невірний."
-
-msgid ""
-"Downloading cannot be started.\n"
-" Downloader [%s] not working properly.\n"
-" Status[%s]"
-msgstr ""
-"Завантаження неможливе.\n"
-"Завантажувач [%s] не працює відповідно.\n"
-"Статус[%s]"
-
-msgid ""
-"Downloading cannot be started.\n"
-" Invalid URI[%s]."
-msgstr ""
-"Завантаження неможливе.\n"
-" Невірний адрес [%s]."
-
-msgid "Downloading file [%s] problem."
-msgstr "Проблема з завантаженням файлу [%s]."
-
-msgid ""
-"Downloading subtitles.\n"
-" ('%r')."
-msgstr ""
-"Завантаження субтитрів.\n"
-" ('%r')."
-
-msgid "Downloads"
-msgstr "Завантажити"
-
-msgid "Drama Series"
-msgstr "Серіал"
-
-msgid "During processing, please do not interrupt."
-msgstr "Під час обробки, будь-ласка, не переривайте."
-
-msgid "During processing, please wait."
-msgstr "Йде обробка, будь-ласка, зачекайте."
-
-msgid ""
-"E2 GUI restart after IPTVPlayer update to version[%s].\n"
-"\n"
-msgstr ""
-"Перезавантажити eнігму після оновлення IPTV Плеєра до версії[%s].\n"
-"\n"
-
-msgid "ERROR"
-msgstr "ПОМИЛКА"
-
-msgid "ERROR - Error downloading: "
-msgstr "ПОМИЛКА - помилка завантаження: "
-
-msgid "ERROR - Error unpacking %s' % source"
-msgstr "ПОМИЛКА - помилка розпаковки %s' % джерело"
-
-msgid "ERROR - Error unpacking /tmp/iptv-host-xxx.tar.gz"
-msgstr "ПОМИЛКА - помилка розпаковки /tmp/iptv-host-xxx.tar.gz"
-
-msgid "ERROR - Invalid file format /tmp/iptv-host-xxx.tar.gz"
-msgstr "ПОМИЛКА - невірний формат файла /tmp/iptv-host-xxx.tar.gz"
-
-msgid "ERROR - copy error"
-msgstr "ПОМИЛКА - помилка копіювання"
-
-msgid ""
-"ERROR: pipeline could not be constructed: no element \"playbin2\" \n"
-"Please check if gstreamer plugins are available in your system."
-msgstr ""
-"ПОМИЛКА: Не вдалося створити:, відсутність контролю: відсутність елементу "
-"\"playbin2 \" \n"
-"Перевірте встанолення GStreamer плагіни в вашій системі."
-
-msgid "Edit favourites"
-msgstr "Редагувати вибране"
-
-msgid "Editorial"
-msgstr "Редакційний"
-
-msgid "Ekstraklasa use a proxy?"
-msgstr "Використовуйте проксі-сервер екстракласса?"
-
-msgid "Email"
-msgstr "Ел. адрес"
-
-msgid "Enable reordering mode"
-msgstr "Включити режим перепризначення"
-
-msgid "English"
-msgstr "Англійський"
-
-msgid "Enter a value"
-msgstr "Введіть значення"
-
-msgid "Enter data into your account (blue key)."
-msgstr "Введіть дані в свій аккаунт (ключ)."
-
-msgid "Enter name"
-msgstr "Введіть код"
-
-msgid "Enter new pin"
-msgstr "Введіть новий PIN-код"
-
-msgid "Enter old pin"
-msgstr "Введіть старий PIN-код"
-
-msgid "Enter pin"
-msgstr "Введіть PIN-код"
-
-msgid "Entertainment"
-msgstr "Розважальна програма"
-
-msgid "Episodes"
-msgstr "Епізоди"
-
-msgid "Error deleting file \"%s\" .\n"
-msgstr "Помилка видалення файлів \"%s\" .\n"
-
-msgid "Error occurs during download."
-msgstr "Помилка завантаження."
-
-msgid ""
-"Error occurs during download. \n"
-"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
-msgstr ""
-"Помилка завантаження. \n"
-"Статус[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
-
-msgid ""
-"Error occurs.\n"
-"[%s]"
-msgstr ""
-"Виникла помилка.\n"
-"[%s]"
-
-msgid "Error reading file \"%s\" .\n"
-msgstr "Помилка читання файлу \"%s\" .\n"
-
-msgid "Error writing file \"%s\" .\n"
-msgstr "Помилка запису файлу \"%s\" .\n"
-
-msgid "Executing user scripts."
-msgstr "Запуск скриптів користувача."
-
-msgid "Exit"
-msgstr "Вихід"
-
-msgid "Explore"
-msgstr "Досліджувати"
-
-msgid "External movie player config"
-msgstr "Зовнішній плеєр конфігурація"
-
-msgid "External player infobar timeout"
-msgstr "Встановити тайм-аут інфопанелі плеєра"
-
-msgid "External player use software decoder for the AAC"
-msgstr "Застосовувати зовнішній декодер для AAC"
-
-msgid "External player use software decoder for the DTS"
-msgstr "Застосовувати зовнішній декодер для DTS"
-
-msgid "External player use software decoder for the WMA"
-msgstr "Застосувати зовнішній декодер для WMA"
-
-msgid "Extra"
-msgstr "Додатковий"
-
-msgid "Extracting an update packet."
-msgstr "Вилучення пакета оновлення."
-
-msgid "FHD: very high"
-msgstr "FHD: Дуже висока"
-
-msgid "Favorite addresses are stored under the file urllist.user"
-msgstr "Вибране. Посилання зберігаються в файлі urllist.user"
-
-msgid "Favorites"
-msgstr "Вибране"
-
-msgid "Favourites groups"
-msgstr "Група Вибране"
-
-msgid "Favourites manager"
-msgstr "Менеджер вибраного"
-
-msgid "Feature Potential Items"
-msgstr "Характеристика Можливих Товарів"
-
-msgid "Featured"
-msgstr "Рекомендовані"
-
-msgid "Featured videos"
-msgstr "Відбірне відео"
-
-msgid "File \"%s\" already exists!"
-msgstr "Файл \"%s\" вже існує!"
-
-msgid "File Location xxxlist.txt :"
-msgstr "Розміщення файлу xxxlist.txt :"
-
-msgid "File [%s] reading failed."
-msgstr "Проблема читання файлу [%s]."
-
-msgid "File [%s] was added to downloading queue."
-msgstr "Файл [%s] файл додано до завантаження."
-
-msgid "File can not be downloaded. Protocol [%s] is unsupported"
-msgstr "Файл не можливо завантажити. Протокол [%s] не підтримується"
-
-msgid "Films"
-msgstr "Фільми"
-
-msgid "Films Extremal"
-msgstr "Фільми Екстремальні"
-
-msgid "Filmy"
-msgstr "Фільми"
-
-msgid "First movie player in buffering mode"
-msgstr "Вибрати перший крок плеєра в режимі (буферизації)"
-
-msgid "First movie player without buffering mode"
-msgstr "Вибрати перший крок плеєра"
-
-msgid "Fluendo mpegdemux for GSTREAMER 0.10"
-msgstr "Зробити даний mpegdemux для GSTREAMER 0.10"
-
-msgid "Folder for cache data"
-msgstr "Папка даних кеша"
-
-msgid "Folder for temp data"
-msgstr "Папка тимчасових даних"
-
-msgid "Folder for temporary data"
-msgstr "Папка для тимчасових даних"
-
-msgid "Folder start"
-msgstr "Початкова папка"
-
-msgid "Following"
-msgstr "Після"
-
-msgid "Following host are broken or additional python modules are needed."
-msgstr "Хост не працює, або немає додаткових модулів Python."
-
-msgid "For children"
-msgstr "Для дітей"
-
-msgid "Format 'wmv' blocked in configuration."
-msgstr "Формат 'wmv' заблокованний в конфігурації."
-
-msgid "France"
-msgstr "Франція"
-
-msgid "French"
-msgstr "Франція"
-
-msgid "From E2 settings"
-msgstr "Налаштування E2"
-
-msgid "GST-IFDSRC for GSTREAMER 1.X"
-msgstr "GST-IFDSRC для GSTREAMER 1.X"
-
-msgid "Games"
-msgstr "Ігри"
-
-msgid "Gateway queue"
-msgstr "Черговий шлюз"
-
-msgid "Genres"
-msgstr "Жанри"
-
-msgid "Geolocation IP:"
-msgstr "Географічне положення IP:"
-
-msgid "German"
-msgstr "Німеччина"
-
-msgid "German channles"
-msgstr "Німецькі канали"
-
-msgid "German proxy server url"
-msgstr "Німецький проксі-сервер гіперпосилання"
-
-msgid "Germany"
-msgstr "Німеччина"
-
-msgid "Get EPG"
-msgstr "Отримати EPG"
-
-msgid "Get episodes list."
-msgstr "Отримати список епізодів."
-
-msgid "Get item type."
-msgstr "Отримати тип елемента."
-
-msgid "Get supported languages list."
-msgstr "Відкрити список мов."
-
-msgid "Global"
-msgstr "Загальний"
-
-msgid "Goal Of The Month"
-msgstr "Ігри місяця"
-
-msgid "Goals"
-msgstr "Місце призначення"
-
-msgid "Grade"
-msgstr "Клас"
-
-msgid "Graphic services selector"
-msgstr "Селектор Графічних послуг"
-
-msgid "Group \"%s\" already exists."
-msgstr "Група \"%s\" вже існує."
-
-msgid "Group %d"
-msgstr "Група %d"
-
-msgid "Group links into categories: "
-msgstr "Група, посиланя по категоріям: "
-
-msgid "Group with id[%s] not found."
-msgstr "Група з ідентифікатором[%s] не знайдена."
-
-msgid "HD Movies"
-msgstr "HD Фільми"
-
-msgid "HD: high"
-msgstr "HD: Висока"
-
-msgid "HIGH"
-msgstr "ВИСОКИЙ"
-
-msgid "Harbinger"
-msgstr "Провісник"
-
-msgid "Hide Video in the list above the age of the viewer:"
-msgstr "Приховати відео в списку вище віку глядача:"
-
-msgid "High (or HD)"
-msgstr "Високий (або HD)"
-
-msgid "Highest Rated"
-msgstr "Найвищий рейтинг"
-
-msgid "History"
-msgstr "Історія"
-
-msgid "History of searched phrases."
-msgstr "Історія пошуку."
-
-msgid "Home page"
-msgstr "Головна сторінка"
-
-msgid "Homepage"
-msgstr "Домашня сторінка"
-
-msgid "Hosting: %s, %s"
-msgstr "Хостинг: %s, %s"
-
-msgid "IPTV - Player mode"
-msgstr "IPTV - Режим Плеєра"
-
-msgid "IPTV - the recorder mode"
-msgstr "IPTV - Режим запису"
-
-msgid "IPTV Player"
-msgstr "IPTV Плеєр"
-
-msgid "IPTV Player "
-msgstr "IPTV Плеєр "
-
-msgid "IPTV Player %s"
-msgstr "IPTV Плеер %s"
-
-msgid "IPTV Player - settings"
-msgstr "IPTV Плеєр - Налаштування"
-
-msgid "IPTV Player HD version %s"
-msgstr "IPTV Плеєр HD версія %s"
-
-msgid "IPTV Player download manager"
-msgstr "IPTV Плеєр менеджер завантажень"
-
-msgid "IPTV Player version %s"
-msgstr "IPTV Плеєр версія %s"
-
-msgid "IPTV Recordings"
-msgstr "IPTV Записи"
-
-msgid "IPTV download manager"
-msgstr "Менеджер завантажень"
-
-msgid "IPTVPlayer - update"
-msgstr "IPTVПлеєр - Оновлення"
-
-msgid "IPTVPlayer need some additional setup"
-msgstr "IPTV Плеєру потрібні додаткові налаштування"
-
-msgid ""
-"IPTVPlayer need some additional setup.\n"
-"Such as downloading and installation additional binaries.\n"
-"Press OK to start."
-msgstr ""
-"IPTVPlayer потрібні додаткові налаштування. \n"
-"таких, як завантаження і встановлення додаткових модулів двоїчного файлу,"
-"натисніть OK, шоб розпочати."
-
-msgid "IPTVPlayer services configuration"
-msgstr "IPTV-Плеєр конфігурація хосту"
-
-msgid "IPTVPlayer setup version %s"
-msgstr "IPTV Плеєр встановлення версії %s"
-
-msgid "IPTVPlayer setup version %s "
-msgstr "IPTV Плеєр Налаштування версії %s "
-
-msgid "Ibiza Global Radio"
-msgstr "Ibiza Глобальне Радіо"
-
-msgid "Icon type"
-msgstr "Тип іконка"
-
-msgid "Icons size"
-msgstr "Размір іконок"
-
-msgid "Iframe file"
-msgstr "Розташування заставки"
-
-msgid "India"
-msgstr "Індія"
-
-msgid "Indonesia"
-msgstr "Індонезія"
-
-msgid "Info"
-msgstr "Інформація"
-
-msgid "Information"
-msgstr "Інформація"
-
-msgid "Information & journalism"
-msgstr "Інформація і журналістика"
-
-msgid "Information Services"
-msgstr "Інформаційні послуги"
-
-msgid "Information about audio tracks not available."
-msgstr "Інформації про аудіо треки немає."
-
-msgid "Input"
-msgstr "Вхід"
-
-msgid "Install into the \"%s\" ."
-msgstr "Встановіть в \"%s\" ."
-
-msgid "Installation binary failed. Retry?"
-msgstr "Встановлення двоїчного файлу не вдалося. Повторіть?"
-
-msgid "Installation has been aborted."
-msgstr "Встановлення перервано."
-
-msgid "Installation has been confirmed."
-msgstr "Встановлення підтверждено."
-
-msgid "Installing \"%s\" ."
-msgstr "Встановлення \"%s\" ."
-
-msgid "Installing new version."
-msgstr "Встановлення нової версії."
-
-msgid "International"
-msgstr "Міжнародний"
-
-msgid "Invalid name."
-msgstr "Невірний код."
-
-msgid "Iplex use a proxy?"
-msgstr "Iplex використовувати проксі-сервер?"
-
-msgid "Ireland"
-msgstr "Ірландія"
-
-msgid "It improves buffering mode with the gstplayer.\n"
-msgstr "Це покращує режим буферизації с gstplayer.\n"
-
-msgid "It improves playing of streams hls/m3u8.\n"
-msgstr "Це покращує відтворенняе потоків hls/m3u8.\n"
-
-msgid "It seems that the host \"%s\" has crashed."
-msgstr "Схоже, цей хост \"%s\" не працює."
-
-msgid ""
-"It seems that the host \"%s\" has crashed. Do you want to report this "
-"problem?"
-msgstr ""
-"Схоже, у вас \"%s\" виник збій. Ви бажаєте, повідомити про цю проблему?"
-
-msgid ""
-"It seems that the video player \"%s\" does not work properly.\n"
-"\n"
-"STS: %s\n"
-"ERROR CODE: %r"
-msgstr ""
-"Схоже, що відео-плеєр \"%s\" не працює відповідно.\n"
-"\n"
-"STS: %s\n"
-"КОД ПОМИЛКИ: %r"
-
-msgid "Italian"
-msgstr "Італія"
-
-msgid "Italiano"
-msgstr "Італійський"
-
-msgid "Italy"
-msgstr "Італія"
-
-msgid "Item idx[%d] not found in group[%s]."
-msgstr "Пункт idx[%d] не знайдено в групі[%s]."
-
-msgid "Items"
-msgstr "Предмети"
-
-msgid "Items in group"
-msgstr "Місце в групі"
-
-msgid "Items in group \"%s\""
-msgstr "Місце в групі \"%s\""
-
-msgid "JSON module not available!"
-msgstr "Модуль JSON не доступний!"
-
-msgid "Japan"
-msgstr "Японsя"
-
-msgid "Japanese"
-msgstr "Японський"
-
-msgid "Journalism"
-msgstr "Журналістика"
-
-msgid "Junior"
-msgstr "Юнацький"
-
-msgid "Katalog A-Z"
-msgstr "Каталог A-Z"
-
-msgid "Korea"
-msgstr "Корея"
-
-msgid "LAST"
-msgstr "ОСТАННІЙ"
-
-msgid "LATEST VIDEOS"
-msgstr "ОСТАННІ ВІДЕО"
-
-msgid "LUCHA UNDERGROUND"
-msgstr "Підпільна боротьба"
-
-msgid "Labels"
-msgstr "Етикетки"
-
-msgid "Language:"
-msgstr "Мова:"
-
-msgid "Languages"
-msgstr "Мови"
-
-msgid "Last Page"
-msgstr "Остання сторінка"
-
-msgid "Last added"
-msgstr "Послідні добавлення"
-
-msgid "Last checked version"
-msgstr "Кінцева перевірка версії"
-
-msgid "Last error"
-msgstr "Кінцева помилка"
-
-msgid "Last error: \"%s\""
-msgstr "Кінцева помилка: \"%s\""
-
-msgid ""
-"Last error: \"People who live where you live aren't allowed to watch this "
-"video.. Not because we don't luv ya, but because the owners have some "
-"restrictions. The good news, is there are tens of thousands of other videos "
-"to choose from.\""
-msgstr ""
-"Кінцева помилка: \"Люди, які проживають, там де ви, не можуть подивитись це "
-"відео..  Тому що, власники мають обмеження. Добра новина, є десятки тисяч "
-"інших відео на вибір.\""
-
-msgid "Last error: \"Silverlight stream not supported.\""
-msgstr "Кінцева помилка: \"Потік Silverlight не підтримується.\""
-
-msgid ""
-"Last error: \"The Mirror is broken.If available you can choose other source."
-"\""
-msgstr ""
-"Кінцева помилка: \"Відображення немає. При наявності ви можете вибрати інше "
-"джерело.\""
-
-msgid ""
-"Last error: \"Videomega has blocked your IP for some time. Please retry this "
-"link after some time.\""
-msgstr ""
-"Остання помилка: \"Videomega заблокував ваш IP - адресу протягом деякого "
-"часу . Будь ласка , повторіть цеПосилання через якийсь час . \""
-
-msgid "Last error: %s"
-msgstr "Кінцева помилка: %s"
-
-msgid "Lastest"
-msgstr "Послідній"
-
-msgid "Latest"
-msgstr "Послідній"
-
-msgid "Latest TV Episodes"
-msgstr "Послідні ТВ Епізоди"
-
-msgid "Latest Update"
-msgstr "Останні оновлення"
-
-msgid "Latest added"
-msgstr "Щойно добавленні"
-
-msgid "Latest series"
-msgstr "Послідні серії"
-
-msgid "Latest update"
-msgstr "Останні оновлення"
-
-msgid "Latest updates"
-msgstr "Нові оновлення"
-
-msgid "Less viewed"
-msgstr "Менш популярні"
-
-msgid "Life of students"
-msgstr "Життя студентів"
-
-msgid "Lightgray"
-msgstr "Світло-сірий"
-
-msgid "Line Spacing"
-msgstr "Міжрядковий інтервал"
-
-msgid "Link"
-msgstr "Посилання"
-
-msgid "Links are videos and messages, without division into categories"
-msgstr "Посилання відеоролики і повідомлення, без розділу на категорії"
-
-msgid "Links to the video files from the file urllist.txt"
-msgstr "Посилання на відео з файлу urllist.txt"
-
-msgid "List of anime"
-msgstr "Список аніме"
-
-msgid "List of films"
-msgstr "Список фільмів"
-
-msgid "List of movies prepared by Rafalcool1"
-msgstr "Список фільмів, підготовленних Rafalcool1"
-
-msgid "List only channels with subscription"
-msgstr "Список каналів в підписці"
-
-msgid "Live"
-msgstr "На живо"
-
-msgid "Live Channels"
-msgstr "Поточні канали"
-
-msgid "Live broadcasts from the file urllist.stream"
-msgstr "Прямі трансляції з файлу urllist.stream"
-
-msgid "Live-streams"
-msgstr "Прямі-потоки"
-
-msgid "Liveleakers"
-msgstr "Поточні"
-
-msgid "Load"
-msgstr "Завантажити"
-
-msgid "Load automatically the subtitle from file with the same name"
-msgstr "Завантажити субтитри автоматично з файлу з таким самим імям"
-
-msgid "Loading"
-msgstr "Завантаження"
-
-msgid "Loading..."
-msgstr "Завантаження..."
-
-msgid "Local  XXXversion"
-msgstr "Локальна  XXXверсия"
-
-msgid "LocalMedia"
-msgstr "Мої Медіа файли"
-
-msgid "Localization"
-msgstr "Локалізація"
-
-msgid "Login"
-msgstr "Авторизуватися"
-
-msgid "Login failed."
-msgstr "Помилка входу."
-
-msgid "Login user \"%s\" into %s"
-msgstr "Користувач Зайти \"%s\" в %s"
-
-msgid "Login:"
-msgstr "Авторизація:"
-
-msgid "MEDIUM"
-msgstr "СЕРЕДНІЙ"
-
-msgid "MERGE protocol source"
-msgstr "Зєднувати джерело протоколу"
-
-msgid "MOB: low"
-msgstr "MOB: Низький"
-
-msgid "MORE"
-msgstr "БІЛЬШЕ"
-
-msgid "Main"
-msgstr "Головний"
-
-msgid "Main Event"
-msgstr "Головна подія"
-
-msgid "Main developer, architect, coordinator: "
-msgstr "Головний розробник, архітектор, координатор: "
-
-msgid "Make directory [%s]"
-msgstr "Створити каталог [%s]"
-
-msgid "Malaysia"
-msgstr "Малайзія"
-
-msgid "Manager status: "
-msgstr "Статус менеджера: "
-
-msgid "Mangas"
-msgstr "Мангас"
-
-msgid "Max items per page"
-msgstr "Максимальна кількість на сторінці"
-
-msgid "Men"
-msgstr "Люди"
-
-msgid "Mexico"
-msgstr "Мексика"
-
-msgid "Mid"
-msgstr "Середній"
-
-msgid "Miscellaneous"
-msgstr "Різне"
-
-msgid "Missed the show?"
-msgstr "Ви пропускаєте?"
-
-msgid "Month"
-msgstr "Місяць"
-
-msgid "Monthly"
-msgstr "Щомісячно"
-
-msgid "More"
-msgstr "Опції"
-
-msgid "More as next page"
-msgstr "Більше на наступній сторінці"
-
-msgid "More important"
-msgstr "Важливо"
-
-msgid "Morocco"
-msgstr "Марокко"
-
-msgid "Most"
-msgstr "Найбільш"
-
-msgid "Most Favorited"
-msgstr "Самі обрані"
-
-msgid "Most Popular"
-msgstr "Найпопулярніші"
-
-msgid "Most Watched"
-msgstr "Найвище оціненні"
-
-msgid "Most rated"
-msgstr "По рейтингу"
-
-msgid ""
-"Mount ISO file [%s] on [%s] failed.\n"
-"Return code[%s].\n"
-"Return data[%s]."
-msgstr ""
-"Монтувати ISO файл [%s] на [%s] не змогли.\n"
-"Код повернення[%s].\n"
-"Повернення даних[%s]."
-
-msgid "Mounted on %s"
-msgstr "Закріплено до %s"
-
-msgid "Move group"
-msgstr "Пересування групи"
-
-msgid "Move item"
-msgstr "Пересунути пункт"
-
-msgid "Movie"
-msgstr "Фільм"
-
-msgid "Movie \"%s\" has not been found."
-msgstr "Фільм \"%s\" не знайдено."
-
-msgid "Movie categories"
-msgstr "Категорії фільмів"
-
-msgid "Movie player"
-msgstr "Відео плеєр"
-
-msgid "Movie player without buffering mode"
-msgstr "Вибрати плеєр без режиму буферизації"
-
-msgid "Movies"
-msgstr "Кіно"
-
-msgid "Music"
-msgstr "Музика"
-
-msgid "Music-Box"
-msgstr "Збірка-Музика"
-
-msgid "Musik"
-msgstr "Музика"
-
-msgid "Must See"
-msgstr "Повинен подивитись"
-
-msgid "Muzik"
-msgstr "Музика"
-
-msgid "My Favorites"
-msgstr "Мої улюблені"
-
-msgid "Najtrafniejsze"
-msgstr "Нові"
-
-msgid "Name cannot be empty."
-msgstr "Назва не може бути пуста."
-
-msgid "Name hamster (login)"
-msgstr "Імя (логін)"
-
-msgid ""
-"Name is not valid.\n"
-"Please remove special characters."
-msgstr ""
-"Це не вірна назва.\n"
-"Будь-ласка, видаліть спеціальні символи."
-
-msgid "Name:"
-msgstr "Назва:"
-
-msgid "Netherlands"
-msgstr "Нідерланди"
-
-msgid "New HD Videos"
-msgstr "Нові HD Відео"
-
-msgid "New Movies"
-msgstr "Нові фільми"
-
-msgid "New Releases"
-msgstr "Нові релізи"
-
-msgid "New TV Episodes"
-msgstr "Нові ТВ Епізоди"
-
-msgid "New cartoon"
-msgstr "Новий мультфільм"
-
-msgid "New dir"
-msgstr "Новий шлях"
-
-msgid "New episodes"
-msgstr "Нові серії"
-
-msgid "New episodes broadcast"
-msgstr "Нові епізоди трансляції"
-
-msgid "New folder"
-msgstr "Нова папка"
-
-msgid "New icons will not be available."
-msgstr "Нові іконки не будуть доступні."
-
-msgid "Newest added"
-msgstr "Останнім додав"
-
-msgid "Newest year"
-msgstr "Новітній рік"
-
-msgid "News"
-msgstr "Новини"
-
-msgid "Next"
-msgstr "Наступний"
-
-msgid "Next page"
-msgstr "Наступна сторінка"
-
-msgid ""
-"No item to display. \n"
-"Press OK to refresh.\n"
-msgstr ""
-"Нічого не знайдено.\n"
-"Натисніть ОК, щоб оновити.\n"
-
-msgid "No name"
-msgstr "Без імені"
-
-msgid "No steps to execute."
-msgstr "Ніяких дій не виконувати."
-
-msgid "No user scripts."
-msgstr "Немає користувацьких скриптів."
-
-msgid "No valid links available."
-msgstr "Немає працюючих посилань."
-
-msgid ""
-"No valid links available. Last error: \"The Mirror is broken. If available "
-"you can choose other source.\""
-msgstr ""
-"Немає працюючих посилань. Кінцева помилка: \"Відтворення немає. При "
-"наявності, ви можете вибрати інше джерело.\""
-
-msgid "None"
-msgstr "ні"
-
-msgid "Now playing"
-msgstr "Зараз в програмі"
-
-msgid "Number of downloaded files simultaneously"
-msgstr "Кількість завантажених файлів одночасно"
-
-msgid "Number of songs fetched at once for the station"
-msgstr "Кількість пісень, знайдених під час відвідування станцій"
-
-msgid "Obtaining server list."
-msgstr "Отримання списку серверів."
-
-msgid "Odśwież"
-msgstr "Оновлення"
-
-msgid "Offline channels"
-msgstr "Оффлайн канали"
-
-msgid "Oldest added"
-msgstr "Додав починаючи зі старих"
-
-msgid "Oldest year"
-msgstr "Починаючи рік зі старих "
-
-msgid "One link mode"
-msgstr "Режим Одно посилання"
-
-msgid "OpenSSL lib is needed by wget and rtmpdump utilities."
-msgstr "OpenSSL потрібно для правильнї роботи Wget інструменту і rtmpdump."
-
-msgid "Operation aborted!"
-msgstr "Операція перервана!"
-
-msgid "Operation aborted! "
-msgstr "Операція перервана! "
-
-msgid "Other videos"
-msgstr "Інші відео"
-
-msgid "Others"
-msgstr "Інші"
-
-msgid "PC"
-msgstr "ПК"
-
-msgid "PENDING"
-msgstr "ОЧІКУВАННЯ"
-
-msgid "PICTURE"
-msgstr "ФОТО"
-
-msgid "Page: "
-msgstr "Сторінка: "
-
-msgid "Pakistan"
-msgstr "Пакистан"
-
-msgid "Password for hamster"
-msgstr "Пароль для chomika"
-
-msgid "Password:"
-msgstr "Пароль:"
-
-msgid "Paste \"%s\""
-msgstr "Вставити \"%s\""
-
-msgid "Path to ytlist.txt, urllist.txt"
-msgstr "Шлях до ytlist.txt, urllist.txt"
-
-msgid "Pending"
-msgstr "До"
-
-msgid "Philippines"
-msgstr "Філіппіни"
-
-msgid "Photos"
-msgstr "Фото"
-
-msgid "Pin has been changed."
-msgstr "PIN-код змінено."
-
-msgid "Pin incorrect!"
-msgstr "Pin невірний!"
-
-msgid "Pin protection for configuration"
-msgstr "Захист конфігурації налаштувань пін-кодом"
-
-msgid "Pin protection for plugin"
-msgstr "Захист плагіна пін-кодом"
-
-msgid "Platform"
-msgstr "Платформа"
-
-msgid "Play file"
-msgstr "Відтворення відео"
-
-msgid "Play with [%s] player"
-msgstr "Відтворення запису в [%s]"
-
-msgid "PlayPuls"
-msgstr "PlayPuls"
-
-msgid "PlayPuls use a proxy?"
-msgstr "PlayPuls використати проксі-сервер?"
-
-msgid "Player > Recorder"
-msgstr "Плеєр > Запис"
-
-msgid "Playlist"
-msgstr "Плейлист"
-
-msgid "Playlists"
-msgstr "Плейлисти"
-
-msgid "Please remember that you use the IPTVPlayer plugin at your own risk."
-msgstr ""
-"Будь-ласка, памятайте, що ви використовуєте плагін IPTV Плеєр на свій страх "
-"і ризик."
-
-msgid "Please remember that you use this plugin at your own risk."
-msgstr ""
-"Будь-ласка, памятайте, що ви використовуєте цей плагін на свій страх и ризик."
-
-msgid ""
-"Please visit '%s' from using web-browser form the PC. If links are available "
-"please report this problem.\n"
-"Email: samsamsam@o2.pl"
-msgstr ""
-"Будь ласка , відвідайте '%s' за допомогою веб-браузера вашого ПК . Якщо "
-"посилання доступні Будь ласка , повідомте про цю проблему .\n"
-"E-mail: samsamsam@o2.pl"
-
-msgid ""
-"Plugin can be run on one of the following platforms: sh4, mipsel, i686, "
-"armv7."
-msgstr ""
-"Плагін може працювати на одній з наступних платформ: sh4, mipsel, i686, "
-"armv7."
-
-msgid "Pol'skiy"
-msgstr "Польський"
-
-msgid "Poland"
-msgstr "Польща"
-
-msgid "Policy"
-msgstr "Співвідношення сторін"
-
-msgid "Policy2"
-msgstr "Співвідношення сторін2"
-
-msgid "Polish channles"
-msgstr "Польські канали"
-
-msgid "Polish proxy server url"
-msgstr "Польський проксі-сервер гіперпосилання"
-
-msgid "Popular"
-msgstr "Популярний"
-
-msgid "Popular Artists"
-msgstr "Популярні виконавці"
-
-msgid "Popular movies"
-msgstr "Популярні фільми"
-
-msgid "Popularity"
-msgstr "Популярне"
-
-msgid "Portal:"
-msgstr "Портал:"
-
-msgid "Portugal"
-msgstr "Португалія"
-
-msgid "Português"
-msgstr "Португальський"
-
-msgid "Prefered format"
-msgstr "Переважаючий формат"
-
-msgid "Prefered quality"
-msgstr "Переважаюча якість"
-
-msgid "Preferred protocol:"
-msgstr "Виберіть протокол:"
-
-msgid "Preferred quality"
-msgstr "Переважаюча якість"
-
-msgid "Preferred streaming protocol"
-msgstr "Переважаючий протокол потокової передачі"
-
-msgid "Preferred streaming protocol' + ': "
-msgstr "Переважаючий протокол потокової передачі' + ': "
-
-msgid "Preferred video quality:"
-msgstr "Вибір якості відео:"
-
-msgid "Premium user"
-msgstr "Преміум користувач"
-
-msgid "Press OK to start"
-msgstr "Натисніть OK щоб розпочати"
-
-msgid "Previous"
-msgstr "Попередній"
-
-msgid "Previous Seasons"
-msgstr "Попередні сезони"
-
-msgid "Problem with downloading the server list from [%s]."
-msgstr "Проблема з завантаженням списку серверів від [%s]."
-
-msgid "Problem with downloading the server list."
-msgstr "Проблема з завантаженням списку серверів."
-
-msgid ""
-"Problem with downloading the update packet:\n"
-"[%s]."
-msgstr "Проблема з завантаженням пакета оновлення:\n"
-"[%s]."
-
-msgid ""
-"Problem with extracting the archive. Return code [%d]\n"
-"%s."
-msgstr ""
-"Проблема з разпаковкою архіва. Код повернення [%d]\n"
-"%s."
-
-msgid ""
-"Problem with installing the new version.\n"
-"Status[%d], outData[%s]"
-msgstr ""
-"Проблема зі встановленням нової версії.\n"
-"Статус[%d], OutData[%s]"
-
-msgid "Problem with the directory [%s]."
-msgstr "Проблема з каталогом [%s]."
-
-msgid ""
-"Problem with the removal of the previous version.\n"
-"Status[%d], outData[%s]."
-msgstr ""
-"Проблема з видаленням попередньої версії.\n"
-"Статус[%d], OutData[%s]."
-
-msgid "Problem with user script execution [%s]."
-msgstr "Проблема з виконання скриптів користувача [%s]."
-
-msgid "Profile"
-msgstr "Профіль"
-
-msgid "Program A-Z"
-msgstr "Програма A-Z"
-
-msgid "Programs"
-msgstr "Програми"
-
-msgid "Promote item"
-msgstr "Переставити на початок списку"
-
-msgid "Promoted"
-msgstr "Підвищено"
-
-msgid "Promoted channels"
-msgstr "Популярні канали"
-
-msgid "Promoted games"
-msgstr "Популярні ігри"
-
-msgid "Protocol: "
-msgstr "Протокол: "
-
-msgid "Proxy server url"
-msgstr "Проксі-сервер гіперпосилання"
-
-msgid "Quality"
-msgstr "Якісний"
-
-msgid "Quarter"
-msgstr "Чверть"
-
-msgid "Radio stations"
-msgstr "Радіостанції"
-
-msgid "Random"
-msgstr "Випадковий"
-
-msgid "Randomize a playlist"
-msgstr "Перемістити плейлист"
-
-msgid "Ranking"
-msgstr "Знаходження"
-
-msgid "Rating"
-msgstr "Рейтинг"
-
-msgid "Raw"
-msgstr "Неопрацьованний"
-
-msgid "Recent"
-msgstr "Минулий"
-
-msgid "Recent Items (All)"
-msgstr "Послідні товари (Все)"
-
-msgid "Recent Items (Popular)"
-msgstr "Послідні товари (Популярний)"
-
-msgid "Recently Added"
-msgstr "Недавно доданий"
-
-msgid "Recently added episodes from previous seasons"
-msgstr "Недавно добавлені епізоди з минулих сезонів"
-
-msgid "Recommended"
-msgstr "Рекомендовані"
-
-msgid "Recommended by Rafalcool1"
-msgstr "Рекомендується Rafalcool1"
-
-msgid "Recorder > Player"
-msgstr "Запис > Плеєр"
-
-msgid "Records path"
-msgstr "Місцезнаходження запису"
-
-msgid "Refresh"
-msgstr "Оновлення"
-
-msgid "Refreshing"
-msgstr "Оновлюється"
-
-msgid "Regular"
-msgstr "Постійний"
-
-msgid "Releases"
-msgstr "Релізи"
-
-msgid "Relevance"
-msgstr "Актуальний"
-
-msgid "Remember last watched position"
-msgstr "Запамятати минуле місце відтворення"
-
-msgid "Remote XXXversion"
-msgstr "Дистанційна XXXверсія"
-
-msgid "Remove"
-msgstr "Видалити"
-
-msgid "Remove disabled services"
-msgstr "Видалити сервіси які не працюють"
-
-msgid "Remove file"
-msgstr "Видалити файл"
-
-msgid "Remove group"
-msgstr "Видалити групу"
-
-msgid "Remove item"
-msgstr "Видалити елементи"
-
-msgid "Removing the old version."
-msgstr "Видалення старої версії."
-
-msgid "Removing unnecessary files."
-msgstr "Видалення непотрібних файлів."
-
-msgid "Rename"
-msgstr "Перейменувати"
-
-msgid "Request token from \"%s\""
-msgstr "Символ запиту від \"%s\""
-
-msgid "Request token from %s"
-msgstr "Символ запиту від %s"
-
-msgid "Require pin:"
-msgstr "Запитувати PIN-код:"
-
-msgid ""
-"Restart GUI failed. \n"
-"Please restart STB manually."
-msgstr ""
-"Перезапустити інтерфейс не вдалося. \n"
-"Будь-ласка, перезавантажте тюнер вручну."
-
-msgid "Romania"
-msgstr "Румунія"
-
-msgid "Russia"
-msgstr "Росія"
-
-msgid "Russian proxy server url"
-msgstr "Російський проксі-сервер url"
-
-msgid "SD: standard"
-msgstr "SD: Стандарт"
-
-msgid "SEARCH"
-msgstr "ПОШУК"
-
-msgid "SHOW REPLAY"
-msgstr "ГРАТИ ШОУ"
-
-msgid "SMACKDOWN"
-msgstr "СКИНУТИ"
-
-msgid "SORT"
-msgstr "СОРТУВАТИ"
-
-msgid "STARTED"
-msgstr "ОПЕРАЦІЇ"
-
-msgid "STOPPED"
-msgstr "ЗУПИНКА"
-
-msgid "Save changes?"
-msgstr "Зберегти зміни?"
-
-msgid "Schweiz"
-msgstr "Швеція"
-
-msgid "Search"
-msgstr "Пошук"
-
-msgid "Search "
-msgstr "Пошук "
-
-msgid "Search History"
-msgstr "Історія пошуку"
-
-msgid "Search for movie \"%s\""
-msgstr "Пошук фільму \"%s\""
-
-msgid "Search for subitile for \"%s\""
-msgstr "Пошук субтитрів для \"%s\""
-
-msgid "Search for subitile for %s"
-msgstr "Пошук субтитрів для %s"
-
-msgid "Search history"
-msgstr "Історія пошуку"
-
-msgid "Search movies"
-msgstr "Пошук фільмів"
-
-msgid "Search results"
-msgstr "Результати пошуку"
-
-msgid "Search type"
-msgstr "Тип пошуку"
-
-msgid "Search youtube materials "
-msgstr "Пошук матеріалів в YouTube"
-
-msgid "Second movie player in buffering mode"
-msgstr "Вибрати другий крок плеєра в режимі (буферизації)"
-
-msgid "Second movie player without buffering mode"
-msgstr "Вибрати другий крок плеєра"
-
-msgid "Select"
-msgstr "Вибрати"
-
-msgid "Select %s"
-msgstr "Виберіть %s"
-
-msgid "Select action"
-msgstr "Виберіть дію"
-
-msgid "Select audio track"
-msgstr "Вибір звукової дорожки"
-
-msgid "Select favourite group"
-msgstr "Виберіть групу вибраного"
-
-msgid "Select language"
-msgstr "Виберіть мову"
-
-msgid "Select link"
-msgstr "Виберіть посилання"
-
-msgid "Select movie"
-msgstr "Виберіть фільм"
-
-msgid "Select movie player"
-msgstr "Вибір плеєра"
-
-msgid "Select option"
-msgstr "Виберіть опцію"
-
-msgid "Select service"
-msgstr "Виберіть послугу"
-
-msgid "Select subtitles file"
-msgstr "Виберіть файл з субтитрами"
-
-msgid "Select subtitles to download"
-msgstr "Виберіть субтитри для завантаження"
-
-msgid "Select subtitles track"
-msgstr "Виберіть дорожку субтитрів"
-
-msgid "Select the directory"
-msgstr "Виберіть каталог"
-
-msgid "Select update server"
-msgstr "Виберіть сервер оновлень"
-
-msgid "Select video option"
-msgstr "Виберіть відео"
-
-msgid "Selected version [%s]."
-msgstr "Вибраний варіант [%s]."
-
-msgid "Seriale"
-msgstr "Серіали"
-
-msgid "Serials"
-msgstr "Серіали"
-
-msgid "Series"
-msgstr "Серії"
-
-msgid "Series [dubbing]"
-msgstr "Серії [перезапис]"
-
-msgid "Series [subtitles]"
-msgstr "Серії [субтитри]"
-
-msgid "Service [%s] has no additional settings."
-msgstr "Конфігурація [%s] немає додаткових налаштувань."
-
-msgid "Services configuration"
-msgstr "Конфігурація хосту(натисніть ОК)"
-
-msgid "Set active movie player"
-msgstr "Вибір активного відеоплеєра"
-
-msgid "Set file name"
-msgstr "Встановити ім'я файлу"
-
-msgid "Set pin code"
-msgstr "Встановіть пін-код"
-
-msgid "Shemale"
-msgstr "Транссексуал"
-
-msgid "Shortcuts"
-msgstr "Клавіші швидкого доступу"
-
-msgid "Show IPTVPlayer in extension list"
-msgstr "Показати IPTV Плеєр в меню плагінів"
-
-msgid "Show IPTVPlayer in main menu"
-msgstr "Показати IPTV Плеєр в головному меню"
-
-msgid "Show all channels"
-msgstr "Показати всі канали"
-
-msgid "Show all version in the update menu"
-msgstr "Показати всі версії в меню Оновлення"
-
-msgid "Show download manager after adding new item"
-msgstr "Показати менеджер завантажеь після добавлення нового файлу"
-
-msgid "Show file size"
-msgstr "Показати размір файлу"
-
-msgid "Show hiddens catalogs"
-msgstr "Показати скриті каталоги"
-
-msgid "Show hiddens files"
-msgstr "Показати скриті файли"
-
-msgid "Show recommended by Rafalcool1:"
-msgstr "Показати рекомендовано Rafalcool1:"
-
-msgid "Show update icon in service selection menu"
-msgstr "Показати оновлення в головному меню"
-
-msgid "Shows"
-msgstr "Шоу"
-
-msgid "Silverlight stream not supported."
-msgstr "Потік Silverlight не підтримується."
-
-msgid "Simple subtitles downloader"
-msgstr "Завантажувач простих субтитрів"
-
-msgid "Sin in to"
-msgstr "Зайти в систему"
-
-msgid "Singapore"
-msgstr "Сингапур"
-
-msgid "Size of the icons"
-msgstr "Розмір іконок"
-
-msgid "Skin"
-msgstr "Вибір cкіна"
-
-msgid ""
-"Skipping IPTVPlayer serup may cause problems.Are you sure to skip IPTVPlayer "
-"setup?"
-msgstr ""
-"Пропуск встановлення додатку, може привести до дефекту плагіна.Пропустити "
-"встановлення додаткових модулів. Ви впевнені?"
-
-msgid ""
-"Skipping IPTVPlayer setup may cause problems.\n"
-"Are you sure to skip IPTVPlayer setup?"
-msgstr ""
-"Пропуск встановлення додатку, може привести до дефекту плагіна. \n"
-"Пропустити встановлення додаткових модулів. Ви впевнені?"
-
-msgid "SmackDown"
-msgstr "Скинути"
-
-msgid "Small films and anime"
-msgstr "Фільми і аніме"
-
-msgid "Software decoding as"
-msgstr "Декодувати"
-
-msgid "Some changes will be applied only after movie player restart."
-msgstr "Деякі зміни будуть застосовані тільки після перезапуску відеоплеєра."
-
-msgid "Some changes will be applied only after plugin update."
-msgstr "Деякі зміни будуть застосовані тільки після оновлення плагіна."
-
-msgid ""
-"Some changes will be applied only after plugin update.\n"
-"Do you want to perform update now?"
-msgstr ""
-"Деякі зміни будуть застосовані тільки після оновлення плагіна.\n"
-"Ви хочете,оновити програмне забезпечення?"
-
-msgid "Songs"
-msgstr "Пісні"
-
-msgid "Sorry"
-msgstr "Вибачте"
-
-msgid "Sort by alphabet"
-msgstr "Сортування по алфавіту"
-
-msgid "Sort by popularity"
-msgstr "Сортувати по популярності"
-
-msgid "Sort by:"
-msgstr "Сортувати за:"
-
-msgid "Sort movies: "
-msgstr "Сортувати фільми: "
-
-msgid "Sort results after:"
-msgstr "Сортувати результати після:"
-
-msgid "Sort search result by"
-msgstr "Сортувати за результатами пошуку"
-
-msgid "Sort the list:"
-msgstr "Сортувати список:"
-
-msgid "Sort xxxlist :"
-msgstr "Сортування xxxlist :"
-
-msgid "Sorted channels A-Z [live]"
-msgstr "Сортування каналів A-Z [прямий етер]"
-
-msgid "Sorted most viewed channels general [live]"
-msgstr "Сортування всіх найбільш популярних каналів [прямий етер]"
-
-msgid "Sorted most viewed channels now [live]"
-msgstr "Сортування каналів, самих популярних в даний час [прямий етер]"
-
-msgid "Spain"
-msgstr "Іспанія"
-
-msgid "Spanish"
-msgstr "Іспанія"
-
-msgid "Sport"
-msgstr "Спорт"
-
-msgid "Start"
-msgstr "Початок"
-
-msgid "Start download manager per default"
-msgstr "Включити менеджер завантажень по замовчуванню"
-
-msgid "Stations"
-msgstr "Станції"
-
-msgid "Status object [%r]"
-msgstr "Статус обєкта [%r]"
-
-msgid "Step [%s] cannot be aborted. Please wait."
-msgstr "Активація [%s] не може перериватися. Будь-ласка, зачекайте."
-
-msgid "Stereo downmix mode for software decoder"
-msgstr "Стерео мікшування для декодера п/о"
-
-msgid "Stop"
-msgstr "Стоп"
-
-msgid "Stop downloading"
-msgstr "Зупинка завантаження"
-
-msgid "Stop playing?"
-msgstr "Зупинити відтворення?"
-
-msgid "Straight from Polish"
-msgstr "Прямо з Польського"
-
-msgid "StreamLiveTo.tv"
-msgstr "Прямий Потік для.ТВ"
-
-msgid "Subtitle background"
-msgstr "Фон субтитрів"
-
-msgid "Subtitle border color"
-msgstr "Колір бордюра субтитрів"
-
-msgid "Subtitle border enabled"
-msgstr "Включити бордюри субтитрів "
-
-msgid "Subtitle border width"
-msgstr "Ширина бордюра субтитрів"
-
-msgid "Subtitle box height"
-msgstr "Висота субтитрів"
-
-msgid "Subtitle box position"
-msgstr "Позиція субтитрів"
-
-msgid "Subtitle font"
-msgstr "Шрифт субтитрів"
-
-msgid "Subtitle font color"
-msgstr "Колір шрифту субтитрів"
-
-msgid "Subtitle font size"
-msgstr "Субтитри розмір шрифту"
-
-msgid "Subtitle line height"
-msgstr "Субтитри висота рядка"
-
-msgid "Subtitle line wrapping"
-msgstr "Субтитри запакування рядка"
-
-msgid "Subtitle shadow X offset"
-msgstr "Тінь субтитрів Зміщення по X"
-
-msgid "Subtitle shadow Y offset"
-msgstr "Тінь субтитрів Y зміщення"
-
-msgid "Subtitle shadow color"
-msgstr "Колір тіні субтитрів"
-
-msgid "Subtitle shadow enabled"
-msgstr "Включити тіні субтитрів"
-
-msgid "Subtitle vertical alignment"
-msgstr "Вертикальне вирівнювання субтитрів"
-
-msgid "Subtitles"
-msgstr "Субтитри"
-
-msgid "Subtitles downloaded successfully. [%s]"
-msgstr "Субтитри завантаженні успішно. [%s]"
-
-msgid "Subtitles downloaded successfully. [%s], conversion to UTF-8."
-msgstr "Субтитри завантаженні успішно. [%s], перетворення в UTF-8."
-
-msgid "Subtitles downloader"
-msgstr "Завантажити субтитри"
-
-msgid "Subtitles for: %s"
-msgstr "Субтитри для: %s"
-
-msgid "Subtitles not found."
-msgstr "Субтитри не знайдені."
-
-msgid "Subtitles provider: %s"
-msgstr "Провайдер субтитрів: %s"
-
-msgid "Success."
-msgstr "Успішно."
-
-msgid "Such as downloading and installation additional binaries"
-msgstr ""
-"Таких, як завантаження і встановлення додаткових модулів двоїчного файла"
-
-msgid "Swiss"
-msgstr "Швейцарський"
-
-msgid "Switzerland"
-msgstr "Швейцарія"
-
-msgid "Synchronize"
-msgstr "Синхронізувати"
-
-msgid "Syria"
-msgstr "Сірія"
-
-msgid "TOP100 Always"
-msgstr "Топ 100 Завжди"
-
-msgid "TOP100 Month"
-msgstr "Топ 100 Місяця"
-
-msgid "TOP100 Of the week"
-msgstr "Топ 100 Тижня"
-
-msgid "TOP100 Week"
-msgstr "TOP100 Тиждень"
-
-msgid "TOP100 of the Month"
-msgstr "TOP100 місяця"
-
-msgid "TV Shows"
-msgstr "ТВ Шоу"
-
-msgid "TV channels"
-msgstr "Телеканали"
-
-msgid "TV series"
-msgstr "Телесеріал"
-
-msgid "TV shows"
-msgstr "ТВ шоу"
-
-msgid "TVN Introduce yourself as:"
-msgstr "TVN Представтеся:"
-
-msgid "TVN use a proxy?"
-msgstr "TVN використовувати проксі-сервер?"
-
-msgid "Tales"
-msgstr "Вигадки"
-
-msgid "Teletext decoder"
-msgstr "Декодер телетексту"
-
-msgid "Testers: "
-msgstr "Тестери: "
-
-msgid "Text files ytlist and urllist are in:"
-msgstr "Текстові файли ytlist і urllist знаходяться:"
-
-msgid "The \"%s\" utility is used by IPTVPlayer."
-msgstr "Утіліта \"%s\" використовується в IPTV Плеєрі."
-
-msgid ""
-"The \"%s\" utility is used by the IPTVPlayer as external movie player based "
-"on the ffmpeg and libeplayer."
-msgstr ""
-"Утіліта \"%s\" використовується IPTV Плеєром в якості зовнішнього відео "
-"плеєра.на основі FFmpeg і libeplayer."
-
-msgid "The \"%s\" utility is used by the IPTVPlayer as external movie player."
-msgstr ""
-"Утіліта \"%s\" використовується IPTV Плеєром в якості зовнішнього відео "
-"плеєра."
-
-msgid ""
-"The \"%s\" utility is used by the IPTVPlayer to buffering and downloading "
-"[%s] links."
-msgstr ""
-"Утіліта \"%s\" використовується IPTV Плеєром для кешування і завантаження "
-"матеріала з посилань [%s]."
-
-msgid ""
-"The \"%s\" utility is used by the IPTVPlayer to determine the encoding of "
-"the text."
-msgstr ""
-"В \"%s\" утіліта використовується IPTV Плеєром для визначення кодіровки "
-"текста."
-
-msgid "The Witcher"
-msgstr "Відьмак"
-
-msgid "The current host crashed"
-msgstr "Даний хост не працює"
-
-msgid "The default video format"
-msgstr "Формат відео по замовчуванню"
-
-msgid "The default video format:"
-msgstr "Формат відео по замовчуванню:"
-
-msgid "The default video quality:"
-msgstr "Якість відео по замовчуванню:"
-
-msgid "The most relevant"
-msgstr "Найбільш актуальне"
-
-msgid "The number of items in the search history"
-msgstr "Кількість елементів в історії пошуку"
-
-msgid "The preferred protocol:"
-msgstr "Переважаючий протокол:"
-
-msgid "The problem with creating a directory [%s]."
-msgstr "Проблема зі створенням каталогу [%s]."
-
-msgid "The problem with obtaining the gateway proxy!"
-msgstr "Проблема з отриманням шлюзу проксі!"
-
-msgid ""
-"The problem with the logged-in user \"%s. Check your login details in the "
-"host configuration.\""
-msgstr ""
-"Проблема з авторизирацією користувача \"%s. Перевірте свої реєстраційні дані "
-"в конфігурації хост.\""
-
-msgid ""
-"The problem with the user's logon \"%s\". Check your login details in the "
-"host configuration."
-msgstr ""
-"Проблема зі входом користувача \"%s\". Перовірте свої реєстраційні дані в "
-"конфігурації хоста."
-
-msgid "The problem with user logon \"%s\".\n"
-msgstr "Проблема з входом користувача \"%s\".\n"
-
-msgid "The same item already exists in this group."
-msgstr "Те ж саме елемент вже існує в цій групі."
-
-msgid "The user Last.fm"
-msgstr "Користувач Last.fm"
-
-msgid ""
-"There are no active premium account.\n"
-"Using a limited version that may not work properly with congested links."
-msgstr ""
-"Там немає активного преміум акаунта.\n"
-"Використовувати обмежену версію, що не може працювати відповідно з "
-"перевантаженними посиланнями."
-
-msgid ""
-"There is a new version available do you want to update? \n"
-"Your version [%s], latest version on server [%s]."
-msgstr ""
-"Існує нова версія плагіна. Ви бажаєте, оновити? \n"
-"Ваша версія [%s], остання версія на сервері [%s]."
-
-msgid "There is no favourites groups."
-msgstr "Там немає групи вибране."
-
-msgid "There is no free space on the drive [%s]."
-msgstr "На диску немає вільного місця [%s]."
-
-msgid ""
-"There is no space in the directory [%s]\n"
-" Available[%s], required [%s]."
-msgstr ""
-"В каталозі не хватає місця [%s]\n"
-"Доступно [%s], необхідно [%s]."
-
-msgid "There is no update for the current configuration."
-msgstr "Для поточної версії, оновлення відсутні."
-
-msgid "There was an error Download."
-msgstr "Була помилка завантаження."
-
-msgid ""
-"There was an error Download. \n"
-"Status[%s], tmpBuffSize[%r], canRunMoviePlayer[%r]"
-msgstr ""
-"Була помилка завантаження. \n"
-"Статус[%s], tmpБуфРозмір[%r], може працювати з Gameplayer[%r]"
-
-msgid "There was an error downloading."
-msgstr "Помилка при завантаженні."
-
-msgid ""
-"This host requires registration. \n"
-"Please fill your login and password in the host configuration. Available "
-"under blue button."
-msgstr ""
-"Цей вузол вимагає реєстрації. \n"
-" Будь ласка,заповніть свій логін і пароль у конфігурації хост-конфігурації.В "
-"наявності під синю кнопку . "
-
-msgid "This site requires login. Please complete host configuration data."
-msgstr ""
-"Цей сайт потребує логін. Будь-ласка, заповніть дані конфігурації хостів."
-
-msgid "Today, too many people are watching a movie with"
-msgstr "Сьогодні дуже багато користувачів дивляться фільм з"
-
-msgid "Top"
-msgstr "Верхній"
-
-msgid "Top 100"
-msgstr "Топ 100"
-
-msgid "Top Items (All time)"
-msgstr "Кращі товари (За весь час)"
-
-msgid "Top Items (This Month)"
-msgstr "Кращі товари (Цей місяць)"
-
-msgid "Top Items (This Week)"
-msgstr "Кращі товари (На цьому тижні)"
-
-msgid "Top Items (Today)"
-msgstr "Кращі товари (Cьогодні)"
-
-msgid "Top Movies"
-msgstr "Кращі фільми"
-
-msgid "Top rated"
-msgstr "Самі популярні"
-
-msgid "Topics"
-msgstr "Теми"
-
-msgid "Topics films"
-msgstr "Теми фільмів"
-
-msgid "Total Divas"
-msgstr "Тотальні Діви"
-
-msgid "Total size: "
-msgstr "Размір файлу: "
-
-msgid "Transparent"
-msgstr "Прозорий"
-
-msgid "Treat episode as TV Show"
-msgstr "Дивитись епізод, як ТВ-шоу"
-
-msgid "Try again for some time"
-msgstr "Попробуйте ще раз через деякий час"
-
-msgid "Tunisia"
-msgstr "Туніс"
-
-msgid "Turkey"
-msgstr "Турція"
-
-msgid "Turkish"
-msgstr "Турція"
-
-msgid "Turn off buffering for http://prognoza.pogody.tv/"
-msgstr "Виключіть буферизацію для http://prognoza.pogody.tv/"
-
-msgid "Type: "
-msgstr "Тип: "
-
-msgid "Türk"
-msgstr "Турецький"
-
-msgid "UNKNOWN"
-msgstr "НЕВІДОМИЙ"
-
-msgid "UPDATE"
-msgstr "ОНОВИТИ"
-
-msgid "UPDATE MENU"
-msgstr "МЕНЮ ОНОВЛЕННЯ"
-
-msgid "UPDATE-CHANGES"
-msgstr "ОНОВИТИ-ЗМІНИ"
-
-msgid "UPDATE-NOW"
-msgstr "ОНОВИТИ-ЗАРАЗ"
-
-msgid "Ukraine"
-msgstr "Україна"
-
-msgid "Umount iso file"
-msgstr "Розмонтувати файл iso"
-
-msgid "United Kingdom"
-msgstr "Великобританія"
-
-msgid "United States"
-msgstr "Сполучені Штати"
-
-msgid "Unknown"
-msgstr "Невідомий"
-
-msgid "Unknown protocol %s"
-msgstr "Невідомий протокол %s"
-
-msgid "Unknown protocol [%s]"
-msgstr "Невідомий протокол [%s]"
-
-msgid "Unpacking the archive completed successfully."
-msgstr "Розпаковка архіву успішно завершена."
-
-msgid "Update"
-msgstr "Оновлення"
-
-msgid "Update End. Please manual restart enigma2"
-msgstr "Кінець оновлень. Будь-ласка ручний перезапуск Enigma2"
-
-msgid "Update Now"
-msgstr "Оновити зараз"
-
-msgid "Update Now & Restart Enigma2"
-msgstr "Обновити зараз & Перезаватажити Enigma2"
-
-msgid "Update completed successfully. For the moment, the system will reboot."
-msgstr "Оновлення успішно завершено. На даний момент, система перезагрузиться."
-
-msgid ""
-"Update failed.\n"
-"Check the status by selecting interesting and pressing OK."
-msgstr ""
-"Не вдалось виконати оновлення.\n"
-"Перевірте потрібне вам, і натисніть OK."
-
-msgid ""
-"Update failed. Check the status by selectiong interesting and pressing ok."
-msgstr "Оновлення не вдалося. Перевірте статус вибраного, натисніть кнопку ОК."
-
-msgid "Update not available."
-msgstr "Оновлення недоступно."
-
-msgid "Update packet type"
-msgstr "Пакети, доступні для оновлення"
-
-msgid "Update packet was downloaded successfully."
-msgstr "Оновлений пакет успішно завантажений."
-
-msgid "Update server not selected."
-msgstr "Сервер оновлень не вибрано."
-
-msgid "Upload date"
-msgstr "Дата публікації"
-
-msgid "Urllists player"
-msgstr "Гіперлінки Плеєра"
-
-msgid "Use German proxy for link request"
-msgstr "Використовувати Німецький проксі для запиту посилання"
-
-msgid "Use Polish proxy for http://prognoza.pogody.tv/"
-msgstr ""
-"Використовувати проксі-сервер для Польського http://prognoza.pogody.tv/"
-
-msgid "Use Proxy?"
-msgstr "Використовуй проксі?"
-
-msgid "Use a proxy"
-msgstr "Використовуйте проксі"
-
-msgid "Use a proxy gateway"
-msgstr "Використовувати проксі-шлюз"
-
-msgid "Use default video quality:"
-msgstr "Використовувати по замовчуванню якість відео:"
-
-msgid "Use defauult qality:"
-msgstr "Якість використання по замовчуванню:"
-
-msgid "Use proxy gateway"
-msgstr "Використати проксі-шлюз"
-
-msgid "Use ru proxy server to get file lists"
-msgstr "Використовувати проксі-сервер, щоб отримати списки файлів"
-
-msgid "Use ru proxy server:"
-msgstr "Використовувати проксі-сервер ру:"
-
-msgid "Use the default video format:"
-msgstr "Використовуйте формат відео по замовчуванню:"
-
-msgid "Use the default video quality:"
-msgstr "Використовуйте якісь відео по замовчуванню:"
-
-msgid "User Last.fm"
-msgstr "Користувач Last.fm"
-
-msgid "User PREMIUM KinomanTV?"
-msgstr "ПРЕМІУМ Користувач KinomanTV?"
-
-msgid "User Videos 3dEU?"
-msgstr "Відео користувача 3dEU?"
-
-msgid "User [%s] logon failure."
-msgstr "Користувач [%s] помилка входу в систему."
-
-msgid "User files"
-msgstr "Файли користувача"
-
-msgid "User links"
-msgstr "Лінки користувача"
-
-msgid "User links stored in the ytlist.txt file."
-msgstr "Лінки користувача, збереженні в файлі ytlist.txt."
-
-msgid "User-Agent"
-msgstr "Агент користувача"
-
-msgid "Username:"
-msgstr "Імя користувача:"
-
-msgid "Uses the default video quality:"
-msgstr "Використовувати якість відео по замовчуванню:"
-
-msgid ""
-"Utility \"%s\" has not been detected. \n"
-"Do you want to install it?"
-msgstr ""
-"Утіліта \"%s\" застаріла. \n"
-"Ви бажаєте, встановити нову?"
-
-msgid ""
-"Utility \"%s\" has not been detected. \n"
-"What do you want to do?"
-msgstr ""
-"Утіліта \"%s\" застаріла. \n"
-"Що ви бажаєте зробити?"
-
-msgid ""
-"Utility \"%s\" is deprecated. \n"
-"Do you want to install new one?"
-msgstr ""
-"Утіліта \"%s\" застаріла. \n"
-"Ви бажаєте, встановити нову?"
-
-msgid ""
-"Utility \"%s\" is deprecated. \n"
-"What do you want to do?"
-msgstr ""
-"Утіліта \"%s\" застаріла. \n"
-"Що ви бажаєте зробити?"
-
-msgid "VIDEO"
-msgstr "ВІДЕО"
-
-msgid "VIEWS"
-msgstr "ПЕРЕГЛЯДИ"
-
-msgid "Version"
-msgstr "Версія"
-
-msgid ""
-"Version [%s] is ready for installation. After installation, restart of the "
-"system will be done.\n"
-"Do you want to continue?"
-msgstr ""
-"Версія [%s] готова до встановлення. Після встановлення, cистема буде "
-"перезавантажена.\n"
-"Ви бажаєте продовжити?"
-
-msgid "Very high"
-msgstr "Дуже висока"
-
-msgid "Very low"
-msgstr "Дуже низький"
-
-msgid "Video"
-msgstr "Відео"
-
-msgid "Video buffer size [MB]"
-msgstr "Розмір буфера відео в [MB]"
-
-msgid "Video format:"
-msgstr "Формат відео:"
-
-msgid "Video options"
-msgstr "Параметри відео"
-
-msgid "Videos"
-msgstr "Відео"
-
-msgid "VietNam"
-msgstr "В'єтнам"
-
-msgid "View count"
-msgstr "Кількість переглядів"
-
-msgid "WWE Main Event"
-msgstr "WWE Головна подія"
-
-msgid "WWE NETWORK"
-msgstr "WWE МЕРЕЖА"
-
-msgid "Waiting room"
-msgstr "Зал очікування"
-
-msgid "Warehouse"
-msgstr "Склад"
-
-msgid "Watch video materials from IPTV services"
-msgstr "Перегляд сервісів IPTV"
-
-msgid "Web streams player"
-msgstr "Програвач Веб-потоків"
-
-msgid "Webpages: "
-msgstr "Веб-сторінка: "
-
-msgid "Week"
-msgstr "Тиждень"
-
-msgid "Weekly"
-msgstr "Щоденно"
-
-msgid "Women"
-msgstr "Жінки"
-
-msgid "Worse rating"
-msgstr "Поганий рейтинг"
-
-msgid "Worst"
-msgstr "Найгірша"
-
-msgid "WrestlingNet._listVideos - no markers [m1][m2] found!"
-msgstr "WrestlingNet._listВвдео - без маркерів [м1] [м2] знайдено!"
-
-msgid "Writer"
-msgstr "Автор"
-
-msgid "Wrong indexes."
-msgstr "Неправильні індекси."
-
-msgid ""
-"Wrong version. \n"
-" downloaded version [%s] is different from the requested [%s]."
-msgstr ""
-"Невірна версія. Завантажена версія [%s] відрізняється від потрібної [%s]."
-
-msgid "XXX"
-msgstr "Відео Порно"
-
-msgid "Year"
-msgstr "Рік"
-
-msgid "You can use Russian proxy server as a workaround."
-msgstr ""
-"Ви можете використати російський проксі-сервер в якосі обхідного шляху."
-
-msgid "You do not have a premium account. Starting a sponsored broadcast."
-msgstr "Ви не маєте преміум акаунту. Оплатіть одну трансляцію."
-
-msgid "You do not have a premium account.Starting a sponsored broadcast."
-msgstr "Ви не маєте преміум-акаунту. Оплатіть одну трансляцію."
-
-msgid "You need to enter email and password in configuration."
-msgstr "Ви повинні ввести адрес електронної пошти і пароль в конфігурації."
-
-msgid ""
-"You probably have not access to this page due to geolocation restriction."
-msgstr ""
-"Ви, мабуть, не маєте доступу до цієї сторінки в звязку з обмеженням "
-"геолокації."
-
-msgid "Your OpenSSL version is [%s]"
-msgstr "Ваша версія OpenSSL являється [%s]"
-
-msgid "Your platform is [%s]"
-msgstr "Ваша платформа [%s]"
-
-msgid "Your search entry"
-msgstr "Введіть тип пошуку"
-
-msgid "Yoursay"
-msgstr "Ти сказав"
-
-msgid "Youtube player"
-msgstr "Youtube плеєр"
-
-msgid "Youtubes player"
-msgstr "Youtube плеєр"
-
-msgid "[%s] - configuration"
-msgstr "[%s] - Конфігурація"
-
-msgid "[%s] will be used by IPTVPlayer."
-msgstr "[%s] буде використовуватися IPTV плеєром."
-
-msgid "[%s] with buffering"
-msgstr "%s з буферизацією"
-
-msgid "[%s] without buffering"
-msgstr "%s без буферизації"
-
-msgid "[For download only] "
-msgstr "Тільки Скачати "
-
-msgid "[HLS/M3U8] buffering"
-msgstr "[HLS / M3U8] Буферизація"
-
-msgid "[HTTP] buffering"
-msgstr "[HTTP] Буферизація"
-
-msgid "[RTMP] buffering (rtmpdump required)"
-msgstr "[RTMP] Буферизація (rtmpdump обовязково)"
-
-msgid "[group]"
-msgstr "[група]"
-
-msgid "active"
-msgstr "активний"
-
-msgid "after a week"
-msgstr "через тиждень"
-
-msgid "after closing"
-msgstr "після закриття"
-
-msgid "after day"
-msgstr "після одного дня"
-
-msgid "after three days"
-msgstr "після трьох днів"
-
-msgid "all types"
-msgstr "всі типи"
-
-msgid "alltube.tv"
-msgstr "все tube.тв"
-
-msgid "aqua"
-msgstr "вода"
-
-msgid "ascending"
-msgstr "виходячий"
-
-msgid "assessment"
-msgstr "оцінка"
-
-msgid "average"
-msgstr "середній"
-
-msgid "back_pressed prev sel index %s"
-msgstr "назад до попереднього індексу %s"
-
-msgid "based on IP"
-msgstr "На основі IP"
-
-msgid "bestfit"
-msgstr "кращий"
-
-msgid "bitrate: 1800"
-msgstr "Бітрейт: 1800"
-
-msgid "bitrate: 200p"
-msgstr "Битрейт: 200p"
-
-msgid "bitrate: 450p"
-msgstr "Бітрейт: 450p"
-
-msgid "bitrate: 900"
-msgstr "Бітрейт: 900"
-
-msgid "bitrate: the best"
-msgstr "Бітрейт: кращий"
-
-msgid "bitrate: worst"
-msgstr "Бітрейт: поганий"
-
-msgid "blue"
-msgstr "синій"
-
-msgid "bottom"
-msgstr "низ"
-
-msgid "buffer-duration"
-msgstr "тривалість буферизації"
-
-msgid "buffer-size"
-msgstr "Розмір буфера"
-
-msgid "center"
-msgstr "центр"
-
-msgid "channel"
-msgstr "канал"
-
-msgid "console"
-msgstr "консоль"
-
-msgid "cover"
-msgstr "обкладинка"
-
-msgid "data"
-msgstr "дані"
-
-msgid "date added"
-msgstr "дата добавлення"
-
-msgid "date-add"
-msgstr "дата-надстройки"
-
-msgid "default"
-msgstr "по замовчуванню"
-
-msgid "descending"
-msgstr "падаючий"
-
-msgid "deutsch"
-msgstr "німецький"
-
-msgid "direct link"
-msgstr "пряме писилання"
-
-msgid "download-buffer-path"
-msgstr "скачати-буфер шлях"
-
-msgid "downmix"
-msgstr "мікшування"
-
-msgid "english"
-msgstr "англійський"
-
-msgid "espanol"
-msgstr "іспанський"
-
-msgid "external eplayer3"
-msgstr "Зовнішній eplayer3"
-
-msgid "external gstplayer"
-msgstr "Зовнішній gstplayer"
-
-msgid "favorite"
-msgstr "Улюблені"
-
-msgid "favourites"
-msgstr "вибране"
-
-msgid "favourtes"
-msgstr "Вибране"
-
-msgid "format"
-msgstr "Формат"
-
-msgid "format: 240p"
-msgstr "Формат: 240p"
-
-msgid "format: 360p"
-msgstr "Формат: 360p"
-
-msgid "format: 480p"
-msgstr "Формат: 480p"
-
-msgid "format: 720"
-msgstr "Формат: 720"
-
-msgid "format: best"
-msgstr "Формат: кращий"
-
-msgid "format: worst"
-msgstr "Формат: найгірший"
-
-msgid "free premium player."
-msgstr "Безоплатний преміум плеєр."
-
-msgid "fuchsia"
-msgstr "фуксія"
-
-msgid "good"
-msgstr "хороший"
-
-msgid "gray"
-msgstr "сірий"
-
-msgid "group"
-msgstr "група"
-
-msgid "hd"
-msgstr "hd"
-
-msgid "headertext"
-msgstr "текст заголовка"
-
-msgid "high"
-msgstr "Високий"
-
-msgid "http://fs.to/"
-msgstr "FS.TO"
-
-msgid "http://hdkinomir.com/"
-msgstr "HDКіномір"
-
-msgid "http://online-kinopokaz.ru/"
-msgstr "Кінопоказ"
-
-msgid "http://www.ex.ua/"
-msgstr "EX.UA"
-
-msgid "https - validate SSL certificates"
-msgstr "https - перевірка сертифікатів SSL"
-
-msgid "i686"
-msgstr "i686"
-
-msgid "internal"
-msgstr "Внутрішній"
-
-msgid "large"
-msgstr "Великий"
-
-msgid "last added"
-msgstr "Послідні добавлені"
-
-msgid "last watched"
-msgstr "послідні переглянуті"
-
-msgid "leave movie player..."
-msgstr "Залишити програвач фільмів..."
-
-msgid "lector hd free "
-msgstr "Перегляд HD безоплати "
-
-msgid "lector normal free "
-msgstr "Перегляд SD безоплати "
-
-msgid "letterbox"
-msgstr "Режим ящика"
-
-msgid "lime"
-msgstr "Лайм"
-
-msgid "live"
-msgstr "прямий"
-
-msgid "live transfers"
-msgstr "Прямі Потоки"
-
-msgid "login"
-msgstr "Зайти"
-
-msgid "login:"
-msgstr "Логін:"
-
-msgid "low"
-msgstr "Низький"
-
-msgid "maroon"
-msgstr "темно-бордовий"
-
-msgid "medium"
-msgstr "середній"
-
-msgid "mipsel"
-msgstr "mipsel"
-
-msgid "mobile"
-msgstr "мобільний"
-
-msgid "movie"
-msgstr "фільм"
-
-msgid "movie4k.to"
-msgstr "кіно4k.to"
-
-msgid "name"
-msgstr "назва"
-
-msgid "nasze-kino.eu"
-msgstr "Наше-Кіно.eu"
-
-msgid "navy"
-msgstr "морські хвилі"
-
-msgid "new"
-msgstr "Новий"
-
-msgid "no"
-msgstr "ні"
-
-msgid "nocnyseans.pl"
-msgstr "нічний Сеанс.pl"
-
-msgid "nonlinear"
-msgstr "нелінійний"
-
-msgid "number of views"
-msgstr "кількість переглядів"
-
-msgid "olive"
-msgstr "оливковий"
-
-msgid "panscan"
-msgstr "Панорама"
-
-msgid "passthrough"
-msgstr "пройти через"
-
-msgid "password"
-msgstr "пароль"
-
-msgid "password:"
-msgstr "Пароль:"
-
-msgid "picture link"
-msgstr "Фото Посилання"
-
-msgid "playerlogo"
-msgstr "плеєр логотип"
-
-msgid "playlist"
-msgstr "плейлист"
-
-msgid "polski"
-msgstr "польський"
-
-msgid "precompiled"
-msgstr "перекомпільовані"
-
-msgid "preferred streaming protocol"
-msgstr "кращий протокол потокової передачі"
-
-msgid "purple"
-msgstr "пурпурний"
-
-msgid "quality"
-msgstr "якість"
-
-msgid "random"
-msgstr "випадковий"
-
-msgid "recommended"
-msgstr "рекомендований"
-
-msgid "red"
-msgstr "червоний"
-
-msgid "release date"
-msgstr "дата випуску"
-
-msgid "ring-buffer-max-size"
-msgstr "максимальний розмір буферу"
-
-msgid "rootfs"
-msgstr "Кореневі файли"
-
-msgid "second"
-msgstr "секунда"
-
-msgid "seconds"
-msgstr "секунд"
-
-msgid "self.getCurrentDirectory()"
-msgstr "самостійно.отримати Поточний каталог()"
-
-msgid "sequencer"
-msgstr "секвенсор"
-
-msgid "sh4"
-msgstr "sh4"
-
-msgid "show iframe for audio item"
-msgstr "Включити заставку в режимі аудіо"
-
-msgid "silver"
-msgstr "срібло"
-
-msgid "small"
-msgstr "малий"
-
-msgid "standard"
-msgstr "Стандарт"
-
-msgid "statustext"
-msgstr "статус текст"
-
-msgid "sun sessions"
-msgstr "сонце сесій"
-
-msgid "teal"
-msgstr "чирок"
-
-msgid "the best"
-msgstr "кращий"
-
-msgid "the name"
-msgstr "імя"
-
-msgid "the worst"
-msgstr "гірший"
-
-msgid "top"
-msgstr "вверх"
-
-msgid "unknown"
-msgstr "невідомий"
-
-msgid "updated"
-msgstr "оновленний"
-
-msgid "vapor"
-msgstr "Пар"
-
-msgid "very high"
-msgstr "дуже високий"
-
-msgid "video"
-msgstr "відео"
-
-msgid "views"
-msgstr "Перегляди"
-
-msgid "web-live.tv login:"
-msgstr "web-live.tv Зайти:"
-
-msgid "web-live.tv password:"
-msgstr "web-live.tv Пароль:"
-
-msgid "web-live.tv premium user?"
-msgstr "web-live.tv Преміум користувач?"
-
-msgid "white"
-msgstr "білий"
-
-msgid "with source code"
-msgstr "з початковим кодом"
-
-msgid "worst"
-msgstr "найгірший"
-
-msgid "xxxlist.txt"
-msgstr "Файл-xxx.txt"
-
-msgid "yellow"
-msgstr "жовтий"
-
-msgid "yes, to console"
-msgstr "так, на консолі"
-
-msgid "yes, to file /hdd/iptv.dbg"
-msgstr "файл, на /hdd/iptv.dbg"
-
-msgid "youtube.com"
-msgstr "youtube.com"
-
-msgid "Аниме"
-msgstr "Аніме"
-
-msgid "Аудио"
-msgstr "Аудіо"
-
-msgid "Видео"
-msgstr "Відео"
-
-msgid "Игры"
-msgstr "Ігри"
-
-msgid "Литература"
-msgstr "Література"
-
-msgid "Мультфильмы"
-msgstr "Мультфільми"
-
-msgid "Сериалы"
-msgstr "Серіали"
-
-msgid "Фильмы"
-msgstr "Фільми"
-
-msgid "Фильмы 2013"
-msgstr "Фільми 2013"
-
-msgid "Фильмы 2014"
-msgstr "Фільми 2014"
-
-msgid "Фильмы 2015"
-msgstr "Фільми 2015"
diff -ruN o/IPTVPlayer/plugin.py pc/IPTVPlayer/plugin.py
--- o/IPTVPlayer/plugin.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/plugin.py	2020-05-12 00:07:45.113290927 +0300
@@ -6,7 +6,6 @@
 from Plugins.Extensions.IPTVPlayer.components.iptvconfigmenu import ConfigMenu
 from Plugins.Extensions.IPTVPlayer.components.iptvpin import IPTVPinWidget
 from Plugins.Extensions.IPTVPlayer.components.iptvplayerinit import TranslateTXT as _, IPTVPlayerNeedInit
-from Plugins.Extensions.IPTVPlayer.setup.iptvsetupwidget import IPTVSetupMainWidget
 from Plugins.Extensions.IPTVPlayer.tools.iptvtools import IsExecutable, IsWebInterfaceModuleAvailable
 ###################################################
 
@@ -124,10 +123,6 @@
     f4mdumppath  = IsExecutable(config.plugins.iptvplayer.f4mdumppath.value)
     platform     = config.plugins.iptvplayer.plarform.value
     if platform in ["auto", "unknown"] or not wgetpath or not rtmpdumppath or not f4mdumppath:
-        session.openWithCallback(boundFunction(nextFunction, session), IPTVSetupMainWidget)
-    elif IPTVPlayerNeedInit():
-        session.openWithCallback(boundFunction(nextFunction, session), IPTVSetupMainWidget, True)
-    else:
         nextFunction(session)
         
 def pinCallback(session, callbackFun, pin=None):
diff -ruN o/IPTVPlayer/setup/iptvsetupimpl.py pc/IPTVPlayer/setup/iptvsetupimpl.py
--- o/IPTVPlayer/setup/iptvsetupimpl.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/setup/iptvsetupimpl.py	2020-05-12 00:07:45.113290927 +0300
@@ -463,7 +463,7 @@
         def _verValidator(code, data):
             if 0 == code: return True,False
             else: return False,True
-        self.workingObj = CCmdValidator(self.getFFmpegVerFinished, _verValidator, ['/iptvplayer_rootfs/usr/bin/ffmpeg -version', 'ffmpeg -version'])
+        self.workingObj = CCmdValidator(self.getFFmpegVerFinished, _verValidator, ['/usr/bin/ffmpeg -version', 'ffmpeg -version'])
         self.workingObj.start()
         
     def getFFmpegVerFinished(self, stsTab, dataTab):
@@ -1057,16 +1057,16 @@
         if len(self.ffmpegVersion) >= 5:
             shortFFmpegVersion = self.ffmpegVersion[:-2]
             
-        if self.platform in ['sh4'] and shortFFmpegVersion in ['1.0', '1.1', '1.2', '2.0', '2.2', '2.5', '2.6', '2.7', '2.8', '3.0', '3.1', '3.2', '3.3', '3.4']: 
+        if self.platform in ['sh4'] and shortFFmpegVersion in ['1.0', '1.1', '1.2', '2.0', '2.2', '2.5', '2.6', '2.7', '2.8', '3.0', '3.1', '3.2', '3.3', '3.4', '4.0', '4.1']:
             self.ffmpegVersion = shortFFmpegVersion
             self.exteplayer3Step()
-        elif self.platform in ['mipsel'] and shortFFmpegVersion in ['2.8', '3.0', '3.1', '3.2', '3.3', '3.4']:
+        elif self.platform in ['mipsel'] and shortFFmpegVersion in ['2.8', '3.0', '3.1', '3.2', '3.3', '3.4', '4.0', '4.1']:
             self.ffmpegVersion = shortFFmpegVersion
             self.exteplayer3Step()
-        elif self.platform in ['armv7'] and shortFFmpegVersion in ['2.8', '3.0', '3.1', '3.2', '3.3', '3.4']:
+        elif self.platform in ['armv7'] and shortFFmpegVersion in ['2.8', '3.0', '3.1', '3.2', '3.3', '3.4', '4.0', '4.1']:
             self.ffmpegVersion = shortFFmpegVersion
             self.exteplayer3Step()
-        elif self.platform in ['armv5t'] and shortFFmpegVersion in ['2.8', '3.0', '3.1', '3.2', '3.3', '3.4']:
+        elif self.platform in ['armv5t'] and shortFFmpegVersion in ['2.8', '3.0', '3.1', '3.2', '3.3', '3.4', '4.0', '4.1']:
             self.ffmpegVersion = shortFFmpegVersion
             self.exteplayer3Step()
         elif "" != self.gstreamerVersion: self.gstplayerStep()
diff -ruN o/IPTVPlayer/tools/iptvsubtitles.py pc/IPTVPlayer/tools/iptvsubtitles.py
--- o/IPTVPlayer/tools/iptvsubtitles.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/tools/iptvsubtitles.py	2020-05-12 00:07:45.113290927 +0300
@@ -364,5 +364,5 @@
         
 if __name__ == "__main__":
     obj = IPTVSubtitlesHandler()
-    obj.loadSubtitles('/hdd/_Back.To.The.Future[1985]DvDrip-aXXo.pl.srt')
+    obj.loadSubtitles('/media/hdd/_Back.To.The.Future[1985]DvDrip-aXXo.pl.srt')
     obj.getSubtitles(10000)
diff -ruN o/IPTVPlayer/tools/iptvtools.py pc/IPTVPlayer/tools/iptvtools.py
--- o/IPTVPlayer/tools/iptvtools.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/tools/iptvtools.py	2020-05-12 00:07:45.114290927 +0300
@@ -303,8 +303,8 @@
     baseName = resolveFilename(SCOPE_PLUGINS, 'Extensions/IPTVPlayer/scripts/') + name
     if fileExists(baseName + '.py'):
         baseName += '.py'
-    elif fileExists(baseName + '.pyo'):
-        baseName += '.pyo'
+    elif fileExists(baseName + '.pyc'):
+        baseName += '.pyc'
     if baseName != '':
         for item in ['python', 'python2.7', 'python2.6']:
             pyPath = Which(item)
@@ -401,7 +401,7 @@
     return path + '/' + file
 
 def GetE2iPlayerRootfsDir(file = ''):
-    return '/iptvplayer_rootfs/' + file
+    return '/' + file
 
 def GetE2iPlayerVKLayoutDir(file = ''):
     return GetE2iPlayerRootfsDir('etc/vk/' + file)
@@ -465,7 +465,7 @@
             if is_exe(program):
                 return program
         else:
-            pathTab = ['/iptvplayer_rootfs/bin', '/iptvplayer_rootfs/usr/bin', '/iptvplayer_rootfs/sbin', '/iptvplayer_rootfs/usr/sbin']
+            pathTab = ['/bin', '/usr/bin', '/sbin', '/usr/sbin']
             pathTab.extend(os.environ["PATH"].split(os.pathsep))
             for path in pathTab:
                 path = path.strip('"')
@@ -582,7 +582,7 @@
         print(DBGtxt)
     elif DBG == 'debugfile':
         try:
-            f = open('/hdd/iptv.dbg', 'a')
+            f = open('/media/hdd/iptv.dbg', 'a')
             f.write(DBGtxt + '\n')
             f.close
         except Exception:
@@ -1338,10 +1338,10 @@
     
 def IsBrokenDriver(filePath):
     # workaround for broken DVB driver mbtwinplus:
-    # root@mbtwinplus:~# cat /proc/stb/video/policy2
+    # root@mbtwinplus:~# cat /usr/local/e2/etc/stb/video/policy2
     # Segmentation fault
     try:
-        if 'video/policy' in filePath and not fileExists('/proc/stb/video/aspect_choices'):
+        if 'video/policy' in filePath and not fileExists('/usr/local/e2/etc/stb/video/aspect_choices'):
             with open('/etc/hostname', 'r') as f:
                 data = f.read().strip()
             if 'mbtwinplus' in data:
@@ -1380,7 +1380,7 @@
     return sts
 
 def GetE2VideoAspectChoices():
-    tab = GetE2OptionsFromFile('/proc/stb/video/aspect_choices')
+    tab = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/aspect_choices')
     # workaround for some STB
     # reported here: https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/issues/30
     staticTab = ["4:3", "16:9", "any"]
@@ -1389,48 +1389,48 @@
     return tab
 
 def GetE2VideoAspect():
-    options = GetE2OptionsFromFile('/proc/stb/video/aspect')
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/aspect')
     if 1 == len(options): return options[0]
     return None
     
 def SetE2VideoAspect(value):
-    return SetE2OptionByFile('/proc/stb/video/aspect', value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/video/aspect', value)
     
 def GetE2VideoPolicyChoices(num=''):
-    return GetE2OptionsFromFile('/proc/stb/video/policy%s_choices' % num)
+    return GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/policy%s_choices' % num)
     
 def GetE2VideoPolicy(num=''):
-    options = GetE2OptionsFromFile('/proc/stb/video/policy'+num)
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/policy'+num)
     if 1 == len(options): return options[0]
     return None
     
 def SetE2VideoPolicy(value, num=''):
-    return SetE2OptionByFile('/proc/stb/video/policy'+num, value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/video/policy'+num, value)
     
 def GetE2AudioCodecMixChoices(codec):
-    return GetE2OptionsFromFile('/proc/stb/audio/%s_choices' % codec)
+    return GetE2OptionsFromFile('/usr/local/e2/etc/stb/audio/%s_choices' % codec)
     
 def GetE2AudioCodecMixOption(codec):
-    options = GetE2OptionsFromFile('/proc/stb/audio/%s' % codec)
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/audio/%s' % codec)
     if 1 == len(options): return options[0]
     return None
     
 def SetE2AudioCodecMixOption(codec, value):
-    return SetE2OptionByFile('/proc/stb/audio/%s' % codec, value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/audio/%s' % codec, value)
 
 # videomode
 def GetE2VideoModeChoices():
     # return 'pal ntsc 480i 576i 480p 576p 720p50 720p 1080i50 1080i 1080p24 1080p25 1080p30 720p24 720p25 720p30 1080p50 1080p'.split(' ')
-    return GetE2OptionsFromFile('/proc/stb/video/videomode_choices')
+    return GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/videomode_choices')
     
 def GetE2VideoMode():
     # return '1080p50'
-    options = GetE2OptionsFromFile('/proc/stb/video/videomode')
+    options = GetE2OptionsFromFile('/usr/local/e2/etc/stb/video/videomode')
     if 1 == len(options): return options[0]
     return None
     
 def SetE2VideoMode(value):
-    return SetE2OptionByFile('/proc/stb/video/videomode', value)
+    return SetE2OptionByFile('/usr/local/e2/etc/stb/video/videomode', value)
 
 def ReadUint16(tmp, le=True):
     if le: return ord(tmp[1]) << 8 | ord(tmp[0])
diff -ruN o/IPTVPlayer/Web/webSite.py pc/IPTVPlayer/Web/webSite.py
--- o/IPTVPlayer/Web/webSite.py	2019-12-23 13:09:37.000000000 +0300
+++ pc/IPTVPlayer/Web/webSite.py	2020-05-12 00:07:45.114290927 +0300
@@ -26,15 +26,15 @@
     #### Reload scripts if new version of source exists ####
     webPath = GetPluginDir(file = '/Web/')
     if os.path.exists(os.path.join(webPath, "webParts.py")):
-        if os.path.exists(os.path.join(webPath, "webParts.pyo")):
-            if (int(os.path.getmtime(os.path.join(webPath, "webParts.pyo"))) < 
+        if os.path.exists(os.path.join(webPath, "webParts.pyc")):
+            if (int(os.path.getmtime(os.path.join(webPath, "webParts.pyc"))) <
                 int(os.path.getmtime(os.path.join(webPath, "webParts.py")))):
                 reload(webParts)
         else:
             reload(webParts)
     if os.path.exists(os.path.join(webPath, "webThreads.py")):
-        if os.path.exists(os.path.join(webPath, "webThreads.pyo")):
-            if (int(os.path.getmtime(os.path.join(webPath, "webThreads.pyo"))) < 
+        if os.path.exists(os.path.join(webPath, "webThreads.pyc")):
+            if (int(os.path.getmtime(os.path.join(webPath, "webThreads.pyc"))) <
                 int(os.path.getmtime(os.path.join(webPath, "webThreads.py")))):
                 reload(webThreads)
         else:
@@ -246,8 +246,8 @@
         MenuStatusMSG = ''
         extraMeta = ''
         
-        if os.path.exists('/hdd/iptv.dbg'):
-            DBGFileName = '/hdd/iptv.dbg'
+        if os.path.exists('/media/hdd/iptv.dbg'):
+            DBGFileName = '/media/hdd/iptv.dbg'
         elif os.path.exists('/tmp/iptv.dbg'):
             DBGFileName = '/tmp/iptv.dbg'
         else:
